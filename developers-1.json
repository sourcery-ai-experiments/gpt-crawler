[
  {
    "title": "How To Create A Divi Builder Module | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/how-to-create-a-divi-builder-module/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nHow To Create A Divi Builder Module\n\nLearn how to create a custom module for the Divi Builder.\n\nNote: This tutorial series is intended for advanced users. At least a basic understanding of coding in PHP and JavaScript is required.\n\nCustom Divi Builder Modules\n\nDivi Builder modules consist of PHP, JavaScript, HTML, & CSS code. Each module is defined using a PHP class. The class defines all of the module’s settings and is responsible for rendering the module’s HTML output on the frontend. Additionally, each module has a ReactJS component class (in JavaScript) that handles rendering the module inside of the Divi Builder. In this tutorial, you’ll learn how to create a custom header module. The module will be fully functional in the builder, both on the frontend and on the backend.\n\nCustom Divi Builder modules must be implemented within a theme, child-theme, or Divi Extension. In this tutorial we’re going to implement a custom module in a Divi Extension. If you haven’t already done so, go ahead and create a Divi Extension.\n\nModule Definition\n\nDivi Builder modules are defined using a PHP class. Look inside your extension’s directory and find the example module located in includes/modules. We’ll use it as a starting point to create a custom header module. First, let’s rename the HelloWorld directory to SimpleHeader. Next, rename HelloWorld.php to SimpleHeader.php, open it, and then edit it as shown below:\n\n\t<?php\n\t\n\n\tclass SIMP_SimpleHeader extends ET_Builder_Module {\n\t\n\n\t\tpublic $slug       = 'simp_simple_header';\n\t\tpublic $vb_support = 'on';\n\t\n\n\t\tpublic function init() {\n\t\t\t$this->name = esc_html__( 'Simple Header', 'simp-simple-extension' );\n\t\t}\n\t\n\n\t\tpublic function get_fields() {\n\t\t\treturn array();\n\t\t}\n\t\n\n\t\tpublic function render( $unprocessed_props, $content, $render_slug ) {\n\t\n\n\t\t}\n\t}\n\t\n\n\tnew SIMP_SimpleHeader;\nview raw\nSimpleHeader.php hosted with ❤ by GitHub\n\nOur module will include just a few basic settings that can be controlled from within the Divi Builder: heading, content, and background. Module settings are defined in the get_fields() method. Let’s go ahead and do that now:\n\n\t<?php\n\t\n\n\tclass SIMP_SimpleHeader extends ET_Builder_Module {\n\t\n\n\t\tpublic $slug       = 'simp_simple_header';\n\t\tpublic $vb_support = 'on';\n\t\n\n\t\tpublic function init() {\n\t\t\t$this->name = esc_html__( 'Simple Header', 'simp-simple-extension' );\n\t\t}\n\t\n\n\t\tpublic function get_fields() {\n\t\t\treturn array(\n\t\t\t\t'heading'     => array(\n\t\t\t\t\t'label'           => esc_html__( 'Heading', 'simp-simple-extension' ),\n\t\t\t\t\t'type'            => 'text',\n\t\t\t\t\t'option_category' => 'basic_option',\n\t\t\t\t\t'description'     => esc_html__( 'Input your desired heading here.', 'simp-simple-extension' ),\n\t\t\t\t\t'toggle_slug'     => 'main_content',\n\t\t\t\t),\n\t\t\t\t'content'     => array(\n\t\t\t\t\t'label'           => esc_html__( 'Content', 'simp-simple-extension' ),\n\t\t\t\t\t'type'            => 'tiny_mce',\n\t\t\t\t\t'option_category' => 'basic_option',\n\t\t\t\t\t'description'     => esc_html__( 'Content entered here will appear below the heading text.', 'simp-simple-extension' ),\n\t\t\t\t\t'toggle_slug'     => 'main_content',\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\n\n\t\tpublic function render( $unprocessed_props, $content, $render_slug ) {\n\t\n\n\t\t}\n\t}\n\t\n\n\tnew SIMP_SimpleHeader;\nview raw\nSimpleHeader.php hosted with ❤ by GitHub\n\nYou probably noticed that the background field is missing. We excluded it from the fields array because it’s one of several advanced fields that are added automatically by the builder to all modules unless they specifically opt-out. You’ll learn more about advanced fields a bit later in this tutorial series.\n\nOur module definition is almost complete. We just need to finish the implementation of the render() method so that it will generate the module’s HTML output based on its props. Ready? Let’s do it!\n\n\t<?php\n\t\n\n\tclass SIMP_SimpleHeader extends ET_Builder_Module {\n\t\n\n\t\tpublic $slug       = 'simp_simple_header';\n\t\tpublic $vb_support = 'on';\n\t\n\n\t\tpublic function init() {\n\t\t\t$this->name = esc_html__( 'Simple Header', 'simp-simple-extension' );\n\t\t}\n\t\n\n\t\tpublic function get_fields() {\n\t\t\treturn array(\n\t\t\t\t'heading'     => array(\n\t\t\t\t\t'label'           => esc_html__( 'Heading', 'simp-simple-extension' ),\n\t\t\t\t\t'type'            => 'text',\n\t\t\t\t\t'option_category' => 'basic_option',\n\t\t\t\t\t'description'     => esc_html__( 'Input your desired heading here.', 'simp-simple-extension' ),\n\t\t\t\t\t'toggle_slug'     => 'main_content',\n\t\t\t\t),\n\t\t\t\t'content'     => array(\n\t\t\t\t\t'label'           => esc_html__( 'Content', 'simp-simple-extension' ),\n\t\t\t\t\t'type'            => 'tiny_mce',\n\t\t\t\t\t'option_category' => 'basic_option',\n\t\t\t\t\t'description'     => esc_html__( 'Content entered here will appear below the heading text.', 'simp-simple-extension' ),\n\t\t\t\t\t'toggle_slug'     => 'main_content',\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\n\n\t\tpublic function render( $unprocessed_props, $content, $render_slug ) {\n\t\t\treturn sprintf(\n\t\t\t\t'<h1 class=\"simp-simple-header-heading\">%1$s</h1>\n\t\t\t\t<p>%2$s</p>',\n\t\t\t\tesc_html( $this->props['heading'] ),\n\t\t\t\t$this->props['content']\n\t\t\t);\n\t\t}\n\t}\n\t\n\n\tnew SIMP_SimpleHeader;\nview raw\nSimpleHeader.php hosted with ❤ by GitHub\n\nReact Component\n\nIn order for our module to be available and fully functional inside the Divi Builder we must create a React Component class that handles the rendering of our module based on its props. Look in your module’s directory for the file named HelloWorld.jsx.\n\nNote: JSX is a syntax extension to JavaScript used in React to describe what the UI should look like.\n\nLet’s rename HelloWorld.jsx to SimpleHeader.jsx, open it, and then edit it as follows:\n\n\t// External Dependencies\n\timport React, { Component, Fragment } from 'react';\n\t\n\n\t// Internal Dependencies\n\timport './style.css';\n\t\n\n\t\n\n\tclass SimpleHeader extends Component {\n\t\n\n\t  static slug = 'simp_simple_header';\n\t\n\n\t  render() {\n\t    return (\n\t      <div className=\"simp-simple-header\">\n\t        {this.props.content()}\n\t      </div>\n\t    );\n\t  }\n\t}\n\t\n\n\texport default SimpleHeader;\nview raw\nSimpleHeader.jsx hosted with ❤ by GitHub\n\nNext, let’s update the import and export statements in includes/modules/index.js:\n\n\t// Internal Dependencies\n\timport SimpleHeader from './SimpleHeader/SimpleHeader';\n\t\n\n\texport default [\n\t  SimpleHeader,\n\t];\nview raw\nindex.js hosted with ❤ by GitHub\n\nNow, let’s edit the render() method and make it produce the same output that we defined in our PHP render() method.\n\n\t// External Dependencies\n\timport React, { Component, Fragment } from 'react';\n\t\n\n\t// Internal Dependencies\n\timport './style.css';\n\t\n\n\t\n\n\tclass SimpleHeader extends Component {\n\t\n\n\t  static slug = 'simp_simple_header';\n\t\n\n\t  render() {\n\t    return (\n\t      <Fragment>\n\t        <h1 className=\"simp-simple-header-heading\">{this.props.heading}</h1>\n\t        <p>\n\t          {this.props.content()}\n\t        </p>\n\t      </Fragment>\n\t    );\n\t  }\n\t}\n\t\n\n\texport default SimpleHeader;\nview raw\nSimpleHeader.jsx hosted with ❤ by GitHub\n\nThere are two things in our render() method to take note of. First, note how the module’s content setting is handled. Module settings defined with field type tiny_mce (like the content setting in our module) require the use of a special React Component. The builder sets up the required component and then passes it down to the module as the setting value. Since the value is not a string or number and is actually a React Component, we need to use it as such in our JSX markup.\n\nAlso note how we wrapped our module’s output in a Fragment component. Fragments allow you to return multiple top-level elements from your render() method without actually adding an extra element to the page itself.\n\nCSS Styles\n\nStyles for our module can be defined using the style.css file in its directory. Our custom header module is pretty basic so it doesn’t require much styling. Though we should add some bottom margin for the heading so that there is some space between it and the content below it. Later, in our Divi Builder Module In-Depth tutorial series you’ll learn how to make margin and padding for the heading (or any element inside your module’s output) configurable from within the module’s settings.\n\nFor now, let’s go ahead and update our module’s style.css:\n\n\t.simp-simple-header-heading {\n\t\tmargin-bottom: 20px;\n\t}\nview raw\nstyle.css hosted with ❤ by GitHub\n\nTesting During Development\n\nBefore we can test our custom module in the Divi Builder we need to compile the JSX code into regular JavaScript. To do that, simply run the following command inside your plugin’s directory:\n\nyarn start\n\n\nProvided there are no syntax errors in your code you will see the following output:\n\nNow you can launch the Divi Builder and check out your Simple Header module!\n\n \n\nNote: You must keep the terminal window with yarn start running open while you are developing your module. As you make changes to the files, the JavaScript and CSS will be recompiled automatically."
  },
  {
    "title": "Divi Builder Javascript Hooks | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/divi-builder-javascript-hooks/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nDivi Builder Javascript Hooks\n\nLearn about the Javascript hooks that are available in Divi Builder features.\n\nLayout\n{module_type}.css.selector\n\nFilters module selector on the rendered layout. This filter is fired before selector processing. Third-party extensions may use this filter to modify module CSS selector such as removing builder selector prefix, append child element class, etc.\n\nType: Filter\nSince: 4.0.0\n\nParam\tType\tDescription\nselector\tstring\tModule selector.\ntype\tstring\tModule slug.\n\nExamples:\n\n/**\n * Filters Hello World module selector after builder content is loaded.\n */\ndocument.addEventListener('ETDOMContentLoaded', function() {\n    // Module type: smpl_hello_world.\n    wp.hooks.addFilter('smpl.hello.world.css.selector', 'smpl-setting-update', function(selector){\n        // Processing Hello World module selector here ...\n        return selector;\n    });\n});\n\n\n \n\n{module_type}.processed.css.selector\n\nFilters processed module selector on the rendered layout. This filter is fired after selector processing. Third-party extensions may use this filter to modify module CSS selector such as removing builder selector prefix, append child element class, etc.\n\nType: Filter\nSince: 4.17.6\n\nParam\tType\tDescription\nselector\tstring\tProcessed module selector.\ntype\tstring\tModule slug.\n\nExamples:\n\n/**\n * Filters Hello World module selector after builder content is loaded.\n */\ndocument.addEventListener('ETDOMContentLoaded', function() {\n    // Module type: smpl_hello_world.\n    wp.hooks.addFilter('smpl.hello.world.processed.css.selector', 'smpl-setting-update', function(selector){\n        // Processing Hello World module selector here ...\n        return selector;\n    });\n});\n"
  },
  {
    "title": "Divi Builder PHP Hooks | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/divi-builder-php-hooks/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nDivi Builder PHP Hooks\n\nLearn about the PHP hooks that are available in Divi Builder features.\n\nConditional Display\net_module_process_display_conditions\n\nFilters every rendered module output for processing “Display Conditions” option group.\n\nType: Filter\nSince: 4.13.1\n\nParam\tType\tDescription\n$output\tstring\tHTML output of the rendered module.\n$render_method\tstring\tThe render method used to render the module.\n$this\tET_Builder_Element\tThe current instance of ET_Builder_Element.\net_is_display_conditions_option_visible\n\nFilters “Display Conditions” option visibility to determine whether to add its field to the Visual Builder or not. Useful for displaying/hiding the option on the Visual Builder.\n\nType: Filter\nSince: 4.13.1\n\nParam\tType\tDescription\n$default_status\tboolean\tTrue to make the option visible on VB, False to make it hidden.\net_is_display_conditions_functionality_enabled\n\nFilters “Display Conditions” functionality to determine whether to enable or disable the functionality or not. Useful for disabling/enabling “Display Condition” feature site-wide.\n\nType: Filter\nSince: 4.13.1\n\nParam\tType\tDescription\n$default_status\tboolean\tTrue to enable the functionality, False to disable it."
  },
  {
    "title": "How To Create A Divi Extension | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/create-divi-extension/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nHow To Create A Divi Extension\n\nLearn how to develop extensions for Divi\n\nNote: This tutorial series is intended for advanced users. At least a basic understanding of coding in PHP and JavaScript is required.\n\nWhat’s A Divi Extension?\n\nA Divi Extension is essentially a WordPress plugin that customizes Divi in some way. For example, an extension can add custom modules to the Divi Builder or add new options to the theme — the possibilities are almost endless! All Divi Extensions consist of some PHP code. Depending on their purpose, they can also consist of some JavaScript, HTML, and CSS. In this tutorial you’ll learn how to get started on a new Divi Extension.\n\nDevelopment Environment\n\nBefore you can create a Divi Extension you need to ensure that you have the proper environment setup on your local system. The requirements are:\n\nA fully functional installation of WordPress\nThe latest LTS version of NodeJS\nThe latest version of Yarn (optional, but preferred)\nThe latest version of Divi\n\nIf you don’t have a development environment setup, there’s a tutorial for that! 🙂\n\nCreate Divi Extension\n\nCreate Divi Extension is a command line utility that streamlines the process of creating and maintaining Divi Extensions. Let’s create a new Divi Extension inside our WordPress plugins directory. First, you need to open a terminal and change to your WordPress plugins directory. If you followed our tutorial to setup your development environment you should already have a command prompt inside your docker container. If so, you can change to the plugins directory using the following command:\n\ncd wp-content/plugins\n\n\nNow, run the this command to create your extension:\n\nnpx create-divi-extension my-extension\n\n\nYou’ll be prompted to provide some details about your extension and then you’ll be able to find it inside your WordPress plugins directory!\n\nInside your new extension’s directory you’ll find an initial project structure that provides a minimal, fully functional Divi Extension waiting for you to make it your own 🙂\n\n\tmy-extension\n\t├── includes\n\t|   ├── fields\n\t│   │   └── Input\n\t│   │       ├── Input.jsx\n\t│   │       └── style.css\n\t│   ├── modules\n\t│   │   └── HelloWorld\n\t│   │       ├── HelloWorld.jsx\n\t│   │       ├── HelloWorld.php\n\t│   │       └── style.css\n\t│   ├── loader.js\n\t│   ├── loader.php\n\t│   └── MyExtension.php\n\t├── languages\n\t├── node_modules\n\t├── scripts\n\t│   └── frontend.js\n\t├── styles\n\t├── myex-my-extension.php\n\t├── package.json\n\t└── README.md\nview raw\nmy-extension hosted with ❤ by GitHub\n\nWhat’s Next?\n\nNow that you’ve created your Divi Extension, you’ll probably want to learn How To Create A Divi Builder Module."
  },
  {
    "title": "Divi Module Hooks | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/divi-module-hooks/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nDivi Module Hooks\n\nLearn about the hooks that are available in Divi’s module files.\n\nContact Form\net_pb_contact_form_submit\n\nFires after contact form is submitted. This action can be used to trigger follow up actions after the contact form is submitted. Use $et_contact_error variable to check whether there is an error on the form entry submit process or not.\n\nType: Action\nSince: 4.13.1\n\nParam\tType\tDescription\n$processed_fields_values\tarray\tProcessed fields values\n$et_contact_error\tarray\tWhether there is an error on the form entry submit process or not\n$contact_form_info\tarray\tAdditional contact form info"
  },
  {
    "title": "How To Create a Custom Field For a Divi Builder Module | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/how-to-create-a-custom-field-for-a-divi-builder-module/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nHow To Create a Custom Field For a Divi Builder Module\n\nNote: This tutorial series is intended for advanced users. At least a basic understanding of coding in PHP and JavaScript is required. Custom Fields for Divi Module Settings Creating a custom field for a Divi module is similar to creating a custom Divi module in the Divi Builder. Both methods require some Javascript, HTML, & […]\n\nNote: This tutorial series is intended for advanced users. At least a basic understanding of coding in PHP and JavaScript is required.\n\nCustom Fields for Divi Module Settings\n\nCreating a custom field for a Divi module is similar to creating a custom Divi module in the Divi Builder. Both methods require some Javascript, HTML, & CSS code. However, to create a custom field for a module, there is no need for any PHP because you don’t need to write a PHP class to render the HTML output on the frontend. The main component needed is a ReactJS component class that handles rendering the field inside of the Divi Builder. Then you can define the custom field on your module definition.\n\nIn this tutorial, you’ll learn how to create custom fields for a Divi Builder module that will be fully functional in the builder.\n\nGetting Started\n\nKeep in mind. Custom Divi Builder fields must be implemented within a theme, child-theme, or Divi Extension. In this tutorial, we’re going to create a custom field for a custom module in a Divi Extension.\n\nAlso, this tutorial is a continuation of previous tutorials that have a specific setup already in place.\n\nIf you haven’t already done so, go ahead and do the following before you start this tutorial:\n\nCreate a Divi Extension\nCreate a Custom Module.\n\nOnce done, you are ready to continue.\n\nRun Yarn\n\nBefore we can test our custom field later on in the Divi Builder we’ll need to compile the JSX code into regular JavaScript. To do that, we need to run yarn. To do this, simply run the following command inside your plugin’s directory:\n\nyarn start\n\nIMPORTANT: Be sure that yarn start is running in the root folder of your plugin. Furthermore, you should keep yarn start running as you develop so that the files continue to compile successfully.\n\nUpgrading Divi Scripts\n\nCustom Divi Builder Fields is a new feature and only available on divi-scripts version 1.0.2 above. So, if you want to add custom field on your existing extension, please upgrade your divi-scripts to version 1.0.2. You can do this by changing divi-scripts version on your package.json located at at the root of your extension directory.\n\nThen run yarn install to update. You can also find a custom field example on this documentation here.\n\nUpdate Field Directory and File Names\n\nWe’ll get to update the code in our files in a bit. But before we can do that, we need to change the default directory and file names for our new custom field.\n\nLook inside your extension’s directory and locate the example custom field located at /includes/fields/Input/Input.jsx.\n\nWe’ll use this as a starting point to create a custom input field.\n\nFirst, rename the Input directory to SimpleInput.\n\nInside the directory (now named SimpleInput), rename the file Input.jsx to SimpleInput.jsx.\n\nThe path to the file should now be includes/fields/SimpleInput/SimpleInput.jsx\n\nUpdate the Field File\n\nOpen the SimpleInput.jsx file and edit it as follows:\n\nUpdate the React Component Class\n\nFor our custom field to be available and fully functional inside the Divi Builder we must create a React Component class that handles the rendering of our custom field based on its props.\n\nBy default, the component class is named Input. Change the name of the class Input to SimpleInput.\n\nThen change the name Input to SimpleInput at the bottom of the file to reflect the new name of our component class in order to be exported for use.\n\nAlso make sure to update the slug, input id, and input className to reflect the name of the new field.\n\n(NOTE: Depending on the prefix id you chose when setting up your Divi Extension, you may see different names for the static slug, input id, input class, etc. This example has the prefix simp which was chosen when creating the Divi Extension.)\n\nHere is an example of what the code should look like after the change has been made:\n\nSimpleInput.jsx\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\t\n// External Dependencies\nimport React, { Component } from 'react';\n \n// Internal Dependencies\nimport './style.css';\n \nclass SimpleInput extends Component {\n \n  static slug = 'simp_simple_input';\n \n  /**\n   * Handle input value change.\n   *\n   * @param {object} event\n   */\n  _onChange = (event) => {\n    this.props._onChange(this.props.name, event.target.value);\n  }\n \n  render() {\n    return(\n      <input\n        id={`simp-simple-input-${this.props.name}`}\n        name={this.props.name}\n        value={this.props.value}\n        type='text'\n        className='simp-simple-input'\n        onChange={this._onChange}\n        placeholder='Your text here ...'\n      />\n    );\n  }\n}\n \nexport default SimpleInput;\n\nThe _onChange() prop is a method handler to save or remove the field setting’s value. It passes 2 parameters.\n\nThe first parameter is the field setting’s name. You can use name prop here because it’s already supplied with the correct field name based on the current active tab mode. For example: when you are editing the Title option in Tablet tab mode, the field’s name generated is title_tablet. The second parameter is the field setting value that you want to save.\n\nThe field setting type is actually a third parameter that is automatically defined with the current field type prop. So we don’t have to include that parameter with the other 2.\n\nUpdate the index.js file for the Custom Field\n\nNext, let’s update the import and export statements in the index.js file located at /includes/fields/index.js. To do this, open to edit the index.js file.\n\nReplace all instances of the name for the class and directory (which is Input by default) to the new name SimpleInput.\n\nHere is an example of the final code:\n\n1\n2\n3\n\t\nimport SimpleInput from './SimpleInput/SimpleInput';\n \nexport default [SimpleInput];\nCustom Field CSS Styles\n\nStyles for our custom field can be defined using the style.css file in its directory located at /includes/fields/SimpleInput/style.css.\n\nOur custom field is only a basic input element that comes with default builder styling. For now, let’s change the default class selector to .simp-simple-input (rendered in SimpleInput.jsx) throughout the style.css file:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\t\ninput.simp-simple-input {\n  background: #f1f5f9;\n  max-height: 30px;\n  border: 0;\n  border-radius: 3px;\n  padding: 7px 10px;\n  box-sizing: border-box;\n  transition: background 200ms ease;\n  color: #4C5866;\n  font-family: 'Open Sans', Helvetica, Roboto, Arial, sans-serif;\n  font-size: 13px;\n  font-weight: 600;\n  line-height: normal;\n  display: block;\n  width: 100%;\n}\n \ninput.simp-simple-input:focus {\n  background: #e6ecf2;\n}\n \ninput.simp-simple-input::-webkit-input-placeholder {\n  color: #98a7b8;\n}\n \ninput.simp-simple-input:-moz-placeholder {\n  color: #98a7b8;\n}\n \ninput.simp-simple-input::-moz-placeholder {\n  color: #98a7b8;\n}\n \ninput.simp-simple-input:-ms-input-placeholder {\n  color: #98a7b8;\n}\n \ninput.simp-simple-input[readonly] {\n  background: #ffffff !important;\n  border: 1px solid #eaedf0 !important;\n  cursor: not-allowed;\n}\nField Definition\n\nTo use our custom field, we need to define it on the module definition of our intended module. For this example, let’s add it to the Simple Header module we created in the previous tutorial.\n\nOpen the SimpleHeader.php file located at /includes/modules/SimpleHeader/SimpleHeader.php.\n\nThen add the code to define the custom field. Don’t forget to use simp_simple_input as the field type.\n\nThe final code will look like this:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\t\nclass SIMP_SimpleHeader extends ET_Builder_Module {\n \n    public $slug       = 'simp_simple_header';\n    public $vb_support = 'on';\n \n    public function init() {\n        $this->name = esc_html__( 'Simple Header', 'simp-simple-extension' );\n    }\n \n    public function get_fields() {\n        return array(\n            'heading'     => array(\n                'label'           => esc_html__( 'Heading', 'simp-simple-extension' ),\n                'type'            => 'text',\n                'option_category' => 'basic_option',\n                'description'     => esc_html__( 'Input your desired heading here.', 'simp-simple-extension' ),\n                'toggle_slug'     => 'main_content',\n            ),\n            'content'     => array(\n                'label'           => esc_html__( 'Content', 'simp-simple-extension' ),\n                'type'            => 'tiny_mce',\n                'option_category' => 'basic_option',\n                'description'     => esc_html__( 'Content entered here will appear below the heading text.', 'simp-simple-extension' ),\n                'toggle_slug'     => 'main_content',\n            ),\n            'field'       => array(\n                'label'           => esc_html__( 'Custom Field', 'simp-simple-extension' ),\n                'type'            => 'simp_simple_input',\n                'option_category' => 'basic_option',\n                'description'     => esc_html__( 'Text entered here will appear inside the module.', 'simp-simple-extension' ),\n                'toggle_slug'     => 'main_content',\n            ),\n        );\n    }\n \n    public function render( $unprocessed_props, $content = null, $render_slug ) {\n        return sprintf(\n            '<h1 class=\"simp-simple-header-heading\">%1$s</h1>\n            <div>%2$s</div>',\n            esc_html( $this->props['heading'] ),\n            $this->props['content']\n        );\n    }\n}\n \nnew SIMP_SimpleHeader;\n\nThe properties that were added to the field are only the required properties you need to define. But you can add more properties to use on the custom field if you want. For instance, you can add both responsive and hover options for your custom field as well.\n\nDivi Builder and Frontend Output\n\nOur field definition is ready. We just need to update the render() method so that it will display the custom field value. Let’s start with the render() method on the module PHP class.\n\nOpen the SimpleHeader.php file and update the render() method as follows:\n\nThe final code should look like this:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\t\nclass SIMP_SimpleHeader extends ET_Builder_Module {\n \n    public $slug       = 'simp_simple_header';\n    public $vb_support = 'on';\n \n    public function init() {\n        $this->name = esc_html__( 'Simple Header', 'simp-simple-extension' );\n    }\n \n    public function get_fields() {\n        return array(\n            'heading'     => array(\n                'label'           => esc_html__( 'Heading', 'simp-simple-extension' ),\n                'type'            => 'text',\n                'option_category' => 'basic_option',\n                'description'     => esc_html__( 'Input your desired heading here.', 'simp-simple-extension' ),\n                'toggle_slug'     => 'main_content',\n            ),\n            'content'     => array(\n                'label'           => esc_html__( 'Content', 'simp-simple-extension' ),\n                'type'            => 'tiny_mce',\n                'option_category' => 'basic_option',\n                'description'     => esc_html__( 'Content entered here will appear below the heading text.', 'simp-simple-extension' ),\n                'toggle_slug'     => 'main_content',\n            ),\n            'field'       => array(\n                'label'           => esc_html__( 'Custom Field', 'simp-simple-extension' ),\n                'type'            => 'simp_simple_input',\n                'option_category' => 'basic_option',\n                'description'     => esc_html__( 'Text entered here will appear inside the module.', 'simp-simple-extension' ),\n                'toggle_slug'     => 'main_content',\n            ),\n        );\n    }\n \n    public function render( $unprocessed_props, $content = null, $render_slug ) {\n        return sprintf(\n            '<h1 class=\"simp-simple-header-heading\">%1$s</h1>\n            <div>%2$s</div>\n            <p>%3$s</p>',\n            esc_html( $this->props['heading'] ),\n            $this->props['content'],\n            $this->props['field']\n        );\n    }\n}\n \nnew SIMP_SimpleHeader;\n\nNow, let’s edit the render() method of the React component and make it produce the same output that we defined in our PHP render() method.\n\nOpen the SimpleHeader.jsx file and update the render() method as follows:\n\nThe final code should look like this:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\t\n// External Dependencies\nimport React, { Component, Fragment } from 'react';\n \n// Internal Dependencies\nimport './style.css';\n \n \nclass SimpleHeader extends Component {\n \n  static slug = 'simp_simple_header';\n \n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"simp-simple-header-heading\">{this.props.heading}</h1>\n        <div>\n          {this.props.content()}\n        </div>\n        <p>\n          {this.props.field}\n        </p>\n      </Fragment>\n    );\n  }\n}\n \nexport default SimpleHeader;\n\nHere you can see how the output of the render() method of the php file corresponds to the output of the render() method of the php file which now includes the new field wrapped in a p tag.\n\nAdd Selectors if Needed\n\nWrapping the new field output with a p tag makes sense here because we are interested in simple text output. This also is a good opportunity to add your own custom selectors (CSS ID, CSS Class) to the p tag for your own needs. Just make sure you add the same selectors to the output of the render() method of the PHP file and the JSX file.\n\nTesting Your Custom Fields\n\nIf you already have yarn start running as we suggested in the first step, you can now launch the Divi Builder and check out your Simple Input field!\n\nIf not, before we can test our custom field in the Divi Builder we need to compile the JSX code into regular JavaScript. To do that, simply run the following command inside your plugin’s directory:\n\nyarn start\n\nAs a reminder, you should keep yarn start running as you continue to edit your files so that the files continue to compile successfully.\n\nTo test out the custom field, go to your Divi site and open the settings of the custom Simple Header Module. The new Custom Field will be under the content tab.\n\nWrapping up\n\nWhen you are finished development, remember to stop yarn start from running in your terminal (hitting ctrl + c within the terminal usually does the trick)."
  },
  {
    "title": "Divi Development Environment Setup | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/divi-development-environment/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nBACK TO DEVELOPER DOCUMENTATION\nDivi Development Environment Setup\n\nLearn how to get a local development environment up and running.\n\nNote: This tutorial series is intended for advanced users. At least a basic understanding of coding in PHP and JavaScript is required.\n\nBefore you can create Divi Extensions you need to ensure that you have the proper environment setup on your local system. The requirements are:\n\nA fully functional installation of WordPress\nThe latest LTS version of NodeJS\nThe latest version of Yarn (optional, but preferred)\nThe latest version of gettext (needed to process translations when creating releases)\nThe latest version of Divi\n\nThere are several different options you can use to get a local development environment up and running. A few examples are:\n\nDocker\nVagrant\nLocal by Flywheel\nXAMPP\n\nIn this tutorial we’ll be using Docker with the official docker image for Divi Development.\n\nInstall Docker\n\nThe most complicated part of installing docker is figuring out which version you need to install. Use the following tables to locate the correct version for your operating system and then download and run the installer for that version.\n\nMac\n\nOS Version\tInstaller\tDetailed Instructions\tComplete Documentation\nOS X 10.11+\tDocker for Mac\tInstructions\tDocumentation\nOS X 10.8-10.10\tDocker Toolbox\tInstructions\tDocumentation\n\nWindows\n\nOS Version\tInstaller\tDetailed Instructions\tComplete Documentation\n10 Pro+\tDocker for Windows\tInstructions\tDocumentation\n10 Home\tDocker Toolbox\tInstructions\tDocumentation\n\nLinux\n\nOS Version\tDetailed Instructions\nUbuntu 16.04+\tInstructions\nFedora 25+\tInstructions\n\nUsing Linux? Follow the instructions linked in the table as there is no Docker installer for Linux.\n\nStart Docker Containers\n\nThe Divi Development Environment consists of two docker containers, one for the database and one for everything else. Starting/Stopping multiple containers for a single environment can be tedious. Luckily, we won’t have to worry about that because we’re going to use the docker-compose command.\n\nDocker Compose is a tool for defining and running multi-container Docker applications.\n\nGo ahead and create a new directory for your development workspace. The directory should be located somewhere below one of the following paths (depending on your OS):\n\nDefault Shared Directories\nMac: /Users, /Volumes, /private, & /tmp\nWindows: C:\\Users\nLinux: /home\n\nNow, create a file named docker-compose.yml inside your workspace directory as shown below:\n\n\tversion: '3.3'\n\t\n\n\tservices:\n\t\n\n\t  mariadb:\n\t    image: 'mariadb:10.2.14'\n\t    environment:\n\t      MYSQL_ROOT_PASSWORD: password\n\t      MYSQL_DATABASE: wordpress\n\t      DATADIR: /data\n\t    restart: on-failure\n\t    volumes:\n\t      - 'database:/data'\n\t    network_mode: 'service:wordpress'\n\t\n\n\t  wordpress:\n\t    image: 'elegantthemes/divi-dev'\n\t    hostname: divi-dev\n\t    volumes:\n\t      - '${PWD}:/workspace/wordpress'\n\t    ports:\n\t      - '80:80'     # nginx\n\t      - '3306:3306' # mariadb\n\t      - '3000:3000' # webpack hmr\n\t\n\n\tvolumes:\n\t  database: {}\nview raw\ndocker-compose.yml hosted with ❤ by GitHub\n\nUsing Windows? You need to replace ${PWD} in the compose file with the full path to the directory where the compose file is located.\n\nRun WordPress Container Setup Script\n\nOpen a terminal window in your workspace directory and run the following commands:\n\ndocker-compose up -d\ndocker-compose exec -u 1000 wordpress divi-dev setup\n\nThis could take a few minutes (or more) depending on your internet connection speed. When it’s done you should see the following:\n\nCreating network \"divi-dev_default\" with the default driver\nCreating divi-dev_wordpress_1 ... done\nCreating divi-dev_mariadb_1   ... done\nDownloading WordPress 4.9.5 (en_US)...\nmd5 hash verified: f009061b9d24854bfdc999c7fbeb7579\nSuccess: WordPress downloaded.\nInitializing database...  ████████████████████| 100%\nSuccess: Generated 'wp-config.php' file.\nSuccess: WordPress installed successfully.\nSuccess: Rewrite rules flushed.\nSuccess: Rewrite structure set.\n\nSetup Complete! Here's how you can access WordPress:\n\nURL:       http://local.divi-dev.site\nUsername:  divi-dev\nPassword:  password\n\nFinal Step: Access WordPress Dashboard And Install Divi\n\nDivi isn’t included in the container. The final step is to install it via the WordPress Dashboard.\n\nCommands Quick Reference\n\nYou can use the following commands to manage your containers. Be sure to run them from inside your workspace directory:\n\nEnter Container (get command prompt inside container)\ndocker-compose exec -u 1000 wordpress /bin/bash\n\nExit Container (return to your system’s command prompt)\nexit\n\nStop Running Containers\ndocker-compose stop\n\nStart Stopped Containers\n\ndocker-compose start\n\nRemove Containers (WordPress database will be deleted!)\ndocker-compose down\n\nStart New Containers\ndocker-compose up -d\ndocker-compose exec -u 1000 wordpress divi-dev setup"
  },
  {
    "title": "Hooks | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/hooks/",
    "html": "Hooks\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nDIVI TEMPLATE HOOKS\n\nLearn about the hooks that are available in Divi’s template files.\n\nVIEW FULL ARTICLE\nDIVI MODULE HOOKS\n\nLearn about the hooks that are available in Divi’s module files.\n\nVIEW FULL ARTICLE\nDIVI BUILDER PHP HOOKS\n\nLearn about the PHP hooks that are available in Divi Builder features.\n\nVIEW FULL ARTICLE"
  },
  {
    "title": "Code Reference | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/code-reference/",
    "html": "Code Reference\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nDIVI BUILDER JAVASCRIPT API\n\nThe builder’s JavaScript API definition.\n\nVIEW FULL ARTICLE"
  },
  {
    "title": "Divi Module: In-Depth | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/divi-module/",
    "html": "Divi Module: In-Depth\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nHOW TO CREATE A DIVI BUILDER MODULE\n\nLearn how to create a custom module for the Divi Builder.\n\nVIEW FULL ARTICLE\nSETTINGS FIELD VISIBILITY\n\nLearn how to show or hide a setting depending on the value of other settings.\n\nVIEW FULL ARTICLE\nMODULE SETTINGS GROUPS\n\nLearn how to configure the toggle groups in the module settings modal.\n\nVIEW FULL ARTICLE\nDEFINING MODULE SETTINGS\n\nLearn how to define module settings using the field types provided by Divi.\n\nVIEW FULL ARTICLE\nDEFINING CUSTOM CSS FIELDS FOR MODULES\n\nLearn how to define custom CSS fields for modules.\n\nVIEW FULL ARTICLE\nCOMPATIBILITY LEVELS\n\nMaking existing custom modules compatible with the latest version of the Divi Builder.\n\nVIEW FULL ARTICLE\nADVANCED FIELD TYPES FOR MODULE SETTINGS\n\nLearn about the Advanced Field types for module settings.\n\nVIEW FULL ARTICLE"
  },
  {
    "title": "Developer Documentation | Elegant Themes Documentation",
    "url": "https://www.elegantthemes.com/documentation/developers/",
    "html": "Developer Documentation\nENTER SEARCH TERM\nDIVI\nEXTRA\nBLOOM\nMONARCH\nDIVI BUILDER\nDEVELOPERS\nTutorial Collection\nDIVI MODULE: IN-DEPTH\n\nEverything you need to know about creating custom modules for the Divi Builder.\n\nVIEW TUTORIALS\nTutorial Collection\nCODE REFERENCE\n\nDocumentation for areas of Divi's codebase that are important for third-party development.\n\nVIEW TUTORIALS\nTutorial Collection\nHOOKS\n\nLearn about the most frequently used action and filter hooks provided by Divi.\n\nVIEW TUTORIALS\nDIVI DEVELOPMENT ENVIRONMENT SETUP\n\nLearn how to get a local development environment up and running.\n\nGetting\nStarted\nVIEW FULL ARTICLE\nHOW TO CREATE A DIVI EXTENSION\n\nLearn how to develop extensions for Divi\n\nGetting\nStarted\nVIEW FULL ARTICLE\nHOW TO CREATE A DIVI BUILDER MODULE\n\nLearn how to create a custom module for the Divi Builder.\n\nGetting\nStarted\nVIEW FULL ARTICLE\nSETTINGS FIELD VISIBILITY\n\nLearn how to show or hide a setting depending on the value of other settings.\n\nVIEW FULL ARTICLE\nMODULE SETTINGS GROUPS\n\nLearn how to configure the toggle groups in the module settings modal.\n\nVIEW FULL ARTICLE\nHOW TO CREATE A CUSTOM FIELD FOR A DIVI BUILDER MODULE\n\nNote: This tutorial series is intended for advanced users. At least a basic understanding of coding in PHP and JavaScript is required. Custom Fields for Divi Module Settings Creating a custom field for a Divi module is similar to creating a custom Divi module in the Divi Builder. Both methods require some Javascript, HTML, & […]\n\nVIEW FULL ARTICLE\nDIVI TEMPLATE HOOKS\n\nLearn about the hooks that are available in Divi’s template files.\n\nVIEW FULL ARTICLE\nDIVI MODULE HOOKS\n\nLearn about the hooks that are available in Divi’s module files.\n\nVIEW FULL ARTICLE\nDIVI BUILDER PHP HOOKS\n\nLearn about the PHP hooks that are available in Divi Builder features.\n\nVIEW FULL ARTICLE\nDIVI BUILDER JAVASCRIPT HOOKS\n\nLearn about the Javascript hooks that are available in Divi Builder features.\n\nVIEW FULL ARTICLE\nDIVI BUILDER JAVASCRIPT API\n\nThe builder’s JavaScript API definition.\n\nVIEW FULL ARTICLE\nDEFINING MODULE SETTINGS\n\nLearn how to define module settings using the field types provided by Divi.\n\nVIEW FULL ARTICLE\nDEFINING CUSTOM CSS FIELDS FOR MODULES\n\nLearn how to define custom CSS fields for modules.\n\nVIEW FULL ARTICLE\nPage 1 of 2\n1\n2\n»"
  }
]