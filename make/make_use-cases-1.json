[
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/unpaid-invoices-automation",
    "html": "How to Automatically Notify Customers About Unpaid Invoices\nJul 18, 2023\n\nKeeping track of unpaid invoices often becomes a challenge. On top of requiring persistent follow-ups, payments can easily slip through the cracks, leading to cash flow hiccups and lost revenue. \n\nDedicating precious hours to this task can detract from your core business focus, but there's an elegant solution at your fingertips: Automation. \n\nBy harnessing the powerful combination of Stripe and Make, we can automate the tasks of detecting unpaid invoices and notifying customers about their missing payments.\n\nIn this tutorial, we’ll show you how you can transform this frustrating task into a smooth, automated process once and for all.\n\nThe resulting solution is also available as a pre-built template, but if you want to learn how everything works under the hood, we recommend you follow the entire tutorial.\n\nBefore we jump into the tutorial, here's what this automated solution will do for you:\n\nDetect unpaid Stripe invoices.\n\nIf there's only one unpaid invoice, notify the customer via email.\n\nIf there's more than one unpaid invoice, notify management about the situation.\n\nMusic to your ears? Then it's time to build!\n\nStep 1: Create a Google Sheets spreadsheet and a new Make scenario\n\nThe first thing we’ll do is create a Google Sheets spreadsheet that has the following columns: \n\nName\n\nCreated date\n\nDue date\n\nAmount due\n\nCustomer email\n\nPlan\n\nPDF link\n\nInvoice ID\n\nAfter creating your spreadsheet, log into your Make account and create a new scenario from the dashboard.\n\nWithin the scenario builder, search for the Stripe app and select the Search Customers module. This is the first step towards collecting unpaid invoices.\n\nIf you don’t have your Stripe account connected to Make yet, you’re required to do so in the module’s configuration box. \n\nJust click the Add button, name the connection if you like, and paste your Stripe API key.\n\nSince you’ll want to fetch all the unpaid invoices there are, select “Open” in the Status field and “Send Invoice” in the Collection Method field. \n\nOnce done, click OK to finish configuring the first module in this scenario.\n\nStep 2: Add the Google Sheets app to your scenario\n\nLet’s add the second app, Google Sheets. \n\nClick on the plus sign that appears on the right side of the Stripe module to add another module. Then, search and select the Google Sheets - Search Rows module.\n\nAs you did with the Stripe module, you need to connect your Google account to Make to access the module’s configuration settings.\n\nAfter connecting your Google account to Make, select the spreadsheet that you want to add the information to, and then select the sheet.\n\nNext, scroll down to the filter. \n\nHere you need to search the sheet to verify if the invoices are already there or not. \n\nIf they are, you don’t want to duplicate them - we will show you how to prevent that in a bit.\n\nNow, select the Invoice ID column and map the Invoice ID data item from the Stripe module as shown below. \n\nClick OK to finish configuring the module once ready.\n\nStep 3: Add a filter\n\nIn this example, we only want to retrieve invoices that are 10 days past the due date. \n\nAnother filter is required, but we’ll rely on a native Make filter rather than the one available in the Google Sheets module.\n\nBetween the two modules in your scenario you’ll notice a link: Click it to open the filter menu.  \n\nThe date in Stripe and the date in Make are in different formats, and we need to standardize them so we can compare them in the filter. \n\nLet’s use the format DD-MM-YYYY.\n\nIn the Date and time functions tab, you’ll find the formatDate function - please select it. \n\nIn the top field, simply map the due date data item within the parentheses and enter the date format. See the image below for reference.\n\nNext, select the Datetime operator: Equal to.\n\nMake’s now variable gets the current date and time, and we need to subtract 10 days from it so that the filter only lets unpaid invoices that were due 10 days prior to pass through. \n\nTo do this, use the addDays function, map the now variable, and enter -10. \n\nLastly, enclose the addDays function with the formatDate function to format it as you did with the Stripe due date. You can check how to do this in the image below. \n\nTo conclude, you can name the filter if you want; it’s a good practice documentation-wise, but not a mandatory one. \n\nStep 4: Add a router\n\nAs we mentioned above, when the module doesn't find an invoice ID on the sheet, the invoice information must be added there. \n\nOn the other hand, the invoices that are found on the sheet should be ignored to prevent duplication. \n\nWe will use a filter to achieve this, but first, the scenario needs to be split into two routes. This first route will add new unpaid invoices to the sheet.\n\nThe second route will check if a customer has more than one unpaid invoice on the sheet; if that’s the case, the scenario will automatically escalate to management. \n\nTo create the two routes, you will need to add a Router to your scenario. You’ll find it at the bottom of the scenario builder under the Tools menu.\n\nSelect the router, drag it onto the right side of the Google Sheets module, and click on it once to open two links.\n\nPro tip: Hit the auto-align button to align the scenario and keep everything organized. \n\nNext, click the link on the top route to open the filter menu.\n\nMap the Invoice ID item from the Google Sheets > Search rows module to the top field and then select Does not exist as the basic operator. \n\nOnce done, click OK and proceed to the next step.\n\nStep 5: Add an HTTP module in the top route\n\nNow that the Google Sheets module is configured and the invoice information will be added to it, let’s download the unpaid invoice in PDF format and email it to the customer.\n\nTo download the PDF, add the HTTP > Get a file module after the Add a row module. \n\nTo configure it, simply map the Invoice ID data item to the URL field. Once ready, click OK to finish configuring the HTTP module.\n\nStep 6: Add an email module\n\nWith the invoice in PDF format, Make will now email it to the corresponding customer, reminding them of their debt.\n\nTo achieve this, add the Email > Send an email module to the top route, after the HTTP module.\n\nOnce you connect your email client to Make, map the Customer Email item from the Stripe module. You can then add the email content you want as you see below.\n\nThe last thing to do is to scroll down and click Add an attachment. \n\nYou’ll see that the document from the HTTP module will automatically be selected for you. Hit OK.\n\nStep 7: Add the second Google Sheets module\n\nThe bottom route will be used to check if a customer has more than one unpaid invoice (based on your spreadsheet data), and notify management about the situation.\n\nFirst, we need to grab the name of the customer from the sheet. To do this, add the Google Sheets > Search records module to the bottom route of your scenario.\n\nStart configuring the module by selecting the Name option and map the Customer Name item in the filter. \n\nYou could also search with the email address if you want - the decision is yours.\n\nOnce finished, click OK and move on to the next step.\n\nStep 8: Add a text aggregator\n\nWhen there’s more than one unpaid invoice for the customer, we need to aggregate the data we have so that it can be sent in a single notification.\n\nMake has a Text aggregator module that will take care of this for you.\n\nYou’ll find it in the Tools menu - just attach it to the Google Sheets module in the bottom route of the scenario.\n\nTo configure the Text Aggregator, first hit the Advanced setting switch to open extra fields. \n\nNext, select the Stripe module as the Source module, and New Row as the separator.\n\nTick the Stop processing after an empty aggregation so that when there’s no data it won’t trigger subsequent modules.\n\nLastly, map the Name item from the prior Google Sheets > Search records module before moving on to the next step.\n\nStep 9: Add a filter to the bottom route\n\nLet’s add a filter to the link between the Google Sheets and Text Aggregator modules. \n\nThe purpose of this filter is to verify if the customer has more than one unpaid invoice. If so, the bundle of data will pass through to the Text Aggregator.\n\nIf not, the bundle will not be processed any further.\n\nHere’s how to set it up: Start by mapping the Total number of bundles (n° of invoices) to the top field, and then select the Greater than numeric operator. \n\nJust enter ‘1’ in the bottom field. If the customer has only one unpaid invoice, the data won’t pass the filter as intended. \n\nWe also don’t want the Text Aggregator to aggregate the same name multiple times, as that will end up in the notification sent to management. \n\nTo prevent this from happening, we will just use the first bundle of data that passes through. \n\nClick the Add AND rule and configure it as shown in the screenshot below. Once done, click OK to finish configuring the module.\n\nStep 10: Add the final module to your scenario\n\nFinally, we have reached the last module. This is where you'll escalate the names of the customers with multiple unpaid invoices to management using Slack.\n\nStart by adding the Slack > Create a message module to the bottom route of your scenario.\n\nAfter connecting your Slack account, choose the Select from the list option. Then, select the Channel type and Channel/User.\n\nThe text item contains the names of the customers, which should be mapped within the content of your notification. \n\nAnd that’s it! \n\nClick OK to finish configuring the module, and then save and activate the scenario.\n\nFrom now on, Make will automatically detect unpaid Stripe invoices, and send the corresponding reminders to the customers for you.\n\nBonus: A scenario that updates customer status as they pay their due invoices\n\nNow that you have all the unpaid invoices on the sheet, and multiple defaulters brought up to management’s attention, it’s important to remove them once they have paid. \n\nTo do this, we’ve created a template that you can use in parallel to the scenario we just built: \n\nWhat does it do? Simple - it removes paid invoices from your sheet.\n\nFinal words: Fortifying your revenue stream\n\nIn conclusion, navigating the labyrinth of unpaid invoices doesn't have to be a draining or time-consuming process.\n\nBy integrating your apps with Make, we've unlocked a solution that brings order to chaos, automating reminders for unpaid invoices with unprecedented efficiency. \n\nImplementing this solution not only reclaims your valuable time but also fortifies your revenue stream by reducing overlooked payments. \n\nIt's time to take control, embrace automation, and propel your business operations to new heights of efficiency. As usual, it all starts with a Make account. Get yours, and get going!\n\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/invoice-automation",
    "html": "7 Easy Ways to Automate your Invoices (and Save Hours of Your Time)\nDec 25, 2020 | 11 minutes\n\nWe know how much of a headache managing invoices can be. Regardless of the size or activity of your business, invoice processing is:\n\nTime consuming: filling, sending and following up on invoices takes time\n\nOverwhelming: invoices can quickly pile up and become challenging to manage\n\nExpensive: how many human (billable) hours does it take just to manage invoices?\n\nDraining: processing invoices takes away from other tasks where your energy would be much needed\n\nAs you most likely know, automation can help you with these problems. In this article, we will show you how to automate invoice processing, and what your options are.\n\nWhy should you automate your invoicing process? \n\nLet’s start off with some simple math.\n\nThe average accounting employee is able to process 5 manual invoices per hour, at a rate of 12 minutes per invoice. This includes:\n\nData entry\n\nProofreading\n\nCorrecting\n\nProcessing the invoice\n\nAccording to Glassdoor, an Accounts Payable Clerk in charge of processing these documents earns an average of $39,950/year or about $19.21/hour.\n\nIn summary: on average, each invoice costs almost $4 to process.\n\nAutomation, on the other hand, can seamlessly process dozens of invoices at a fraction of the cost. \n\nBy adding up the monthly subscription for invoicing software such as Quickbooks ($12.50/month) and an automation platform like Make ($9/month), you’d be spending the equivalent of an hour on your employee’s time.\n\nHuman interaction is of course valuable in many business areas, but invoice processing? That can be partially or thoroughly automated for increased returns on labor and capital. \n\nOn top of the financial aspect, other benefits associated with invoice automation include: \n\nSaving time and accelerating the fulfillment process\n\nReducing error rates and data loss\n\nIncreasing employee productivity while reducing operational costs\n\nImproving transparency throughout the workflow \n\nGathering useful data and analytics\n\nBefore we dive into specific examples of how to automate invoicing, let’s break down the two biggest invoice types.\n\nWhat are the two main invoice types?\n\nDepending on your business model, there are two ways you might issue invoices to your clients: \n\nBefore payments (accounts receivable)\n\nAfter payments (receipts, and invoice copies for bookkeeping purposes)\n\nBefore payment\n\nSending invoices before getting paid is common among the professional services B2B industries, where invoices work as payment requests, detailing products or services that were provided.  \n\nReferred to as “accounts receivables” by the company and “accounts payable” for the client, the invoice essentially works as a payment request to be completed within a certain period of time (15 or 30 days for example).\n\nFor invoices issued before payment, automation opportunities include:\n\nAutomatically invoicing clients to accelerate the payment process\n\nRegistering invoices in your accounting software to have a clear view of the accounts receivables pipeline\n\nGetting reminders when an invoice is due to receive the corresponding payment on time\n\nAn invoice in Quickbooks\n\nAfter payment\n\nIn this situation, the invoice serves as a receipt for the customer, acknowledging payment and providing proof for records keeping purposes. \n\nThis is common in ecommerce, where you receive an invoice by email after purchasing a pair of shoes for example. \n\nHere, automation can help by:\n\nSending a copy of the invoice as a receipt to customers to save time\n\nCopying invoices to your accounting software to streamline bookkeeping efforts\n\nAutomatically creating invoices from payment data to accelerate the sales process\n\nAn invoice in Woocommerce\n\nThis distinction is important because it changes the focus and purpose of the invoice. \n\nNow that this is clear, let’s take a look at seven examples of how to automate invoice processing for your business.\n\n7 invoice processing tasks you can automate \n\nThe two main ways to automate your invoice processes are fairly straightforward. You can:\n\nRely on native integrations and features present in some of the apps you already use (such as Stripe, or QuickBooks) \n\nUse a dedicated automation tool like Make \n\nThe choice of using one or the other (or the two in parallel) will depend on what makes the most sense for your business and your team.\n\nWith this in mind, we will explore seven ways to automate invoice processing for your business; some are native solutions, while others can be easily developed with Make. \n\n1. Generate a receipt for every order in your online store \n\nManually generating invoices for every order that comes through your store is a repetitive and annoying task. \n\nAs mentioned earlier in the article, it ends up being a costly but also inaccurate process, which automation can help by:\n\nSaving time and effort from your staff\n\nAvoiding data entry errors and mistakes\n\nEnsuring an invoice is created every single time\n\nIf you’re using an ecommerce platform for your online store, a variety of plugins are available to create invoices when an order is completed, including:\n\nWebtoffee’s PDF invoice generator for WooCommerce\n\nOrder Printer Pro for Shopify\n\nOn the other hand, you can also create your own custom invoice solution with Make, which will automatically create invoices in your accounting system every time an order is completed.\n\nUse this template to create an invoice in QuickBooks every time an order is completed on Shopify.\n\n2. Use forms to automate invoice creation\n\nFor invoices that are issued before payment, forms are a great way to implement a “hands-off” process. \n\nThese forms require minimal intervention from you since all the relevant details are filled directly by the customer. On top of that, forms bring other benefits to your invoice processing workflow, including:\n\nConsistency: forms are made of fields describing specific information, plus they are easy to map out\n\nUser-friendliness: while filling out a form is not the most fun activity out there, it’s a very simple process we’re all familiar with, and it doesn’t require any explanation\n\nNon-technical: tools like Typeform, JotForm, and Paperform make it easy to edit a field or even change the design of your form\n\nInviting customers to fill out a form will help you streamline the invoice creation process without any effort.\n\nUse this template to create an invoice in Freshbooks once a form is created in Typeform, automatically filling the invoice fields with the answers provided.\n\n3. Automatically invoice your customers \n\nAs obvious as it may seem to send an invoice when to request payment, erring is human. \n\nBetween copying, pasting, and data entry, it’s natural that things sometimes fall through the cracks when it comes to invoicing.\n\nAs a result, there’s obvious value in ensuring that every single invoice in your system is automatically sent to your customers, conveniently crossing another pesky repetitive task off of your to-do list. \n\nThis is something that solutions like Zoho and Quickbooks can help you manage with recurring invoices so that the clients you bill every month get the corresponding invoice. \n\nThe only downside with these solutions is that they can be a bit more complicated to implement for one-off payments and irregular billing. This is where an automation tool can take over, detecting when an invoice was created in your system and sending it to the appropriate contact on file. \n\nUse this template to automatically send invoices to the assigned contact in Zoho when they’re created.\n\n4. For freelancers: Automatically generate an invoice including your rate at end of every month \n\nFreelancers are often power users when it comes to invoices, as: \n\nClients ask for invoices in order to pay for the services provided \n\nThey usually issue invoices on a recurring basis\n\nThey deal will multiple clients simultaneously \n\nDepending on their industry and activity, many freelance workers bill hourly rates for their work. \n\nThe process is quite straightforward, and it requires the freelancer to:\n\nCalculate the number of hours worked\n\nMultiply it by the hourly rate\n\nCreate the invoice\n\nSend the invoice \n\nAs soon as clients and projects start piling up, these tasks become a chore. \n\nWith errors and delays causing a potential threat to their bottom line, it only makes sense for freelancers to automate invoice creation and make sure it’s done on time, and accurately.\n\nTime tracking solutions such as Harvest and Toggl allow freelancers to accurately track their activity by the minute and to create invoices accordingly.\n\nAlternatively, if you prefer to use your own invoicing software, Make can help by coupling your time-tracker with your invoicing software, generating automated, accurate invoices to send to clients. \n\nUse this template to add Harvest entries to a Google Spreadsheet that automatically creates a Xero invoice at the end of each month. Note: For the scenario to work, make sure the contact exists in both Xero and Harvest and has the exact same name on both platforms.\n\n5. Receive a reminder when an invoice is due\n\nInvoices that are issued before payment are, in essence, a request to pay for a service or a product.\n\nThese come with a deadline (often within 15 or 30 days of the issue date) but clients can sometimes forget to pay on time. \n\nWhether you’re the one issuing the invoice or required to pay it, it’s bad form to miss out on an invoice deadline, because:\n\nIt delays the payment and can trigger fees\n\nIt reflects poorly on your internal operations and management\n\nIt can negatively impact the seller/buyer relationship\n\nTo avoid the very uncomfortable moment of calling clients after an invoice is due (or receiving that call) setting a reminder can help. \n\nMost invoicing tools (such as Quickbooks or Invoice Ninja) feature reminders and alerts that will send you an email once an invoice is due.\n\nAlternatively, you can use Make to integrate your invoicing software with your favorite communication tool and get notified when an invoice is created or due.\n\nUse this template to be reminded on Slack when an invoice is created on Invoice Ninja.\n\n6. Store a copy of every invoice created in your accounting software for easy reference\n\nOne of the most important parts of creating a sound invoicing workflow is to keep a paper trail of your financial operations. This is important for several reasons:\n\nTransparency: both your accounting department and your customers should be able to find invoices and check their status\n\nAuditing: you have to be able to locate every financial transaction your business is conducting at all times\n\nGetting paid: having a clear overview of your invoices is paramount to ensure all accounts receivables records are up to date\n\nTo make sure that you’re keeping tabs on all invoices, asking someone from the accounting team won’t cut it. In order to avoid this, your accounting software has to reflect the relevant information at a glance, at all times.\n\nPlatforms like Zoho Suite or Quickbooks feature a complete set of solutions allowing users to integrate everything in one place. Most accounting tools nowadays also provide integrations that allow you to sync complimentary services like Harvest and Xero.\n\nAnd then there’s Make, which allows you to automatically forward data from one platform to the other, and properly store invoices in your accounting software coming from any source.\n\nUse this template to add every invoice created in Invoice Ninja to the appropriate contact in Xero.\n\n7. Keep a copy of invoices in a safe place \n\nNow that you know how to copy invoices into your accounting software, it’s time to learn how to keep a copy in a different place. Why? \n\nYour accounting software might have an issue one day, causing you to lose your records\n\nYou might want to provide access to invoices to a collaborator, without giving them the ability to access your accounting software\n\nThis is a safe thing to do and doesn’t have to take time or energy. Simply automate your workflow so every invoice created is automatically copied over to a safe folder or location.\n\nUse this template to store new GetMyInvoices documents in Google Drive.\n\nBonus: Automate your whole invoicing workflow for complete autonomy\n\nFinally, the ultimate way to automate your invoicing is to gather all your accounting and invoicing software stack and processes in one big automation. \n\nBy picking which tips and tricks in this article are right for you, you can then create a custom scenario that will bind it all together, throughout the entire fulfillment process. For example, a single automation could gather these subsequent steps:\n\nCopy customer details in your invoicing software\n\nCreate an invoice when a payment or an order is received\n\nStore the new invoice in a safe place and in your invoicing software\n\nSend the invoice to the customer\n\nReceive a reminder when the payment is due\n\nCreating a complete automated process will take a bit of time to set up, but the benefits it will yield are worth the effort by saving you time, resources, and money. \n\nFor example, after implementing an automated process for invoicing, the consulting company Accenture has reported that their invoicing speed improved from an average of 3 days to under 10 minutes. \n\nMoreover, their accuracy also improved, as they reduced spreadsheet data entry errors to 0%.\n\nConclusion\n\nInvoices can be a headache, and one of the most volatile documents in an accounting department. They are:\n\nEasy to lose\n\nEasy to forget about\n\nHard to track\n\nProne to errors\n\nBy automating their creation, storage, and integration in your workflow, you’ll minimize the risks. \n\nAt the end of the day, business is about providing services and products to your customers, and getting paid while doing it. Invoices are a core element of this process, but shouldn’t get in the way. \n\nWe hope the tips in this article will help you focus on what matters most. To automation!\n\nThierry Maout\nContent Writer at Make. Passionate about tech, start-ups, and education. In my free time, I enjoy watching MMA, movies about time travel, and 6-second-long YouTube videos.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/send-invoice-to-multiple-emails-xero",
    "html": "How to Send Xero Invoices to Multiple Email Addresses [Tutorial]\nMar 02, 2023\n\nHow can you send a Xero invoice to multiple email addresses?\n\nThe most obvious solution is to use Xero’s built-in email feature, but it has some drawbacks:\n\nAll the email addresses you’ve saved for your Xero contacts will appear in the email’s “From” field. You can’t CC or BCC them.\n\nYou may not want to use Xero’s default email body text, and changing it every time is a recurring waste of time.\n\nRecipients can see that you’re sending emails via Xero’s postmaster email address instead of your own email client.\n\nAn alternative is to connect Xero to an email marketing tool like Mailchimp, but this is not ideal when you just want to send invoices instead of, say, fancy newsletters.\n\nPlus, you’d need a premium Xero account to access Xero’s native integration with Mailchimp - again, not ideal! \n\nThe problem, however, is easily solved by using Make. \n\nIn this tutorial, we’ll show you how to build an automation that uses a regular email client (such as Gmail) to instantly send an approved Xero invoice to multiple email addresses.\n\nHow does it work? \n\nSimple: When we approve an invoice in Xero, we’ll use Gmail to email that invoice to a main recipient while BCC’ing the other email addresses (such as for management or finance) in the same email.\n\nTo build this solution, all you need is a Make account and a few minutes of your time. \n\nReady? Let’s get down to business!\n\nStep 1: Save your contacts’ email addresses in Xero\n\nBefore sending your Xero invoice, you’ll first need to add the organization you’re invoicing as a new Xero contact. A single Xero contact can contain an email address for a primary/main person, plus extra email addresses for additional people within the same organization.\n\nSo, for the first step of this tutorial, we’ll create a new contact in Xero and add:\n\nThe main recipient’s email address as the email address in the “Primary person” section, and\n\nEveryone else’s email addresses to the email address fields for the “Additional people” section.\n\nSee the image below for reference:\n\nImportant note: When setting up additional people for a Xero contact, you’ll see a checkbox option that reads “Include this person in emails sent to the contact.”\n\nWe do not need to enable this checkbox as it controls whether Xero’s built-in email service sends emails to that person. \n\nMake doesn’t rely on this option to decide to whom it should send (or not send) emails, so leave it be.\n\nStep 2: Set up the Make scenario to automatically email Xero invoices to your Xero contacts\n\nAfter adding our contacts’ email addresses to Xero, it’s time to set up the Make scenario that will automatically send them our approved invoices.\n\nIt’s a simple scenario that requires four modules, and we’ll show you how to configure them one by one.\n\n1. Watch for new invoices in Xero\n\nStart by creating a new scenario in Make and add the “Watch Invoices in Xero” trigger module.\n\nWhen configuring the module, toggle the “Show advanced settings” and add this filter to the “Filter (where)” field:\n\nStatus==\"AUTHORISED\" && Type==\"ACCREC\"\n\nThis filter helps Xero watch for only invoices that have the approved status and that are owing to us (also known as “accounts receivable”).\n\n2. Get the Xero invoice URL for the new invoice\n\nWhen the “Watch Invoices in Xero” module finds a newly approved Xero invoice, it will provide us with some data on the invoice. \n\nThis data includes the invoice’s invoice number and invoice ID, plus the contact ID for the contact to whom the invoice is addressed.\n\nHowever, the invoice’s URL isn’t provided, so we’ll need to obtain it separately.\n\nTo do so, we’ll add a “Get an Invoice URL in Xero” module to our scenario. \n\nWe need to provide this module with the invoice IDs for our newly approved Xero invoices, so we’ll map the “Invoice ID” item obtained from the “Watch Invoices in Xero” module.\n\n3. Get the contact’s email addresses in Xero\n\nSimilarly, the Xero contact information that the “Watch Invoices in Xero” module retrieves doesn’t include the contact’s associated email addresses. \n\nThe next step is therefore to get these email addresses so we can automatically send them the invoice at once.\n\nWe’ll add the “Get a Contact in Xero” module to our scenario, and then map the “Contact: Contact ID” item from the “Watch Invoices in Xero” module to the new module’s “Contact ID” field.\n\nThis sounds complicated but it’s actually very simple - check the image below for reference.\n\n4. Set up the Gmail module\n\nTo conclude, we’ll add the “Send an email” Gmail module to emailing our Xero invoice using Gmail. \n\nIt’s worth mentioning that you can use the regular “Send an email” module if you have a different email client than Gmail - it works the same way as the Gmail one.\n\nNow, let’s configure this module. \n\nAt the “To” field of this module, toggle the “Map” option and map the “Email Address” item obtained from the “Get a Contact in Xero” module. \n\nDoing this will add your main recipient’s email address to your email’s “To” field.\n\nNext, fill out the “Subject” and “Content” fields with your default email subject and body respectively. \n\nAs you fill out the “Content” field, map the Xero invoice URL you’ve obtained from the “Get an Invoice URL in Xero” module.\n\nNow, we’ll BCC the same email to your other email recipients. To do this, toggle the “Show advanced settings” option at the bottom of the module.\n\nA “Blind copy recipient” field will appear. Toggle the “Map” option next to it too. Then, map this value to the field:\n\n{{map(3.ContactPersons; \"EmailAddress\")}}\n\nThis value allows Make to retrieve the email addresses we’ve saved in the “Additional persons” section for our Xero contact. \n\nMoreover, we need to use this because Xero saves these additional email addresses as a complex array of collections with keys such as “EmailAddress.” \n\nHowever, Gmail uses a simple array of text values for its email address fields.\n\nSo here, the map( function helps us:\n\nExtract the email address data from Xero’s complex array, and\n\nCreate a simple array of email address text values that Gmail can work with.\n\nIf we don’t use the map( function and directly map {{3.ContactPersons[].EmailAddress}} to the “Blind copy recipient” field instead, Make will BCC only the email address belonging to the first additional person and not those of any other additional persons you’ve set up.\n\nNote: If you want to CC instead of BCC the additional persons, then map {{map(3.ContactPersons; \"EmailAddress\")}} to the “Copy recipient” field instead.\n\nAnd that's it! \n\nYour full scenario should look like this:\n\nTest the scenario to check that it works, and if it does, schedule, save, and activate.\n\nWith it, every invoice will be properly sent to the corresponding stakeholders at once, and save you from doing so each and every time.\n\nSend invoices - and get paid - quicker than ever before with Make\n\nThis Make scenario is amazing. It’s such an invoicing time-saver - just approve your invoice in Xero, and it’ll automatically be sent to your intended recipients via email. \n\nI personally use a version of this scenario for automatically sending Xero invoices to clients of my freelance business. \n\nIf you’d like to try setting it up for yourself, just sign up for a Make account and you’ll be on your way!\n\nSiew Ann Tan\nFreelance B2B SaaS content writer and serial automator. Siew Ann is unapologetically proud of the number of personal and business workflows she has automated with Make (35+ and counting!).\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/chatgpt-telegram-bot",
    "html": "How to Create a ChatGPT-powered Telegram Bot That Replies\nAug 08, 2023\n\nSharing updates, answering frequently asked questions, providing feedback, and more: These are some of the problems that a ChatGPT-powered Telegram Bot solves on the spot by automatically replying to incoming messages. \n\nWhile this is not a native Telegram feature, it’s easy to build it with Make.\n\nIn this tutorial, we’ll show you how to build a Telegram bot that replies to messages with incredible accuracy and purpose as it’s powered by ChatGPT. \n\nThe resulting solution is also available as a Make template (a pre-configured scenario that you can deploy in minutes), but following the tutorial is useful if you want to learn how to create automation solutions from scratch. \n\nBefore we jump into the details, make sure you have what’s needed to deploy this solution:\n\nA Make account (Core Plan or above).\n\nA ChatGPT account with API tokens.\n\nA Telegram account.\n\nAll set? Then let’s not waste another minute!\n\nStep 1: Create a new scenario and install a Telegram Bot\n\nThe first thing we’ll do is install a Telegram Bot. Here’s a quick guide that shows you how to do it.\n\nNext, log into your Make account, and click the Create a new scenario button to open the scenario builder.\n\nThe first app we’re to going add to the scenario is the Telegram Bot app. Search for the app and select the Watch Updates module. \n\nThis module relies on a webhook that will instantly trigger the scenario when new messages are received in Telegram.\n\nIn the module’s configuration box, click Add to create a webhook. \n\nYou will need to connect your Telegram account to Make and then click Save to create the webhook. \n\nThere’s nothing more to do here since Make automatically attaches the webhook in Telegram for you, so once ready, click OK and move on to the next step.\n\nStep 2: Add the OpenAI module\n\nThe next step is to add the OpenAI app to create a reply to the message received. \n\nClick the plus sign on the side of the Telegram Bot module to open the search box, search for the OpenAI (DALL-E & ChatGPT) app, select it, and then pick the Create a Completion module.\n\nStart configuring this module by connecting your OpenAI account to Make. \n\nYou’ll need your API key to do this, which you’ll find in your OpenAI account’s user settings. \n\nNext, select the Create a Chat Completion option, as this will output a full reply for you. \n\nThen select the latest language model, or alternatively, the one for which you’ve purchased the corresponding tokens.\n\nLet’s keep going. Select User as the Role, and use the following prompt:\n\nReply to this message in the same language: {channel_post.text}\n\nIf the message is about {topic}, provide all the relevant details related to the message. \n\nIf the message is not related to {topic}, reply by apologizing and saying that you do not answer any other topic besides {topic}.\n\nImportant: Replace {topic} with your own topic. The prompt ensures that no other topic questions or requests will be answered.\n\nDepending if the Bot will be receiving direct messages or via a channel, replace {channel_post.text} with either the message text or channel text data item from the Telegram Bot module. See the image below for reference.\n\nBonus: The prompt creates a reply in the sender’s language!\n\nStep 3: Add the final Telegram module\n\nThe last step is to send the reply back to Telegram. To achieve this, we have to add the Telegram - Send a Text Message or a Reply module to our scenario.\n\nSelect your Telegram connection (it’ll be there as you already connected your Telegram account to Make), and configure the module as follows:\n\nMap the Message: Chat: ID data item (for direct Bot messages) or the Channel post: Chat: ID item (for channel messages) from the Telegram > Watch Updates module to the Chat ID field.\n\nMap the Choices []: Message.Content item from the OpenAI module to the Text field.\n\nNow that your scenario is fully configured, click Save and switch the scenario on. \n\nThat’s it - your Telegram Bot that auto-replies is now fully operational! \n\nWant to automate further? Check our Use Cases section for inspiration, sign up for a Make account, and start today!\n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/how-to-measure-active-customers",
    "html": "How to Measure Active Customers From Stripe Data [Tutorial]\nJun 01, 2023\n\nAmong the things keeping startup CEOs up at night, there’s a particularly terrifying one: Not knowing the number of active users their company has.\n\nUnderstanding the pulse of a business has become an art unto itself, but in the context of slow economic growth and rising interest rates, there’s no time to master it. \n\nYou either solve the problem or assume the risk of leaving it unattended.\n\nIf you’re growing tired of vague approximations and endless number-crunching sessions, get a Make account and get ready. In this tutorial, we’ll show you how to measure active customers from Stripe data.\n\nAnd in less than an hour, you’ll be looking at your very own automated system to measure active customers once and for all.\n\nReady to slam-dunk the real number whenever the question comes up? Then let’s not waste another minute!\n\nStep 1: Create a Google Sheets spreadsheet\n\nThe first thing you’ll need to gather the data on a regular and automated basis is a Google spreadsheet. \n\nYour sheet must have columns for:\n\nDate\n\nNumber of customers\n\nPercentage Increase/Decrease from the previous month\n\nAs you can tell, this solution will also show you how many customers you’ve won or lost compared to the previous measurement. \n\nStep 2: Create a Make scenario and add the Stripe app\n\nNext, log in to your Make account and navigate to the scenario builder to create a new scenario.\n\nIn the scenario builder (aka visual canvas), search for the Stripe app and select the Stripe - List All Customers module. \n\nBefore configuring the module, you need to connect your Stripe account to Make by entering your Stripe API key. \n\nThen, increase the Limit to a high number, since this is the number of customers that the module will fetch each time the scenario executes.\n\nThis is all you need to do in order to configure this module. Once done, hit OK.\n\nStep 3: Add the Google Sheets app to your scenario\n\nNext, you need to add the Google Sheets app by clicking the Add another module button. \n\nYou want to add the data to your recently created Google Sheets spreadsheet and to do this we’ll select the Google Sheets - Add a Row module.\n\nAs you probably realized, your Google account needs to be connected to Make to proceed. \n\nClick the Add button and follow the prompts.\n\nAfter connecting Google to Make, choose the Select by path option. \n\nThen select the Google Drive where the spreadsheet is, and then the spreadsheet that you want to add the data to followed by the sheet itself. \n\nYou’ll notice that the spreadsheet cells are now visible and ready to map. The first field is Date, you can change the format of the date as you see here by using the formatDate (located in the functions tab) and the now variable followed by the format you want (see screenshot below for reference). \n\nThe Total number of bundles data item represents the total number of customers.\n\nIn the Number of customers field, simply map the Total number of bundles data item as shown in the image below. \n\nOnce done, click OK.\n\nStep 4: Add a filter between the first two modules\n\nSince there will be many customers resulting in bundles of data (hopefully), this will result in every bundle of data being added to the sheet as new rows - but we just want the total on a single row.\n\nThe solution to this problem is to use a filter so that only one bundle passes through and one row of data is added to the sheet (as required).\n\nNotice the link between the two modules? Click on it to open the filter menu. \n\nSince you want to allow one bundle of data to pass through, configure the filter as follows: \n\nMap the Bundle order position item to the top field\n\nSelect the Numeric operators: Equal to operator\n\nEnter 1 in the bottom field so that only the first bundle passes through\n\nThen, hit OK and move to the next step.\n\nStep 5: Add the second Google Sheets module\n\nThe next step is to get the previous month’s total number of customers from column B so we can calculate the percentage increase/decrease in the subsequent module. \n\nAdd the Google Sheets - Get a Row module to the scenario, select your spreadsheet (like you did before), and simply use the following formula to retrieve this information.\n\nAll good? Then hit OK to finish configuring this module.\n\nStep 6: Add the third Google Sheets module\n\nIn this step, we’ll automatically calculate the percentage increase/decrease in the total number of users your company or product has.\n\nTo do this, add the Google Sheets - Update a Row module to your scenario. \n\nFirst, you need to map the Row Number from the Add a Row module to the Row number field. \n\nTo calculate the percentage increase/decrease, use the following formula in the corresponding field.\n\n{{sum(total number of bundles - value) / value * 100}}\n\nHere’s what it looks like when entered into the module:\n\nReady? There’s one more module to configure and we’ll be done.\n\nStep 7: Add the Slack module\n\nThe final step is to send a notification to the person or team that requires the information.\n\nWe’re using Slack to do this but Make supports multiple team communication platforms in case you need to change it (such as Microsoft Teams,\n\nBack to the scenario. Add the Slack - Create a Message module and connect your Slack account to Make by choosing the option of User or Bot as the connection type.\n\nOnce you establish the connection with Make, configure it as follows:\n\nChoose the Select from the List option\n\nSelect the Channel Type\n\nSelect the User/Channel that you want to send the notification to\n\nNow you’ll have to write the message that will accompany the information (i.e. number of users plus percentage variation). \n\nHere’s a sample of the text used to compose the message. You can enter any details and map any data you want from other modules - and even send a link to the sheet itself if you want to!\n\nOnce ready, hit OK. It’s time to test this automated scenario and see if it works as intended.\n\nStep 8: Test and activate the scenario\n\nLet’s take a look at what the scenario execution looks like.\n\nSeeing it perform the task of retrieving the data as expected, you can now set the scenario to execute on a custom schedule. \n\nIn this demo we want it to execute on the first day of every month, so we can count on fresh data and draw plans upon it. \n\nAnd lastly, save the scenario and switch it on.\n\nAnd this is how you measure the number of active customers based on payment data from Stripe. \n\nFinal thoughts: Business fundamentals using real-world data\n\nIf you looked closely, you might have noticed that this Make-powered automation solves more than the original problem of measuring the active customers your company has.\n\nOn top of providing this data, it does so in a way that’s easy to understand, requires minimal resources, and automatically communicates the results to the stakeholders that need to know.\n\nIt is in the simplicity where the beauty of the solution resides. \n\nYou won’t have to hunt for developers, splurge on consultants, or wrap your head around complicated concepts.\n\nAll it takes is an hour of your time, a strong desire to know what the actual numbers look like, and a Make account!\n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/automate-contract-creation",
    "html": "How to Automate Contract Creation with Make [Tutorial]\nMar 23, 2023\n\nDo you want to know something wild about contracts?\n\nOkay, here it goes: Even though large companies can have 90 percent (or more) of their annual revenues in contracts with suppliers and vendors, underinvestment in contract management can lead to an erosion of value equal to 9 percent of annual revenues.\n\nIn other words, the lack of investment in contract management is nothing but a huge waste of money for mid-sized and large organizations.\n\nAnd one of the main reasons why this happens is the crazy amount of time that companies spend on tens of thousands of contracts every single year.\n\nSo, how can you reduce the amount of time (and resources) your organization spends on contract management? \n\nThe answer is contract automation. \n\nThere are many things you can automate when dealing with contracts, and today we’re going to show you one of them: Contract creation.\n\nIn this tutorial, we’ll show you how to automate contract creation so you can dedicate your time to what matters the most: Terms, conditions, and increasing revenues.\n\nMoreover, this contract automation solution can be created with simple, affordable tools like Google Docs, Make, and one of the most popular CRMs in the market: Pipedrive. \n\nBefore we start, sign up for a Make account, and get ready to build a life-changing contract management system in a matter of minutes.\n\nAutomated contract creation: Use case overview\n\nThere are many different settings where creating contracts automatically can benefit an organization. \n\nFor the sake of simplicity, we’ll show a simple use case to build our solution: \n\nWhen a salesperson closes a deal, Make will create a service level agreement (SLA) document with the details of the deal, and add it to the salesperson’s CRM.\n\nTo manage the deals, we’ll use Pipedrive, as it’s popular and easy to use. However, you can replace Pipedrive for another CRM, as Make supports dozens of these.\n\nWe’ll also include a bonus automation that sends the contract to the end customer. This can help streamline the process even more, and shows how powerful and flexible Make is when it comes to automating processes.\n\nNow, let’s jump right into the tutorial.\n\nStep 1: Basic CRM setup\n\nThe first thing we need to know is the basic operating principle of our automated contract creation solution - and that lies within the CRM.\n\nPipedrive makes it very easy to create deals, move them along the sales pipeline, and mark them as “Won” or “Lost”.\n\nMoreover, each deal card can support information such:\n\nDeal name\n\nDeal value\n\nContact information of people involved in the deal \n\nAccount details \n\nWhy is this important? Because we’ll be using the information in the CRM to create and populate the contracts after a deal is won - so it’s important to have it there in the first place.\n\nStep 2: Creating the contract-generating scenario\n\nNow that we understand the role of the CRM, we’ll create a Make scenario and add the Pipedrive CRM > Watch Deals module. \n\nThis module will detect new deals that are marked as “Won” in the CRM.\n\nIn the configuration window of the module select “won” as the deal Status and “Object created” as the option for the Trigger when field.\n\nSee the image below for reference:\n\nThat’s all we need to configure this module, so click “OK” once done.\n\nStep 3: Creating a contract template in Google Docs\n\nNow we’ll create a contract template in Google Docs. \n\nMake will use this template to create new contracts with data from Pipedrive every time a new deal is won.\n\nTo create the template, simply head to a Google Drive folder, create a new Google Doc, and write a new contract.\n\nThe most important thing at this point is to place dynamic value tags in the contract.\n\nThese dynamic value tags contain data values that change from contract to contract, such as date, or initial fee. \n\nIn your Google Doc, those tags will look like this: \n\n{{ date }}\n\n{{ name }}\n\n{{ initial_fee }}\n\nFor reference, here’s an example of an SLA contract with dynamic tags that will be populated with dynamic data from the CRM (upon the creation of the contract, automatically).\n\nStep 4: Configuring the Google Docs module \n\nOnce your Google Doc contract template is ready, head back to your Make scenario and add the Google Docs > Create a Document from a Template module next to the Pipedrive one. \n\nIn the configuration window of the module go to “Document ID” and select the Google Doc template you have just created.\n\nAfter you do that, a list of fields will appear. You’ll see one field for each dynamic tag you added to the contract template. \n\nThis is where you can map the data elements from the Pipedrive CRM module, which in turn will populate the document fields with relevant contract data.\n\nSee the image below for reference:\n\nSo, how do you map a data element? \n\nSimply click on a field, and a list of data elements will appear on the side. You can map these elements just by clicking on them!\n\nIn this example, many of the contract fields need to be filled out with information that is specific to the service that is provided to the customer (such as name, deal value, and so on).\n\nIn order to have this data available, you first have to collect it in the CRM - and in Pipedrive, this means using a set of custom data fields.\n\nIt’s worth noting that most CRMs support custom data fields. \n\nIn Pipedrive, they can be created under the Settings > Company > Data fields page.\n\nAfter creating the custom data fields, it is possible to map them as data elements to the Google Doc contract template. \n\nTherefore, all the contract-specific data that is collected in each CRM deal card will automatically be passed to the contract template upon its generation.\n\nTo conclude configuring the Google Docs module, we need to select the Google Drive folder where we want to store the contracts we create automatically.\n\nTo achieve this, define the storage folder in the New Document’s Location field.\n\nStep 5: Final custom data fields for Pipedrive\n\nBefore we add a final module to our scenario, it’s important to create the following custom data fields for the CRM deal cards: \n\nContract file URL (this will enable the sales reps to view the contract)\n\nContract document ID\n\nContract status\n\nSee the image below for reference:\n\nStep 6: Updating Pipedrive when a new contract is created\n\nThanks to the custom fields we just created, we can update Pipedrive once a new contract is automatically generated by Make.\n\nTo achieve this, add the Pipedrive CRM > Update a Deal module to your scenario. This module will upload the contract file to the deal card.\n\nIn the configuration window of the module, you need to map the Deal ID data element from the Pipedrive CRM > Watch Deals module - as a way to identify the deal card which should be updated. \n\nNeedless to say, we want to update the same deal card that the contract was generated for.\n\nNext, map the Web View Link and Document ID data elements (obtained from the Google Docs > Create a Document from a Template module) to the Software License Agreement and Software License Agreement (Document ID) fields, respectively.\n\nSee the image below for reference:\n\nOnce the scenario is executed and the contract is generated, the data in the custom fields will look like this:\n\nAnd that’s it!\n\nClick “OK” to finish configuring the module, activate the Make scenario, and save it. \n\nYou now have your own automated contract creation solution, which should look like this:\n\nAnd thanks to it, sales representatives can click on the contract link and view the contract in their browser to make sure that the details are correct. \n\nFinal thoughts: Contract automation, made affordable\n\nAs you can see, there’s no point in spending countless hours drafting contract after contract.\n\nMake can take care of it all, and do it for a minimal fraction of the average salary of a legal assistant.\n\nAs a result, you will be able to:\n\nDedicate more time to contract details (where money gets lost)\n\nRelieve your team from contract creation tasks\n\nAnd all you need to get there is to sign up for Make and follow this tutorial - nice and easy!\n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/todoist-schedule-every-day-except",
    "html": "How to Skip Specific Days When Scheduling Tasks in Todoist\nAug 31, 2023\n\nTodoist provides an intuitive method of scheduling tasks using plain language like “every day,” “every 15th,” or “every other Friday.” However, there are limits to what the app can understand in terms of language.\n\nFor example, it may sound reasonable to schedule a task that repeats every day except certain days, but Todoist won’t recognize inputs worded as “every day except.”\n\nInstead, the platform offers a workaround to set up the task with the exact days on which we want it to be repeated. Like so:\n\n“[Task name] every Monday, Wednesday, Friday, Saturday”\n\nEven so, listing out each day in this manner can be troublesome. \n\nIt can even be absurd if we want our task to repeat every day except for certain days of the month, as the image below shows:\n\nAnother common recurring schedule setup is to have a task repeat every certain day of the month or earlier if that day falls on a weekend. \n\nTodoist is currently unable to handle such scheduling.\n\nBy connecting Todoist to Make, however, we can get around such limitations effortlessly.\n\nThe result we’ll see is Todoist tasks that repeat on the precise days of our choice - no manual date-typing needed.\n\nRegister for a free Make account if you haven’t already, and then follow along as we share how to schedule Todoist tasks that:\n\nRepeat every day except for certain days.\n\nRepeat every certain day of the month or earlier if that day happens to fall on a weekend.\n\nHow to schedule Todoist tasks that repeat every day except for certain days\n1. Set up the Make scenario and the module that creates a Todoist task\n\nStart by logging into your Make account and create a new scenario.\n\nThen, add the Todoist > Create a Task module and connect the module to your Todoist account.\n\nFill out the module’s settings with your task’s details. For example, type your task’s name into the Content field and add it to a project via the Project setting.\n\nYou can also enable the module’s Show advanced settings switch to set up your task’s priority.\n\nThen, under the Due date setting:\n\nLeave the Format setting as Only date.\n\nAdd the {{now}} variable to the Date field. Doing so will set your task date as the date on which the scenario is run. For example, if you run your scenario today, then your task will be created on your to-do list for today.\n\nClick OK when you’ve finished configuring the module.\n\n2. Schedule your scenario\n\nClick the schedule setting panel at the bottom of the scenario editor.\n\nUnder the Run scenario setting, select either Days of the week or Days of the month depending on whether you want to avoid creating a Todoist task on certain days of the week or month, respectively.\n\nFor example, if we want to create a Todoist task every day except the 1st and 4th of the month, we’ll select Days of the month.\n\nUnder the Days setting, use the checkboxes to set up the days on which you want to create your Todoist task. \n\nManually selecting each checkbox is too much of a hassle, so click the Select all check box to instantly select all of them.\n\nThen, deselect the days on which you don’t want your Todoist task to repeat. In this case, we’ll deselect the check boxes next to 1 and 4.\n\nFinally, set the time at which your scenario should run. The selected time should be before the time you’ll start looking at your tasks.\n\nFor instance, if you check Todoist tasks after waking up at 8 AM, then you could set your scenario to run at 6 AM.\n\nClick OK to save your scheduling setting, then turn your scenario on. That’s it!\n\nMake will now automatically create a Todoist task every day except for the days you’ve specified.\n\nHow to schedule Todoist tasks that repeat every certain day of the month or earlier if that day falls on a weekend\n\nThis solution is especially useful for scheduling work tasks that we want to get done on a certain day - or a couple of days earlier if it falls during the weekend.\n\nFor example, we may want to have a Todoist task for reviewing our monthly key performance indicators (KPIs) on the 25th of every month.\n\nBut if the 25th falls on a Saturday or Sunday, then we want to schedule the task for the Friday just before the 25th instead.\n\nIt’s currently impossible to schedule our task in this way using Todoist itself, but we can get it done in Make. Let’s see how.\n\n1. Set up the Make scenario and add the module that creates a Todoist task\n\nCreate a new Make scenario and add the Todoist > Create a Task module like how we did for the previous solution shared above.\n\nIn other words, connect your Todoist account to the module, then set up your task’s content and other details.\n\nUnder the Due date field, leave the Format setting as Only date. After that, type this function into the Date field:\n\n{{switch(formatDate(setDate(now; 25); \"ddd\"); \"Sat\"; addDays(setDate(now; 25); -1); \"Sun\"; addDays(setDate(now; 25); -2); setDate(now; 25))}}\n\nCheck the image below for reference.\n\nThis function checks whether the 25th falls on a Saturday or Sunday, and then sets the appropriate date for your task.\n\nIf the 25th falls on a Saturday, the function sets the task date as the 24th.\n\nIf the 25th falls on a Sunday, the function sets the task date as the 23rd.\n\nIf the 25th falls on neither a Saturday nor a Sunday, the function sets the task date as the 25th.\n\nClick OK when you’re done.\n\n2. Schedule the scenario\n\nClick the schedule setting panel at the bottom of the scenario editor.\n\nSince we want to schedule our Todoist task once a month, we’ll set the Run scenario setting to Days of the month.\n\nSelect a day and time on which you want your scenario to run. You can use any day and time as long as it falls before the day and time at which you want to see your task.\n\nHere, we’ll set our scenario to run on the 20th of every month at 8:30 AM.\n\nThen, we’ll turn our scenario on.\n\nNow, on the 20th of each month, Make will determine whether the 25th falls during the workweek or weekend, then create our Todoist task on the appropriate day.\n\nHooray for not getting bothered about work during the weekend!\n\nSchedule your to-do’s with precision and perfectly organize your life\n\nWith Make, we unlock new ways of scheduling our Todoist tasks and bringing calm to our days. And this is just the tip of the iceberg.\n\nMake can also help us automatically create follow-up Todoist tasks when certain events occur. Here are some templates for building Make scenarios that do just that:\n\nWhat’s more, we can apply the techniques we’ve learned above to any other app with event or task-scheduling features, such as Google Calendar or Asana, to bring Make’s advanced scheduling capabilities to them.\n\nSign up for a Make account here to start putting these productivity boosters to work!\n\nSiew Ann Tan\nFreelance B2B SaaS content writer and serial automator. Siew Ann is unapologetically proud of the number of personal and business workflows she has automated with Make (35+ and counting!).\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/how-to-repurpose-tiktok-videos",
    "html": "How to Repurpose TikTok Videos into LinkedIn Posts [Tutorial]\nSep 12, 2023\n\nPicture this: You’re scrolling through TikTok, and get inspired by a video in your feed - so much in fact, that you decide to create a LinkedIn post about it. \n\nThen, you spend the next 10 minutes drafting the post, but since you’re not convinced, you take another 10 minutes to convey your thinking. \n\nSomewhat satisfied with the result, you publish the post and wait for the reactions. \n\nIf things turn out as expected, people will engage. \n\nIf not, those are 20 minutes of your life you’ll never get back.\n\nIt’s not the end of the world, but not exactly a comforting thought either. \n\nNow, let’s imagine the same situation but in a business setting. \n\nHow much time can a social media manager spend on repurposing TikTok content into LinkedIn posts? \n\nWe know the answer: Not enough time!\n\nHowever, this changes today. \n\nIn this tutorial, we’ll show you how to leverage Make to automatically repurpose TikTok videos into LinkedIn content. \n\nSolution overview: From TikTok to LinkedIn, in seconds\n\nIn order to create a LinkedIn post from a TikTok video, you’ll have to send the video link via email to a dedicated mailbox. \n\nThat’s the only manual action required. After you do so, Make will automatically create the post, and email it back to you.\n\nIn order to build this solution, you’ll need the following:\n\nAn email account (we’ll use Gmail here, but any will do).\n\nA TikTok account.\n\nA Make account (Core Plan or above).\n\nA ChatGPT account with API tokens.\n\nIf you’re a Make user already, you can deploy the solution right away, as it’s also available as a template:\n\nOn the other hand, if you’re new to Make, we recommend following the tutorial to understand how everything works under the hood.\n\nReady? Then let’s get started!\n\n1. Create a new Make scenario and add the Gmail module\n\nLog in to your Make dashboard and click “Create a new scenario”. This will take you to the scenario builder to begin creating the scenario.\n\nThe first app you need for this scenario is the Gmail app since the automation kicks off when you receive new emails in your inbox.\n\nClick the button in the middle of the screen, and search for the Gmail app.\n\nThen, select the Watch Emails module, which will trigger the scenario when you receive new emails.\n\nNext, you will need to connect your Google account to proceed. \n\nThis is the inbox in which you will receive the email requests. \n\nClick the Add button and sign in with Google. \n\nYou can also name the connection if you wish (although it’s not mandatory to do so).\n\nOnce successfully connected, you will see the configuration window. Here’s how to set it up:\n\nSelect Inbox as the folder to watch for new emails.\n\nSelect Only Unread emails as the criteria.\n\nUnder Mark email message(s) as read when fetched - select Yes.\n\nEnter 10 as the Maximum of results, which is the number of emails that will be retrieved every time the scenario executes.\n\nSee the image below for reference on how to get this done:\n\nOnce done, click OK, select the From now on option, and click OK again when you see the window below:\n\n2. Add the OpenAI - ChatGPT module\n\nHere, we need to send the email content over to ChatGPT to extract the TikTok video link. \n\nThis step is necessary as sometimes there may be more text in the email than just the video link. \n\nTo add the next module, click the ‘+’ sign on the side of the module to open the search box again.\n\nWe want to add ChatGPT to the flow, so search for the OpenAI app and select the Create a Completion module. \n\nConnect your OpenAI account to Make by providing your API key. \n\nYou can click the link below the field to create a key in case you don’t have one already.\n\nOnce connected, it’s time to configure the module.\n\nUse the Create a Chat Completion (GPT Models) method and the GPT 3.5 turbo model.\n\nNote: If you have API tokens for another ChatGPT model, choose that one instead! \n\nNow you can compose the prompt for the AI so that it will extract the link from the email message.\n\nTo make things easier, we have provided the prompt for you. Just copy and paste it into the message content box and map the Text content data item from the Gmail module so that the AI knows which content to extract the link from (we need it to return it as a JSON to use in the following modules).\n\nFor the Role, select User.\n\nHere’s the prompt: Extract the URL out of this Content and respond with a JSON.\n\nContent:\n\n{text}\n\n{\"URL\":\"VALUE\"}\n\n/n/n \n\nJSON\n\nSee the image below for reference:\n\n3. Add the first filter of the scenario\n\nRemember that we have configured the Gmail > Watch emails module to watch for every new unread email? \n\nAs it stands, this is not useful, as not all emails will contain a TikTok video link requesting a LinkedIn draft post. \n\nSince we only want emails that are requesting this info to pass through from the Gmail module to the OpenAI/ChatGPT module, we’ll add a filter, which is a native Make feature.\n\nThis is how you set it up: Click on the link between the two modules to open the filter configuration window. \n\nFor this demo, we are only going to allow emails with the subject line “LinkedIn” to pass through the filter and over to the OpenAI/ChatGPT module. \n\nYou can change this to any subject you want. Give your filter a name and map the Subject data item to the top field. \n\nThen, select the Text operator: Equal to (case insensitive). \n\nFinally, enter the subject line that you want in the bottom field.\n\nOnce an email passes through the filter and ChatGPT creates a JSON containing the URL link, we need to parse the JSON which transforms it so that it can be used in the next module. This is quite easy to do in Make.\n\n4. Add the JSON app\n\nAdd another module to the scenario, search for the JSON app, and select the Parse JSON module.\n\nClick in the field, and then expand the ChatGPT Choices[]Message.Content and Message items. \n\nThen, map the Content item as shown below.\n\nThe JSON > Parse JSON module doesn’t show any outputs at this point (which you need to map in the subsequent module). \n\nThis means that we need to execute the scenario to get the module to output the URL link. \n\nTo do this, start by sending yourself an email with a TikTok video link. \n\nMake sure the subject line is the same as the one you entered in the filter earlier. \n\nExecute the scenario by clicking the Run Once button at the bottom left of the scenario. You will see this message pop up:\n\nClick Run anyway. If the scenario execution was successful, you will see the number 1 in the bubbles above the modules.\n\n5. Add the first HTTP module\n\nNow that we have the URL of the video, it’s time to download it. \n\nWe will download the video using the HTTP app which is Make’s generic app used to call API endpoints. Add another module to your scenario, search for the HTTP app, and then select the Make a request module. \n\nWe are going to show you how to configure this module. You can simply copy and paste the data below.\n\nNote: You will need a free RapidAPI account and API key to call the TikTok API, so make sure you have one before proceeding.\n\nURL field: https://tiktok-download-video-no-watermark.p.rapidapi.com/tiktok/info\n\nHeaders: Item 1: Name: (Insert your RapidAPI API key name here)                 Value: (Insert your RapidAPI API key here)\n\nHeaders: Item 1: Name: X-RapidAPI-Host                 Value: tiktok-download-video-no-watermark.p.rapidapi.com\n\nQuery String: Name: url                         Value: url data item mapped from the JSON module\n\nParse response: Yes. \n\nThis is what it should look like:\n\nJust like with the Parse JSON module, the HTTP module also needs to be executed to output the data needed in the next module.\n\nSend another email with a TikTik video link and execute the scenario again just like you did previously. \n\nHere’s what it should look like if done correctly:\n\nWe now have the video, but need the audio to send to ChatGPT to transcribe. \n\n6. Add the second HTTP module\n\nLet’s extract the audio from the video. Add another HTTP > Make a request module to your scenario. This one is very simple - just map the data:music:uri item from the previous HTTP module’s output to the URL field, and don’t forget to select Yes under Parse response.\n\nSee the image below for reference:\n\n7. Add the second OpenAI module\n\nThe audio is now ready to be transcribed. \n\nOpenAI has recently introduced Whisper, which is an automatic speech recognition (ASR) system. \n\nMake has also introduced this module so let’s add it to the scenario.\n\nSelect the same OpenAI connection that you used in the first module of this scenario. For the File Name of the file, let’s use a timestamp variable found under the Date and time functions and add .mp3. \n\nFor the File Data, simply map the Data item from the previous HTTP module (no need to execute the scenario again).\n\nThe transcription of the audio is complete and the final task for the AI is to create an original draft post from the transcript that you can use for LinkedIn.\n\n8. Add the third OpenAI module\n\nLet’s add the final OpenAI/ChatGPT > Create a completion module to the scenario to create the post.\n\nUse the Create a Chat Completion (GPT Models) method and the GPT4 model.\n\nConfigure the module as follows:\n\nRole: User\n\nPrompt:\n\nGenerate an inspiring LinkedIn post based on this TRANSCRIPT. \n\nRules: \n\nUse Emojis.\n\nUse English even if the transcript is not in English.\n\nSound inspiring and motivational.\n\nFocus on simple yet professional language.\n\nTRANSCRIPT:\n\n{text}\n\nOnce ready, click OK and move on to the next step.\n\n9. Add the final Gmail module\n\nAnd we have reached the final step in the process: Email the draft to post to the requester. \n\nAdd the Gmail > Send an email module to your scenario and select your Google account. \n\nFor the email address, map the Sender: Email address data item from the first Gmail module. \n\nThen, map the Subject data item and then the Email ID (UID) item to make it unique.\n\nLastly, map the Message.Content from the previous OpenAI module to the Content box.  \n\n10. Schedule your scenario and turn it on\n\nNow that your scenario is fully set up and ready to go, it’s time to schedule it to execute the way you want it to. \n\nClick the clock icon on the trigger module and choose how often you want the scenario to execute. \n\nFinally, save the scenario and switch it on.\n\nAnd that’s it! \n\nFrom now on, all you have to do to repurpose TikTok content into LinkedIn posts is send a video link and Make will do the magic for you in a couple of seconds.\n\nConclusion: No pain, no gain\n\nThis is not the easiest scenario to build if you just bumped across Make, but it’s incredibly worth it if you’re serious about your efforts to easily repurpose TikTok content on the regular.\n\nProductivity-wise, spending a couple of hours configuring this scenario is nothing when compared to the amount of time it’ll save you down the road. \n\nMost importantly, it’s a lightning-fast solution for repurposing content, which will allow you to stay on top of trends and gain that much-coveted social media traction like a pro. \n\nReady to give Make a try? Sign up for an account, and let the magic begin. \n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/meeting-cost-calculator",
    "html": "How to Build a Meeting Cost Calculator to Save Time & Money\nSep 13, 2023\n\nHow much money are meetings costing your company?\n\nIf there are intrusive thoughts plaguing the minds of CEOs and high-level executives, this one is definitely among them.\n\nAnd while there’s not always a direct relationship between the cost of a meeting and its actual value, it’s always better to know the actual figures than to guess them. \n\nIn the past couple of years, meeting cost calculators have become somewhat popular, but there’s a problem: They demand too much manual work.\n\nYou need to input some data (usually, time and hourly wages of the participants) to get a result. \n\nNot very convenient, is it?\n\nSo what if we told you can automatically calculate the cost of all your meetings once and for all with Make?\n\nBy building this meeting cost calculator, you’ll know the cost of your meetings down to the very cent, without having to lift a finger.\n\nSolution overview: Calculating the cost of meetings automatically\n\nThe meeting cost tracker we’ll build in this tutorial operates in a pretty straightforward manner:\n\nFirst, it gets a list of meetings for the day from your Google Calendar.\n\nThen, it calculates the cost of each meeting organized by you.\n\nFinally, it sends you a Slack message that lists these meetings and their respective costs. \n\nAs a bonus, the Slack message also provides meeting cancellation links just in case you decide that the cost is too high and that an email would be more efficient.\n\nHere’s how the Slack message generated by the tracker looks like:\n\nThe meeting cost tracker doesn’t take very long to build and doesn’t need any tedious coding either.\n\nAside from Slack and Google accounts, all you need is a Make account: Sign up for yours here, and let’s get building!\n\n1. Create a new Make scenario and add the Google Calendar app\n\nStart by creating a new Make scenario and adding the Google Calendar > Search Events module to it.\n\nConnect the module to your Google account, and then set it up like this:\n\nCalendar ID: Select the calendar that contains your meetings.\n\nStart Date: Fill this out with {{formatDate(now; \"DD.MM.YYYY\")}}. This will make the start date the date on which the meeting cost tracker is run (such as today).\n\nEnd Date: Fill this out with {{formatDate(addDays(now; 1); \"DD.MM.YYYY\")}}. This will make the end date one day after our start date (such as tomorrow’s date).\n\nSingle Events: Set this to Yes to separate any recurring meetings on your calendar into their respective individual meetings.\n\nLimit: Set up the maximum number of results Google Calendar should get every time the tracker is run, such as “20” (this number should be higher than the number of meetings you usually participate in). \n\nCheck the image below for reference.\n\nClick OK when you’ve finished configuring the module.\n\n2. Add the Tools module to set up meeting information\n\nTo calculate the cost of the meetings we’ve organized, our tracker needs to know:\n\nEach meeting’s duration (in hours).\n\nOur email address. Our tracker will use it to check whether a meeting has been organized by us or someone else.\n\nEach meeting attendee’s hourly rate. For simplicity, we’ll use the same hourly rate for all attendees.\n\nNote: By using an average hourly rate, you avoid a significant issue - employees sharing their hourly rates with each other. \n\nTo provide the tracker with such data, we need to add a Tools > Set multiple variables module to our scenario.\n\nAfter adding this module, it’s time to configure it.\n\nClick Add item to add a data variable to the module.\n\nFill out “duration” as the Variable name, then copy and paste the following to the Variable value field: {{(1.end - 1.start) / 3600000}}\n\nThis function helps the tracker subtract the meeting’s start date from its end date to get its duration. \n\nAnd because the result is in milliseconds format, we’ll divide it by 3600000 to get its equivalent in hours.\n\nSee the image below for reference.\n\nNote: If you prefer to type the Variable value yourself, use Make’s special parenthesis function and math operators when doing so. Make won’t be able to calculate your meeting duration if you simply type (, ), -, or / using your keyboard.\n\nNow, click Add item two more times to create these two variables next:\n\nVariable name: “hourlyrate” and Variable value: Fill out your hourly rate here as a number and without the currency symbol. For example, if your hourly rate is $70/hour, type “70”.\n\nVariable name: “myemail” and Variable value: Fill out your email address here.\n\nCheck the image below to see how all three variables should look.\n\nClick OK to finish setting up this module.\n\n3. Add a second Tools module to calculate the cost of each meeting\n\nNow, we’ll use another variable to calculate the cost of each meeting.\n\nAdd a Tools > Set variable module to the scenario and set it up like this:\n\nVariable name: Fill this out with “cost”.\n\nVariable value: Copy and paste {{formatNumber(length(1.attendees) * 4.meetingDuration * 4.hourlyRate; 2; \".\"; \",\")}} into this field.\n\nCheck the image below for reference.\n\nHere’s what this variable does:\n\nFirst, it counts the number of attendees in the meeting.\n\nThen, it multiplies this number by the meeting’s duration and each attendee’s hourly rate to get the meeting’s cost.\n\nFinally, it rounds the meeting cost to two decimal places.\n\nAfter configuring the module, click OK to proceed to the next step.\n\n4. Have the tracker calculate meeting costs for only meetings you’ve organized\n\nCurrently, our meeting cost tracker will calculate the cost for each meeting we’re attending on a given day.\n\nBut since we can only cancel the meetings we’ve organized, we’ll customize our tracker to work on just these meetings.\n\nTo do so, click the wrench icon between the two Tools modules and select Set up a filter.\n\nGive your filter a descriptive name, such as “Proceed for only meetings we’ve organized”, and then:\n\nMap the Organizer: Email item from your Google Calendar module to the filter condition’s first operator.\n\nChange the condition setting to Boolean operators > Equal to.\n\nMap the “myemail” variable from the first Tools module to the filter condition’s second operator.\n\nSee the image below for reference.\n\nWith this filter, our meeting cost tracker will check if the organizer’s email address for a meeting matches our email address. \n\nIf there’s a match, the tracker will go on to calculate that meeting’s cost.\n\nBut if there isn’t a match, the tracker will ignore that meeting.\n\nClick OK to finish setting up the filter.\n\n5. Compile the list of meetings and their respective costs\n\nAt this stage, the meeting cost tracker is able to calculate the cost of each meeting we organize. \n\nTo compile this info into a list, add a Tools > Text aggregator module to the scenario. \n\nEnable the module’s Show advanced settings switch, and then set it up like this:\n\nSource Module: Set this to Google Calendar - Search Events [1].\n\nRow separator: Set this to New row so each meeting will appear in a new list row.\n\nStop processing after an empty aggregation: Check the Yes checkbox to stop the tracker from working if you haven’t organized any meetings for that day.\n\nText: Copy and paste • *{{1.summary}}:* ${{3.cost}} | <{{1.htmlLink}}|Cancel this meeting> into this field. It creates a line of text that includes our meeting’s name, its cost, and a link to cancel it.\n\nNote: We’ve formatted our text using Slack markup because we’ll be displaying our meetings list in the Slack app. You’ll need to mark up your text differently if you’re displaying your list in a different messaging app.\n\nCheck the image below for reference.\n\nClick OK to move to the last step!\n\n6. Send the list of meetings to yourself via Slack\n\nFinally, we’ll create a Slack message that sends us the list of meetings and their costs (feel free to replace Slack with any other team messaging app available on Make).\n\nAdd the Slack > Create a Message module to the scenario and connect it to your Slack account.\n\nSet up the Slack channel in which you want to receive the message.\n\nAfter that, fill out the Text field with what you want the full message to say. \n\nWhen doing so, insert the text aggregator module’s “text” item into the part of the message that should display your list of meetings.\n\nSee the image below for reference.\n\nFinally, enable the Show advanced settings switch and change the Unfurl primarily text-based content setting to No to disable the link preview for each meeting.\n\nOptional: In the advanced settings, you can also customize your message’s icon emoji and username.\n\nClick OK to finish setting up your tracker. Your full scenario should look like this:\n\nNow, test it by clicking the Run once button at the bottom left of the scenario builder.\n\nYou should have received a Slack message listing the meetings you’ve organized for today, their respective costs, and links to cancel each of them.\n\nIf so, schedule your scenario such that your tracker runs in the morning of every workday (or every day of the week if you have meetings constantly), and activate it. That’s it!\n\nMeeting time is money, so make it count\n\nThe goal of having this meeting cost tracker isn’t to shock you into canceling all your meetings.\n\nRather, when you’re aware of each meeting’s cost, you can thoughtfully proceed with the ones that will generate a positive return for the time spent in them.\n\nAs for the meetings you decide to turn into emails, your team will likely thank you for saving their time, while your superiors will thank you for saving the business money.\n\nThese are, in a nutshell, the main benefits of the automated meeting cost calculator.\n\nRegister for your Make account here to start building yours! \n\nYou’ll be on your way to freeing up your organization’s resources for the tasks that truly matter.\n\nSiew Ann Tan\nFreelance B2B SaaS content writer and serial automator. Siew Ann is unapologetically proud of the number of personal and business workflows she has automated with Make (35+ and counting!).\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/how-to-save-emails-to-google-drive",
    "html": "How to Save Emails to Google Drive Automatically [Tutorial]\nSep 21, 2023\n\nSaving your emails to Google Drive is an effective solution for better organization, but also for enhanced security, as it’s not rare to see emails and attachments get lost by accident. \n\nSimply put, there are two ways to backup emails to Google Drive: Manually, or automatically.\n\nThe first one is not very convenient, as you have to save one email at a time and spend a couple of minutes every time you want to do it. Plus, this is an option available in some email clients (such as Gmail and Microsoft email), but not all of them.\n\nAutomation, on the other hand, provides the most efficient pathway, as it allows you to save your emails (all of them, or the ones you decide) to Google Drive without lifting a finger. In addition, the automated option works for all email clients.\n\nIn this tutorial, we’ll show you how to integrate your email client and Google Drive to automatically save emails to a Google Drive folder as individual Google Doc files. \n\nReady to build? Get your Make account, and let’s get started! \n\n1. Create a new Make scenario and add the email app\n\nStart by clicking the Create a new scenario button in your Make dashboard.\n\nDoing this will take you to the visual canvas of Make, where we’ll build the automation. \n\nClick the button at the center of the screen, search for the Email app, and select the Watch Emails module.\n\nNow it’s time to configure this module. \n\nStart by clicking Add and connect your email client to Make (we’re using Gmail, but any email client will do here). \n\nNext, choose the Folder that you want to monitor for new emails, and select the Criteria - in our case, we’ll be watching All emails, read and unread. \n\nFinally, scroll down to the bottom of the configuration box and state the Maximum number of results that need to be fetched each time the automation runs. \n\nFor reference, if you receive ~10 emails every day, this number should be 10 (or above). If you receive 50, then it should be 50 (or above). \n\nOnce ready, click OK to finish configuring the module, and move on to the next step.\n\n2. Choose when to start monitoring emails\n\nAfter the configuration box of the first module closes, a new one will pop up on your screen. \n\nThis secondary box will let you define the moment when Make should start picking up your emails and saving them to Google Drive. \n\nYou can choose to start right away or after a specific date in the past or future.\n\nThe simplest option is to select the From now on option but feel free to choose the one that suits your actual needs.\n\nOnce ready, click OK and move on to the next step.\n\n3. Add the Google Drive app\n\nHover your cursor over the Email module and a little “+” symbol will appear: Click it to add another module. \n\nThen, search for the Google Drive app, and select the Create a File from Text module. \n\nStart configuring this module by clicking Add and connecting your Google account to Make. \n\nThen, choose the Google Drive that you’ll be using to store your emails, and the Folder where the emails will be stored. \n\nUnder File Name, map the data operators that will be used to name the email files. In this example, we’re using Subject and Sender name, as they will allow us to easily identify emails when we need them. \n\nThen, under File Content, map the Text content data operator. This is how Make will fetch text inside emails into the corresponding files. \n\nFinally, select Yes for the Convert the File to Google Docs document option.\n\nCheck the image below for reference:\n\nOnce ready, click OK and move on to the final step of this tutorial.\n\n4. Schedule and test the scenario\n\nSince we chose the From now on option in the second step of this tutorial, we’ll now test it.\n\nFirst of all, head over to the bottom left corner of your screen, and turn the scenario on. \n\nThen, compose a test email, and send it to yourself.\n\nWait for a few seconds until the test email hits your inbox. Then, head back to your scenario, and click the Run once button. \n\nIn a matter of seconds, Make will automatically generate a Google Doc with the email you just sent to yourself. \n\nHead over to the Google Drive folder that you chose for storing the emails, and check if the newly created document is there.\n\nTo conclude, go to the visual canvas once again to schedule the scenario. \n\nClick the Clock that’s next to the first module of the scenario, and choose when, and how often the scenario should run. \n\nWe selected once a day at 23:59, so it picks up all the emails from the day and creates a file for each one of them in our Google Drive folder. \n\nFinally, turn the scenario on, and save it. \n\nFrom now on, all your emails will be saved in that folder for your convenience and security.\n\nWhat if you want to save attachments as well? \n\nIn case you want to save attachments, we already have a pre-built template that you can use for that.\n\nThis template operates on the same principle as the solution we built above, and it will take you even less time to configure it!\n\nFinal words: Backing up your emails is easy with Make\n\nMigrating emails to Google Drive is more than an organizational feat; it's a strategic move to safeguard your informational capital. \n\nIn order to stop worrying about backing up emails or converting emails into files, get your Make account today, and let this tutorial be your guide to a more efficient, organized way of managing your data.\n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/connect-shopify-forms-to-highlevel",
    "html": "How to Connect Shopify Forms to HighLevel [Tutorial]\nOct 02, 2023\n\nConnecting Shopify Forms with HighLevel is a priority for any Shopify user that wants to automatically gather lead data, optimize customer interactions, and ultimately, convert more leads into paying customers. \n\nHowever, there’s an elephant in the room: For the sheer majority of users, connecting these applications together can turn into a technical and financial challenge, as coding through APIs is not always easy, nor affordable. \n\nOn the other hand, there’s a solution to this problem: By using Make, you will be able to integrate Shopify and HighLevel in a matter of minutes, and it’ll likely cost you less than the average cheeseburger out there. \n\nBefore we jump into the tutorial, it’s worth telling you that the resulting solution is also available as a Make template that you can use right away. \n\nIf you’re new to Make, we recommend following the tutorial to understand how the Shopify - HighLevel integration works under the hood. \n\nReady to get started? Then sign up for your Make account, and let’s build this together!\n\nStep 1: Create a new Make scenario and add the Shopify app\n\nStart this tutorial by logging into your Make account and clicking “Create a new scenario”.\n\nThis will take you to the the scenario builder, where you can search for the Shopify app.\n\nSince you want the scenario to trigger when you have new sign-ups added as new customers, select the Shopify > Watch Customers module.\n\nNow it’s time to configure the Shopify module. \n\nClick Add and select Shopify as the Connection type to connect your Shopify account to Make. \n\nIn the next window, you can give the connection a name and enter your Shopify subdomain.\n\nOnce your account is connected, you can enter the Limit, which is the maximum amount of customers you want Make to retrieve during a single execution of the scenario.\n\nFor example, if you usually receive 10 form submissions a day and schedule the scenario to run once a day, the Limit should be set to a number higher than 10.\n\nAfter setting the Limit, click OK and another window will pop up, asking you where you would like to start processing from. \n\nIf you select From now on, only customers that sign up from this point will be fetched when the scenario executes. \n\nIf you select All, it will fetch all your existing customers during the next execution. You can also select customers from a specific date or start from a specific customer as well.\n\nAfter deciding when to start, click OK and move on to the next step.\n\nStep 2: Add the HighLevel app\n\nNow we need to add the HighLevel app to the scenario. To do this, simply click on the plus sign on the side of the Shopify module when you hover over it.\n\nHere, search for HighLevel.\n\nSince we want to send customers over to HighLevel (for retargeting, loyalty programs, newsletters, etc.) select the HighLevel > Create a Contact module.\n\nNow Connect your HighLevel account to Make. \n\nYou will need your HighLevel API key to do so. If you don’t know where to find it, here’s the official HighLevel page that shows you how.\n\nAfter connecting HighLevel to Make, all you need to do is map (drag and drop) the matching data items from the Shopify module to the HighLevel module fields.\n\nScroll down the module to see all the available fields that you can map, eg. First Name item to the First Name field.\n\nAt this point, all new customers will be sent over to HighLevel, even if they weren’t acquired through the signup form. \n\nHowever, we only want customers that signed up to be sent to HighLevel, and this requires us to filter those customer records. \n\nWe can use a Filter in Make to do that. \n\nStep 3: Add a filter\n\nYou’ll notice a link between the two modules - if you click on it, you will open the filter configuration window.\n\nLet’s start by naming the filter, which is good practice when building scenarios.\n\nCustomers who sign up are automatically tagged with the form’s name, so this is what we will use to filter the customer records. \n\nTo do that, map the Tags[] data item to the top field. \n\nThen, select the Equals to (case sensitive) text operator and enter the form's name in the bottom field. \n\nThat’s all you need to do to set up the filter!\n\nStep 4: Schedule and save the scenario\n\nThe final step is to determine how often you want the scenario to trigger, for instance every 15 minutes, once a day, once a week, and so on. \n\nNotice the clock icon on the Shopify module? Click it to open the scheduling settings. \n\nSet up the scheduling that makes the most sense to you and click OK.\n\nFinally, save your scenario, switch it on, and let Make handle this task automatically once and for all.\n\nConclusion: Connecting apps has never been easier\n\nBy integrating Shopify Forms with HighLevel, you'll be taking an important step towards better customer engagement and increased sales conversions. \n\nNow it’s time to forget about the old, manual data entry that steals valuable time and resources from your operation: This integration is key to focus on real-time, data-informed actions that truly matter.\n\nIf you followed this tutorial, you might have noticed that we didn’t write a single line of code to deploy this integration, and did so in just a couple of steps. \n\nIn other words, integrating apps with Make is not just easy, but also incredibly cost-effective as you don’t need a highly technical professional to do it.\n\nIf you’re curious about other integrations - Shopify, HighLevel, and beyond - subscribe for a Make account, and get inspired by our use cases and templates.\n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/xero-invoice-reminders",
    "html": "How to Get Email Reminders for Xero Invoices That are Due Soon\nOct 08, 2023\n\nDid you ever forget to pay an invoice and get riddled with complications afterward? \n\nEven if you use first-class accounting software like Xero, you are not alone.\n\nXero doesn’t offer built-in email reminders for invoices and bills that are due soon, and this is obviously frustrating if we have multiple bills to monitor and not enough time or staff to do so.\n\nUsing Make, however, we can set up Xero invoice reminders for ourselves and receive emails like the one below when we need them the most:\n\nMoreover, we can choose whether to receive reminders for all bills due this week, today, tomorrow or some other payment due date as well.\n\nAll we need to do to get these email notifications up and running is a Make account, a Xero account, and an email app like Gmail.\n\nJoin us for this tutorial as we cover how to set up email notifications for Xero invoices due this week.\n\nWe’ll also share how to adjust the reminder to alert you of invoices due either today or tomorrow.\n\n1. Create a new Make scenario and add the Xero app\n\nLog into your Make account and create a new scenario. \n\nThen, add the Xero > Search for Invoices module to this scenario and connect your Xero account and organization to it. \n\nSet the Search by dropdown setting to “user-defined condition,” then copy and paste this text into the Where condition field:\n\nType==\"ACCPAY\" && Status==\"AUTHORISED\" && AmountDue>0 && DueDate<=DateTime({{formatDate(addDays(now; 6); \"YYYY, MM, DD\")}})\n\nImportant note: “AUTHORISED” needs to be typed in upper case, and spelled as “AUTHORISED” instead of “AUTHORIZED.”\n\nCheck the image below for reference:\n\nThe “where” condition searches for Xero invoices that meet all of these conditions:\n\nThe invoice type is “ACCPAY” or “account payable,” which is another name for a bill.\n\nThe invoice status is “AUTHORISED” - in other words, the bill is not a draft but has been approved, and is also partially or fully unpaid.\n\nThe invoice has an outstanding, non-zero amount due.\n\nThe invoice’s due date is equal to or earlier than six days after the day the scenario is run. For example, if the scenario is run on Monday, January 1, it will search for invoices due on Sunday, January 7, or earlier - hence identifying all invoices due the week of Monday, January 1.\n\nTip: To search for bills due within certain other payment timeframes, replace the “where” condition’s “DueDate” field as follows:\n\nSearch for bills due the day the scenario is run (or today, in other words): Use DueDate=DateTime({{formatDate(now; \"YYYY, MM, DD\")}})\n\nSearch for bills due one day after the day of running the scenario (or tomorrow, in other words): Use DueDate=DateTime({{formatDate(addDays(now; 1); \"YYYY, MM, DD\")}})\n\nFinally, fill out the Maximum number of returned accounts field with the maximum number of bills you want to search for at once.\n\nWe’ve set the limit as “15” for demonstration purposes, but the number you use should reflect the number of potentially due bills you have at any time.\n\nClick OK to finish configuring this module.\n\n2. Add the Text Aggregator module to compile the list of Xero invoices\n\nHere, add the Tools > Text Aggregator module to the scenario. This module will help compile all the Xero bills found in the previous step into a list.\n\nEnable the Show advanced settings switch at the bottom of the module settings, then configure the module like this:\n\nSet the Source Module setting to Xero - Search for Invoices [1].\n\nSet the Row separator setting to New row to list each bill in a new row.\n\nCheck the Yes checkbox under the Stop processing after an empty aggregation setting to prevent the scenario from continuing if there are no bills found.\n\nMap data items from the Xero > Search for Invoices module to the Text field based on how you want the notification to display information on each bill. For example, to have the notification display the bill’s invoice number and outstanding amount, fill out the Text field with <li>{{1.InvoiceNumber}} - Amount due: ${{1.AmountDue}}</li>. (Here, we’re also surrounding each list item with the <li> and </li> HTML tags to help Gmail format our list in an email properly.)\n\nRefer to this image for guidance:\n\nClick OK when you’ve finished configuring the Text Aggregator.\n\n3. Add a filter between the Xero and Text Aggregator modules\n\nSince we don’t want to receive the email notification if we don’t have any Xero bills due soon, we’ll add a filter between the Xero and Text Aggregator modules.\n\nThe filter will stop the scenario from sending an email in this situation.\n\nClick the wrench icon between these two modules, and select the Set up a filter option in the menu that pops up.\n\nLabel the filter with a descriptive name like “Proceed if Xero bill is found.”\n\nMap the “Invoice ID” item from the Xero module to the condition’s first operator, then click the Text operators: Equal to setting and change it to Basic operators > Exists.\n\nThis way, the scenario will be allowed to continue only if at least one Xero bill that meets our due date condition has been found.\n\nSee this image for reference:\n\nClick OK to finish setting up the filter.\n\n4. Add the Gmail module that sends the email reminder\n\nNow, add the Gmail > Send an Email module to the scenario (feel free to replace Gmail with any other email or messaging app like Microsoft 365 Email).\n\nClick Add to connect your Google account to this module and add your email address to the To field.\n\nType your email notification subject into the Subject field.\n\nAfter that, fill out the Content field with what you want the email notification to say. Surround your paragraphs with the <p> and </p> HTML tags to format your email content as paragraphs.\n\nAlso, map the text item from the Text Aggregator module at the part of the email where the list of Xero bills should appear.\n\nSurround the text item with the <ul> and </ul> HTML tags to have Gmail format your list as an unordered (or bulleted) list. Alternatively, use the <ol> and </ol> HTML tags if you prefer a numbered list.\n\nCheck the image below for reference:\n\nEnable the Show advanced settings switch if you want to add copy (CC) or blind copy (BCC) recipients to the email reminder.\n\nFinally, click OK when you’ve finished configuring the module.\n\n5. Test and activate the scenario\n\nThat’s the end of the setup! Your scenario should look like this:\n\nClick the Run once button at the bottom left of the visual editor to test your scenario.\n\nIf you have Xero bills that meet the due date condition set up in Step 1 above, you should receive a list of them via email.\n\nIf none of your bills meet this condition, your scenario will finish running without sending you an email notification - which is to be expected. In this case, create and approve a test Xero bill that meets your due date condition.\n\nFor example, if today is January 1 and you’ve set up an email reminder for all Xero bills due this week, you could create a test bill that’s due on January 3.\n\nThen, click the Run once button again to see if you receive an email notification about this test bill. If you do, your scenario works and you can void the test bill.\n\nSo, once you’ve confirmed your email notifications are in order, schedule the scenario and turn it on.\n\nTo receive a weekly email reminder every Monday, schedule your scenario to run every Monday at your preferred time - say, 8 AM.\n\nSee the image below for reference:\n\nAlternatively, for daily email reminders of Xero bills due either today or tomorrow, schedule your scenario to run every day - again, at your preferred time.\n\nNever pay a Xero bill late again\n\nThis Make scenario doesn’t take long to set up, and once we’ve done so, we can get on with our operations with full confidence that we’ll always know when a bill is due soon - and then pay on time to maintain our reputation as a trustworthy customer.\n\nMake can also help us spend less time on finance-related tasks in ways like:\n\nSending our Xero invoices to multiple recipients the moment we’ve approved them in the platform,\n\nAutomating our invoices, including automatically notifying customers about unpaid ones.\n\nSign up for a Make account to put all these processes to work for your business!\n\nSiew Ann Tan\nFreelance B2B SaaS content writer and serial automator. Siew Ann is unapologetically proud of the number of personal and business workflows she has automated with Make (35+ and counting!).\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/how-to-convert-google-doc-to-pdf",
    "html": "How to Convert a Google Doc to PDF Automatically [Tutorial]\nOct 12, 2023\n\nGoogle Docs has democratized the way we collaborate on text, but let’s face it: When you need to lock down a document, guarantee its appearance across all devices, and ship it off for that crucial meeting, PDF is still the undisputed champion. \n\nIn order to convert a Google Doc to PDF, you could go through the manual slog of 'File' -> 'Download' -> 'PDF' that is natively available in Google Docs, but this option falls flat when you deal with PDF files on the regular - it consumes too much time and depends on a human input to be completed.  \n\nAs such, automating the Google Doc to PDF conversion is a must, as it will let you exchange an inefficient, resource-consuming process for a lean PDF converter tuned to your specific needs. \n\nIt's not about working harder; it's about working smarter - and in this tutorial, we’ll show you how to automatically convert Google Docs to PDF files using Make. \n\n1. Create a new Make scenario and add the Google Docs app\n\nThe first step is to create a new scenario from your Make dashboard. To do this, click the “Create a new scenario button” on the top right.\n\nThis will take you to the visual canvas, where we’ll build the automation.\n\nOnce there, click the “+” symbol at the center of the screen, search for the Google Docs app, and select the Watch Documents module.\n\nNow it’s time to set up the module. \n\nStart by clicking Add to connect your Google account to Make. \n\nThen, configure the fields as follows:\n\nIn Watch Documents, select “By Created Date”.\n\nIn Choose a Drive, select your main Google Drive.\n\nIn Folder ID, select the folder that contains the Google Docs that you want to convert to PDF (in our case, the folder is named “WHITEPAPERS - READY”).\n\nIn Limit, set the number of documents that you want to convert in each scenario run. For example, if you think you’ll need to convert 2 documents per day, the limit should be a number above 2. \n\nCheck the image below for reference:\n\nOnce done, click OK and move on to the next step.\n\n2. Add the second Google Docs module\n\nHover over the first module in your scenario to add another module. \n\nThen, search for the Google Docs app, and select the Download a Document module.\n\nStart configuring the module by clicking Add and selecting the same Google account that you connected to Make in the first step of this tutorial.\n\nThen, set up the module as follows:\n\nIn Choose a Drive, select your Google Drive.\n\nIn Document ID, toggle the switch to Map, and select the Document ID data operator.\n\nIn Type, choose the PDF Document option. \n\nSee the image below for reference and click OK to finish the configuration of the module:\n\n3. Add the Google Drive app to your scenario\n\nHover over the second module in your scenario to add another one, search for the Google Drive app, and select the Upload a File module.\n\nAs before, start configuring the module by clicking Add and selecting your Google account. \n\nThen, set up the module as follows:\n\nIn Enter a Folder ID, choose the Select from the list option. \n\nIn New Drive Location, select My Drive.\n\nIn New Folder Location, select the folder that will contain the automatically generated PDF files (in our case, that’s the “PDF WHITEPAPERS” folder).\n\nIn File choose the Google Docs - Download a Document option.\n\nCheck the image below for reference:\n\nWe’re almost done. Click OK and move on to the next step.\n\n4. Schedule, test, and save your scenario\n\nScheduling a scenario is nothing but indicating how often it will run. \n\nIn other words, it’s how we tell Make how often it should check for new Google Docs and convert them to PDF files. \n\nTo do this, hover your cursor over the little clock that lies at the left of the first module in your scenario, and click it. \n\nFor simplicity, we’re scheduling our scenario to run every day at the same time. Since we’ve set the limit to 2 files per run, Make will convert two files each day (if there are new files, of course).\n\nHere, you should set values that reflect your needs. \n\nFor example, if you want to convert 10 files a day (or 50 files every hour, for what matters), you should schedule your scenario accordingly.\n\nAfter defining these parameters, turn your scenario on, and save it.\n\nAnd that’s it! Before calling it a day, we performed a test run to see if the scenario worked as intended. \n\nFirst, we created a test document in the “WHITEPAPERS - READY” folder (where we store the Google Docs that need to be converted to PDF files).\n\nThen, we clicked the Run Once button at the bottom left of the scenario builder. \n\nA couple of seconds later, the same file in PDF format is in the destination folder (PDF WHITEPAPERS folder). \n\nConclusion: A sneak peek into the power of Make\n\nYou’ve just harnessed the power of Make to convert Google Docs to PDFs like clockwork, but let us tell you: This is just scratching the surface of what the platform is capable of.\n\nThink of this as an inspiring opening act in a concert that'll blow your mind. \n\nUnlike most products out there, Make is not a one-trick pony. Whether you're looking to automate contract creation, measure active customers, or create ChatGPT-powered bots, there’s likely a way to do it with Make.\n\nReady to bring your automation ideas to life? Get your Make account, and don’t let the momentum pass! \n\nMartin Etchegaray\nContent Manager and Senior Editor at Make. I enjoy writing and reading about history, science, and tech.\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/add-google-calendar-to-outlook",
    "html": "How to Add Google Calendar to Outlook Calendar [Tutorial]\nOct 18, 2023\n\nSyncing Google Calendar and Outlook Calendar automatically is a solution that anyone keeping track of events in both platforms (usually due to work-related reasons) has thought of, but that a few have managed to achieve.\n\nSure, integrating Google Calendar and Outlook Calendar sounds straightforward enough, but none of the platforms features built-in functionalities for this use case.\n\nAs a result, most users are left with the option of manually updating Outlook Calendar whenever they update Google Calendar (or vice versa), which is quite a chore.\n\nFortunately, this is not a dead-end road for those who strive for more efficiency. \n\nWith Make, you can build an automation that syncs the two calendar apps whenever a new event is added.\n\nIn other words, Make will automatically take one of these actions in Outlook Calendar whenever we do the same in its Google counterpart:\n\nAdd new events.\n\nUpdate existing events.\n\nDelete events.\n\nApart from a Google Calendar and an Outlook Calendar, you’ll just need a Make account to set up this automation - and you can get one here.\n\nBefore we dive into the tutorial for syncing Outlook Calendar and Google Calendar, here’s some quick context to understand how the integration works.\n\nHow the Google Calendar-Outlook Calendar integration works\n\nIn this tutorial, we’ll build an automation to update Outlook Calendar events based on what happens with the events in a Google Calendar. \n\nTo achieve that, Make needs to identify the Outlook Calendar event that corresponds to the Google Calendar event (if there is one).\n\nWe’ll set this up by tagging our Google Calendar events with their Outlook counterparts’ event ID, which is unique to each Outlook Calendar event:\n\nThen, whenever the automation runs, it will check our Google Calendar event for the event ID of a corresponding Outlook Calendar event.\n\nThe automation then uses the event ID’s presence (or absence) to determine whether to create a new Outlook Calendar event or update an existing one.\n\nIf the event ID is present in the Outlook Calendar, this means there already is a matching Outlook Calendar event for our Google Calendar event.\n\nThe automation will then update or delete the Outlook Calendar event depending on whether we’ve done the same in Google Calendar.\n\nBut if the event ID is not present in the Outlook Calendar, this means we don’t have a matching Outlook Calendar event for our Google Calendar one. In this case, the automation will create a new Outlook Calendar event for it.\n\nAfter that, it will update our Google Calendar event with the new Outlook Calendar event’s ID. Doing so helps the automation locate and update that Outlook Calendar event if we update or delete its Google Calendar equivalent later on.\n\nSo, here are the detailed steps for making this Google Calendar-Outlook Calendar sync a reality!\n\n1. Create a new Make scenario that watches for new Google Calendar events\n\nLog into your Make account and create a new scenario. \n\nAdd the Google Calendar > Watch Events module to the scenario and connect your Google account to it.\n\nThen configure the module as follows:\n\nUse the Calendar dropdown menu to select the Google Calendar that you want to sync with Outlook Calendar.\n\nSet the Watch Events dropdown option to By Updated Date. This will help the automation track both new and updated Google Calendar events.\n\nChange the Show deleted events setting to Yes to sync Google Calendar event deletions to Outlook Calendar.\n\nLeave the Query field blank unless you want to sync only events containing certain keywords.\n\nFill out the Limit field with the maximum number of events the automation should identify whenever it runs. We’ll use “10” for demonstration purposes, but you should pick a suitable number based on the typical number of events you need to sync to Outlook Calendar at any given time.\n\nCheck the image below for reference:\n\nClick OK to finish configuring the module.\n\n2. Add a module to create new Outlook Calendar events for new Google Calendar ones\n\nNow, we’ll add the Microsoft 365 Calendar > Create an Event module, which will create new Outlook Calendar events for new Google Calendar ones.\n\nNote: You can add modules by hovering your cursor over the right handle of an existing module, and then clicking the Add another module option that pops up.\n\nConnect the module to your Microsoft account and use the Calendar ID dropdown menu to select the calendar on which new Outlook Calendar events should be created.\n\nThen, map the Google Calendar > Watch Events module’s data items to the various Outlook Calendar event fields so that your new Outlook Calendar event will contain the same data as its Google Calendar counterpart.\n\nFor example:\n\nMap the Summary item to the Subject field.\n\nMap the Start item to the Start Date field.\n\nMap the End item to the End Date field.\n\nMap the Description item to the Body Content field.\n\nMap the Location item to the Location field.\n\nSee this image for reference:\n\nDoing this will allow you to keep the same information in both calendars, avoiding potential problems associated with the lack of key data.\n\nClick OK when you’re done.\n\n3. Add a module to update the original Google Calendar event with its corresponding Outlook Calendar event’s ID\n\nAs mentioned, the automation checks our Google Calendar event for the event ID of its corresponding Outlook Calendar event to determine the appropriate action to take in Outlook Calendar.\n\nSo, we’ll use the Google Calendar > Update an Event module to add the Outlook Calendar event’s ID to our Google Calendar event’s description.\n\nAdd this module after the Microsoft 365 Calendar > Create an Event one and connect your Google account to it.\n\nClick the Map switch next to the Calendar ID field so you can select the same calendar you selected in Step 1 of this tutorial.\n\nHowever, enable the Map switch next to the Event ID field so you can map the Event ID item from the Google Calendar > Watch Events module to it.\n\nCheck this image for reference:\n\nEnable the Show advanced settings switch at the bottom of the module to display the Description field. Then copy and paste this function into it:\n\n{{if(1.description != null; 1.description + newline + newline + \"(Outlook Calendar Event ID: \" + 2.id + \")\"; \"(Outlook Calendar Event ID: \" + 2.id + \")\")}}\n\nThe Description field should look like this:\n\nThis function checks if our Google Calendar event has an existing description, then adds the event’s corresponding Outlook Calendar event ID to it in an appropriate manner:\n\nIf the Google Calendar event has a description, the function recreates the description and appends “(Outlook Calendar Event ID: The Outlook Calendar event ID goes here)” after it.\n\nBut if the event’s description is empty, the function simply adds the “(Outlook Calendar Event ID: The Outlook Calendar event ID goes here)” text to it.\n\nFor example, here’s how our Google Calendar event description will look like with the Outlook Calendar event ID appended after its initial content:\n\nClick OK to move to the next step.\n\n4. Add a text parser module to identify a Google Calendar event’s corresponding Outlook Calendar event ID\n\nNext, we’ll use the Text parser > Match pattern module to search our Google Calendar events for an Outlook Calendar event ID.\n\nAdd this module between the Google Calendar > Watch Events module and the Microsoft 365 Calendar > Create an Event one.\n\nThe text parser will:\n\nLook for the “(Outlook Calendar Event ID: The Outlook Calendar event ID goes here)” text in our Google Calendar event’s description.\n\nIf this text exists, the module will extract the event’s corresponding Outlook Calendar event ID from it.\n\nAnd we’ll configure the text parser like this:\n\nPattern: Type \\(Outlook Calendar Event ID: (.*)\\) into it.\n\nContinue the execution of the route even if the module finds no matches: Change this setting to Yes because we want the automation to continue taking certain actions even if it can’t find an Outlook Calendar event ID in our Google Calendar event’s description.\n\nText: Map the Description item from the Google Calendar > Watch Events module here.\n\nSee the image below for reference:\n\nClick OK to finish configuring the text parser.\n\n5. Add a module to match existing Outlook Calendar events with updated Google Calendar events\n\nThrough steps 2 and 3 above we’ve set up our scenario to create new Outlook Calendar events for new Google Calendar ones.\n\nNow, let’s build the functionality for updating existing Outlook Calendar events when we update their Google Calendar counterparts.\n\nAdd a new Microsoft 365 Calendar > Update an Event module to your scenario. But instead of connecting it at the end of the scenario, click and drag the module’s left handle toward the Text parser module.\n\nDoing so will automatically create a router that splits your scenario into two routes:\n\nWe’ll configure the scenario routes later. For now, let’s set up our new module.\n\nConnect your Microsoft account to it and map the Text parser module’s $1 string element to the Event ID field (this string element will contain the event ID for our Google Calendar’s corresponding Outlook Calendar event if there is one).\n\nThen map the Google Calendar > Watch Events module’s data items to the various Outlook Calendar event fields - like how we did for the Microsoft 365 Calendar > Create an Event module in Step 2 above.\n\nDoing so helps update our existing Outlook Calendar event with the updated data in its Google Calendar counterpart.\n\nSee this image for reference:\n\nClick OK to finish configuring the module.\n\n6. Add a module to delete Outlook Calendar events when they’re deleted in Google Calendar\n\nTo sync Google Calendar event deletions to Outlook Calendar, we’ll add the Microsoft 365 Calendar > Delete an Event module next.\n\nConnect this module to the router to create a third scenario route, like so:\n\nThen click the module to:\n\nConnect it to your Microsoft account.\n\nMap the Text parser module’s $1 string element to the Event ID field.\n\nSee the image below for reference:\n\nClick OK to finish configuring the module.\n\n7. Add route filters that determine whether to create a new Outlook Calendar event or update or delete an existing one\n\nWe’ve set up three separate routes for creating, updating, and deleting Outlook Calendar events. \n\nNow, we need to tell the automation when it should take a certain action over another.\n\nWe’ll do so by adding a filter to each route, which will allow the automation to proceed down the route only if certain conditions are met.\n\nClick the wrench icon between the router module and the Microsoft 365 Calendar > Create an Event one > click Set up a filter.\n\nGive your filter a descriptive label like “Outlook Calendar event doesn’t exist”, and then map the Text parser module’s $1 string element to the condition’s first operator.\n\nClick the Text operators: Equal to setting and change it to Basic operators > Does not exist. \n\nThis way, our automation will create a new Outlook Calendar event if our Google Calendar event doesn’t contain an Outlook Calendar event ID (which it would if there was a matching Outlook Calendar event for it).\n\nCheck this image for reference:\n\nClick OK to finish setting up this filter.\n\nThen click the wrench icon between the router module and the Microsoft 365 Calendar > Update an Event one to add a second filter.\n\nSet this filter’s first condition to $1 string element > Basic operators: Exists.\n\nAfter that, click Add AND rule to add a second condition.\n\nMap the Status item from the Google Calendar > Watch Events module to this condition’s first operator. \n\nChange the Text operators: Equal to setting to Text operators: Not equal to, then type “cancelled” in lowercase - and with two l’s - into the second operator.\n\nSee this image for reference:\n\nHere, our automation will update our Outlook Calendar event if:\n\nIt can find the event’s event ID in our Google Calendar event description.\n\nThat Google Calendar event doesn’t have the “cancelled” status (in other words, it hasn’t been deleted).\n\nClick OK to move on to setting up the filter for the Microsoft 365 Calendar > Delete an Event route.\n\nSet up this last filter in the same way you set up the second filter for the Microsoft 365 Calendar > Update an Event route.\n\nThis time, however, change the second condition’s text operator to Text operators: Equal to - so that the automation will delete events with the “cancelled” status.\n\nView this image for reference:\n\nClick OK, and you’re done setting up your scenario!\n\nIt should look like this:\n\n8. Turn on and run your scenario to start syncing your Google and Outlook calendars\n\nNow, let’s put the automation to work.\n\nIf you have existing Google Calendar events to sync to Outlook Calendar, identify the event with the earliest start date.\n\nThen right-click the Google Calendar > Watch Events module, select Choose where to start, select Since specific date, and fill out the date field with that start date.\n\nClick OK once finished.\n\nClick the Run once button on the bottom left to start syncing these Google Calendar events to Outlook Calendar.\n\nNote: Depending on the number of Google Calendar events you need to sync to Outlook Calendar and the event limit you’ve set for the Google Calendar > Watch Events module, you may need to re-run the scenario multiple times until all your Google Calendar events have been synced.\n\nTemporarily increasing your event limit may help reduce the number of times you need to re-run the scenario.\n\nAnd with our existing Google Calendar events synced, we can activate the scenario to sync all future events we create, update, or delete.\n\nRight-click the Google Calendar > Watch Events module > select Choose where to start > select From now on > click OK.\n\nThen use the schedule setting at the bottom of the visual editor to set up how regularly you want to sync Google Calendar with Outlook Calendar.\n\nFinally, turn your scenario on. You made it!\n\nWhat about adding an Outlook Calendar to Google Calendar instead?\n\nYes, this is possible!\n\nSetting up this reverse sync involves swapping your scenario’s Google Calendar modules with Outlook Calendar ones and vice versa, and adjusting the mapping of your modules’ data items to match.\n\nHere’s a sneak peek of how that scenario should look:\n\nSo, are you ready to sync your Google Calendar events to Outlook Calendar? Or even take a shot at setting up a two-way sync?\n\nThen sign up for a free Make account here, and get cracking!\n\nSiew Ann Tan\nFreelance B2B SaaS content writer and serial automator. Siew Ann is unapologetically proud of the number of personal and business workflows she has automated with Make (35+ and counting!).\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/how-to-automatically-send-emails-from-google-sheets",
    "html": "Tutorial: How to Automatically Send Emails From Google Sheets\nNov 28, 2023\n\nWith Gmail’s mail merge feature, you can send mass emails by uploading a CSV file - such as one created in Google Sheets - containing your recipients’ names and email addresses.\n\nBut the feature stops short of letting you customize your emails with other content. For example, it can’t insert personalized greetings for each recipient. As a result, it isn’t the most useful solution for mass-sending marketing messages or holiday greetings, for example.\n\nBut when you add Make into the equation, this obstacle disappears.\n\nAdding Make will level up your emails  \n\nMake can automatically populate emails with data from a Google Sheet, then mass-send these emails via the Gmail app, with a single click of a button. Subject to our email provider’s daily sending limits, there’s no cap on the number of emails Make can help us send.\n\nIt can also mark these emails as “Sent” in a Google Sheet, so we know we’ve already emailed these recipients.\n\nMake’s free plan is perfect for trying out email automation. So, sign up for an account here and follow along as we cover how to send emails from Google Sheets, step by step.\n\n1. Create a Google Sheet and add your email data\n\nFirst, create a new Google Sheet and set up column headings for the email data you want to populate your emails with.\n\nAt the very least, there should be a data column for your recipients’ email addresses. But if you want to go further, you can also have columns for:\n\nYour recipients’ first names.\n\nA few simple sentences to personalize the email for each recipient.\n\nAfter that, add a last column with the heading “Email status”. We’ll use this column to keep track of whether each recipient has successfully been sent an email.\n\nOnce you’ve added your column headings, fill out the first row with test data, such as your first name and your email address.\n\nWe’ll use this data to test the scenario, and make sure it works, before using it to email our recipients - so we can catch anything in case it goes wrong.\n\nSo, your Google Sheet should look something like this:\n\n2. Create a Make scenario and add the “Search Rows in Google Sheets” module\n\nNow, log into Make and create a new scenario.\n\nAdd the Google Sheets > Search Rows module to the scenario and connect your Google account to it.\n\nWe’ll then set up the module like this so it can search for the data in our Google Sheet:\n\nEnter a Spreadsheet ID and Sheet Name: Leave this setting as Select from My Drive.\n\nSpreadsheet: Select the Google Sheet you created earlier.\n\nSheet Name: Select the specific sheet in your Google Sheet that contains your email data.\n\nTable contains headers: Leave this setting as Yes.\n\nColumn range: Set this to A-Z to search for all data in columns A to Z of your Google Sheet. It doesn’t matter if you aren’t going to fill out all these columns with data. But if your Google Sheet’s columns extend past Z to include columns AA, AB, and so on, you’ll need to adjust the Column range setting accordingly.\n\nLeave the rest of the module’s settings blank. The settings should look like this:\n\nClick OK to finish configuring the module.\n\n3. Add the “Send an Email in Gmail” module\n\nNext, add the Gmail > Send an Email module to the scenario and connect your Google account to it.\n\nWe’ll use this module to send emails containing our Google Sheet data to our recipients. But feel free to replace Gmail with a different email app like Outlook and tweak the module setup process to match.\n\nIf you’re using Gmail, here’s how to set up the module:\n\nTo: Click Add a recipient to add an Email address 1 field setting. Map the “Email address” data item from the Google Sheets module here.\n\nSubject: Fill out your email’s subject, mapping any data items you want to personalize the subject with. For example, your subject could be “Best wishes, [“First name” data item]!”\n\nContent: Fill out your email’s contents. You can use HTML tags to format your email. Likewise, map any data items you want to personalize your email content with here.\n\nOptional: Enable the Show advanced settings switch to customize your email’s “From” address and CC and BCC recipients.\n\nSee this image for reference:\n\nClick OK to finish configuring the module.\n\n4. Add a filter between the “Search Rows in Google Sheets” and “Send an Email in Gmail” modules\n\nNow, we’ll prevent Make from sending emails to recipients we’ve already emailed previously.\n\nWe’ll do so by clicking the dotted line between the Google Sheets > Search Rows and Gmail > Send an Email modules, which will add a filter between them.\n\nLabel the filter with a descriptive name like “Email not sent to recipient yet.”\n\nMap the Google Sheet module’s “Email status” data item to the condition’s first operator and change the Text operators: Equal to setting to Text operators: Not equal to.\n\nFinally, type “Sent” into the condition’s second operator.\n\nLike so:\n\nThis way, we are allowing the scenario to proceed with sending an email only if the email status for the Google Sheet row doesn’t say “Sent.”\n\nClick OK to finish configuring the module.\n\n5. Add the “Update Row in Google Sheets” module\n\nAfter Make has emailed our recipients, we want it to update our Google Sheet’s “Email status” column with the word “Sent.”\n\nSo, we’ll add the Google Sheets > Update a Row module next. Connect this module to your Google account like you did in Step 2 earlier.\n\nLeave the Choose a Method dropdown setting as Select by path, then use the Choose a Drive, Spreadsheet ID, and Sheet Name settings to select your Google Sheet - and the specific sheet in it that contains your email data.\n\nMap the “Row number” data item from the first Google Sheets module to the Row number setting. This helps Make update the Google Sheet row whose data it has just used to send an email.\n\nLeave the Table contains headings dropdown setting as Yes, then type “Sent” into the Values > Email status field.\n\nView this image for reference:\n\nClick OK to finish configuring the module.\n\n6. Add a filter between the “Send an Email in Gmail” and “Update a Row in Google Sheets” modules\n\nMake should update the Google Sheet row’s “Email status” column with “Sent” only if it has successfully sent the email. So, we’ll add a filter between the Gmail > Send an Email and Google Sheets > Update a Row modules to do just that.\n\nClick the dotted line between the two modules to launch the Set up a filter window.\n\nGive the filter a descriptive label like “If email sent successfully.” Map the “Message ID” data item from the Gmail module to the condition’s first operator and change the Text operators: Equal to setting to Basic operators: Exists.\n\nCheck this image for reference:\n\nWith this filter setting, Make will mark a Google Sheet row’s email status as “Sent” only if the Gmail module had created a message ID. Which it will have, if it had successfully sent the email.\n\nClick OK to finish configuring the module - and the entire scenario, too!\n\nThe scenario should look like this:\n\n7. Test and run the scenario\n\nClick the Run once button at the bottom left of the scenario editor to run your scenario.\n\nIf everything is working correctly, you should receive an email to the test email address you’d entered into the Google Sheet:\n\nThe “Email status” for that Google Sheet row should have also been updated to say “Sent.”\n\nYou can now replace your Google Sheet’s test data with real data, and click Run once again to mass-email your recipients.\n\nThe scenario will use the “Email status” column to check whether it has already sent an email to a certain recipient, so you don’t have to delete recipients from your Google Sheet once you’ve emailed them.\n\nHowever, it may still be a good idea to do so to keep your Google Sheet clean.\n\nBonus: Auto-send email from Excel\n\nIt’s also possible to use this same scenario to send email from Excel automatically!\n\nInstead of adding our email data to a Google Sheet, we’ll add it to an Excel file first. After that, we’ll import this file into Google Sheets to get our data into the latter app.\n\nThe rest of the steps to automate email from Excel are the same as those from Step 2 of this tutorial onward.\n\nBut whether you decide to automatically send emails from Google Sheets or Excel, you’ll need a Make account. So, sign up for one here, and experience how the platform can help make mass-emailing effortless.\n\nSiew Ann Tan\nFreelance B2B SaaS content writer and serial automator. Siew Ann is unapologetically proud of the number of personal and business workflows she has automated with Make (35+ and counting!).\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases/how-to-make-an-api-call-tutorial",
    "html": "How to Make an API Call With Make [Tutorial]\nMar 10, 2021 | 7 minutes\n\nOne of the most underrated aspects about Make lies within the “Make an API call” module many of our apps feature. \n\nIn simple terms, this module is a door to API functions that are not available as standalone Make app modules. \n\nWhere do these functions come from? Easy: they are featured in the original APIs that power Make apps. \n\nTake the Make Shopify app, for example. \n\nAmong the modules available for this app, there is one to “Get an order”. But what if you need to get all orders at once? \n\nHere’s where the “Make an API call” module comes in handy, because:\n\nThere isn’t a specific Make module to get all orders\n\nThis function is supported by the original Shopify API\n\nSo, if you are using Make to automate Shopify and need to get all the orders from a specific period, you can use the “Make an API call” module to do it.  \n\nIn other words, this module provides you with all the API functions you need, even if these are not available as Make modules. \n\nPretty neat, huh? \n\nIn this article, we will show you how to use the “Make an API call” module. However, before diving into the details, let’s go over the basics to understand how APIs work.\n\nWhat is an API?\n\nAn Application Programming Interface (API) is a piece of intermediary software that defines interactions between applications. \n\nSimply put, APIs are a set of rules and functions that determine access to app features and data.\n\nThe functions are commonly referred to as “endpoints”. An endpoint is a URL that when an HTTP request is made, it will instruct the app to take a particular action.\n\nOn the other hand, rules are set to establish limits on what users can do with those endpoints. \n\nLet’s illustrate with a real-life example: Twitter. \n\nAs with many other apps, Twitter offers a public API featuring plenty of useful endpoints, which in turn are bound by specific rules. \n\nOne of the available endpoints allows you to automatically look up tweets. \n\nThere is also a rule to limit the use of this endpoint. It establishes that you can look up to 900 tweets every 15 minutes using the Twitter API. \n\nGenerally speaking, this is what you can expect from APIs: specific functions, bound by rules, to automate actions, processes, and tasks.\n\nThis is why APIs are key elements of automation and the “API economy”. \n\nBy removing complexity and providing a framework so apps can “talk” to each other, they set the basis for the kind of automation Make allows for. \n\nGet full access to the most popular APIs with Make\n\nThe rules and functions featured by APIs are laid out in documentation, which is often (but not always) available on company sites. \n\nFor example, the Shopify API is documented in detail at: https://shopify.dev/docs/admin-api\n\nGoing through these docs you will notice that an API consists of a range of different endpoints for specific actions. \n\nFor example, here is a Shopify API endpoint which can be used to retrieve all the orders of a particular shop on Shopify.\n\nThe endpoints that the APIs of these apps offer are housed inside the Make platform as app modules.\n\nBehind the scenes, these app modules communicate with the Shopify API and make requests based on the task that has to be performed. \n\nFor example, the “Watch orders” module in the list above makes a request to the Shopify API endpoint, which in turn sends back a list of orders from the Shopify store.\n\nThis is how Make works behind the scenes: by simplifying the access and use of thousands of endpoints. \n\nHow to use the 'Make an API call' module\n\nAs we shared above, the “Make an API” call is a door to API endpoints that aren’t featured as Make modules. \n\nThis module is vital for one reason: it allows you to access new endpoints as they get released by the apps who own the APIs. \n\nAs a result, you don’t have to wait until the Make team creates new modules for new API endpoints. \n\nIf you need to use a newly released API endpoint right away, the “Make an API call” module will do the trick until the corresponding endpoint is officially launched. \n\nAt the moment this module is available in the most popular apps like Shopify, Airtable, Google Sheets,  Twitter, and Slack. \n\nSince these are the apps that get updated the most, having the “Make an API call” guarantees you full API access via Make. \n\nThe sole purpose of this module is to provide you with the possibility to make requests to an API. \n\nTo make it work, you need to manually enter the following data into the module’s fields:\n\nAPI endpoint (i.e. the URL)\n\nAPI version\n\nQuery string\n\nAnd all the other necessary parameters to make a successful call to the API.\n\nObviously, you don’t need to know beforehand what to enter in these fields. This is where API documentation kicks in.\n\nReferencing the API documentation\n\nAs seen earlier with the Shopify API example, the documentation provides a clear set of rules that you need to follow in order to make an API call. \n\nNow, let’s see how to set up the “Make an API call” module for a Shopify API endpoint that is not available as an Make module. \n\nThe endpoint we are gonna call allows you to get a list of orders from your Shopify store.\n\nFor example, with the information available on the endpoint above, we fill the fields the 'Make an API call' module like this:\n\nURL: orders.json \n\nRequest method type: GET\n\nQuery string will consist of one item with: key = status / value = any\n\nOnce all the fields are filled, you will need to click “OK”. \n\nAfter doing this, you can add a Google Sheets module, execute the Make scenario, and send all your Shopify orders to a spreadsheet. \n\nNow, let’s move on and see the module in action with two practical examples. \n\n1. Making an API call to retrieve a count of products on Shopify\n\nIn this example we are going to use the “Make an API call” module to retrieve a count of products. Naturally, there is an available Shopify API endpoint to perform this action: \n\nFirst we will enter the data that the documentation provides in the 'Make an API call' module.\n\nLet's take it step by step.\n\nThe first step is to define the URL of the request. In this case, it is important that you take in consideration the hint below the field. \n\nYou only need to provide the path relative to the full URL of the endpoint, which means you only need to enter products/count.json\n\nSo, in the “Make an API call” module, you will have enter this data into the corresponding field.\n\nNext, you need to enter the version of the API you would like to make a request to. \n\nThe API version in this case is clearly shown on the endpoint URL.\n\nAgain, fill in the field in the Make module, like this:\n\nFinally, you will need to select the API request method. In this case it will be a GET request, since this is what the API endpoint allows for. \n\nDon’t forget to set the API request method to “GET” on the Make module:\n\nAnd just like that, the module is now fully set up to make an API request to the endpoint.\n\nLet's execute the scenario to see the results.\n\nAs you can see the module was successfully executed. \n\nThe API call was performed, retrieving the total number of products on the Shopify store (that was just two products). \n\n2. Making an API call to get Discord channel information\n\nLet's take a look at another example with another popular app: Discord. \n\nMake features many Discord modules, but none for getting a channel’s information. \n\nHowever, this action is available as an endpoint on the Discord API. The endpoint is called “Get Channel”, and can be found within the Discord API documentation.\n\nNow, let's configure an API call to this endpoint.\n\nThe URL field will once again be relative to https://discordapp.com/api.\n\nTherefore, we only need to include the endpoint section of the URL which is /channels/{channel.id}. \n\nThe channel ID on Discord can be obtained by opening the channel and copying the second number from the URL.\n\nOn the “Make an API call” module, it will look like this:\n\nAs you can see, not every API is the same. \n\nThe Discord API does not require us to provide an API version like the Shopify one. \n\nAlso, some APIs will also require you to enter more data. All this information will be available on the API documentation pages. As long as you look at the endpoint in there, you will be able to pick it up from there. \n\nTo conclude setting up the “Make an API call” module, set the “Method” field to “GET”, and click “OK”.\n\nNow that the module is fully set up, let's go ahead and execute it!\n\nAs you can see it has been successfully executed. \n\nAfter making the request to the Discord “Get Channel API” endpoint, Make retrieves the information for that specific Discord channel. \n\nConclusion\n\nHopefully, you can now take advantage of the “Make an API call” module, and achieve more with your apps.\n\nJust keep this in mind at all times when thinking about the possibilities this module offers:\n\nFull access to APIs is a key functionality not every automation platform provides\n\nCompanies that offer APIs want you to automate and make the most of them\n\nThe “Make an API call” module makes it possible to easily perform a request to any API endpoint\n\nDocumentation is the main reference point you will need to fill out the fields in the Make module\n\n    Happy automating!\n\nDimitris Kamaritis\n\nSolutions Architect at Make. I’m passionate about helping businesses and entrepreneurs build digital solutions and automating their workflows!\n\nLike the article? Spread the word.\nFacebook\nTwitter\nLinkedIn\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  },
  {
    "title": "",
    "url": "https://www.make.com/en/use-cases",
    "html": "Featured use case\n\nHow to Make an API Call With Make [Tutorial]\n\nLearn how to use the \"Make an API call\" module in Make. Get access to any API you want to automate your tasks!\n\nREAD MORE →\nLatest updates\n\nTopics\n\nAll topics\nSearch\n\nShowing 1 - 9 of 152 use cases\n\nSort By\n\nNewest\nEmail\nNov 28, 2023\nTutorial: How to Automatically Send Emails From Google Sheets\nProductivity\nOct 18, 2023\nHow to Add Google Calendar to Outlook Calendar [Tutorial]\nProductivity\nOct 12, 2023\nHow to Convert a Google Doc to PDF Automatically [Tutorial]\nAccounting\nFinance\nOct 08, 2023\nHow to Get Email Reminders for Xero Invoices That are Due Soon\nEcommerce\nData\nOct 02, 2023\nHow to Connect Shopify Forms to HighLevel [Tutorial]\nProductivity\nEmail\nSep 21, 2023\nHow to Save Emails to Google Drive Automatically [Tutorial]\nProductivity\nFinance\nSep 13, 2023\nHow to Build a Meeting Cost Calculator to Save Time & Money\nMarketing\nSep 12, 2023\nHow to Repurpose TikTok Videos into LinkedIn Posts [Tutorial]\nProductivity\nAug 31, 2023\nHow to Skip Specific Days When Scheduling Tasks in Todoist\nLoad More\nMost popular use cases\nProductivity\nOct 12, 2023\nHow to Convert a Google Doc to PDF Automatically [Tutorial]\nAccounting\nFinance\nOct 08, 2023\nHow to Get Email Reminders for Xero Invoices That are Due Soon\nEmail\nNov 28, 2023\nTutorial: How to Automatically Send Emails From Google Sheets\nProductivity\nOct 18, 2023\nHow to Add Google Calendar to Outlook Calendar [Tutorial]\nProductivity\nOct 12, 2023\nHow to Convert a Google Doc to PDF Automatically [Tutorial]\nAccounting\nFinance\nOct 08, 2023\nHow to Get Email Reminders for Xero Invoices That are Due Soon\nEmail\nNov 28, 2023\nTutorial: How to Automatically Send Emails From Google Sheets\nProductivity\nOct 18, 2023\nHow to Add Google Calendar to Outlook Calendar [Tutorial]\nProductivity\nOct 12, 2023\nHow to Convert a Google Doc to PDF Automatically [Tutorial]\nAccounting\nFinance\nOct 08, 2023\nHow to Get Email Reminders for Xero Invoices That are Due Soon\n1\n2\n3\n4\nGet monthly automation inspiration\nJoin 75,000+ Makers and get the freshest content delivered straight to your inbox.\nSubscribe"
  }
]
