[
  {
    "title": "Detach a contact from a tag",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/untag-contact/",
    "html": "Detach a contact from a tag\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/tags/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can untag a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nResponse\n\nThis will return a Tag model for the tag that was removed from the contact."
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "HTTP Responses",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/errors/http-responses/",
    "html": "HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The codes listed below are often used, and the API may use others. Note that 4xx and 5xx responses may be returned for any request and clients should cater for them.\n\nResponse Code\tDescription\n400\tBad Request -- General client error, possibly malformed data.\n401\tUnauthorized -- The API Key was not authorised (or no API Key was found).\n402\tPayment Required -- The API is not available on your current plan.\n403\tForbidden -- The request is not allowed.\n404\tNot Found -- The resource was not found.\n405\tMethod Not Allowed -- The resource does not accept the HTTP method.\n406\tNot Acceptable -- The resource cannot return the client's required content type.\n408\tRequest Timeout -- The server would not wait any longer for the client.\n409\tConflict - Multiple existing users match this email address - must be more specific using user_id\n415\tUnsupported Media Type - The server doesn't accept the submitted content-type.\n422\tUnprocessable Entity -- The data was well-formed but invalid.\n429\tToo Many Requests -- The client has reached or exceeded a rate limit, or the server is overloaded.\n500, 502, 503, 504\tServer errors - something went wrong with Intercom's servers. These responses are most likely momentary operational errors (e.g. temporary unavailability), and, as a result, requests should be retried once."
  },
  {
    "title": "The team model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/teams/teams-model/",
    "html": "The team model\nExample Team Object\n{\\n    \\\"type\\\": \\\"team\\\",\\n    \\\"id\\\": \\\"814865\\\",\\n    \\\"name\\\": \\\"Example Team\\\",\\n    \\\"admin_ids\\\": [\\n        493881\\n    ]\\n}\n\n\nTeams are groups of admins in Intercom.\n\nTeam Object\nKey\tType\tDescription\ntype\tstring\tValue is team.\nid\tstring\tThe id of the team\nname\tstring\tThe name of the team\nadmin_ids\tlist\tThe list of admin id's that are a part of the team"
  },
  {
    "title": "Retrieve a team",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/teams/view-a-team/",
    "html": "Retrieve a team\nExample Request & Response\n$ curl https://api.intercom.io/teams/2744328 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n\n{\n    \"admin_ids\": [\n        646303,\n        814860\n    ],\n    \"id\": \"2744328\",\n    \"name\": \"the_a_team\",\n    \"type\": \"team\"\n}\n\n\nYou can fetch the details of a single team, containing an array of admins that belong to this team.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given team.\nResponse\n\nThis will return a Team Object."
  },
  {
    "title": "Untag companies",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/untag-companies/",
    "html": "Untag companies\nExample Request & Response\n$ curl https://api.intercom.io/tags \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d'\n{\n  \"name\": \"Independent\",\n  \"companies\": [\n    {\n      \"id\" : \"53427b7ecce5722303000003\",\n      \"untag\": true\n    }\n  ]\n}\n\nHTTP/1.1 200 Ok\n\n{\n  \"type\": \"tag\",\n  \"name\": \"Follow Up\",\n  \"id\": \"17513\"\n}\n\n\nYou can untag a single or a list of companies.\n\nRequest Body Parameters\nParameters\tType\tRequired\tDescription\nname\tString\tYes\tThe name of the tag which will be untagged from the.\ncompanies\tObject\tYes\tAn array of objects with the unique id or company_id of the company to be untagged, and the untag boolean set to true.\nResponse\n\nThis will return a Tag model for the tag that was unapplied to the given company."
  },
  {
    "title": "Tag companies",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/tag-companies/",
    "html": "Tag companies\nExample Request & Response\n$ curl https://api.intercom.io/tags \\\n-XPOST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d'\n{\n  \"name\": \"Independent\",\n  \"companies\": [\n    {\n      \"id\" : \"53427b7ecce5722303000003\"\n    }\n  ]\n}\n\nHTTP/1.1 200 Ok\n\n{\n  \"type\": \"tag\",\n  \"name\": \"Independent\",\n  \"id\": \"17513\"\n}\n\nintercom.tags.tag(name: 'Independent', users: [{ id: \"42ea2f1b93891f6a99000427\" }, { email: \"foo@bar.com\" }])\n\n<?php\n# Note that you can use either id, user_id or email to tag a user.\n# You only need to use one per user, e.g. the below will tag\n# three users if each identifier is for a different, unique user\n$intercom->tags->tag([\n    \"name\" => \"VIPs\",\n    \"users\" => [\n        [\"id\" => \"5977e20941abfc5aae4552d1\"],\n        [\"user_id\" => \"12345\"],\n        [\"email\" => \"camus@phil.com\"]\n    ]\n]);\n?>\n\nUser one = new User().setEmail(\"river@serenity.io\");\nUser two = new User().setEmail(\"simon@serenity.io\")\nList<User> users = Lists.newArrayList(one, two);\nTag.tag(tag, new UserCollection(users));\n\n\nYou can tag a single or a list of companies.\n\nRequest Body Parameters\nParameters\tType\tRequired\tDescription\nname\tString\tYes\tThe name of the tag, which will be created if not found.\ncompanies\tObject\tYes\tAn array of objects with the unique id or company_id of the company to be tagged.\nResponse\n\nThis will return a Tag Model for the tag that was applied to the given company."
  },
  {
    "title": "List all tags",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/list-tags-for-an-app/",
    "html": "List all tags\nExample List Tag Request\n$ curl https://api.intercom.io/tags \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\n{\n  \"type\": \"list\",\n  \"data\": [\n    {\n      \"type\": \"tag\",\n      \"name\": \"Beta User\",\n      \"id\": 1\n    },\n    {\n      \"type\": \"tag\",\n      \"name\": \"Amazing User\",\n      \"id\": 2\n    },\n    {\n      \"type\": \"tag\",\n      \"name\": \"Epic User\",\n      \"id\": 3\n    }\n  ]\n}\n\nintercom.tags.all.each { ... }\n\n<?php\n$tags= $intercom->tags->getTags([]);\nforeach ($tags->tags as $tag) {\n    print \"id:\".$tag->id.\" name:\".$tag->name.\"\\n\";\n}?>\n\nTagCollection tags = Tag.list();\nwhile (tags.hasNext()) {\n    out.println(tags.next().getId());\n}\n\n\nYou can list all tags.\n\nResponse\n\nA list of tag objects.\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'list'\ntags\tarray\tA list of tag objects"
  },
  {
    "title": "Create or update a tag",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/create-and-update-tags/",
    "html": "Create or update a tag\nExample Request & Response\n$ curl https://api.intercom.io/tags \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d'\n{\n  \"name\": \"Independent\"\n}'\n\nHTTP/1.1 200 Ok\n\n{\n  \"type\": \"tag\",\n  \"name\": \"Independent\",\n  \"id\": \"17513\"\n}\n\nintercom.tags.tag(name: 'Independent', users: [{ id: \"42ea2f1b93891f6a99000427\" }])\n\n<?php\n$intercom->tags->tag([\"name\" => \"php-tag\"]);\n?>\n\nTag t = new Tag().setName(\"Independent\");\nt = Tag.create(t);\n\n\nYou can create or update a tag.\n\nRequest Body Parameters\nAttribute\tRequired\tDescription\nname\tYes\tThe name of the tag, which will be created if not found, or the new name for the tag if this is an update request. Names are case insensitive.\nid\tOnly for update\tThe id of tag to updates.\nResponse\n\nThis will return a Tag Model of the tag you just created or updated."
  },
  {
    "title": "Delete a tag",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/delete-a-tag/",
    "html": "Delete a tag\nExample Delete Tag Request\n$ curl https://api.intercom.io/tags/17513 \\\n-X DELETE \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\n# Not exposed in Ruby client\n\n<?php\n// Not exposed in PHP client\n?>\n\nTag.delete(tag);\n\n\nYou can delete a single tag.\n\nRequest Path Parameters\nParemeter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of the tag.\nResponse\n\nThis will return a Tag Model of the tag you just deleted."
  },
  {
    "title": "Detach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/detach-a-tag-from-a-conversation/",
    "html": "Detach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags/<tag_id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can untag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nResponse\n\nThis will return a Tag model for the tag that was removed from the conversation."
  },
  {
    "title": "Retrieve a segment",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/segments/view-a-segment/",
    "html": "Retrieve a segment\nExample Request & Response\n$ curl https://api.intercom.io/segments/53203e244cba153d39000062 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment\",\n  \"id\": \"53203e244cba153d39000062\",\n  \"name\": \"New\",\n  \"created_at\": 1394621988,\n  \"updated_at\": 1394622004\n}\n\nintercom.segments.find(:id => '1234')\n\nSegment segment = Segment.find(\"1234\");\n\n\nYou can fetch the details of a single segment.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identified of a given segment.\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIncludes the count of contacts that belong to a given segment.\nResponse\n\nThis will return a Segment Model."
  },
  {
    "title": "List all subscription types",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/subscription-types/list-all-subscription-types/",
    "html": "List all subscription types\nExample List Subscription Types Request\ncurlhttp\n$ curl https://api.intercom.io/subscription_types \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json'\n\n\nYou can list all subscription types.\n\nResponse\n\nA list of subscription type objects.\n\nKey\tType\tDescription\ntype\tString\tvalue is 'list'\ndata\tArray\tA list of subscription type objects"
  },
  {
    "title": "The subscription type model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/subscription-types/the-subscription-types-model/",
    "html": "The subscription type model\nExample Subscription type Object\n{\\n  \\\"type\\\": \\\"subscription\\\",\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"state\\\": \\\"live\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\",\\n  \\\"default_translation\\\": {\\n    \\\"name\\\": \\\"Announcements\\\",\\n    \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n    \\\"locale\\\": \\\"en\\\"\\n  },\\n  \\\"translations\\\": [\\n    {\\n      \\\"name\\\": \\\"Ankündigungen\\\",\\n      \\\"description\\\": \\\"Angebote, Produkt- und Funktionsankündigungen\\\",\\n      \\\"locale\\\": \\\"de\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"Announcements\\\",\\n      \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n      \\\"locale\\\": \\\"en\\\"\\n    }\\n  ]\\n}\n\n\nA subscription type lets customers easily opt out of non-essential communications without missing what's important to them.\n\nSubscription type Object\nKey\tType\tDescription\ntype\tString\tThe type of the object - subscription\nid\tString\tThe unique identifier representing the subscription type.\nstate\tString\tThe state of the subscription type: live, draft, archived.\ndefault_translation\tObject\tA translation object with the localised version of the subscription type in the default language for the workspace.\ntranslations\tArray\tAn array of translations objects with the localised version of the subscription type in each available locale within your translation settings.\nconsent_type\tString\tDescribes the type of consent, this is always opt_out."
  },
  {
    "title": "The translation model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/subscription-types/the-translation-model/",
    "html": "The translation model\nExample translation Object\n{\\n  \\\"name\\\": \\\"Announcements\\\",\\n  \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n  \\\"locale\\\": \\\"en\\\"\\n}\n\n\nA translation object contains the localised details of a subscription type.\n\nTranslation Object\nKey\tType\tDescription\nname\tString\tThe localised name of the subscription type.\ndescription\tString\tThe localised description of the subscription type.\nlocale\tString\tThe two character identifier for the language of the translation object."
  },
  {
    "title": "The segment model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/segments/segment-model/",
    "html": "The segment model\nExample Segment Object\n{\\n  \\\"type\\\": \\\"segment\\\",\\n  \\\"id\\\": \\\"53203e244cba153d39000062\\\",\\n  \\\"name\\\": \\\"New\\\",\\n  \\\"created_at\\\": 1394621988,\\n  \\\"updated_at\\\": 1394622004\\n}\n\n\nA segment is a group of your contacts defined by rules that you set. Contacts are automatically added to the segment every time the contact updates to match those rules. You can use Search for contacts to find contacts that match the same rules.\n\nSegment Object\nKey\tType\tDescription\ntype\tstring\tvalue is segment'.\nid\tstring\tThe unique identifier representing the segment.\nname\tstring\tThe name of the segment.\ncreated_at\ttimestamp\tThe time the segment was created.\nupdated_at\ttimestamp\tThe time the segment was updated.\nperson_type\tstring\tType of the record: user or lead.\ncount\tinteger\tThe number of items in the user segment. It's returned when include_count=true is included in the request."
  },
  {
    "title": "Detach a contact from a subscription",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/subscription-types/detach-a-contact/",
    "html": "Detach a contact from a subscription\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/subscriptions/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can detach an opt out subscription for a single contact.\n\nRequest Path Parameter\nKey\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the subscription type which is given by Intercom\nResponse\n\nThis will return a Subscription Type model for the opt out subscription type that was removed from the contact."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/notes/view-a-note/",
    "html": "Retrieve a note\nExample Request\n$ curl https://api.intercom.io/notes/<id> \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"note\",\n  \"id\": \"2\",\n  \"created_at\": 1389913951,\n  \"body\": \"<p>Text for my note</p>\",\n  \"user\": {\n      \"id\": \"5310d8e8598c9a0b24000005\",\n      \"type\": \"user\"\n    },\n  \"author\": {\n    \"type\": \"admin\",\n    \"id\": \"21\",\n    \"name\": \"Jayne Cobb\",\n    \"email\": \"jayne@serenity.io\",\n    \"avatar\" : {\n       \"type\":\"avatar\",\n      \"image_url\": \"http://example.org/128Jayne.jpg\"\n    },\n    \"companies\": []\n  }\n}\n\nintercom.notes.find(:id => note)\n\n<?php\n$note = $intercom->notes->getNote(\"9259097\");\n?>\n\nNote note = Note.find(\"2\");\n\n\nYou can fetch the details of a single note.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given note.\nResponse\n\nThis will return a Note model."
  },
  {
    "title": "The note model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/notes/note-model/",
    "html": "The note model\nExample Note Object\n{\\n  \\\"type\\\": \\\"note\\\",\\n  \\\"id\\\": \\\"16\\\",\\n  \\\"created_at\\\": 1389913941,\\n  \\\"body\\\": \\\"<p>Text for my note</p>\\\",\\n  \\\"author\\\": {\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"21\\\",\\n    \\\"name\\\": \\\"Jayne Cobb\\\",\\n    \\\"email\\\": \\\"jayne@serenity.io\\\",\\n    \\\"companies\\\": []\\n  },\\n  \\\"user\\\": {\\n    \\\"type\\\": \\\"user\\\",\\n    \\\"id\\\": \\\"5310d8e8598c9a0b24000005\\\"\\n  }\\n}\n\n\nNotes allow you to annotate and comment on your contacts.\n\nCOMPANIES AND CONVERSATIONS\n\nCurrently not possible to create notes for companies. Reach out if you want to submit a feature request, we take these into account.\\n\\nConversations notes are created via the Reply a conversations API.\n\nNote Object\nKey\tType\tDescription\ntype\tString\tvalue is 'note'\nid\tString\tThe id representing the note\ncreated_at\tTimestamp\tThe time the note was created\nuser\tObject\tThe user the note was created about\nbody\tString\tThe body text of the note.\nauthor\tObject\tOptional. Represents the Admin that created the note"
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/notes/list-notes-of-contact/",
    "html": "List all notes\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/notes \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of notes that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a paginated list of Note objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - note.list\ndata\tArray\tAn array containing Note Objects\ntotal_count\tInteger\tThe total number of companies associated to this contact\npages\tPagination Object\tThe information needed to paginate through companies"
  },
  {
    "title": "The message model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/messages/messages-model/",
    "html": "The message model\nExample Message Object\n{\n    \"type\": \"message\",\n    \"id\": \"489373052\",\n    \"created_at\": 1539897198,\n    \"subject\": \"This is the subject - if it's an email\",\n    \"body\": \"<p>Hello</p>\",\n    \"message_type\": \"email\"\n}\n\n\nMessage are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact.\n\nMessage Object\nKey\tType\tDescription\ntype\tString\tAlways message.\nid\tString\tThe id representing the message.\ncreated_at\tUNIX Timestamp\tThe time the conversation was created.\nsubject\tString\tThe subject of the message. Only present if message_type: email.\nbody\tString\tThe message body, which may contain HTML.\nmessage_type\tString\tThe type of message that was sent. Can be email, inapp, facebook or twitter.\nconversation_id\tString\tThe associated conversation_id. Only returned when creating a conversation."
  },
  {
    "title": "Leads",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/leads/leads/",
    "html": "Leads\n\nContacts (for Leads only) is no longer available as a resource. In order to see information and take action on leads, you should be using the Contacts API."
  },
  {
    "title": "Update a section",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/update-a-section/",
    "html": "Update a section\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections/<id> \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"New title\\\",  \\\"translated_content\\\": {    \\\"type\\\": \\\"group_translated_content\\\",    \\\"es\\\": {      \\\"type\\\": \\\"group_content\\\",      \\\"name\\\": \\\"Nuevo título\\\"    }  }}\n\n\nYou can update the details of a single section by making a PUT request to https://api.intercom.io/help_center/sections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the section which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the section. For multilingual collections, this will be the name of the default language's content.\nparent_id\tString\tNo\tThe id for the collection this section will be within.\ntranslated_content\tObject\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Section object of the section you just updated."
  },
  {
    "title": "List all messages",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/messages/list-all-messages/",
    "html": "List all messages\n\nTo list all messages, you will need to use our Export API and download the data in CSV format. This API is available in v2.5 and above."
  },
  {
    "title": "Update a collection",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/update-a-collection/",
    "html": "Update a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collection/<id> \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"New title\\\",  \\\"translated_content\\\": {    \\\"es\\\": {      \\\"name\\\": \\\"Nuevo título\\\"    }  }}\n\n\nYou can update the details of a single collection by making a PUT request to https://api.intercom.io/help_center/collection/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the collection which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\ndescription\tString\tNo\tThe description of the collection. For multilingual articles, this will be the description of the default language's content.\ntranslated_content\tObject\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Collection Model of the collection you just updated."
  },
  {
    "title": "The collection & section models",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/the-collection-section-models/",
    "html": "The collection & section models\nExample Collection Object\nJSON\n{  \\\"id\\\": 1,  \\\"type\\\": \\\"collection\\\",  \\\"workspace_id\\\": \\\"abcdef\\\",  \\\"name\\\": \\\"Default language name\\\",  \\\"description\\\": \\\"Default language description\\\",   \\\"created_at\\\": 123456,  \\\"updated_at\\\": 123456,  \\\"url\\\": \\\"http://intercom.test/help/collection/name\\\",  \\\"icon\\\": \\\"http://intercom/help_center/icon-1\\\",  \\\"order\\\": 0,  \\\"default_locale\\\": \\\"en\\\",  \\\"translated_content\\\": {    \\\"type\\\": \\\"group_translated_content\\\",    \\\"fr\\\": {      \\\"type\\\": \\\"group_content\\\",      \\\"name\\\": \\\"French name\\\",      \\\"description\\\": \\\"French description\\\"    }  }}\n\nExample Section Object\n{\n  \"id\": 1,\n  \"type\": \"section\",\n  \"workspace_id\": \"abcdef\",\n  \"name\": \"Default language name\",\n  \"created_at\": 123456,\n  \"updated_at\": 123456,\n  \"url\": \"http://intercom.test/help/section/name\",\n  \"icon\": \"http://intercom/help_center/icon-1\",\n  \"order\": 0,\n  \"collection_id\": \"1\",\n  \"default_locale\": \"en\",\n  \"translated_content\": {\n    \"type\": \"group_translated_content\",\n    \"fr\": {\n      \"type\": \"group_content\",\n      \"name\": \"French name\"\n    }\n  }\n}\n\n\nThe Help Center API is a central place to gather all information and take actions on those elements within a Help Center - namely the collections and sections. Collections are top level containers for Articles within the Help Center. Sections are subdivisions of a collection, with a collection potentially having multiple sections.\n\nFor articles you should refer to the Articles endpoint.\n\nCollection Object\nKey\tType\tDescription\ntype\tString\tThe type of object - collection.\nid\tString\tThe unique identifier for the collection which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the collection belongs to.\nname\tString\tThe name of the collection. For multilingual help centers, this will be the title of the default language's content.\ndescription\tString\tThe description of the collection. For multilingual help centers, this will be the description of the collection for the default language.\ncreated_at\tTimestamp\tThe time when the article was created. For multilingual articles, this will be the timestamp of creation of the default language's content.\nupdated_at\tTimestamp\tThe time when the article was last updated. For multilingual articles, this will be the timestamp of last update of the default language's content.\nurl\tString\tThe URL of the collection. For multilingual help centers, this will be the URL of the collection for the default language.\nicon\tString\tThe icon for the collection.\norder\tInteger\tThe order of the section in relation to others sections within a collection. Values go from 0 upwards. 0 is the default if there's no order.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Group Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nSection Object\nKey\tType\tDescription\ntype\tString\tThe type of object - section.\nid\tString\tThe unique identifier for the section which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the section belongs to.\nname\tString\tThe name of the section. For multilingual help centers, this will be the name of the section for the default language.\ncreated_at\tTimestamp\tThe time when the section was created. For multilingual help centers, this will be the timestamp of the section's creation for the default language.\nupdated_at\tTimestamp\tThe time when the section was last updated. For multilingual help centers, this will be the timestamp of the section's last update for the default language.\nurl\tString\tThe URL of the section. For multilingual help centers, this will be the URL of the section for the default language.\nicon\tString\tThe icon for the section.\norder\tInteger\tThe order of the section in relation to others sections within a collection. Values go from 0 upwards. 0 is the default if there's no order.\nparent_id\tString\tThe id of the collection to which this section belongs to.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Group Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nGroup Translated Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - group_translated_content.\n<locale> ar, bg, bs, ca, cs, da, de, 'de-form', el, en, es, et, fi, fr, he, hr, hu, id, it, ja, ko, lt, lv, mn, nb, nl, pl, 'pt-BR', pt, ro, ru, sl, sr, sv, tr, vi, 'zh-CN', 'zh-TW'\tObject\tYes\tAn Group Content Object for each supported locale of the multilingual help center. The default locale's content and information will be contained in the initial Collection Object or Section Object respectively. If there's no content for a locale, the value will be nil.\nGroup Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - group_content.\nname\tString\tYes\tThe name of the collection or section.\ndescription\tString\tYes\tThe description of the collection. Only available for collections."
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/retrieve-a-collection/",
    "html": "Retrieve a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections/<id> \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the collection which is given by Intercom.\nResponse\n\nThis will return a Collection Model."
  },
  {
    "title": "Retrieve a company",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/companies/view-a-company/",
    "html": "Retrieve a company\nExample Request & Response\n$ curl \\\n-s https://api.intercom.io/companies?company_id=141 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Accept:application/json\" \\\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company\",\n  \"id\": \"531ee472cce572a6ec000006\",\n  \"name\": \"Blue Sun\",\n  \"plan\": {\n    \"type\":\"plan\",\n    \"id\":\"1\",\n    \"name\":\"Paid\"\n  },\n  \"company_id\": \"141\",\n  \"remote_created_at\": 1394531169,\n  \"created_at\": 1394533506,\n  \"updated_at\": 1396874658,\n  \"last_request_at\": 1396874658,\n  \"monthly_spend\": 49,\n  \"session_count\": 26,\n  \"user_count\": 10,\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0\n  }\n}\n\nintercom.companies.find(:id => \"41e66f0313708347cb0000d0\")\n\n<?php\n# Using the name of the company\n$intercom->companies->getCompanies(['name' => 'OneAmerica']);\n\n# Via company_id\n$intercom->companies->getCompanies(['company_id' => '10']);\n\n?>\n\nString id = \"541a144b201ebf2ec5000001\";\nCompany company = Company.find(id);\n\n\nYou can fetch a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the company.\nThe parameter should be url encoded.\ncompany_id\tString\tNo\tThe company_id you have given to the company.\n\nA company can also be fetched by its name using a name or company_id parameter in the url, whose values are the ones you have defined for that company -\n\nhttps://api.intercom.io/companies?name={name}\nhttps://api.intercom.io/companies?company_id={company_id}\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "List all sections",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/list-all-sections/",
    "html": "List all sections\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch a list of all sections by making a GET request to https://api.intercom.io/help_center/sections.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through sections.\ntotal_count\tInteger\tA count of the total number of sections.\ndata\tArray\tAn array of Section objects\nHOW ARE THE SECTIONS SORTED AND ORDERED?\n\nSections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated sections first."
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/update-contact/",
    "html": "Update a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d'{\\t\\\"role\\\": \\\"user\\\",\\t\\\"external_id\\\": \\\"25\\\",\\t\\\"email\\\": \\\"wash@serenity.io\\\",\\t\\\"phone\\\": \\\"+1123456789\\\",\\t\\\"name\\\": \\\"Hoban Washburn\\\",\\t\\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\t\\\"last_seen_at\\\": 1571069751,\\t\\\"signed_up_at\\\": 1571069751,\\t\\\"owner_id\\\": 127,\\t\\\"unsubscribed_from_emails\\\": false,\\t\\\"custom_attributes\\\": {\\t\\t\\\"paid_subscriber\\\": true,\\t\\t\\\"monthly_spend\\\": 155.5,\\t\\t\\\"team_mates\\\": 1\\t}}'\n\nExample Errors\nHTTP/1.1 404 FOUND\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"9a3d0816-9707-4598-977e-c009ba630148\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"Contact Not Found\"\n    }\n  ]\n}\n\nHTTP/1.1 409 CONFLICT\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"80ec9d92-99ff-4da9-9a0e-c0ab7c42f7e7\",\n  \"errors\": [\n    {\n      \"code\": \"conflict\",\n      \"message\": \"A contact matching those details already exists with id=5da6f18e3d7cf967e4582d05\"\n    }\n  ]\n}\n\nHTTP/1.1 400 UNPROCESSABLE ENTITY\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"00043csj9iva7pl9mmmg\",\n  \"errors\": [\n    {\n      \"code\": \"client_error\",\n      \"message\": \"Contact with user role can't be converted to a lead\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"00043csj9iva7pl9mmmg\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"The owner specified is not a member of the workspace\"\n    }\n  ]\n}\n\n\nYou can update an existing contact (ie. user or lead).\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nrole\tString\tYes\tThe role of the contact. Accepted values are user or lead (only if lead already).\nexternal_id\tString\tYes - if role is user and email is blank\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tYes - if role is lead, or if role is user and external_id is blank\tThe contacts email.\nphone\tString\tNo\tThe contacts phone.\nname\tString\tNo\tThe contacts name.\navatar\tString\tNo\tAn image URL containing the avatar of a contact.\nowner_id\tString\tNo\tThe id of an admin that has been assigned account ownership of the contact.\nsigned_up_at\tDate (UNIX timestamp)\tNo\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tNo\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nowner_id\tInteger\tNo\tThe id of an admin that has been assigned account ownership of the contact.\nunsubscribed_from_emails\tBoolean\tNo\tWhether the contact is unsubscribed from emails.\ncustom_attributes\tObject\tNo\tThe custom attributes which are set for the contact.\nCREATING NEW CUSTOM DATA ATTRIBUTES\n\nYou can only write to custom data attributes that already exist on the workspace. If you need to create new attributes to write to, you should Create Data Attributes through the data Attributes API.\n\nResponse\n\nThis will return a Contact model of the contact you just update."
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/list-all-collections/",
    "html": "List all collections\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through collections.\ntotal_count\tInteger\tA count of the total number of collections.\ndata\tArray\tAn array of Collection objects.\nHOW ARE THE COLLECTIONS SORTED AND ORDERED?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "Delete a collection",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/delete-a-collection/",
    "html": "Delete a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can delete a single collection by making a DELETE request to https://api.intercom.io/help_center/collections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the collection which is given by Intercom.\nResponse\nKey\tType\tDescription\nid\tString\tThe unique identifier for the collection which you provided in the URL.\nobject\tString\tThe type of object which was deleted - collection.\ndeleted\tBoolean\tWhether the collections was deleted successfully or not."
  },
  {
    "title": "Create a section",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/create-a-section/",
    "html": "Create a section\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"Section 1\\\",  \\\"parent_id\\\": \\\"1\\\",  \\\"translated_content\\\": {    \\\"es\\\": {      \\\"name\\\": \\\"Sección 1\\\",      \\\"description\\\": \\\"Spanish description\\\"    }  }}\n\n\nYou can create a new section by making a POST request to https://api.intercom.io/help_center/sections.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\nname\tString\tYes\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\nparent_id\tString\tYes\tThe id for the collection this section will be within.\ntranslated_content\tString\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Section Model of the section you just created."
  },
  {
    "title": "Search for contacts",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/search-for-contacts/",
    "html": "Search for contacts\n\nYou can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\nWHY IS THERE A DELAY WHEN CREATING CONTACTS AND SEARCHING FOR THEM?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a customer that you can search for. See all accepted fields below.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\nNESTING & LIMITATIONS\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\\n\\nThere are some limitations to the amount of multiple's there can be:\\n\\n_ There's a limit of max 2 nested filters\\n_ There's a limit of max 15 filters for each AND or OR group\n\nExample Request (Single Filter)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"custom_attributes.salesforce_status\\\",\\n    \\\"operator\\\": \\\"~\\\",\\n    \\\"value\\\": \\\"open\\\"\\n  }\\n}\n\nExample Request (Multiple Filters)\njsonjson\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"facebook\\\"\\n      }, \\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"twitter\\\"\\n      },\\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"instagram\\\"\\n      }\\n    ]\\n  }\\n}\n\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n    \\\"operator\\\": \\\"IN\\\",\\n    \\\"value\\\": [\\\"facebook\\\", \\\"twitter\\\", \\\"instagram\\\"]\\n  }\\n}\n\nExample Request (Nested Filters)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"created_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436650\\n          }, \\n          {\\n            \\\"field\\\": \\\"signed_up_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436784\\n          }\\n        ]\\n      },\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"custom_attributes.salseforce_status\\\",\\n            \\\"operator\\\": \\\"~\\\",\\n            \\\"value\\\": \\\"Open\\\"\\n          }, \\n          {\\n            \\\"field\\\": \\\"custom_attributes.salesforce_object_type\\\",\\n            \\\"operator\\\": \\\"=\\\",\\n            \\\"value\\\": \\\"Lead\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"email does not support operator: >\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nAccepted Fields\nSEARCHING FOR TIMESTAMP FIELDS\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.\\n\\nFor example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.\\n\\nIf you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).\\n\\nThis behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nSEARCHING FOR FIELDS WITH A NULL VALUE\n\nWhen searching for fields that have no value, note that the data type (i.e. String, etc.) isn't required to be adhered to. Rather you just need to add the null operator, without any quotes or any other decorators.\\n\\nFor example, this search will return no results:\\n\\n\\n{\\n \\\"query\\\": {\\n \\\"field\\\": \\\"email\\\",\\n \\\"operator\\\": \\\"=\\\",\\n \\\"value\\\": \\\"null\\\"\\n }\\n }\\n\\n\\nBut this search will return all of your contacts with no email address:\\n\\n\\n{\\n \\\"query\\\": {\\n \\\"field\\\": \\\"email\\\",\\n \\\"operator\\\": \\\"=\\\",\\n \\\"value\\\": null\\n }\\n }\\n\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals\n!=\tAll\tDoesn't Equal\nIN\tAll\tIn\nShortcut for OR queries\nValues must be in Array\nNIN\tAll\tNot In\nShortcut for OR ! queries\nValues must be in Array\n>\tInteger\nDate (UNIX Timestamp)\tGreater than\n<\tInteger\nDate (UNIX Timestamp)\tLower than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Contact model that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "Unarchive a contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/unarchive-a-contact/",
    "html": "Unarchive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/unarchive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can unarchive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the unarchived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - false"
  },
  {
    "title": "List attached tags",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/list-tags-of-contact/",
    "html": "List attached tags\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/tags \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of tags that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Tag objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - tag.list\ntags\tArray\tAn array containing Tag Objects"
  },
  {
    "title": "List attached companies",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/list-companies-of-contact/",
    "html": "List attached companies\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/companies \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of companies that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a paginated list of Company objects .\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - company.list\ncompanies\tArray\tAn array containing Company Objects\ntotal_count\tInteger\tThe total number of companies associated to this contact\npages\tPagination Object\tThe information needed to paginate through companies"
  },
  {
    "title": "Merge two contacts",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/merge-contact/",
    "html": "Merge two contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/merge \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"from\\\": \\\"5d70dd30de4efd54f42fd526\\\",\\n  \\\"into\\\": \\\"5ba682d23d7cf92bef87bfd4\\\"\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\nHTTP/1.1 400 UNPROCESSABLE ENTITY\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"0019c4t1derm7namdon0\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"invalid_merge\\\",\\n      \\\"message\\\": \\\"Merging can only be performed on a lead into a user\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can merge a contact with a role of lead into a contact with a role of user.\n\nWHAT HAPPENS UPON A CONTACT BEING MERGED?\n\nThe contact that's specified as from will be deleted after being merged into the contact specified as into. Attributes that don't exist on the contact specified as into will be copied over.\n\nRequest Body Parameters\nParameter\tType\tRequired\tDescription\nfrom\tString\tYes\tThe unique identifier for the contact to merge away from. Must be a lead.\ninto\tString\tYes\tThe unique identifier for the contact to merge into. Must be a user.\nResponse\n\nThis will return a Contact model for the contact who's been merged into."
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/list-contacts/",
    "html": "List all contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nInvalid starting_after param\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000nbboasf1qqab6b910\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"client_error\\\",\\n      \\\"message\\\": \\\"Invalid starting_after param. Please try again using a starting_after value from a paginated response\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch a list of all contacts.\n\nResponse\n\nThis will return a paginated list of Contact objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Contact Objects\ntotal_count\tInteger\tThe total number of contacts\npages\tPagination Object\tThe information needed to paginate through contacts"
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/list-attached-segments/",
    "html": "List attached segments for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/segments \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of segments that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Segment objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Segment Objects"
  },
  {
    "title": "List attached email subscriptions",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/list-attached-email-subscriptions/",
    "html": "List attached email subscriptions\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/subscriptions \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"cc1a749e-6cc4-4b7c-944c-e26bb6d61662\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"not_found\\\",\\n            \\\"message\\\": \\\"User Not Found\\\"\\n        }\\n    ]\\n}\n\n\nYou can fetch a list of tags that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Subscription Type objects that the contact is associated with.\n\n\t\t\ntype\tString\tThe type of object - list\ndata\tArray\tA list of subscriptions tied to the contact"
  },
  {
    "title": "Retrieve a contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/get-contact/",
    "html": "Retrieve a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch the details of a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a Contact model."
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/delete-contact/",
    "html": "Delete a contact\nExample Request & Response\nAFTER DELETION, HOW LONG IS THE CONTACT ARCHIVED\n\nWhen you delete a user/contact/lead, there is a 7 day grace period where intercom can retrieve the information. After 7 days this data will be permanently destroyed.\n\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can delete a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the deleted contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\ndeleted\tBoolean\tWhether the contact has been deleted - true"
  },
  {
    "title": "Create a contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/create-contact/",
    "html": "Create a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n\\t\\\"role\\\": \\\"user\\\",\\n\\t\\\"external_id\\\": \\\"25\\\",\\n\\t\\\"email\\\": \\\"wash@serenity.io\\\",\\n\\t\\\"phone\\\": \\\"+1123456789\\\",\\n\\t\\\"name\\\": \\\"Hoban Washburn\\\",\\n\\t\\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\n\\t\\\"last_seen_at\\\": 1571069751,\\n\\t\\\"signed_up_at\\\": 1571069751,\\n\\t\\\"owner_id\\\": 127,\\n\\t\\\"unsubscribed_from_emails\\\": false,\\n\\t\\\"custom_attributes\\\": {\\n\\t\\t\\\"paid_subscriber\\\": true,\\n\\t\\t\\\"monthly_spend\\\": 155.5,\\n\\t\\t\\\"team_mates\\\": 1\\n\\t}\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 409 CONFLICT\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"80ec9d92-99ff-4da9-9a0e-c0ab7c42f7e7\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"conflict\\\",\\n      \\\"message\\\": \\\"A contact matching those details already exists with id=5da6f18e3d7cf967e4582d05\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"00043csj9iva7pl9mmmg\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"parameter_invalid\\\",\\n      \\\"message\\\": \\\"The owner specified is not a member of the workspace\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can create a new contact (ie. user or lead).\n\nRequest Body Parameters\nAttribute\tType\tRequired\tDescription\nrole\tString\tYes\tThe role of the contact. Accepted values are user or lead.\nexternal_id\tString\tYes - if role is user and email is blank\tA unique identifier for the contact which is given to Intercom. Note: Can't be set for role type of lead\nemail\tString\tYes - if role is user and external_id is blank\tThe contacts email\nphone\tString\tNo\tThe contacts phone\nname\tString\tNo\tThe contacts name\navatar\tString\tNo\tAn image URL containing the avatar of a contact\nsigned_up_at\tTimestamp\tNo\tThe time specified for when a contact signed up\nlast_seen_at\tTimestamp\tNo\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually)\nowner_id\tInteger\tNo\tThe id of an admin that has been assigned account ownership of the contact\nunsubscribed_from_emails\tBoolean\tNo\tWhether the contact is unsubscribed from emails\ncustom_attributes\tObject\tNo\tThe custom attributes which are set for the contact\nCREATING NEW CUSTOM DATA ATTRIBUTES\n\nYou can only write to custom data attributes that already exist on the workspace. If you need to create new attributes to write to, you should Create Data Attributes through the Data Attributes API.\n\nResponse\n\nThis will return a Contact model of the contact you just created."
  },
  {
    "title": "The contact model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/contacts-model/",
    "html": "The contact model\nExample Contacts Object\nJSON\n{  \\\"type\\\": \\\"contact\\\",  \\\"id\\\": \\\"5ba682d23d7cf92bef87bfd4\\\",  \\\"workspace_id\\\": \\\"ecahpwf5\\\",  \\\"external_id\\\": \\\"25\\\",  \\\"role\\\": \\\"user\\\",  \\\"email\\\": \\\"wash@serenity.io\\\",  \\\"phone\\\": \\\"+1123456789\\\",  \\\"name\\\": \\\"Hoban Washburn\\\",  \\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",  \\\"owner_id\\\": 127,  \\\"social_profiles\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"social_profile\\\",        \\\"name\\\": \\\"Twitter\\\",        \\\"url\\\": \\\"http://twitter.com/th1sland\\\"      }    ]  },  \\\"has_hard_bounced\\\": false,  \\\"marked_email_as_spam\\\": false,  \\\"unsubscribed_from_emails\\\": false,  \\\"created_at\\\": 1571672154,  \\\"updated_at\\\": 1571672158,  \\\"signed_up_at\\\": 1571069751,  \\\"last_seen_at\\\": 1571069751,  \\\"last_replied_at\\\": 1571672158,  \\\"last_contacted_at\\\": 1571672158,  \\\"last_email_opened_at\\\": 1571673478,  \\\"last_email_clicked_at\\\": 1571676789,  \\\"language_override\\\": null,  \\\"browser\\\": \\\"chrome\\\",  \\\"browser_version\\\": \\\"77.0.3865.90\\\",  \\\"browser_language\\\": \\\"en\\\",  \\\"os\\\": \\\"OS X 10.14.6\\\",  \\\"location\\\": {    \\\"type\\\": \\\"location\\\",    \\\"country\\\": \\\"Ireland\\\",    \\\"region\\\": \\\"Dublin\\\",    \\\"city\\\": \\\"Dublin\\\"  },  \\\"android_app_name\\\": null,  \\\"android_app_version\\\": null,  \\\"android_device\\\": null,  \\\"android_os_version\\\": null,  \\\"android_sdk_version\\\": null,  \\\"android_last_seen_at\\\": null,  \\\"ios_app_name\\\": null,  \\\"ios_app_version\\\": null,  \\\"ios_device\\\": null,  \\\"ios_os_version\\\": null,  \\\"ios_sdk_version\\\": null,  \\\"ios_last_seen_at\\\": null,  \\\"custom_attributes\\\": {    \\\"paid_subscriber\\\": true,    \\\"monthly_spend\\\": 155.5,    \\\"team_mates\\\": 1  },  \\\"tags\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"2\\\",        \\\"url\\\": \\\"/tags/2\\\"      },      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"4\\\",        \\\"url\\\": \\\"/tags/4\\\"      },      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"5\\\",        \\\"url\\\": \\\"/tags/5\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/tags\\\",    \\\"total_count\\\": 3,    \\\"has_more\\\": false  },  \\\"notes\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"note\\\",        \\\"id\\\": \\\"20114858\\\",        \\\"url\\\": \\\"/notes/20114858\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/notes\\\",    \\\"total_count\\\": 1,    \\\"has_more\\\": false  },  \\\"opted_out_subscription_types\\\": {    \\\"type\\\": \\\"list\\\",     \\\"data\\\": [       {         \\\"id\\\": \\\"1\\\",         \\\"type\\\": \\\"subscription\\\",         \\\"url\\\": \\\"/subscription_types/1\\\"       }     ],     \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/subscriptions\\\",     \\\"total_count\\\": 1,     \\\"has_more\\\": false  },  \\\"companies\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5ba686093d7cf93552a3dc99\\\",        \\\"url\\\": \\\"/companies/5ba686093d7cf93552a3dc99\\\"              },      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5cee64a03d7cf90c51b36f19\\\",        \\\"url\\\": \\\"/companies/5cee64a03d7cf90c51b36f19\\\"      },      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5d7668883d7cf944dbc5c791\\\",        \\\"url\\\": \\\"/companies/5d7668883d7cf944dbc5c791\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/companies\\\",    \\\"total_count\\\": 3,    \\\"has_more\\\": false  }}\n\n\nOur Contacts API is a central place to gather all information and take actions on your contacts (ie. users and leads), such as fetching, searching, creating, updating, and deleting.\n\nThe Contacts Model provides details on these contacts within Intercom, and will specify whether they are a user or lead through the role attribute.\n\nContact Object\nKey\tType\tDescription\ntype\tString\tThe type of object - contact.\nid\tString\tThe unique identifier for the contact which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the contact belongs to.\nexternal_id\tString\tA unique identifier for the contact which is given to Intercom.\nrole\tString\tThe role of the contact - user or lead.\nemail\tString\tThe contacts email.\nphone\tString\tThe contacts phone.\nname\tString\tThe contacts name.\navatar\tString\tAn image URL containing the avatar of a contact.\nowner_id\tInteger\tThe id of an admin that has been assigned account ownership of the contact.\nsocial_profiles\tList\tA list of social profiles associated to the contact.\nhas_hard_bounced\tBoolean\tWhether the contact has had an email sent to them hard bounce.\nmarked_email_as_spam\tBoolean\tWhether the contact has marked an email sent to them as spam.\nunsubscribed_from_emails\tBoolean\tWhether the contact is unsubscribed from emails.\ncreated_at\tDate (UNIX timestamp)\tThe time when the contact was created.\nupdated_at\tDate (UNIX timestamp)\tThe time when the contact was last updated.\nsigned_up_at\tDate (UNIX timestamp)\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nlast_replied_at\tDate (UNIX timestamp)\tThe time when the contact last messaged in.\nlast_contacted_at\tDate (UNIX timestamp)\tThe time when the contact was last messaged.\nlast_email_opened_at\tDate (UNIX timestamp)\tThe time when the contact last opened an email.\nlast_email_clicked_at\tDate (UNIX timestamp)\tThe time when the contact last clicked a link in an email.\nlanguage_override\tString\tA preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.\nbrowser\tString\tThe name of the browser which the contact is using.\nbrowser_version\tString\tThe version of the browser which the contact is using.\nbrowser_language\tString\tThe language set by the browser which the contact is using.\nos\tString\tThe operating system which the contact is using.\nlocation\tObject\tAn object showing location details of the contact.\nandroid_app_name\tString\tThe name of the Android app which the contact is using.\nandroid_app_version\tString\tThe version of the Android app which the contact is using.\nandroid_device\tString\tThe Android device which the contact is using.\nandroid_os_version\tString\tThe version of the Android OS which the contact is using.\nandroid_sdk_version\tString\tThe version of the Android SDK which the contact is using.\nandroid_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the Android app.\nios_app_name\tString\tThe name of the iOS app which the contact is using.\nios_app_version\tString\tThe version of the iOS app which the contact is using.\nios_device\tString\tThe iOS device which the contact is using.\nios_os_version\tString\tThe version of iOS which the contact is using.\nios_sdk_version\tString\tThe version of the iOS SDK which the contact is using.\nios_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the iOS app.\ncustom_attributes\tObject\tThe custom attributes which are set for the contact.\ntags\tAddressable List\tThe tags which have been added to the contact.\nnotes\tAddressable List\tThe notes which have been added to the contact.\ncompanies\tAddressable List\tThe companies which the contact belongs to.\nLocation Object\nKey\tType\tDescription\ntype\tString\tThe type of object - location.\ncountry\tString\tThe country where the contact is.\nregion\tString\tA subdivision of the country which the contact is in (ie. state, province, county, territory, etc).\ncity\tString\tThe city where the contact is.\nSocial Profile Object\nKey\tType\tDescription\ntype\tString\tThe type of object - social_profile.\nname\tString\tThe name of the service (ie. Twitter, Facebook, etc).\nurl\tString\tThe profile page for the contact on the service.\nAddressable List\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\ndata\tArray\tAn array of Addressable Objects. Maximum of 10.\nurl\tString\tThe URL where the full list can be accessed (ie. /contacts/1234/companies).\ntotal_count\tInteger\tThe total amount of records.\nhas_more\tBoolean\tWhether there's more Addressable Objects to be viewed. If true, use the url to view all.\nAddressable Object\nKey\tType\tDescription\ntype\tString\tThe type of object - company, note, tag.\nid\tString\tThe id of the object.\nurl\tString\tThe URL where the object in question can be accessed (ie. /companies/45678)."
  },
  {
    "title": "Conversation Count Model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/counts/conversation-counts/",
    "html": "Conversation Count Model\nConversation Count Object\n\nThe conversation count supplies global counts about your App's conversations\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nconversation\tobject\tContains counts related to conversations\nconversation.assigned\tnumber\tContains the number of assigned conversations\nconversation.closed\tnumber\tContains the number of closed conversations\nconversation.open\tnumber\tContains the number of open conversations\nconversation.unassigned\tnumber\tContains the number of unassigned conversations\n{\n    \"type\": \"count\",\n    \"conversation\": {\n        \"open\": 30,\n        \"closed\": 17,\n        \"unassigned\": 0,\n        \"assigned\": 30\n    }\n}\n\n# Conversation Counts\n$ curl 'https://api.intercom.io/counts?type=conversation' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# Conversation App Counts\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"count\",\n    \"conversation\": {\n        \"open\": 30,\n        \"closed\": 17,\n        \"unassigned\": 0,\n        \"assigned\": 30\n    }\n}\n\nintercom.counts.for_type(type: 'conversation')\n\n<?php\n$counts = $intercom->counts->getCounts([\"type\" => \"conversation\"]);\nprint_r($counts);\n?>\n\n// Conversation Counts\nfinal Counts.Conversation totals = Counts.conversationTotals();\ntotals.getAssigned();\ntotals.getClosed();\ntotals.getOpen();\ntotals.getUnassigned();\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nConversation Count\tconversation\tNone"
  },
  {
    "title": "App Total Count Model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/counts/company-user-counts/",
    "html": "App Total Count Model\n\nYou can use the API to get counts of users and companies filtered by certain criteria.\n\nCounts are a legacy way to periodically obtain data for the purposes of tracking rates of change in contact and company data.\n\nWorkspace Total Count Object\n\nThe total count object contains the summary of the following fields in a workspace, -\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count.hash'\ncompany\tobject\tContains the number of companies in your App\nsegment\tobject\tContains the number of segments in your App\ntag\tobject\tContains the number of tags in your App\nuser\tobject\tContains the number of users in your App\nlead\tobject\tContains the number of leads in your App\n\nThe count of tags and segments includes archived tags and segments.\n\n{\n    \"type\": \"count.hash\",\n    \"company\": {\n        \"count\": 55\n    },\n    \"user\": {\n        \"count\": 54944\n    },\n    \"lead\": {\n        \"count\": 17\n    },\n    \"tag\": {\n        \"count\": 1012\n    },\n    \"segment\": {\n        \"count\": 7\n    }\n}\n\n# App Counts\n$ curl 'https://api.intercom.io/counts' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# App Total Counts\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"count.hash\",\n    \"company\": {\n        \"count\": 55\n    },\n    \"user\": {\n        \"count\": 54944\n    },\n    \"lead\": {\n        \"count\": 17\n    },\n    \"tag\": {\n        \"count\": 1012\n    },\n    \"segment\": {\n        \"count\": 7\n    }\n}\n\nintercom.counts.for_app\n\n<?php\n// Global App Counts\n$intercom->counts->getCounts([]);\n?>\n\n// Global App Counts\nfinal Counts.Totals appTotals = Counts.appTotals();\nappTotals.getCompany().getValue();\nappTotals.getSegment().getValue();\nappTotals.getTag().getValue();\nappTotals.getUser().getValue();\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nGlobal App Counts\tNone\tNone"
  },
  {
    "title": "Company User/Segment/Tag Count Model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/counts/company-tag-counts/",
    "html": "Company User/Segment/Tag Count Model\nCompany User/Segment/Tag Count Object\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\ncompany\tobject\tContains a field called segment containing segment counts\ncompany.segment\tarray\tContains a list of segment objects their name and their number of companies tagged\ncompany.tag\tarray\tContains a list of tag objects with their name and their number of companies tagged\ncompany.user\tarray\tContains an array of companies with their name and their number of users\ncurlcurlrubyphpjava\n# Company Tag Count\\n$ curl 'https://api.intercom.io/counts?type=company&count=tag&per_page=5' \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\\n# Company Segment Count\\n$ curl 'https://api.intercom.io/counts?type=company&count=segment' \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\\n# Company User Count\\n$ curl 'https://api.intercom.io/counts?type=company&count=user' \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\n# Company Tag Count\\nHTTP/1.1 200 OK\\n\\n{\\n    \\\"type\\\": \\\"count\\\",\\n    \\\"company\\\": {\\n        \\\"tag\\\": [\\n            {\\n                \\\"VIP\\\": 0\\n            },\\n            {\\n                \\\"UpMarket\\\": 0\\n            },\\n            {\\n                \\\"test\\\": 0\\n            },\\n            {\\n                \\\"new\\\": 0\\n            },\\n            {\\n                \\\"smb\\\": 0\\n            }\\n        ]\\n    },\\n    \\\"pages\\\": {\\n        \\\"pages\\\": {\\n            \\\"type\\\": \\\"pages\\\",\\n            \\\"next\\\": \\\"https://api.intercom.io/counts?type=company&count=tag&page=2&per_page=5\\\",\\n            \\\"page\\\": 1,\\n            \\\"per_page\\\": 5,\\n            \\\"total_pages\\\": 203\\n        }\\n    }\\n}\\n\\n# Company Segment Count\\nHTTP/1.1 200 OK\\n{\\n    \\\"type\\\": \\\"count\\\",\\n    \\\"company\\\": {\\n        \\\"segment\\\": [\\n            {\\n                \\\"Active\\\": 2\\n            },\\n            {\\n                \\\"New\\\": 0\\n            },\\n            {\\n                \\\"Slipping Away\\\": 0\\n            },\\n            {\\n                \\\"id=10\\\": 10\\n            }\\n        ]\\n    },\\n    \\\"pages\\\": {}\\n}\\n\\n# Company User Count\\nHTTP/1.1 200 OK\\n\\n{\\n  \\\"type\\\": \\\"count\\\",\\n  \\\"company\\\": {\\n    \\\"user\\\": [\\n      {\\n        \\\"Independents\\\": 7,\\n        \\\"remote_company_id\\\": \\\"6\\\"\\n      },\\n      {\\n        \\\"Alliance\\\": 1,\\n        \\\"remote_company_id\\\": \\\"7\\\"\\n      }\\n    ]\\n  },\\n  \\\"pages\\\": {}\\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nCompany Segment Count\tcompany\tsegment\nCompany Tag Count\tcompany\ttag\nCompany User Count\tcompany\tuser\nPAGINATION WITH COMPANY COUNTS\n\nCompany tag counts are returned via pagination, which means it defaults to 50 results per page unless you specify otherwise. e.g. \\n'https://api.intercom.io/counts?type=company&count=tag&per_page=10\\\"\\n\\nTo get the next page of results you need to make a GET request with the \"next\" RUL supplied in the initial response."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/admins/view-the-current-admin/",
    "html": "Identify an admin\nOAUTH ONLY\n\nThis feature is only available when using OAuth. This requires the \"Read admins\" permission.\n\nYou can view the name, email and app ID of the current authorised admin via a GET request to https://api.intercom.io/me.\n\nResponse\n\nThis will return a an Admin object, with an embedded app object (a workspace in legacy terminology).\n\nApp Object (a workspace)\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin'\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\nemail_verified\tboolean\tThis field will indicate whether the Intercom user has verified their email or not\napp.type\tstring\tvalue is 'app'\napp.id_code\tstring\tThe id of the app\napp.name\tstring\tThe name of the app\napp.region\tstring\tThe intercom region the app is located in\napp.created_at\ttimestamp\tWhen the app was created\napp.identity_verification\tboolean\tWhether or not the app uses identity verification\nSINGLE SIGN ON\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the user logging, in you should not accept any sign ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/admins/view-an-admin/",
    "html": "Retrieve an admin\nExample Request & Response\n$ curl https://api.intercom.io/admins/493881 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n\n{\n    \"type\": \"admin\",\n    \"id\": \"493881\",\n    \"name\": \"Hoban Washburne\",\n    \"email\": \"wash@serenity.io\",\n    \"away_mode_enabled\": false,\n    \"away_mode_reassign\": false,\n    \"team_ids\": [\n        814865\n    ]\n}\n\n<?php\n$admin = $intercom->admins->getAdmin(\"493881\");\n?>\n\nErrors for admins without inbox seats\n{\n    \"type\": \"error.list\",\n    \"request_id\": \"0002miv9og586ig3aln0\",\n    \"errors\": [\n        {\n            \"code\": \"action_forbidden\",\n            \"message\": \"This admin does not have Inbox access permissions\"\n        }\n    ]\n}\n\n\nYou can fetch the details of a single admin.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given admin\nResponse\n\nThis will return an Admin object."
  },
  {
    "title": "User Segment/Tag Count Model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/counts/user-tag-counts/",
    "html": "User Segment/Tag Count Model\n\nThe count of tags and segments includes archived tags and segments.\n\nUser Segment/Tag Count Object\n\nCount Object includes count for users and leads.\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nuser\tobject\tContains a field called segment containing segment counts\nuser.segment\tarray\tContains a list of segment counts\nuser.tag\tarray\tContains a list of tag counts\n{\n  \"type\": \"count\",\n  \"user\": {\n    \"tag\": [\n        {\n          \"Independent\": 3\n        }\n    ]\n  }\n}\n\n{\n  \"type\": \"count\",\n  \"user\": {\n    \"segment\": [\n      {\n        \"Active\": 1\n      },\n      {\n        \"New\": 0\n      },\n      {\n        \"VIP\": 0\n      },\n      {\n        \"Slipping Away\": 0\n      },\n      {\n        \"segment 1\": 1\n      }\n    ]\n  }\n}\n\n# User Tag Count\n$ curl 'https://api.intercom.io/counts?type=user&count=tag' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# User Segment Count\n$ curl 'https://api.intercom.io/counts?type=user&count=segment' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# User Tag Count\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"count\",\n  \"user\": {\n    \"tag\": [\n        {\n          \"Independent\": 3\n        }\n    ]\n  }\n}\n\n# User Segment Count\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"count\",\n  \"user\": {\n    \"segment\": [\n      {\n        \"Active\": 1\n      },\n      {\n        \"New\": 0\n      },\n      {\n        \"VIP\": 0\n      },\n      {\n        \"Slipping Away\": 0\n      },\n      {\n        \"segment 1\": 1\n      }\n    ]\n  }\n}\n\nintercom.counts.for_type(type: 'user', count: 'tag')\nintercom.counts.for_type(type: 'user', count: 'segment')\n\n<?php\n// User Tag Count\n$counts = $intercom->counts->getCounts([\"type\" => \"user\", \"count\" => \"tag\"]);\nprint_r($counts);\n\n// Company Segment Count\n$counts = $intercom->counts->getCounts([\"type\" => \"user\", \"count\" => \"segment\"]);\n?>\n\n// User Tag Count\nfinal List<Counts.CountItem> tags = Counts.userTags();\nfor (Counts.CountItem tag : tags) {\n  out.println(tag.getName() + \": \" + tag.getValue());\n}\n\n// User Segment Count\nfinal List<Counts.CountItem> segments = Counts.userSegments();\nfor (Counts.CountItem seg : segments) {\n  out.println(seg.getName() + \": \" + seg.getValue());\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nUser Segment Count\tuser\tsegment\nUser Tag Count\tuser\ttag"
  },
  {
    "title": "Update a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/data-attributes/update-data-attributes/",
    "html": "Update a data attribute\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes/163728 \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept: application/json' \\\\-H 'Content-Type: application/json' -d{  \\\"description\\\": \\\"You are either great or bad\\\",  \\\"options\\\": [    {\\\"value\\\": \\\"great\\\"},    {\\\"value\\\": \\\"bad\\\"}  ]}\n\nExample Errors\nHTTP/1.1 404 NOT FOUND{  \"type\": \"error.list\",  \"request_id\": \"0006klvnje6ffng7ot80\",  \"errors\": [    {      \"code\": \"field_not_found\",      \"message\": \"We couldn't find that data attribute to update\"    }  ]}\n\nHTTP/1.1 422 UNPROCESSIBLE ENTITY{  \"type\": \"error.list\",  \"request_id\": \"0006klvnje6ffng7ot80\",  \"errors\": [    {      \"code\": \"data_invalid\",      \"message\": \"The Data Attribute you are trying to archive has a dependant object\"    }  ]}\n\nHTTP/1.1 400 BAD REQUEST{  \"type\": \"error.list\",  \"request_id\": \"0000rnvpf3m1f3nf4k40\",  \"errors\": [    {      \"code\": \"parameter_invalid\",      \"message\": \"You must have at least two options on a list type data attribute\"    }  ]}\n\n\nYou can update data attribute.\n\nRequest Body Parameters\nArgument\tType\tDescription\ndescription\tString\t(Optional) The readable description you see in the UI for the attribute.\noptions\tList\t(Optional) To change to or update list attributes. Provide a set of hashes with value as the key of the options you want to make.data_type must be string.\narchived\tBoolean\t(Optional) Whether the attribute is to be archived or not.\nUPDATING THE DATA TYPE IS NOT POSSIBLE\n\nIt is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead.\n\nResponse\n\nThis will return a Data Attribute Model showing the details of your updated attribute."
  },
  {
    "title": "The data attribute model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/data-attributes/data-attribute-model/",
    "html": "The data attribute model\nExample Data Attribute Object\n{  \\\"type\\\": \\\"data_attribute\\\",  \\\"model\\\": \\\"contact\\\",  \\\"name\\\": \\\"paid_subscriber\\\",  \\\"full_name\\\": \\\"custom_attributes.paid_subscriber\\\",   \\\"label\\\": \\\"paid_subscriber\\\",   \\\"description\\\": \\\"\\\",  \\\"data_type\\\": \\\"string\\\",   \\\"options\\\": [    \\\"pick_value_1\\\",    \\\"pick_value_2\\\"  ],  \\\"api_writable\\\": true,   \\\"ui_writable\\\": true,   \\\"custom\\\": true,   \\\"archived\\\": false,   \\\"admin_id\\\": \\\"1\\\",  \\\"created_at\\\": 1392734388,  \\\"updated_at\\\": 1392734388}\n\n\nData Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes.\n\nData Attribute Object\nKey\tType\tDescription\ntype\tstring\tValue is data_attribute\nmodel\tstring\tValue is contact for user/lead attributes, company for company attributes and conversation for conversation attributes.\nname\tstring\tName of the attributeExamples:email``region_name for region_name stored in location_data objectimage_url for image_url stored in avatar objectpaid_subscriber for CDA named paid_subscriber\nfull_name\tstring\tFull name of the attribute. Should match the name unless it's a nested attribute.Examples:email``location_data.region_name``avatar.image_url``custom_attributes.paid_subscriberWe can split full_name on . to access nested user object values.\nlabel\tstring\tReadable name of the attribute (i.e. name you see in the UI)\ndescription\tstring\tReadable description of the attribute\ndata_type\tstring\tType of data stored in the attribute.Possible values: string``integer``float``boolean``date\noptions\tlist\tList of predefined options for attribute value\napi_writable\tboolean\tCan this attribute be updated through API\nui_writable\tboolean\tCan this attribute be updated in the UI\ncustom\tboolean\tSet to true if this is a CDA\narchived\tboolean\tOnly applicable to CDAs\ncreated_at\ttimestamp\tThe time the CDA was created.Only applicable to CDAs.\nupdated_at\ttimestamp\tThe last time the CDA was updated.Only applicable to CDAs\nadmin_id\tstring\tTeammate who created the attribute.Only applicable to CDAs"
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/admins/view-admin-activity-logs/",
    "html": "List all activity logs\nExample Request & Response\ncurlhtml\ncurl https://api.intercom.io/admins/activity_logs?created_at_after=489222000&created_at_before=685695600 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json'\n\n\nExample Errors\n\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"parameter_not_found\\\",\\n\\t\\\"message\\\" => \\\"Please provide the following parameters: created_at_after\\\"\\n  }]\\n}\\n\n\nHTTP/1.1 403 RESTRICTED\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"api_plan_restricted\\\",\\n\\t\\\"message\\\" => \\\"This feature is not yet available to your app\\\"\\n  }]\\n}\n\n\nYou can get a log of activities by all admins in an app by sending a GET request to the URL https://api.intercom.io/admins/activity_logs.\n\nActivity List\nAttribute\tType\tDescription\ntype\tstring\tValue is activity_log.list\nactivity_logs\tarray\tA list of activity objects\npages\tobject\tOptional. A pagination object which may be empty, indication no further pages to fetch\nActivity Object\nAttribute\tType\tDescription\nactivity_type\tstring\tThe type of activity - see Activity Types & Descriptions below.\nactivity_description\tstring\tA sentence or two describing the activity - see Activity Types & Descriptions below.\nmetadata\tobject\tAn object containing information on the activity and what it modified\ncreated_at\ttimestamp\tThe time the activity was performed\nperformed_by\tobject\tAn Admin object of the admin who performed the activity\nid\tstring\tThe id representing the activity\nActivity Types & Descriptions\nType\tDescription\nadmin_assignment_limit_change\tA teammate changed their assignment limit\nadmin_away_mode_change\tA teammate changed their away mode and conversation reassignment settings\nadmin_deletion\tA teammate was removed from your workspace\nadmin_deprovisioned\tA teammate was deprovisioned from your workspace via SCIM\nadmin_invite_change\tThe permissions for a teammate invite were changed\nadmin_invite_creation\tA teammate invite was created\nadmin_invite_deletion\tA teammate invite was deleted\nadmin_login_failure\tA teammate tried to login with the wrong credentials\nadmin_login_success\tA teammate logged in successfully\nadmin_logout\tA teammate logged out\nadmin_password_reset_request\tA teammate requested a password reset\nadmin_password_reset_success\tA teammate's password was successfully reset\nadmin_permission_change\tThe permissions for a teammate were changed\nadmin_provisioned\tA teammate was provisioned on your workspace via SCIM\napp_admin_join\tA teammate joined your workspace (i.e. accepted your invite)\napp_authentication_method_change\tYour workspace's authentication methods were changed\napp_data_deletion\tA user or lead was deleted from your workspace\napp_data_export\tMessage or conversation data was exported from your workspace\napp_google_sso_domain_change\tYour workspace's Google SSO domain was changed\napp_identity_verification_change\tYour workspace's identity verification setting was changed\napp_name_change\tThe name of your workspace was changed\napp_outbound_address_change\tThe outbound email address was changed for your workspace\napp_package_installation\tAn app package was installed on your workspace\napp_package_token_regeneration\tAn access token for a specific app package was updated\napp_package_uninstallation\tAn app package was uninstalled from your workspace\napp_team_creation\tA team was created\napp_team_deletion\tA team was deleted\napp_team_membership_modification\tA team's membership was modified\napp_timezone_change\tAn app package was installed in your workspace\napp_webhook_creation\tA webhook subscription was created\napp_webhook_deletion\tA webhook subscription was deleted\narticles_in_messenger_enabled_change\tThe Messenger search for articles setting was changed\nbulk_delete\tUser or lead data was deleted from your workspace\nbulk_export\tUser or lead data was exported from your workspace\ncampaign_deletion\tA campaign was deleted from your workspace\ncampaign_state_change\tA campaign was changed on your workspace\nconversation_topic_change\tA conversation topic was changed\nconversation_topic_creation\tA conversation topic was created\nconversation_topic_deletion\tA conversation topic was deleted\nhelp_center_settings_change\tYour Help Center was turned on or off\ninbound_conversations_change\tThe Messenger inbound conversations setting was changed\ninbox_access_change\tThe inbox access setting was changed\nmessage_deletion\tA team was deleted from your workspace\nmessage_state_change\tA message's state was changed\nmessenger_look_and_feel_change\tThe Messenger look and feel setting was changed\nmessenger_search_required_change\tThe Messenger search required setting was changed\noffice_hours_change\tThe office hours setting was changed\nrole_change\tA role was changed\nrole_creation\tA role was created\nrole_deletion\tA role was deleted\nseat_change\tA teammate's seat was changed\nseat_revoke\tA teammate's seat was revoked\nsecurity_settings_change\tYour workspace's security settings were changed\ntemporary_expectation_change\tThe Messenger special notice settings were changed\nupfront_email_collection_change\tThe Messenger upfront email collection settings were changed\nwelcome_message_change\tThe Messenger welcome message settings were changed\nRequest Query Parameters\nParameter\tRequired?\tDescription\ncreated_at_after\tYes\tThe start date that you request data for. It must be formatted as a UNIX timestamp.\ncreated_at_before\tNo\tThe end date that you request data for. It must be formatted as a UNIX timestamp.\nResponse\n\nThis will return an Activity List which will contain an array titled activity_logs, in turn containing multiple Activity Objects."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/admins/set-admin-away-mode/",
    "html": "Set an admin to away\n\nYou can set an Admin as away for the Inbox.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nid\tstring\tThe id of the admin you want to set away mode or re-assign conversations.\naway_mode_enabled\tboolean\tSet to 'true' to change the status of the admin to away.\naway_mode_reassign\tboolean\tSet to 'true' to assign any new conversation replies to your default inbox.\nExample Request & Response\ncurltext\n$ curl https://api.intercom.io/admins/814860/away \\\\\\n-X PUT \\\\\\n-H 'Authorization: Bearer <Your access token>' \\\\\\n-H 'Accept: application/json'  \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"away_mode_enabled\\\": true,\\n  \\\"away_mode_reassign\\\": false\\n\\n}\n\nExample Errors\nAdmin without seat\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n\nResponse\n\nThis will return an Admin model of the admin set away."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/admins/list-admins/",
    "html": "List all admins\nExample Request & Response\n$ curl https://api.intercom.io/admins \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"type\": \"admin.list\",\n    \"admins\": [\n        {\n        \t\t\"type\": \"admin\",\n            \"id\": \"493881\",\n      \t\t\t\"name\": \"Hoban Washburne\",\n      \t\t\t\"email\": \"wash@serenity.io\"\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"mal@serenity.io\",\n            \"id\": \"646303\",\n            \"name\": \"Malcolm Reynolds \",\n            \"away_mode_enabled\": true,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"jayne@serenity.io\",\n            \"id\": \"1195856\",\n            \"name\": \"Jayne Cobb \",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"team\",\n            \"email\": null,\n            \"id\": \"814865\",\n            \"name\": \"SerenityTeam\",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"admin_ids\": [\n                493881,\n                646303,\n                1195856\n            ]\n        }\n    ]\n}\n\nintercom.admins.all.each { ... }\n\n<?php\n$admins= $intercom->admins->getAdmins();\nforeach ($admins->admins as $admin) {\n    print_r($admin->id);\n}?>\n\nAdminCollection admins = Admin.list();\n// get first page...\nList<Admin> pageItems = admins.getPageItems();\n// ...or iterate over pages\nwhile (admins.hasNext()) {\n    System.out.println(admins.next().getName());\n}\n\n\nYou can fetch a list of admins for a given workspace.\n\nResponse\n\nThis will return a list of Admin Objects for a given workspace. The result may also have a pages object if the response is paginated.\n\nAdmin List\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin.list'\nadmins\tarray\tA list of admin objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Retrieve a company",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/view-a-company/",
    "html": "Retrieve a company\nExample Request & Response\n$ curl \\\n-s https://api.intercom.io/companies?company_id=141 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Accept:application/json\" \\\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company\",\n  \"id\": \"531ee472cce572a6ec000006\",\n  \"name\": \"Blue Sun\",\n  \"plan\": {\n    \"type\":\"plan\",\n    \"id\":\"1\",\n    \"name\":\"Paid\"\n  },\n  \"company_id\": \"141\",\n  \"remote_created_at\": 1394531169,\n  \"created_at\": 1394533506,\n  \"updated_at\": 1396874658,\n  \"last_request_at\": 1396874658,\n  \"monthly_spend\": 49,\n  \"session_count\": 26,\n  \"user_count\": 10,\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0\n  }\n}\n\nintercom.companies.find(:id => \"41e66f0313708347cb0000d0\")\n\n<?php\n# Using the name of the company\n$intercom->companies->getCompanies(['name' => 'OneAmerica']);\n\n# Via company_id\n$intercom->companies->getCompanies(['company_id' => '10']);\n\n?>\n\nString id = \"541a144b201ebf2ec5000001\";\nCompany company = Company.find(id);\n\n\nYou can fetch a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the company.\nThe parameter should be url encoded.\ncompany_id\tString\tNo\tThe company_id you have given to the company.\n\nA company can also be fetched by its name using a name or company_id parameter in the url, whose values are the ones you have defined for that company -\n\nhttps://api.intercom.io/companies?name={name}\nhttps://api.intercom.io/companies?company_id={company_id}\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/list-company-contacts/",
    "html": "List attached contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id>/contacts \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nInvalid starting_after param\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000nbboasf1qqab6b910\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"client_error\\\",\\n      \\\"message\\\": \\\"Invalid starting_after param. Please try again using a starting_after value from a paginated response\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch a list of all contacts that belong to a company.\n\nResponse\n\nThis will return a paginated list of Contact objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Contact Objects\ntotal_count\tInteger\tThe total number of contacts\npages\tPagination Object\tThe information needed to paginate through contacts"
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/list-companies/",
    "html": "List all companies\nExample Request & Response\ncurlcurlrubyphpjava\n$ curl https://api.intercom.io/companies \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'\n\nHTTP/1.1 200 OK{  \\\"type\\\": \\\"company.list\\\",  \\\"total_count\\\": 105,  \\\"companies\\\": [    {      \\\"type\\\": \\\"company\\\",      \\\"id\\\": \\\"530370b477ad7120001d\\\",       ...     },     ...   ],  \\\"pages\\\": {    \\\"next\\\": \\\"https://api.intercom.io/companies?per_page=50&page=2\\\",    \\\"page\\\": 1,    \\\"per_page\\\": 50,    \\\"total_pages\\\": 3  }}# NB: Full company objects are returned\n\n\nYou can fetch a list of all companies.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nRequest Query Parameters\nParameter\tRequired\tDescription\norder\tNo\tAccepted values are asc or desc. Returns the companies in ascending or descending order. Default is desc.\nsort\tNo\tAccepted values are updated_at or last_request_at. Returns the companies ordered by the given value. Default is last_request_at.\ntag_id\tNo\tThe id of the tag to filter by.\nsegment_id\tNo\tThe id of the segment to filter by.\nResponse\n\nThis will return a paginated list of Company Objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Company Objects.\ntotal_count\tInteger\tThe total number of companies.\npages\tPagination Object\tThe information needed to paginate through companies\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/iterating-over-all-companies/",
    "html": "Scroll over all companies\n\nThe list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n# Send a GET request to get the first page of companies\n$ curl \\\n'https://api.intercom.io/companies/scroll' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n# To get the next page use the scroll param returned in the response\n$ curl \\\n'https://api.intercom.io/companies/scroll?scroll_param=562bc29f-ea55-4823-aaaf-f3faadceaa59' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company.list\",\n  \"companies\": [\n    {\n      \"type\": \"company\",\n      \"id\": \"530370b477ad7120001d\",\n       ...\n     },\n     ...\n   ],\n  \"scroll_param\": \"25b649f7-4d33-4ef6-88f5-60e5b8244309\"\n}\n\n# You can use the scroll method to list all your companies\nintercom.companies.scroll.each { |company| puts company.name}\n# Alternatively you can use the scroll.next method to get 100 companies with each request\nresult = intercom.companies.scroll.next\nresult.scroll_param\n=> \"0730e341-63ef-44da-ab9c-9113f886326d\"\nresult = intercom.companies.scroll.next(\"0730e341-63ef-44da-ab9c-9113f886326d\");\n\nSCROLL PARAMETER\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message:\n\"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/detach-contact-from-company/",
    "html": "Detach a contact from a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/companies/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can detach a company from a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return a Company model for the company that was just detached from the contact."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/delete-a-company/",
    "html": "Delete a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nCompany not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can delete a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return an object with details on the deleted company.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the company which is given by Intercom\nobject\tString\tThe type of object - company\ndeleted\tBoolean\tWhether the company has been deleted - true"
  },
  {
    "title": "The segment model",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/segments/segment-model/",
    "html": "The segment model\nExample Segment Object\n{\\n  \\\"type\\\": \\\"segment\\\",\\n  \\\"id\\\": \\\"53203e244cba153d39000062\\\",\\n  \\\"name\\\": \\\"New\\\",\\n  \\\"created_at\\\": 1394621988,\\n  \\\"updated_at\\\": 1394622004\\n}\n\n\nA segment is a group of your contacts defined by rules that you set. Contacts are automatically added to the segment every time the contact updates to match those rules. You can use Search for contacts to find contacts that match the same rules.\n\nSegment Object\nKey\tType\tDescription\ntype\tstring\tvalue is segment'.\nid\tstring\tThe unique identifier representing the segment.\nname\tstring\tThe name of the segment.\ncreated_at\ttimestamp\tThe time the segment was created.\nupdated_at\ttimestamp\tThe time the segment was updated.\nperson_type\tstring\tType of the record: user or lead.\ncount\tinteger\tThe number of items in the user segment. It's returned when include_count=true is included in the request."
  },
  {
    "title": "Create or update a company",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/create-or-update-company/",
    "html": "Create or update a company\nExample Request & Response\n$ curl https://api.intercom.io/companies \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type:application/json' -d '\n{\n  \"name\": \"Blue Sun\",\n  \"plan\": \"Paid\",\n  \"company_id\": \"6\",\n  \"remote_created_at\": 1394531169,\n  \"size\": 750,\n  \"website\": \"http://www.example.com\",\n  \"industry\": \"Manufacturing\",\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0,\n    \"monthly_spend\": 155.98\n  }\n}'\n\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"company\",\n    \"company_id\": \"6\",\n    \"id\": \"57e0120926806ceca3c13ba8\",\n    \"app_id\": \"pi3243fa\",\n    \"name\": \"Blue Sun\",\n    \"remote_created_at\": 1394531169,\n    \"created_at\": 1474302473,\n    \"updated_at\": 1475659931,\n    \"last_request_at\": 1473419085,\n    \"monthly_spend\": 49,\n    \"session_count\": 0,\n    \"user_count\": 0,\n    \"tags\": {\n        \"type\": \"tag.list\",\n        \"tags\": []\n    },\n    \"segments\": {\n        \"type\": \"segment.list\",\n        \"segments\": [\n            {\n                \"type\": \"segment\",\n                \"id\": \"56cc69cc8618d37b45000009\"\n            }\n        ]\n    },\n    \"plan\": {\n        \"type\": \"plan\",\n        \"id\": \"108609\",\n        \"name\": \"Paid\"\n    },\n    \"custom_attributes\": {\n        \"paid_subscriber\": true,\n        \"team_mates\": 0,\n        \"referral_source\": \"Google\",\n        \"founded\": \"20th Century\",\n        \"monthly_spend\": 155.98,\n        \"remove\": true\n    }\n}\n\nintercom.companies.create(:company_id => 6, :name => \"Blue Sun\", :plan => \"Paid\")\n\n<?php\n$intercom->companies->create([\n    \"name\" => \"Academy\",\n    \"id\" => \"10\"\n])\n?>\n\nimport static io.intercom.api.CustomAttribute.*;\n\nCompany company = new Company()\n  .setName(\"Blue Sun\")\n  .setCompanyID(\"1\")\n  .setPlan(new Company.Plan(\"premium\"))\n  .addCustomAttribute(newIntegerAttribute(\"items\", 246))\n  .addCustomAttribute(CustomAttribute.newStringAttribute(\"bar\", \"fruity\"));\n\ncompany = Company.create(company);\n\ncompany.setName(\"Blue Sun Corporation\");\nCompany.update(company);\n\n\nYou can create or update a company.\n\nCOMPANIES WITH NO USERS\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated.\n\nRequest Body Parameters\nArgument\tType\tDescription\nremote_created_at\ttimestamp\tThe time the company was created by you.\ncompany_id\tstring\tThe company id you have defined for the company.\nCan't be updated.\nname\tstring\tThe name of the company.\nmonthly_spend\tnumber\tHow much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..\nplan\tstring\tThe name of the plan you have associated with the company.\nsize\tnumber\tThe number of employees in this company.\nwebsite\tstring\tThe URL for this company's website. Please note that the value specified here is not validated. Accepts any string.\nindustry\tstring\tThe industry that this company operates in.\ncustom_attributes\tobject\tA hash of key/value pairs containing any other data about the company you want Intercom to store..\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/update-contact/",
    "html": "Update a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{\\t\\\"role\\\": \\\"user\\\",\\t\\\"external_id\\\": \\\"25\\\",\\t\\\"email\\\": \\\"wash@serenity.io\\\",\\t\\\"phone\\\": \\\"+1123456789\\\",\\t\\\"name\\\": \\\"Hoban Washburn\\\",\\t\\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\t\\\"last_seen_at\\\": 1571069751,\\t\\\"signed_up_at\\\": 1571069751,\\t\\\"owner_id\\\": 127,\\t\\\"unsubscribed_from_emails\\\": false,\\t\\\"custom_attributes\\\": {\\t\\t\\\"paid_subscriber\\\": true,\\t\\t\\\"monthly_spend\\\": 155.5,\\t\\t\\\"team_mates\\\": 1\\t}}\n\nExample Errors\nHTTP/1.1 404 FOUND\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"9a3d0816-9707-4598-977e-c009ba630148\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"Contact Not Found\"\n    }\n  ]\n}\n\nHTTP/1.1 409 CONFLICT\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"80ec9d92-99ff-4da9-9a0e-c0ab7c42f7e7\",\n  \"errors\": [\n    {\n      \"code\": \"conflict\",\n      \"message\": \"A contact matching those details already exists with id=5da6f18e3d7cf967e4582d05\"\n    }\n  ]\n}\n\nHTTP/1.1 400 UNPROCESSABLE ENTITY\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"00043csj9iva7pl9mmmg\",\n  \"errors\": [\n    {\n      \"code\": \"client_error\",\n      \"message\": \"Contact with user role can't be converted to a lead\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"00043csj9iva7pl9mmmg\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"The owner specified is not a member of the workspace\"\n    }\n  ]\n}\n\n\nYou can update an existing contact (ie. user or lead).\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nrole\tString\tYes\tThe role of the contact. Accepted values are user or lead (only if lead already).\nexternal_id\tString\tYes - if role is user and email is blank\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tYes - if role is lead, or if role is user and external_id is blank\tThe contacts email.\nphone\tString\tNo\tThe contacts phone.\nname\tString\tNo\tThe contacts name.\navatar\tString\tNo\tAn image URL containing the avatar of a contact.\nowner_id\tString\tNo\tThe id of an admin that has been assigned account ownership of the contact.\nsigned_up_at\tDate (UNIX timestamp)\tNo\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tNo\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nowner_id\tInteger\tNo\tThe id of an admin that has been assigned account ownership of the contact.\nunsubscribed_from_emails\tBoolean\tNo\tWhether the contact is unsubscribed from emails.\ncustom_attributes\tObject\tNo\tThe custom attributes which are set for the contact.\nCREATING NEW CUSTOM DATA ATTRIBUTES\n\nYou can only write to custom data attributes that already exist on the workspace. If you need to create new attributes to write to, you should Create Data Attributes through the data Attributes API.\n\nResponse\n\nThis will return a Contact model of the contact you just update."
  },
  {
    "title": "The company model",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/company-model/",
    "html": "The company model\nExample Company Object\n{\\n  \\\"type\\\": \\\"company\\\",\\n  \\\"id\\\": \\\"531ee472cce572a6ec000006\\\",\\n  \\\"name\\\": \\\"Blue Sun\\\",\\n  \\\"plan\\\": {\\n        \\\"type\\\": \\\"plan\\\",\\n        \\\"id\\\": \\\"269315\\\",\\n        \\\"name\\\": \\\"pro\\\"\\n    },\\n  \\\"company_id\\\": \\\"6\\\",\\n  \\\"remote_created_at\\\": 1394531169,\\n  \\\"created_at\\\": 1394533506,\\n  \\\"updated_at\\\": 1396874658,\\n  \\\"size\\\": 85,\\n  \\\"website\\\": \\\"http://www.example.com\\\",\\n  \\\"industry\\\": \\\"Manufacturing\\\",\\n  \\\"monthly_spend\\\": 49,\\n  \\\"session_count\\\": 26,\\n  \\\"user_count\\\": 10,\\n  \\\"custom_attributes\\\": {\\n    \\\"paid_subscriber\\\" : true,\\n    \\\"team_mates\\\": 0\\n  }\\n}\n\n\nCompanies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies.\n\nCompanies will not appear within Intercom until users have been added or associated with a company.\n\nCompany object\nAttribute\tType\tDescription\ntype\tString\tValue is 'company'.\nid\tString\tThe Intercom defined id representing the company.\ncreated_at\tDate (UNIX timestamp)\tThe time the company was added to Intercom.\nremote_created_at\tDate (UNIX timestamp)\tThe time the company was created by you.\nupdated_at\tDate (UNIX timestamp)\tThe last time the company was updated.\nlast_request_at\tDate (UNIX timestamp)\tThe time the company last recorded making a request.\ncompany_id\tString\tThe company id you have defined for the company.\nname\tString\tThe name of the company.\ncustom_attributes\tObject\tThe custom attributes you have set on the company.\nsession_count\tInteger\tHow many sessions the company has recorded.\nmonthly_spend\tInteger\tHow much revenue the company generates for your business.\nuser_count\tInteger\tThe number of users in the company.\nplan\tObject\tThe name of the plan you have associated with the company.\nsize\tInteger\tThe number of employees in the company.\nwebsite\tString\tThe URL for the company website.\nindustry\tString\tThe industry that the company operates in.\nPlan object\nAttribute\tType\tDescription\ntype\tstring\tWill always be of type 'plan'\nid\tstring\tThe plan ID\nname\tstring\tThe name of the plan, note that this is the only field that can be set via the API."
  },
  {
    "title": "Unarchive a contact",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/unarchive-a-contact/",
    "html": "Unarchive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/unarchive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can unarchive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the unarchived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - false"
  },
  {
    "title": "Search for contacts",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/search-for-contacts/",
    "html": "Search for contacts\n\nYou can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\nWHY IS THERE A DELAY WHEN CREATING CONTACTS AND SEARCHING FOR THEM?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a customer that you can search for. See all accepted fields below.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\nNESTING & LIMITATIONS\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\\n\\nThere are some limitations to the amount of multiple's there can be:\\n\\n_ There's a limit of max 2 nested filters\\n_ There's a limit of max 15 filters for each AND or OR group\n\nExample Request (Single Filter)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"custom_attributes.salesforce_status\\\",\\n    \\\"operator\\\": \\\"~\\\",\\n    \\\"value\\\": \\\"open\\\"\\n  }\\n}\n\nExample Request (Multiple Filters)\njsonjson\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"facebook\\\"\\n      }, \\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"twitter\\\"\\n      },\\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"instagram\\\"\\n      }\\n    ]\\n  }\\n}\n\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n    \\\"operator\\\": \\\"IN\\\",\\n    \\\"value\\\": [\\\"facebook\\\", \\\"twitter\\\", \\\"instagram\\\"]\\n  }\\n}\n\nExample Request (Nested Filters)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"created_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436650\\n          }, \\n          {\\n            \\\"field\\\": \\\"signed_up_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436784\\n          }\\n        ]\\n      },\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"custom_attributes.salseforce_status\\\",\\n            \\\"operator\\\": \\\"~\\\",\\n            \\\"value\\\": \\\"Open\\\"\\n          }, \\n          {\\n            \\\"field\\\": \\\"custom_attributes.salesforce_object_type\\\",\\n            \\\"operator\\\": \\\"=\\\",\\n            \\\"value\\\": \\\"Lead\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"email does not support operator: >\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nAccepted Fields\nSEARCHING FOR TIMESTAMP FIELDS\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.\\n\\nFor example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.\\n\\nIf you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).\\n\\nThis behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals\n!=\tAll\tDoesn't Equal\nIN\tAll\tIn\nShortcut for OR queries\nValues must be in Array\nNIN\tAll\tNot In\nShortcut for OR ! queries\nValues must be in Array\n>\tInteger\nDate (UNIX Timestamp)\tGreater than\n<\tInteger\nDate (UNIX Timestamp)\tLower than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Contact model that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "Attach a contact to a company",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/attach-contact-to-company/",
    "html": "Attach a contact to a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/companies \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n\\t\\\"id\\\": \\\"56cde0cc3deab1bd8c000100\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can attach a company to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return a Company model for the company that was just attached to the contact."
  },
  {
    "title": "Merge two contacts",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/merge-contact/",
    "html": "Merge two contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/merge \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"from\\\": \\\"5d70dd30de4efd54f42fd526\\\",\\n  \\\"into\\\": \\\"5ba682d23d7cf92bef87bfd4\\\"\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\nHTTP/1.1 400 UNPROCESSABLE ENTITY\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"0019c4t1derm7namdon0\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"invalid_merge\\\",\\n      \\\"message\\\": \\\"Merging can only be performed on a lead into a user\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can merge a contact with a role of lead into a contact with a role of user.\n\nWHAT HAPPENS UPON A CONTACT BEING MERGED?\n\nThe contact that's specified as from will be deleted after being merged into the contact specified as into. Attributes that don't exist on the contact specified as into will be copied over.\n\nRequest Body Parameters\nParameter\tType\tRequired\tDescription\nfrom\tString\tYes\tThe unique identifier for the contact to merge away from. Must be a lead.\ninto\tString\tYes\tThe unique identifier for the contact to merge into. Must be a user.\nResponse\n\nThis will return a Contact model for the contact who's been merged into."
  },
  {
    "title": "List attached tags",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/list-tags-of-contact/",
    "html": "List attached tags\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/tags \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of tags that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Tag objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - tag.list\ntags\tArray\tAn array containing Tag Objects"
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/list-contacts/",
    "html": "List all contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nInvalid starting_after param\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000nbboasf1qqab6b910\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"client_error\\\",\\n      \\\"message\\\": \\\"Invalid starting_after param. Please try again using a starting_after value from a paginated response\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch a list of all contacts.\n\nResponse\n\nThis will return a paginated list of Contact objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Contact Objects\ntotal_count\tInteger\tThe total number of contacts\npages\tPagination Object\tThe information needed to paginate through contacts"
  },
  {
    "title": "List attached companies",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/list-companies-of-contact/",
    "html": "List attached companies\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/companies \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of companies that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a paginated list of Company objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - company.list\ncompanies\tArray\tAn array containing Company Objects\ntotal_count\tInteger\tThe total number of companies associated to this contact\npages\tPagination Object\tThe information needed to paginate through companies"
  },
  {
    "title": "Retrieve a contact",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/get-contact/",
    "html": "Retrieve a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch the details of a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a Contact model."
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/delete-contact/",
    "html": "Delete a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can delete a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the deleted contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\ndeleted\tBoolean\tWhether the contact has been deleted - true"
  },
  {
    "title": "The contact model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/contacts/contacts-model/",
    "html": "The contact model\nExample Contacts Object\nJSON\n{  \\\"type\\\": \\\"contact\\\",  \\\"id\\\": \\\"5ba682d23d7cf92bef87bfd4\\\",  \\\"workspace_id\\\": \\\"ecahpwf5\\\",  \\\"external_id\\\": \\\"25\\\",  \\\"role\\\": \\\"user\\\",  \\\"email\\\": \\\"wash@serenity.io\\\",  \\\"phone\\\": \\\"+1123456789\\\",  \\\"name\\\": \\\"Hoban Washburn\\\",  \\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",  \\\"owner_id\\\": 127,  \\\"social_profiles\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"social_profile\\\",        \\\"name\\\": \\\"Twitter\\\",        \\\"url\\\": \\\"http://twitter.com/th1sland\\\"      }    ]  },  \\\"has_hard_bounced\\\": false,  \\\"marked_email_as_spam\\\": false,  \\\"unsubscribed_from_emails\\\": false,  \\\"created_at\\\": 1571672154,  \\\"updated_at\\\": 1571672158,  \\\"signed_up_at\\\": 1571069751,  \\\"last_seen_at\\\": 1571069751,  \\\"last_replied_at\\\": 1571672158,  \\\"last_contacted_at\\\": 1571672158,  \\\"last_email_opened_at\\\": 1571673478,  \\\"last_email_clicked_at\\\": 1571676789,  \\\"language_override\\\": null,  \\\"browser\\\": \\\"chrome\\\",  \\\"browser_version\\\": \\\"77.0.3865.90\\\",  \\\"browser_language\\\": \\\"en\\\",  \\\"os\\\": \\\"OS X 10.14.6\\\",  \\\"location\\\": {    \\\"type\\\": \\\"location\\\",    \\\"country\\\": \\\"Ireland\\\",    \\\"region\\\": \\\"Dublin\\\",    \\\"city\\\": \\\"Dublin\\\"  },  \\\"android_app_name\\\": null,  \\\"android_app_version\\\": null,  \\\"android_device\\\": null,  \\\"android_os_version\\\": null,  \\\"android_sdk_version\\\": null,  \\\"android_last_seen_at\\\": null,  \\\"ios_app_name\\\": null,  \\\"ios_app_version\\\": null,  \\\"ios_device\\\": null,  \\\"ios_os_version\\\": null,  \\\"ios_sdk_version\\\": null,  \\\"ios_last_seen_at\\\": null,  \\\"custom_attributes\\\": {    \\\"paid_subscriber\\\": true,    \\\"monthly_spend\\\": 155.5,    \\\"team_mates\\\": 1  },  \\\"tags\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"2\\\",        \\\"url\\\": \\\"/tags/2\\\"      },      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"4\\\",        \\\"url\\\": \\\"/tags/4\\\"      },      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"5\\\",        \\\"url\\\": \\\"/tags/5\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/tags\\\",    \\\"total_count\\\": 3,    \\\"has_more\\\": false  },  \\\"notes\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"note\\\",        \\\"id\\\": \\\"20114858\\\",        \\\"url\\\": \\\"/notes/20114858\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/notes\\\",    \\\"total_count\\\": 1,    \\\"has_more\\\": false  },  \\\"opted_out_subscription_types\\\": {    \\\"type\\\": \\\"list\\\",     \\\"data\\\": [       {         \\\"id\\\": \\\"1\\\",         \\\"type\\\": \\\"subscription\\\",         \\\"url\\\": \\\"/subscription_types/1\\\"       }     ],     \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/subscriptions\\\",     \\\"total_count\\\": 1,     \\\"has_more\\\": false  },  \\\"companies\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5ba686093d7cf93552a3dc99\\\",        \\\"url\\\": \\\"/companies/5ba686093d7cf93552a3dc99\\\"              },      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5cee64a03d7cf90c51b36f19\\\",        \\\"url\\\": \\\"/companies/5cee64a03d7cf90c51b36f19\\\"      },      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5d7668883d7cf944dbc5c791\\\",        \\\"url\\\": \\\"/companies/5d7668883d7cf944dbc5c791\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/companies\\\",    \\\"total_count\\\": 3,    \\\"has_more\\\": false  },  \\\"utm_campaign\\\": \\\"my-campaign\\\",  \\\"utm_content\\\": null,  \\\"utm_medium\\\": \\\"social\\\",  \\\"utm_source\\\": null,  \\\"utm_term\\\": null,  \\\"referrer\\\": null}\n\n\nOur Contacts API is a central place to gather all information and take actions on your contacts (ie. users and leads), such as fetching, searching, creating, updating, and deleting.\n\nThe Contacts Model provides details on these contacts within Intercom, and will specify whether they are a user or lead through the role attribute.\n\nContact Object\nKey\tType\tDescription\ntype\tString\tThe type of object - contact.\nid\tString\tThe unique identifier for the contact which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the contact belongs to.\nexternal_id\tString\tA unique identifier for the contact which is given to Intercom.\nrole\tString\tThe role of the contact - user or lead.\nemail\tString\tThe contacts email.\nphone\tString\tThe contacts phone.\nname\tString\tThe contacts name.\navatar\tString\tAn image URL containing the avatar of a contact.\nowner_id\tInteger\tThe id of an admin that has been assigned account ownership of the contact.\nsocial_profiles\tList\tA list of social profiles associated to the contact.\nhas_hard_bounced\tBoolean\tWhether the contact has had an email sent to them hard bounce.\nmarked_email_as_spam\tBoolean\tWhether the contact has marked an email sent to them as spam.\nunsubscribed_from_emails\tBoolean\tWhether the contact is unsubscribed from emails.\ncreated_at\tDate (UNIX timestamp)\tThe time when the contact was created.\nupdated_at\tDate (UNIX timestamp)\tThe time when the contact was last updated.\nsigned_up_at\tDate (UNIX timestamp)\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nlast_replied_at\tDate (UNIX timestamp)\tThe time when the contact last messaged in.\nlast_contacted_at\tDate (UNIX timestamp)\tThe time when the contact was last messaged.\nlast_email_opened_at\tDate (UNIX timestamp)\tThe time when the contact last opened an email.\nlast_email_clicked_at\tDate (UNIX timestamp)\tThe time when the contact last clicked a link in an email.\nlanguage_override\tString\tA preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.\nbrowser\tString\tThe name of the browser which the contact is using.\nbrowser_version\tString\tThe version of the browser which the contact is using.\nbrowser_language\tString\tThe language set by the browser which the contact is using.\nos\tString\tThe operating system which the contact is using.\nlocation\tObject\tAn object showing location details of the contact.\nandroid_app_name\tString\tThe name of the Android app which the contact is using.\nandroid_app_version\tString\tThe version of the Android app which the contact is using.\nandroid_device\tString\tThe Android device which the contact is using.\nandroid_os_version\tString\tThe version of the Android OS which the contact is using.\nandroid_sdk_version\tString\tThe version of the Android SDK which the contact is using.\nandroid_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the Android app.\nios_app_name\tString\tThe name of the iOS app which the contact is using.\nios_app_version\tString\tThe version of the iOS app which the contact is using.\nios_device\tString\tThe iOS device which the contact is using.\nios_os_version\tString\tThe version of iOS which the contact is using.\nios_sdk_version\tString\tThe version of the iOS SDK which the contact is using.\nios_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the iOS app.\ncustom_attributes\tObject\tThe custom attributes which are set for the contact.\ntags\tAddressable List\tThe tags which have been added to the contact.\nnotes\tAddressable List\tThe notes which have been added to the contact.\ncompanies\tAddressable List\tThe companies which the contact belongs to.\nLocation Object\nKey\tType\tDescription\ntype\tString\tThe type of object - location.\ncountry\tString\tThe country where the contact is.\nregion\tString\tA subdivision of the country which the contact is in (ie. state, province, county, territory, etc).\ncity\tString\tThe city where the contact is.\nSocial Profile Object\nKey\tType\tDescription\ntype\tString\tThe type of object - social_profile.\nname\tString\tThe name of the service (ie. Twitter, Facebook, etc).\nurl\tString\tThe profile page for the contact on the service.\nAddressable List\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\ndata\tArray\tAn array of Addressable Objects. Maximum of 10.\nurl\tString\tThe URL where the full list can be accessed (ie. /contacts/1234/companies).\ntotal_count\tInteger\tThe total amount of records.\nhas_more\tBoolean\tWhether there's more Addressable Objects to be viewed. If true, use the url to view all.\nAddressable Object\nKey\tType\tDescription\ntype\tString\tThe type of object - company, note, tag.\nid\tString\tThe id of the object.\nurl\tString\tThe URL where the object in question can be accessed (ie. /companies/45678)."
  },
  {
    "title": "Pagination (Cursor)",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/pagination-cursor/",
    "html": "Pagination (Cursor)\n\nWe're starting to adopt a cursor-based approach to pagination for certain list resources.\n\nThis currently only applies when listing Contacts.\n\nExample Initial Request\ncURL (Initial Request)\n$ curl https://api.intercom.io/contacts?per_page=5 \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nInitial Request\n\nYou can initially specify how many items per_page you want to fetch.\n\nParameter\tType\tDescription\nper_page\tInteger\tThe number of items returned in a single response.\nDefault is 50.\nMax is 150.\nExample Initial Pages Object\nJSON\n{\\n  \\\"pages\\\": {\\n    \\\"type\\\": \\\"pages\\\",\\n    \\\"next\\\": {\\n      \\\"page\\\": 4,\\n      \\\"starting_after\\\": \\\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\\\nIncfQLD3ouPkZlCwJ86F\\\\n\\\"\\n    },\\n    \\\"page\\\": 3,\\n    \\\"per_page\\\": 5,\\n    \\\"total_pages\\\": 10\\n   }\\n}\n\nResponse\n\nIn order to iterate through pages, you must parse the query response. A query with multiple response pages will include a next key in the pages object. When a next value is provided, the starting_after value must be sent back in a new request in order to iterate to the next page.\n\nParameter\tType\tDescription\nstarting_after\tString\tThe cursor used for pagination in order to fetch the next page of results.\n\n🚧 Paginating through all results\n\nThis method of pagination is used to iterate through a result set until all results have been fetched, not to directly go to page X of the results. This is not possible.\n\nExample Subsequent Requests\ncURL (Subsequent Requests)\n$ curl https://api.intercom.io/contacts?starting_after=\\\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\\\nIncfQLD3ouPkZlCwJ86F\\\\n\\\" \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n"
  },
  {
    "title": "Pagination",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/pagination/",
    "html": "Pagination\n\nThe majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.\n\nPages Object\nParameter\tDescription\nnext\tA link to the next page of results. A response that does not contain a next link does not have further data to fetch.\nprev\tA link to the previous page of results.\nfirst\tA link to the first page of results.\nlast\tA link to the last page of results.\nWHAT ABOUT FOR CONTACTS AND SEARCHES?\n\nWhen listing any Contact objects, we will instead use a cursor-based approach.\n\nOur Search resources will instead use a POST-based approach."
  },
  {
    "title": "Pagination & Sorting (Search)",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/pagination-search/",
    "html": "Pagination & Sorting (Search)\n\nWhen you use any Search resource, we require you to make a POST request that will not accept the common query params of GET requests. Therefore, the structure here has slight variations to our cursor-based approach.\n\nAs of v2.3, this only applies to Searching for Contacts.\n\nPagination\nExample Request Body with Pagination for first page\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"name\\\",\\n    \\\"operator\\\": \\\"=\\\",\\n    \\\"value\\\": \\\"alex\\\"\\n  },\\n  \\\"pagination\\\": {\\n    \\\"per_page\\\": 5,\\n  } \\n}\n\n\nYou can specify how many items per page you want to fetch.\n\nDEFAULT PAGINATION AMOUNT\n\nIf pagination is not provided, the request defaults to 50 items.\n\nExample Initial Pages Object\n{\\n  \\\"pages\\\": {\\n  \\\"type\\\": \\\"pages\\\",\\n  \\\"next\\\": {\\n    \\\"page\\\": 4,\\n    \\\"starting_after\\\": \\\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\\\nIncfQLD3ouPkZlCwJ86F\\\\n\\\"\\n  },\\n  \\\"page\\\": 3,\\n  \\\"per_page\\\": 5,\\n  \\\"total_pages\\\": 10\\n  }\\n}\n\n\nIn order to iterate through pages, you must parse the query response. A query with multiple response pages will include a next key in the pages hash. When a next value is provided, the starting_after value must be sent back in a new request to iterate to the next page.\n\n🚧 Paginating through all results\n\nThis method of pagination is used to iterate through a result set until all results have been fetched, not to directly go to page X of the results. This is not possible.\n\nExample Request Body with Pagination for next page\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"name\\\",\\n    \\\"operator\\\": \\\"=\\\",\\n    \\\"value\\\": \\\"alex\\\"\\n  },\\n  \\\"pagination\\\": {\\n    \\\"per_page\\\": 5,\\n    \\\"starting_after\\\": \\\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\\\nIncfQLD3ouPkZlCwJ86F\\\\n\\\"\\n  } \\n}\\n\n\n\n🚧 Warning about search context state\n\nThe starting_after context is stateless. Consequently, if items are updated between 2 paginated queries, this can lead to duplicate or missed records.\n\nFor example, if a query is sorting results by number of sessions and an item is updated from 1 session to 2 sessions during the pagination, they may be listed on page 1 of the results, but also on page 2.\n\nSorting\nExample Request Body with Sort\n{\n \"query\":  {\n    \"field\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"alex\"\n  },\n  \"sort\": {\n    \"field\": \"name\",\n    \"order\": \"ascending\"\n  } \n}\n\n\nThe Search resources can also sort query results by using the following parameters within the sort object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tAny searchable attribute (available on the Simple Query \"Allowed fields\").\norder\tNo\tEither \"ascending\" or \"descending\" - default to \"descending\" if none is provided.\nDEFAULT SORT ORDER\n\nIf no sort pattern is provided, the query will use the default sorting parameter \"last_request_at\" with a descending value (e.g. listing most recent active items first)."
  },
  {
    "title": "Retrieve a visitor",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/visitors/view-a-visitor/",
    "html": "Retrieve a visitor\nExample ID Request\n$ curl \\\n-s https://api.intercom.io/visitors/<id> \\   \n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nor \n\n$ curl \\\n-s https://api.intercom.io/visitors\\?user_id\\=16e690c0-485a-4e87-ae98-a326e788a4f7 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"visitor\",\n  \"id\": \"573479f784c5acde6a000575\",\n  \"user_id\": \"16e690c0-485a-4e87-ae98-a326e788a4f7\",\n  \"email\": \"winstonsmith@truth.org\",\n  \"name\": \"Winston Smith\",\n  ...\n}\n# NB: Full Visitor objects are returned\n\nvisitor = intercom.visitors.find(:id => \"530370b477ad7120001d\")\nvisitor = intercom.visitors.find(:user_id => \"8a88a590-e1c3-41e2-a502-e0649dbf721c\")\n\n\nYou can fetch the details of a single visitor.\n\nRequest Path Parameters\nParameter\tRequired?\tDescription\nid\tOne of\tId provided by Intercom.\n?user_id=\tOne of\tTo get the visitor user_id from the browser you can use the Intercom JS SDK following method : Intercom('getVisitorId').\nResponse\n\nThis will return a Visitor Model."
  },
  {
    "title": "The visitor model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/visitors/visitor-object/",
    "html": "The visitor model\n\nVisitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform.\nThe Visitors resource provides methods to fetch, update, convert and delete.\n\nVisitor Object\nAttribute\tType\tDescription\ntype\tString\tValue is 'visitor'.\nid\tString\tThe Intercom defined id representing the Visitor.\ncreated_at\tDate (UNIX timestamp)\tThe time the Visitor was added to Intercom.\nupdated_at\tDate (UNIX timestamp)\tThe last time the Visitor was updated.\nuser_id\tString\tAutomatically generated identifier for the Visitor.\nname\tString\tThe name of the Visitor.\ncustom_attributes\tObject\tThe custom attributes you have set on the Visitor.\nlast_request_at\tDate (UNIX timestamp)\tThe time the Lead last recorded making a request.\navatar\tObject\tAn avatar object for the Visitor.\nunsubscribed_from_emails\tBoolean\tWhether the Visitor is unsubscribed from emails.\nlocation_data\tObject\tA Location Object relating to the Visitor.\nsocial_profiles\tList\tA list of social profiles associated with the Visitor.\nsegments\tList\tA list of segments the Visitor.\ntags\tList\tA list of tags associated with the Visitor."
  },
  {
    "title": "Object Model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/object-model/",
    "html": "Object Model\nCommon Fields and Metadata\n{\\n  \\\"type\\\": \\\"contacts\\\",\\n  \\\"id\\\": \\\"456456456456\\\",\\n  \\\"created_at\\\": 1392241887,\\n  \\\"custom_attributes\\\": {\\n    \\\"note\\\": \\\"some extra information\\\"\\n  }\\n}\n\nCommon Fields\n\nAPI objects have a type field indicating their object type. Each object in the API may be given an identifier, indicated via its id field, and will typically be addressable via a URI. Many objects will also have a created_at field indicating the object's creation date as a UTC Unix timestamp.\n\nDates and Timestamps\n\nAll temporal fields in the API are encoded as Unix timestamps and are by definition always treated as UTC. The most common time fields in the API are created_at and updated_at.\n\nParameter\tDescription\ncreated_at\tThe time the object was created. In most, but not all cases, this is the time the object was created according to the API server.\nupdated_at\tThe time the object was last updated according to the API server.\nOptional Fields\n\nUnpopulated optional data is returned as follows -\n\nNumber, String and Boolean types may be returned as having null values.\nArrays and Objects may be returned as empty ([] {})\n\nIn general clients should be able to handle null and empty fields.\n\nMetadata and Custom Attributes\n\nSome object types, such as Events, Users and Companies, have a metadata or custom_attributes field that allows clients to set custom-defined data about an object."
  },
  {
    "title": "Update a visitor",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/visitors/update-a-visitor/",
    "html": "Update a visitor\nExample Request\n$ curl https://api.intercom.io/visitors \\\n-X PUT \\\n-H 'Authorization:Bearer <Your access token>'  \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d '\n{\n  \"user_id\": \"124\",\n  \"name\": \"Winston Smith\",\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"monthly_spend\": 155.5,\n    \"team_mates\": 9\n  }\n}'\n\nHTTP/1.1 200 OK\n\n{\n  \"user_id\": \"124\",\n  \"name\": \"Winston Smith\",\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"monthly_spend\": 155.5,\n    \"team_mates\": 9\n  }\n  \n  # and the rest of the Visitor model\n}'\n\nvisitor.name = \"Winston Smith\"\nvisitor.custom_attribute[:foo] = 'bar'\nintercom.visitors.save(visitor)\n\n\nSending a PUT request to /visitors and passing identifiers (user_id or id) in the body will result in an update of an existing Visitor.\n\nRequest Body Parameters\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tA unique identified for the visitor which is given by Intercom.\nuser_id\tString\tOne of\tA unique identified for the visitor which is given by you.\nname\tString\tNo\tThe visitor's name.\ncustom_attributes\tObject\tNo\tThe custom attributes which are set for the visitor.\nResponse\n\nThis will return a Visitor Model of the visitor you just updated."
  },
  {
    "title": "Identifiers and URLs",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/identifiers-and-urls/",
    "html": "Identifiers and URLs\n\nAll objects in the API have an id field indicating their logical identifier.\n\nParameter\tDescription\nid\tA string that identifies the object within the API. The id field will not be larger than 128 characters (in SQL it corresponds to a varchar(128)).\n\nThese fields must always be treated as opaque strings - no guarantees are made about the internal structure of the id fields for an object.\n\nThe id field is always defined by the API server and is guaranteed to be unique relative to the type field - this means no two user objects will have the same id field, but a user and a company may have the same value for their id fields. . Some object types (such as Contact), also support client defined identifiers.\n\nThe company and user objects deserve special mention when it comes to identity for two reasons -\n\nThey allow you send your own external identifiers\nThe contact id field is in some cases, aliased to intercom_user_id. This is done to distinguish it from other identifiers in the API and to avoid confusion as to which object type an id denotes."
  },
  {
    "title": "Archive a contact",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/archive-a-contact/",
    "html": "Archive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/archive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can archive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the archived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - true"
  },
  {
    "title": "Encoding",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/encoding/",
    "html": "Encoding\n\nData is encoded as defined by JSON in RFC4627. The default encoding for APIs is UTF-8. Certain characters, such as Emojji may be handled as surrogate unicode pairs (see section '2.5. Strings' of RFC4627).\n\nSome query parameters may need to be url encoded when sending - for example, the email parameter value used to query users should be encoded.\n\nHTML ENCODING\n\nIt should be noted that the following identifiers are encoded to protect from potential cross-site scripting attacks: 'name', 'user_id', 'company_id' and 'email'. As a result you may see these identifiers in their encoded format when you retrieve them via the API. \\nNote that the characters we encode are double quote, single quote, ampersand, less than and greater than symbols i.e \" ' & < >\n\nHTML Encoding example\n\\\"X&Ys\\\" == \\\"X&amp;Y&#39;s\\\"\n"
  },
  {
    "title": "Delete a visitor",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/visitors/delete-a-visitor/",
    "html": "Delete a visitor\nExample Request & Response\ncurlcurl\n$ curl \\\\\\nhttps://api.intercom.io/visitors/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 Ok\\n\\n{\\n  \\\"type\\\": \\\"visitor\\\",\\n  \\\"id\\\": \\\"530370b477ad7120001d\\\",\\n  \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"\\n  ...\\n}\\n\n\n\nYou can delete a single visitor.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the visitor which is given by Intercom.\nResponse\n\nThis will return a Visitor Model of the visitor you just deleted."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/reply-to-a-conversation/",
    "html": "Reply to a conversation\nExample Request & Response (Contact Reply)\n$ curl 'https://api.intercom.io/conversations/{id/last}/reply' \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-H 'Content-Type:application/json' -d \n\n{\n  \"message_type\": \"comment\",\n  \"type\": \"user\",\n  \"intercom_user_id\": \"536e564f316c83104c000020\",\n  \"body\": \"Thanks again :)\"\n}\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },  \n}\n\n#Reply without attachment\nintercom.conversations.reply(:id => conversation.id, :type => 'user', \n  :email => 'bob@example.com', :message_type => 'comment', :body => 'foo')\n\n#Reply with attachment\nintercom.conversations.reply(:id => conversation.id, :type => 'user', \n  :email => 'bob@example.com', :message_type => 'comment', \n  :body => 'foo', :attachment_urls => [\"http://www.example.com/attachment.jpg\"])\n\n<?php\n//Reply without attachment\n$intercom->conversations->replyToConversation(\"10957850396\", [\n    \"intercom_user_id\" => \"5977303470ab497b1babb9ef\",\n    \"body\" => \"Thinking: the talking of the soul with itself\",\n    \"type\" => \"user\",\n    \"message_type\" => \"comment\"\n]);\n\n\n//Reply with attachment\n$intercom->conversations->replyToConversation(\"10957850396\", [\n  \"intercom_user_id\" => \"5977303470ab497b1babb9ef\",\n  \"body\" => \"Thinking: the talking of the soul with itself\",\n  \"type\" => \"user\",\n  \"message_type\" => \"comment\",\n  \"attachment_urls\" => [\"http://www.example.com/attachment.jpg\"]\n]);\n?>\n\nUser user = new User().setId(\"5310d8e8598c9a0b24000005\");\nUserReply userReply = new UserReply(user);\nuserReply.setBody(\"Mighty fine shindig\");\n\nConversation.reply(\"66\", userReply);\n\nAdmin admin = new Admin().setId(\"1\");\nAdminReply adminReply = new AdminReply(admin);\nadminReply.setBody(\"These apples are healthsome\");\n\nConversation.reply(\"66\", adminReply);\n\nExample Request & Response (Admin Reply - Note)\ncurltext\n$ curl 'https://api.intercom.io/conversations/{id/last}/reply' \\\\-X POST \\\\-H 'Authorization: Bearer <Your access token>' \\\\-H 'Accept: application/json' \\\\-H 'Content-Type: application/json' -d{  \\\"message_type\\\": \\\"note\\\",  \\\"type\\\": \\\"admin\\\",  \\\"admin_id\\\": \\\"814860\\\",  \\\"body\\\": \\\"<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>  <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>   </body> </html>\\\",}\n\n\nYou can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes, if not last\tThe identifier for the conversation as given by Intercom.\nlast\tString\tYes, if no id\tYou can also reply to the most recent conversation on a workspace by specifying last as the string.\nRequest Body Parameters\n\nFor a reply sent on behalf a contact:\n\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways comment.\ntype\tString\tYes\tAlways user.\nbody\tString\tYes\tThe text body of the comment.\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact.\nemail\tString\tYes, if no intercom_user_id or user_id\tThe email you have defined for the user.\nattachment_urls\tArray of Strings\tNo\tA list of image URLs that will be added as attachments. You can include up to 5 URLs.\n\nFor a reply sent on behalf of an admin:\n\nArgument\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAccepts comment or note.\ntype\tString\tYes\tAlways admin.\nadmin_id\tString\tYes\tThe id of the admin who is authoring the comment.\nbody\tString\tYes\tThe text body of the reply. Notes accept some HTML formatting.\nattachment_urls\tArray of Strings\tNo\tA list of URLs of files that will be added as attachments. You can include up to 5 attachments.\nResponse\n\nThis will return the Conversation which was replied to."
  },
  {
    "title": "The article model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/articles/the-article-model/",
    "html": "The article model\nExample Article Object\nJSON\n{  \\\"id\\\": 1,  \\\"type\\\": \\\"article\\\",  \\\"workspace_id\\\": \\\"abcdef\\\",  \\\"title\\\": \\\"Default language title\\\",  \\\"description\\\": \\\"Default language description\\\",  \\\"body\\\": \\\"Default language body in html\\\",  \\\"author_id\\\": 1,  \\\"state\\\": \\\"published\\\",  \\\"created_at\\\": 123456,  \\\"updated_at\\\": 123456,  \\\"url\\\": \\\"http://intercom.test/help/en/articles/3-default-language\\\",  \\\"parent_id\\\": 1,  \\\"parent_type\\\": \\\"collection\\\",  \\\"default_locale\\\": \\\"en\\\",  \\\"translated_content\\\": {    \\\"type\\\": \\\"article_translated_content\\\",    \\\"fr\\\": {      \\\"type\\\": \\\"article_content\\\",      \\\"title\\\": \\\"French title\\\",      \\\"description\\\": \\\"French description\\\",   \\t  \\\"body\\\": \\\"French body in html\\\",   \\t  \\\"author_id\\\": 1,     \\t\\\"state\\\": \\\"published\\\",     \\t\\\"created_at\\\": 7891011,     \\t\\\"updated_at\\\": 7891011,     \\t\\\"url\\\": \\\"http://intercom.test/help/fr/articles/3-french-multilingual\\\"    }  },  \\\"statistics\\\": {      \\\"type\\\": \\\"article_statistics\\\",      \\\"views\\\": 10,      \\\"conversations\\\": 0,      \\\"reactions\\\": 8,      \\\"happy_reaction_percentage\\\": 38,      \\\"neutral_reaction_percentage\\\": 38,      \\\"sad_reaction_percentage\\\": 25  }}\n\nExample HTML Body\nHTML\n<h1 class=\\\"intercom-align-left\\\">Header 1</h1><h2 class=\\\"intercom-align-left\\\">Header 2</h2><h2 class=\\\"intercom-align-center\\\">Centered Header</h2><p class=\\\"intercom-align-left\\\">   <a href=\\\"https://intercom.com\\\" target=\\\"_blank\\\">Link</a></p><ul>   <li>Single-level List</li></ul><pre><code>'Pre' Code</code></pre><p class=\\\"intercom-align-left\\\"><code>Inline code</code></p><p class=\\\"intercom-align-left\\\"><b>Bold text</b></p><p class=\\\"intercom-align-left\\\"><i>Italic text</i></p><p class=\\\"intercom-align-center\\\">Centered text</p><p class=\\\"intercom-align-left\\\">Image without link:</p><div class=\\\"intercom-container intercom-align-left\\\">   <img      src=\\\"https://downloads.intercomcdn.com/i/o/204050460/7a140f62f8e715d1d6cf246d/Image.jpg\\\"      /></div><p class=\\\"intercom-align-left\\\">Image with link:</p><div class=\\\"intercom-container intercom-align-left\\\">   <a target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"      ><img      src=\\\"https://downloads.intercomcdn.com/i/o/204049719/b41c9a81c13b8a91023df1e7/Image.jpg\\\"      /></a></div><p class=\\\"intercom-align-left\\\">Image with link and centered:</p><div class=\\\"intercom-container intercom-align-center\\\">   <a target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"      ><img      src=\\\"https://downloads.intercomcdn.com/i/o/204050579/2e85d79a0d9e0c47b088f50c/Image.jpg\\\"      /></a></div><div class=\\\"intercom-container intercom-align-left\\\">   <a class=\\\"intercom-h2b-button\\\" target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"      >Button</a      ></div><div class=\\\"intercom-container intercom-align-center\\\">   <a class=\\\"intercom-h2b-button\\\" target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"      >Centered Button</a      ></div><p class=\\\"intercom-align-left\\\">Video Embed with iFrame:</p><div class=\\\"intercom-h2b-video\\\">   <iframe      src=\\\"https://www.youtube.com/embed/jqO8AQHj7Fw?rel=0\\\"      frameborder=\\\"0\\\"      webkitallowfullscreen      mozallowfullscreen      allowfullscreen      ></iframe></div><p class=\\\"intercom-align-left\\\"></p>\n\n\nThe Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone.\n\nFor collections and sections you should refer to the Help Center endpoint.\n\nArticle Object\nKey\tType\tDescription\ntype\tString\tThe type of object - article.\nid\tString\tThe unique identifier for the article which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the article belongs to.\ntitle\tString\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nSee more on what we accept in the Supported HTML table below.\nauthor_id\tString\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tWhether the article is published or is a draft.\nFor multilingual articles, this will be the state of the default language's content.\ncreated_at\tTimestamp\tThe time when the article was created.\nFor multilingual articles, this will be the timestamp of creation of the default language's content.\nupdated_at\tTimestamp\tThe time when the article was last updated.\nFor multilingual articles, this will be the timestamp of last update of the default language's content.\nurl\tString\tThe URL of the article.\nFor multilingual articles, this will be the URL of the default language's content.\nparent_id\tString\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tThe type of parent, which can either be a collection or section.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Article Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nArticle Translated Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - article_translated_content.\n<locale> ar, bg, bs, ca, cs, da, de, 'de-form', el, en, es, et, fi, fr, he, hr, hu, id, it, ja, ko, lt, lv, mn, nb, nl, pl, 'pt-BR', pt, ro, ru, sl, sr, sv, tr, vi, 'zh-CN', 'zh-TW'\tObject\tYes\tAn Article Content Object for each supported locale of the multilingual help center. The default locale's content and information will be contained in the initial Article Object. If there's no content for a locale, the value will be nil.\nArticle Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - article_content.\ntitle\tString\tYes\tThe title of the article.\ndescription\tString\tYes\tThe description of the article.\nbody\tString\tYes\tThe body of the article in HTML.\nauthor\tString\tYes\tThe id of the author of the article.\nstate\tString\tYes\tWhether the article is published or is a draft.\ncreated_at\tTimestamp\tNo\tThe time when the article was created.\nupdated_at\tTimestamp\tNo\tThe time when the article was last updated.\nurl\tString\tNo\tThe URL of the article.\nArticle Statistics Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - article_statistics.\nviews\tInteger\tNo\tThe number of total views the article has received.\nconversations\tInteger\tNo\tThe number of conversations started from the article.\nreactions\tInteger\tNo\tThe number of total reactions the article has received.\nhappy_reaction_percentage\tInteger\tNo\tThe percentage of happy reactions the article has received against other types of reaction.\nneutral_reaction_percentage\tInteger\tNo\tThe percentage of neutral reactions the article has received against other types of reaction.\nsad_reaction_percentage\tInteger\tNo\tThe percentage of sad reactions the article has received against other types of reaction.\nSupported HTML\n\nThe table below defines the subset of HTML accepted when creating or updating an Article. Over time we may add support for new HTML elements and attributes, since this will not constitute a breaking change, we advise any client code to support the full HTML specification when reading article content.\n\nRemoving element support, or otherwise changing the API in a way that causes previously supported HTML to become unsupported will be considered a breaking change.\n\nTag\tWhat does it do?\tAdditional Details\n<p>\tParagraph\tAll text must be placed within paragraph tags.\n<br>\tLine break\tSupported in-line.\n<hr>\tHorizontal rule\tNA\n<h1> <h2>\tHeading\tOnly these two header tags are supported. All others will be replaced with <h2>.\n<a>\tLink\tAn image can be placed in-between the link tags.\n<img>\tImage\tImages will be uploaded to Intercom and we'll use an Intercom link to display these. If these fail to upload then we'll hard fail and return 400 Bad Request.\n<ul> <ol> <li>\tList\tLists must contain at least one non-empty <li> element. <li> elements can contain plain text, or any other supported HTML tags, except <table>. If these criteria aren't met, then the article will hard fail and return 400 Bad request.\n<table>\tTable\tNeeds to have at least one row and one cell. Can contain any other supported HTML tags, except another <table> within. If these criteria aren't met then it will hard fail and return 400 Bad request.\n<iframe>\tVideo\tsrc must be for a supported video embed link. Only works for Youtube, Wistia, Vimeo, Loom, Vidyard or StreamIO.\n<pre> <code>\tPre-formatted code\t\n<b> <strong>\tBold\t\n<i> <em>\tItalic\t\nSupported CSS\nClass\tWhat does it do?\tWhere does it work?\nintercom-align-center\tCenter Alignment\tOn tag level: Headers, Paragraphs. On wrapping div: Images, Buttons.\nintercom-h2b-button\tButton\tOn tag level: Links\nUnsupported HTML\nTag\tWhat does it do?\tWhat do we do?\n<dl>\tDefinition List\tHard fail - 400 Bad Request\n<iframe>\tiFrame Unsupported video\tHard fail - 400 Bad Request\n<div> <span>\tContent division\tReplace with <p>\n<h3> to <h6>\tHeading\tReplace with <h2>\n<form>\tForm\tRemove from content\n<input> <textarea>\tInput\tRemove from content\n<script>\tJavascript Script\tRemove from content\n<head> <html> <footer> etc.\tAll other tags\tRemove from content Internals replaced with <p>"
  },
  {
    "title": "Retrieve a conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/retrieve-a-conversation/",
    "html": "Retrieve a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations/<id> \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\nintercom.conversations.find(:id => '147')\n\n<?php\n$intercom->conversations->getConversation(\"10957850396\");\n?>\n\nConversation conversation = Conversation.find(\"147\");\n\nConversationMessage message =\n  conversation.getConversationMessage();\n\nConversationPartCollection parts =\n  conversation.getConversationPartCollection();\n\nList<ConversationPart> list = parts.getPageItems();\n\nfor (ConversationPart part : list) {\n  String partType = part.getPartType();\n  Author author = part.getAuthor();\n  String body = part.getBody();\n}\n\nConversationPart recent =\n  conversation.getMostRecentConversationPart();\n\nAdmin assignee =\n  conversation.getAssignee();\n\nUser user =\n  conversation.getUser();\n\n\nYou can fetch the details of a single conversation.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ndisplay_as\tString\tNo\tSet to plaintext to retrieve conversation messages in plain text.\nResponse\n\nThis will return a single Conversation model with all its conversation parts.\n\nHARD LIMIT OF 500 PARTS\n\nThe maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/articles/update-an-article/",
    "html": "Update an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X PUT \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"New title\\\",\\n  \\\"translated_content\\\": {\\n    \\\"es\\\": {\\n      \\\"title\\\": \\\"Nuevo título\\\",\\n      \\\"state\\\": \\\"published\\\",\\n      \\\"body\\\": \\\"<p>Spanish body in html</p>\\\",\\n      \\\"author_id\\\": \\\"1\\\"\\n    }\\n  }\\n}\n\n\nYou can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\ntitle\tString\tNo\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tNo\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be updated.\nResponse\n\nThis will return an Article model of the article you just updated."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/conversations/adding-to-group-conversations-as-admin/",
    "html": "Attach a contact to a conversation\nExample Request & Response\ncurlcurl\n$ curl 'https://api.intercom.io/conversations/<id>/customers' \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json' \\\\-H 'Content-Type:application/json' -d{  \\\"admin_id\\\": \\\"781236\\\",  \\\"customer\\\": {    \\\"intercom_user_id\\\": \\\"58c1c78946a0aa9ef45b098a\\\"  }}\n\nHTTP/1.1 200 OK{\\\"customers\\\":[  {\\\"type\\\":\\\"user\\\",\\\"id\\\":\\\"597f02cb22f4bb37597e0b7d\\\"},   {\\\"type\\\":\\\"lead\\\",\\\"id\\\":\\\"58ff3f670f14ab4f1aa83750\\\"}]}\n\n\nYou can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameter\nAdmin's adding a participant\nParameter\tType\tRequired?\tDescription\nadmin_id\tString\tYes\tThe id of the admin who is adding the new participant.\ncustomer\tObject\tYes\tSee Customer Object below for more.\nContact's adding a participant\nParameter\tType\tRequired?\tDescription\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact who is adding the new participant.\nemail\tString\tYes, if no intercom_user_id or user_id\tThe email you have defined for the contact who is adding the new participant.\ncustomer\tObject\tYes\tSee Contact Object below for more.\nCustomer Object\nAttribute\tType\tRequired?\tDescription\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact who is being added as a participant.\nemail\tString\tYes, if the contact's role is lead. Yes, if no intercom_user_id or user_id.\tThe email you have defined for the contact who is being added as a participant.\nNOTE ABOUT CONTACTS WITHOUT AN EMAIL\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead.\n\nResponse\n\nThis will return a customers array containing objects listing the participants in the conversation:\n\nAttribute\tType\tDescription\ntype\tString\tThe role associated to the contact - user or lead.\nid\tString\tThe identifier for the contact as given by Intercom."
  },
  {
    "title": "Open a conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/open-a-conversation/",
    "html": "Open a conversation\nExample Request & Response\ncurltext\n$ curl 'https://api.intercom.io/conversations/<id>/parts' \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"message_type\\\":\\\"open\\\",\\n  \\\"admin_id\\\": \\\"724860\\\"\\n}\n\n\nYou can open a conversation which is snoozed or closed.\n\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways open.\nadmin_id\tString\tYes\tThe id of the admin which is performing the action.\nResponse\n\nThis will return the Conversation which was opened."
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/articles/list-all-articles/",
    "html": "List all articles\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json'\n\n\nYou can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through Articles.\ntotal_count\tInteger\tA count of the total number of articles.\ndata\tArray\tAn array of Article Objects.\nHOW ARE THE ARTICLES SORTED AND ORDERED?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "The team model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/teams/teams-model/",
    "html": "The team model\nExample Team Object\n{\\n    \\\"type\\\": \\\"team\\\",\\n    \\\"id\\\": \\\"814865\\\",\\n    \\\"name\\\": \\\"Example Team\\\",\\n    \\\"admin_ids\\\": [\\n        493881\\n    ]\\n}\n\n\nTeams are groups of admins in Intercom.\n\nTeam Object\nKey\tType\tDescription\ntype\tstring\tValue is team.\nid\tstring\tThe id of the team\nname\tstring\tThe name of the team\nadmin_ids\tlist\tThe list of admin id's that are a part of the team"
  },
  {
    "title": "Delete an article",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/articles/delete-an-article/",
    "html": "Delete an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can delete a single article by making a DELETE request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nResponse\nKey\tType\tDescription\nid\tString\tThe unique identifier for the article which you provided in the URL.\nobject\tString\tThe type of object which was deleted - article.\ndeleted\tBoolean\tWhether the article was deleted successfully or not."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/admins/view-admin-activity-logs/",
    "html": "List all activity logs\nExample Request & Response\ncurlhtml\ncurl https://api.intercom.io/admins/activity_logs?created_at_after=489222000&created_at_before=685695600 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json'\n\n\nExample Errors\n\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"parameter_not_found\\\",\\n\\t\\\"message\\\" => \\\"Please provide the following parameters: created_at_after\\\"\\n  }]\\n}\\n\n\nHTTP/1.1 403 RESTRICTED\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"api_plan_restricted\\\",\\n\\t\\\"message\\\" => \\\"This feature is not yet available to your app\\\"\\n  }]\\n}\n\n\nYou can get a log of activities by all admins in an app by sending a GET request to the URL https://api.intercom.io/admins/activity_logs.\n\nActivity List\nAttribute\tType\tDescription\ntype\tstring\tValue is activity_log.list\nactivity_logs\tarray\tA list of activity objects\npages\tobject\tOptional. A pagination object which may be empty, indication no further pages to fetch\nActivity Object\nAttribute\tType\tDescription\nactivity_type\tstring\tThe type of activity - see Activity Types & Descriptions below.\nactivity_description\tstring\tA sentence or two describing the activity - see Activity Types & Descriptions below.\nmetadata\tobject\tAn object containing information on the activity and what it modified\ncreated_at\ttimestamp\tThe time the activity was performed\nperformed_by\tobject\tAn Admin object of the admin who performed the activity\nid\tstring\tThe id representing the activity\nActivity Types & Descriptions\nType\tDescription\nadmin_assignment_limit_change\tA teammate changed their assignment limit\nadmin_away_mode_change\tA teammate changed their away mode and conversation reassignment settings\nadmin_deletion\tA teammate was removed from your workspace\nadmin_deprovisioned\tA teammate was deprovisioned from your workspace via SCIM\nadmin_invite_change\tThe permissions for a teammate invite were changed\nadmin_invite_creation\tA teammate invite was created\nadmin_invite_deletion\tA teammate invite was deleted\nadmin_login_failure\tA teammate tried to login with the wrong credentials\nadmin_login_success\tA teammate logged in successfully\nadmin_logout\tA teammate logged out\nadmin_password_reset_request\tA teammate requested a password reset\nadmin_password_reset_success\tA teammate's password was successfully reset\nadmin_permission_change\tThe permissions for a teammate were changed\nadmin_provisioned\tA teammate was provisioned on your workspace via SCIM\napp_admin_join\tA teammate joined your workspace (i.e. accepted your invite)\napp_authentication_method_change\tYour workspace's authentication methods were changed\napp_data_deletion\tA user or lead was deleted from your workspace\napp_data_export\tMessage or conversation data was exported from your workspace\napp_google_sso_domain_change\tYour workspace's Google SSO domain was changed\napp_identity_verification_change\tYour workspace's identity verification setting was changed\napp_name_change\tThe name of your workspace was changed\napp_outbound_address_change\tThe outbound email address was changed for your workspace\napp_package_installation\tAn app package was installed on your workspace\napp_package_token_regeneration\tAn access token for a specific app package was updated\napp_package_uninstallation\tAn app package was uninstalled from your workspace\napp_team_creation\tA team was created\napp_team_deletion\tA team was deleted\napp_team_membership_modification\tA team's membership was modified\napp_timezone_change\tAn app package was installed in your workspace\napp_webhook_creation\tA webhook subscription was created\napp_webhook_deletion\tA webhook subscription was deleted\narticles_in_messenger_enabled_change\tThe Messenger search for articles setting was changed\nbulk_delete\tUser or lead data was deleted from your workspace\nbulk_export\tUser or lead data was exported from your workspace\ncampaign_deletion\tA campaign was deleted from your workspace\ncampaign_state_change\tA campaign was changed on your workspace\nconversation_topic_change\tA conversation topic was changed\nconversation_topic_creation\tA conversation topic was created\nconversation_topic_deletion\tA conversation topic was deleted\nhelp_center_settings_change\tYour Help Center was turned on or off\ninbound_conversations_change\tThe Messenger inbound conversations setting was changed\ninbox_access_change\tThe inbox access setting was changed\nmessage_deletion\tA team was deleted from your workspace\nmessage_state_change\tA message's state was changed\nmessenger_look_and_feel_change\tThe Messenger look and feel setting was changed\nmessenger_search_required_change\tThe Messenger search required setting was changed\noffice_hours_change\tThe office hours setting was changed\nrole_change\tA role was changed\nrole_creation\tA role was created\nrole_deletion\tA role was deleted\nseat_change\tA teammate's seat was changed\nseat_revoke\tA teammate's seat was revoked\nsecurity_settings_change\tYour workspace's security settings were changed\ntemporary_expectation_change\tThe Messenger special notice settings were changed\nupfront_email_collection_change\tThe Messenger upfront email collection settings were changed\nwelcome_message_change\tThe Messenger welcome message settings were changed\nRequest Query Parameters\nParameter\tRequired?\tDescription\ncreated_at_after\tYes\tThe start date that you request data for. It must be formatted as a UNIX timestamp.\ncreated_at_before\tNo\tThe end date that you request data for. It must be formatted as a UNIX timestamp.\nResponse\n\nThis will return an Activity List which will contain an array titled activity_logs, in turn containing multiple Activity Objects."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/admins/view-an-admin/",
    "html": "Retrieve an admin\nExample Request & Response\n$ curl https://api.intercom.io/admins/493881 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n\n{\n    \"type\": \"admin\",\n    \"id\": \"493881\",\n    \"name\": \"Hoban Washburne\",\n    \"email\": \"wash@serenity.io\",\n    \"away_mode_enabled\": false,\n    \"away_mode_reassign\": false,\n    \"team_ids\": [\n        814865\n    ]\n}\n\n<?php\n$admin = $intercom->admins->getAdmin(\"493881\");\n?>\n\nErrors for admins without inbox seats\n{\n    \"type\": \"error.list\",\n    \"request_id\": \"0002miv9og586ig3aln0\",\n    \"errors\": [\n        {\n            \"code\": \"action_forbidden\",\n            \"message\": \"This admin does not have Inbox access permissions\"\n        }\n    ]\n}\n\n\nYou can fetch the details of a single admin.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given admin\nResponse\n\nThis will return an Admin object."
  },
  {
    "title": "List all conversations",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/list-conversations/",
    "html": "List all conversations\nExample Request & Response\n$ curl \\\"https://api.intercom.io/conversations?order=desc&sort=updated_at\" \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"conversation.list\",\n  \"conversations\": [\n    {\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    }, \n    \n    # list of conversaionts\n\n  ],\n  \"pages\": {\n    \"next\": \"https://api.intercom.io/conversations?per_page=20&page=2\",\n    \"page\": 1,\n    \"per_page\": 20,\n    \"total_pages\": 77,\n    \"type\": \"pages\"\n  }\n}\n\nintercom.conversations.find_all(:type => 'admin', :id => 25, :open => true)\n\n<?php\n$intercom->conversations->getConversations([\n    \"type\" => \"admin\",\n    \"admin_id\" => \"891290\",\n    \"open\" => false\n]);\n?>\n\nMap<String, String> params = Maps.newHashMap();\nparams.put(\"type\", \"admin\");\nparams.put(\"admin_id\", \"1\");\nConversationCollection conversations = Conversation.list(params);\nwhile (conversations.hasNext()) {\n  Conversation conversation = conversations.next();\n}\n\n\nYou can fetch a list of all conversations.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\norder\tString\tNo\tReturn the conversations in ascending (asc) or descending (desc) order. Defaults to desc. If you provide an invalid value, we default to asc.\nsort\tString\tNo\tReturn the conversation sorted by their created_at, updated_at, or waiting_since timestamp values. Defaults to updated_at.\nCONVERSATIONS NOT SHOWING WITH WAITING_SINCE SORTING\n\nIf a teammate was the last person to reply, or the conversation is closed, then those conversations will not show up on this list. This is to ensure you have an easy way of identifying and prioritizing those customers who have been waiting longest.\n\nResponse\n\nA paginated list of Conversations is returned, without the conversation_parts object.\n\nRETRIEVING CONVERSATION PARTS\n\nYou must retrieve a single conversation using the conversation's id to return a conversation with the conversation_part array and objects included."
  },
  {
    "title": "Create a conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/create-a-conversation/",
    "html": "Create a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d\n\n{\n  \"from\": {\n    \"type\": \"user\",\n    \"id\": \"536e564f316c83104c000020\"\n  },\n  \"body\": \"Hey\"\n}\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"user_message\",\n  \"id\": \"2001\",\n  \"created_at\": 1401917202,\n  \"body\" : \"Hey, is the new thing in stock?\",\n  \"message_type\": \"inapp\",\n  \"conversation_id\": \"36000324324\"\n}\n\nintercom.messages.create(\n  :from => {\n    :type => \"user\",\n    :id => \"536e564f316c83104c000020\"\n  },\n  :body => \"Hey\"\n)\n\n<?php\n$intercom->messages->create([\n    \"message_type\" => \"inapp\",\n    \"body\" => \"Surely, I said, knowledge is the food of the soul\",\n    \"from\" => [\n        \"type\" => \"user\",\n        \"id\" => \"5989303470da497b1babb9ef\"\n    ]\n]);\n?>\n\nUserMessage userMessage = new UserMessage()\n  .setBody(\"Hey! Is there, is there a reward?\")\n  .setUser(user);\nConversation.create(userMessage);\n\n\nYou can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.\n\nSENDING FOR VISITORS\n\nYou can also send a message from a visitor by specifying their user_id or id value in the from field, along with a type field value of contact. This visitor will be automatically converted to a contact with a lead role once the conversation is created.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nfrom\tObject\tYes\tSee Form Object below for more.\nbody\tString\tYes\tThe content of the message. HTML is not supported.\nFrom Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tThe role associated to the contact - user or lead.\nid\tString\tYes\tThe identifier for the contact which is given by Intercom.\nResponse\n\nThis will return the Message model that has been created."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/admins/view-the-current-admin/",
    "html": "Identify an admin\nOAUTH ONLY\n\nThis feature is only available when using OAuth. This requires the \"Read admins\" permission.\n\nYou can view the name, email and app ID of the current authorised admin via a GET request to https://api.intercom.io/me.\n\nResponse\n\nThis will return an Admin object, with an embedded app object (a workspace in legacy terminology).\n\nApp Object (a workspace)\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin'\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\nemail_verified\tboolean\tThis field will indicate whether the Intercom user has verified their email or not\napp.type\tstring\tvalue is 'app'\napp.id_code\tstring\tThe id of the app\napp.name\tstring\tThe name of the app\napp.region\tstring\tthe intercom region the app is located in\napp.created_at\ttimestamp\tWhen the app was created\napp.identity_verification\tboolean\tWhether or not the app uses identity verification\nSINGLE SIGN ON\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the user logging, in you should not accept any sign ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Detach a contact from a group conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/deleting-from-group-conversations/",
    "html": "Detach a contact from a group conversation\nExample Request & Response\ncurlhttp\n$ curl 'https://api.intercom.io/conversations/<conversation_id>/customers/<contact_id>' \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"admin_id\\\": \\\"781345\\\"\\n}\n\n\nRemoves a Contact from a group conversation.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nconversation_id\tString\tYes\tThe identifier for the conversation as given by Intercom.\ncontact_id\tString\tYes\tThe identifier for the contact as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nadmin_id\tString\tYes\tThe id of the admin who is performing the action.\nResponse\n\nThis will return the Contact who was detached from the conversation."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/admins/set-admin-away-mode/",
    "html": "Set an admin to away\n\nYou can set an Admin as away for the Inbox.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nid\tstring\tThe id of the admin you want to set away mode or re-assign conversations.\naway_mode_enabled\tboolean\tSet to 'true' to change the status of the admin to away.\naway_mode_reassign\tboolean\tSet to 'true' to assign any new conversation replies to your default inbox.\nExample Request & Response\ncurltext\n$ curl https://api.intercom.io/admins/814860/away \\\\\\n-X PUT \\\\\\n-H 'Authorization: Bearer <Your access token>' \\\\\\n-H 'Accept: application/json'  \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"away_mode_enabled\\\": true,\\n  \\\"away_mode_reassign\\\": false\\n\\n}\n\nExample Errors\nAdmin without seat\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n\nResponse\n\nThis will return an Admin model of the admin set away."
  },
  {
    "title": "Attach a contact",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/tag-contact/",
    "html": "Attach a contact\nExample Single User Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n\\t\\\"id\\\": \\\"2084335\\\"\\n}\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can tag a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\n\nYou can also tag multiple users\n\nMuliple Request Body Parameter\nParameter\tType\tRequired\tDescription\nname\tString\tYes\tThe name of the tag, which will be created if not found.\nusers\tObject\tYes\tAn array of objects with the unique identifier of the users to be tagged.\nExample Multi User Request & Response\ncurlhttp\n$ curl https://api.intercom.io/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n{\\n  \\\"name\\\": \\\"Independent\\\",\\n  \\\"users\\\": [\\n    {\\n      \\\"id\\\": \\\"56cde0cc3deab1bd8c000100\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"63ced1cc3deab1bd8c11011\\\"\\n    }\\n  ]\\n }\n\nResponse\n\nThis will return a Tag model for the tag that was added to the contact."
  },
  {
    "title": "Submit a data event",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/data-events/submitting-events/",
    "html": "Submit a data event\nSubmit an Event\n$ curl https://api.intercom.io/events \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Content-Type: application/json\" -d'\n{\n  \"event_name\" : \"placed-order\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"314159\",\n  \"metadata\": {\n    \"order_date\": 1392036272,\n    \"stripe_invoice\": \"inv_3434343434\",\n    \"order_number\": {\n      \"value\":\"3434-3434\",\n      \"url\": \"https://example.org/orders/3434-3434\"\n    },\n    \"price\": {\n      \"currency\":\"usd\",\n      \"amount\": 2999\n    }\n  }\n}'\n\nvar more_metadata = {\n  order_date: 1392036272,\n  stripe_invoice: 'inv_3434343434',\n  order_number: {\n    value: \"3434-3434\",\n    url: 'https://example.org/orders/3434-3434'\n  },\n  price: {\n    currency: 'usd',\n    amount: 2999\n  }\n};\nIntercom('trackEvent', 'placed-order', more_metadata);\n\nmore_metadata = {\n  :order_date => Time.now.to_i,\n  :stripe_invoice => 'inv_3434343434',\n  :order_number => {\n    :value => '3434-3434',\n    :url => 'https://example.org/orders/3434-3434'\n  },\n  price: {\n    :currency => 'usd',\n    :amount => 2999\n  }\n}\nintercom.events.create({\n  :event_name => \"placed-order\",\n  :email => current_user.email,\n  :created_at => 1391691571,\n  :metadata => more_metadata\n})\n\n<?php\n$metadata = ([\n    \"order_date\" => time(),\n    \"stripe_invoice\" => \"inv_3434343434\",\n    \"order_number\" => ([\n        \"value\" => \"3434-3434\",\n        \"url\" => \"https://example.org/orders/3434-3434\"]),\n        \"price\" => ([\n            \"currency\" => \"usd\",\n            \"amount\" => 2999])\n]);\n\n$intercom->events->create([\n    \"event_name\" => \"placed-order\",\n    \"created_at\" => 1500907515,\n    \"user_id\" => \"20413\",\n    \"metadata\" => $metadata\n]);\n?>\n\nMap<String,Object> order = Maps.newHashMap();\norder.put(\"value\", \"3434-3434\");\norder.put(\"url\", \"https://example.org/orders/3434-3434\");\n\nMap<String,Object> price = Maps.newHashMap();\nprice.put(\"currency\", \"usd\");\nprice.put(\"amount\", 2999);\n\nMap<String,Object> meta = Maps.newHashMap();\nmeta.put(\"order_date\", currentTimeMillis()/1000L);\nmeta.put(\"stripe_invoice\", \"inv_3434343434\");\nmeta.put(\"price\", price);\nmeta.put(\"order_number\", order);\n\nEvent event = new Event()\n  .setEventName(\"placed-order\")\n  .setUserID(\"314159\")\n  .setMetadata(meta);\n\nEvent.create(event);\n\n\nYou will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a Content-Type of application/json.\n\nWhen using the JavaScript API, adding the code to your app makes the Events API available. Once added, you can submit an event using the trackEvent method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nWith the Ruby client you pass a hash describing the event to Intercom::Event.create, or call the track_user method directly on the current user object (e.g. user.track_event).\n\nMetadata Object\nType\tDescription\tExample\nString\tThe value is a JSON String\t\"source\":\"desktop\"\nNumber\tThe value is a JSON Number\t\"load\": 3.67\nDate\tThe key ends with the String _date or _at and the value is a Unix timestamp, assumed to be in the UTC timezone.\t\"contact_date\": 1392036272 or \"contacted_at\": 1392036272\nLink\tThe value is a HTTP or HTTPS URI.\t`\"article\": \"https://example.org/ab1de.html\"\nRich Link\tThe value is a JSON object that contains url and value keys.\t\"article\": {\"url\": \"https://example.org/ab1de.html\", \"value\":\"the dude abides\"}\nMonetary Amount\tThe value is a JSON object that contains amount and currency keys. The amount key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.\t\"price\": {\"amount\": 34999, \"currency\": \"eur\"}\n\nNB: For the JSON object types, please note that we do not currently support nested JSON structure.\n\nLEAD EVENTS\n\nWhen submitting events for Leads, you will need to specify the Lead's id.\n\nMETADATA BEHAVIOUR\n\nWe currently limit the number of tracked metadata keys to 20 per event. Once the quota is reached, we ignore any further keys we receive. The first 20 metadata keys are determined by the order in which they are sent in with the event.\\n_ It is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.\\n_ There might be up to 24 hrs delay when you send a new metadata for an existing event.\n\nEVENT DE-DUPLICATION\n\nThe API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is strongly recommended to send a second granularity Unix timestamp in the created_at field.\\n\\nDuplicated events are responded to using the normal 202 Accepted code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.\n\nHTTP API Responses\nSuccessful responses to submitted events return 202 Accepted with an empty body.\nUnauthorised access will be rejected with a 401 Unauthorized or 403 Forbidden response code.\nEvents sent about users that cannot be found will return a 404 Not Found.\nEvent lists containing duplicate events will have those duplicates ignored.\nServer errors will return a 500 response code and may contain an error message in the body."
  },
  {
    "title": "Retrieve a tag",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/retrieve-a-tag/",
    "html": "Retrieve a tag\nExample Request\n$ curl https://api.intercom.io/tags/<id> \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"note\",\n  \"id\": \"2\",\n  \"created_at\": 1389913951,\n  \"body\": \"<p>Text for my note</p>\",\n  \"user\": {\n      \"id\": \"5310d8e8598c9a0b24000005\",\n      \"type\": \"user\"\n    },\n  \"author\": {\n    \"type\": \"admin\",\n    \"id\": \"21\",\n    \"name\": \"Jayne Cobb\",\n    \"email\": \"jayne@serenity.io\",\n    \"avatar\" : {\n       \"type\":\"avatar\",\n      \"image_url\": \"http://example.org/128Jayne.jpg\"\n    },\n    \"companies\": []\n  }\n}\n\nintercom.notes.find(:id => note)\n\n<?php\n$note = $intercom->notes->getNote(\"9259097\");\n?>\n\nNote note = Note.find(\"2\");\n\n\nYou can fetch the details of a single tag.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given tag.\nResponse\n\nThis will return a Tag model."
  },
  {
    "title": "Close a conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/close-a-conversation/",
    "html": "Close a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/parts\\n-X POST\\n-H 'Authorization:Bearer <Your access token>'\\n-H 'Accept:application/json'\\n-H 'Content-Type:application/json' -d\\n\\n{ \\n  \\\"message_type\\\": \\\"close\\\",\\n  \\\"type\\\": \\\"admin\\\",\\n  \\\"admin_id\\\": 5784329,\\n  \\\"body\\\": \\\"Closed conversation because of X.\\\"\\n}\n\n\nYou can close a conversation.\n\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescripton\nmessage_type\tString\tYes\tAlways close.\ntype\tString\tYes\tAlways admin.\nadmin_id\tString\tYes\tThe id of the admin who is performing the action.\nbody\tString\tNo\tOptionally you can leave a message in the conversation to provide additional context to the user and other teammates.\nResponse\n\nThis will return the Conversation that has been closed."
  },
  {
    "title": "Detach a contact from a tag",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/untag-contact/",
    "html": "Detach a contact from a tag\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/tags/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can untag a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nResponse\n\nThis will return a Tag model for the tag that was removed from the contact."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/admins/list-admins/",
    "html": "List all admins\nExample Request & Response\n$ curl https://api.intercom.io/admins \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"type\": \"admin.list\",\n    \"admins\": [\n        {\n            \"type\": \"admin\",\n            \"id\": \"493881\",\n            \"name\": \"Hoban Washburne\",\n            \"email\": \"wash@serenity.io\"\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"has_inbox_seat\": true,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"mal@serenity.io\",\n            \"id\": \"646303\",\n            \"name\": \"Malcolm Reynolds \",\n            \"away_mode_enabled\": true,\n            \"away_mode_reassign\": false,\n            \"has_inbox_seat\": true,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"jayne@serenity.io\",\n            \"id\": \"1195856\",\n            \"name\": \"Jayne Cobb \",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"has_inbox_seat\": true,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"team\",\n            \"email\": null,\n            \"id\": \"814865\",\n            \"name\": \"SerenityTeam\",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"has_inbox_seat\": true,\n            \"admin_ids\": [\n                493881,\n                646303,\n                1195856\n            ]\n        }\n    ]\n}\n\nintercom.admins.all.each { ... }\n\n<?php\n$admins= $intercom->admins->getAdmins();\nforeach ($admins->admins as $admin) {\n    print_r($admin->id);\n}?>\n\nAdminCollection admins = Admin.list();\n// get first page...\nList<Admin> pageItems = admins.getPageItems();\n// ...or iterate over pages\nwhile (admins.hasNext()) {\n    System.out.println(admins.next().getName());\n}\n\n\nYou can fetch a list of admins for a given workspace.\n\nResponse\n\nThis will return a list of Admin Objects for a given workspace. The result may also have a pages object if the response is paginated.\n\nAdmin List\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin.list'\nadmins\tarray\tA list of admin objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "The tag model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/tag-model/",
    "html": "The tag model\nExample Object\n{\\n  \\\"id\\\": \\\"17513\\\",\\n  \\\"name\\\": \\\"independent\\\",\\n  \\\"type\\\": \\\"tag\\\"\\n}\n\n\nA tag allows you to label your contacts and companies and list them using that tag.\n\nTag Object\nKey\tType\tDescription\ntype\tstring\tvalue is 'tag'\nid\tstring\tThe id of the tag\nname\tstring\tThe name of the tag"
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "Untag companies",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/untag-companies/",
    "html": "Untag companies\nExample Request & Response\n$ curl https://api.intercom.io/tags \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d'\n{\n  \"name\": \"Independent\",\n  \"companies\": [\n    {\n      \"id\" : \"53427b7ecce5722303000003\",\n      \"untag\": true\n    }\n  ]\n}\n\nHTTP/1.1 200 Ok\n\n{\n  \"type\": \"tag\",\n  \"name\": \"Follow Up\",\n  \"id\": \"17513\"\n}\n\n\nYou can untag a single or a list of companies.\n\nRequest Body Parameters\nParameters\tType\tRequired\tDescription\nname\tString\tYes\tThe name of the tag which will be untagged from the.\ncompanies\tObject\tYes\tAn array of objects with the unique id or company_id of the company to be untagged, and the untag boolean set to true.\nResponse\n\nThis will return a Tag model for the tag that was unapplied to the given company."
  },
  {
    "title": "Rate Limiting",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/errors/rate-limiting/",
    "html": "Rate Limiting\n# Example with the default rate limit of 1000\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332510\n\n# After another request:\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1487332510\n\n# After window resets\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332520\n\n# If you make more than the allowed requests\nHTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1487332520\n\nintercom.rate_limit_details\n#=> {:limit=>1000, :remaining=>999, :reset_at=>2019-08-05 14:59:00 +0100}\n\n\nAPI Rate Limits are in place to protect Intercom from API traffic spikes that could put our databases at risk. We therefore measure the amount of requests sent to the API in order to throttle these when they surpass the amount allowed. We will respond with '429 Too Many Requests' and the following headers:\n\nHeader Name\tHeader Description\nX-RateLimit-Limit\tMaximum number of requests allowed for the app.\nX-RateLimit-Remaining\tNumber of requests left in the current time.\nX-RateLimit-Reset\tTime when the number of requests will be reset to the maximum limit. Shown as UNIX timestamp.\nWHAT ABOUT CANVAS KIT REQUESTS?\n\nRate Limits only apply to calls to the REST API, not to any webhook requests that are sent as part of the Canvas Kit capabilities.\n\nWhat is the default amount of requests?\n\nEvery app will have default rate limits. The amount we rate limit them by is different for apps which are privately built for your own usage, or for apps that are publicly installed by third-parties.\n\nPrivate\n\nPrivate apps have a default rate limit of 10,000 API calls per minute per app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple private apps installed, every one contributes towards total number of requests.\n\nPublic\n\nPublic apps have a default rate limit of 10,000 API calls per minute for each app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple public apps installed, each one has its own separate request limit without contributing to the others.\n\nHIGHER RATE LIMITS\n\nIf you require higher rate limits than the defaults, you can contact us using the messenger in the bottom right.\n\nWhen does the amount of requests reset?\n\nAlthough the permitted limit of requests lasts for 1 minute, we evenly distribute this into 10 second windows. This means that every 10 seconds, the amount of permitted requests resets. For example, a default rate limit of 1000 per minute means that you can send a maximum of 166 operations per 10 second period (1000/6).\n\nHow can I handle rate limits?\n\nTo prevent hitting the rate limits, here are a few options for handling within your code.\n\nUse the header information\n\nYou can find the number of requests allowed in your current window in the Intercom headers, or if you are using the Intercom Ruby SDK you can call your client's rate_limit_details which returns a Hash with information about your app's rate limit.\n\nYou can use the remaining number of requests allowed in your current window and when this is below a certain value you can rest until your rate limit is reset.\n\nIn the example below the app is restricted to a rate limit of 5 just to show the output returned — note that we’ve also shown what information is available in the Intercom client and the response for your current rate limits using the Ruby SDK.\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n    # These are the headers we have access to when making requests\n    puts(\"Rate Limit: #{intercom.rate_limit_details[:limit]} \\n\")\n    puts(\"Remaining: #{intercom.rate_limit_details[:remaining]} \\n\")\n    puts(\"Reset Time: #{intercom.rate_limit_details[:reset_at]} \\n\")\n\n    # Check when request limit is under a certain number\n    if not intercom.rate_limit_details[:remaining].nil? and intercom.rate_limit_details[:remaining] < 2\n      sleep_time = intercom.rate_limit_details[:reset_at].to_i - Time.now.to_i\n      puts(\"Waiting for #{sleep_time} seconds to allow for rate limit to be reset\")\n      sleep sleep_time\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nThe output from the above code is below. You would not need to output all of this data, but this should offer an example of what to expect and how you might approach implementing a rest until the limit is reset.\n\nRequest Number 1\nRate Limit:\nRemaining:\nReset Time:\nRequest Number 2\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 3\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 4\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 5\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 6\nRate Limit: 5\nRemaining: 1\nReset Time: 2023-12-08 15:19:51 +0000 \nWaiting for 38 seconds to allow for rate limit to be reset\nRequest Number 7\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 8\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 9\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 10\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 11\nRate Limit: 5\nRemaining: 1\nReset Time: 2016-11-16 16:15:00 +0000\nWaiting for 58 seconds to allow for rate limit to be reset\n\nUse randomization\n\nWhile the reset option is one way to deal with rate limiting, you may want more granular control over your rate limit handling. For example, you might have a specific retry timeframe that you want to follow and not wait for the minute window to pass for your entire rate limit to be reset.\n\nIf you want more control over your rate limiting handling then you can check for the specific rate limit error returned and use some form of randomization in the backoff calculation.\n\nYou could change the retry code above to look like this to achieve some randomization:\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  rescue Intercom::RateLimitExceeded => error\n    #At this point we know we have encountered a limit\n    #So lets try for a few times and backoff a little in each case\n    puts(\"Error Msg: #{error.inspect} \\n\")\n    puts(\"http_code: #{error.http_code[:http_code]}\\n\" )\n    puts(\"http_code: #{error.http_code[:application_error_code]}\\n\" )\n    if retries <= max_retries\n      # Lets try it a few more times\n      retries += 1\n      # Set a range from num of retries to backoff and randomly sample from that\n      # You can pick any range you like here, this is just an example\n      backoff = rand(retries..(backoff_factor * retries))\n      puts(\"Backoff for #{backoff} seconds\")\n      sleep backoff\n    else\n      # Rasing error here so you can perform some action based on this event\n      raise(\"No longer retrying since we have retried #{retries} times.\\n\"\\\n              \"The error returned was: '#{error.message}'\")\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nAfter running this code, your output would look like this:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nRequest Number 7\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 2 seconds\nRequest Number 8\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 9\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 10\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 6 seconds\nRequest Number 11\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nadvanced_throttle.rb:32:in `rescue in block in <main>': No longer retrying since we have retried 4 times. (RuntimeError)\nThe error returned was: 'More than 5 requests received in 1 minute'\n\tfrom advanced_throttle.rb:9:in `block in <main>'\n\tfrom advanced_throttle.rb:8:in `each'\n\tfrom advanced_throttle.rb:8:in `<main>'\n\nUse a library for exponential backoff\n\nTo prevent having to implement your own backoff forumlas, you can use a library that will handle this for you. Some examples include:\n\nretry for Node.js\nbackoff for Python\nretries, a RubyGem which will be used for the below example\n\nWith retries, all you specify the number of retries you want and it will handle the rest.\n\nrequire 'intercom'\nrequire 'stringio'\nrequire 'retries'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nmax_retries = 3\n\nfor num in 0..20\n  handler = Proc.new do |exception, attempt_number, total_delay|\n    puts \"Handler saw a #{exception.class}; retry attempt #{attempt_number}; #{total_delay} seconds have passed.\"\n  end\n  with_retries(:max_tries => max_retries, :handler => handler, :rescue => [Intercom::RateLimitExceeded]) do |attempt|\n    puts(\"Request Number #{num+1}\")\n    # You can check for the max retry number and raise an error so you can take some action based on this event\n    if attempt >= max_retries\n      raise(\"No longer retrying since we have retried #{attempt} time.\\n\"\\\n    \"The error returned was: '#{Intercom::RateLimitExceeded}'\")\n    end\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  end\nend\n\n\nThe is what the output of the above example looks like using retries:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 1; 0.328696139 seconds have passed.\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 2; 1.194656588 seconds have passed.\nRequest Number 6\nthrottle_retries.rb:14:in `block (2 levels) in <main>': No longer retrying since we have retried 3 times. (RuntimeError)\nThe error returned was: 'Intercom::RateLimitExceeded'\n\tfrom /home/ec2-user/.rvm/gems/ruby-2.3.0/gems/retries-0.0.5/lib/retries.rb:46:in `with_retries'\n\tfrom throttle_retries.rb:11:in `block in <main>'\n\tfrom throttle_retries.rb:7:in `each'\n\tfrom throttle_retries.rb:7:in `<main>'\n[ec2-user@ip-10-0-2-162 ~]$\n"
  },
  {
    "title": "Tag companies",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/tag-companies/",
    "html": "Tag companies\nExample Request & Response\n$ curl https://api.intercom.io/tags \\\n-XPOST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d'\n{\n  \"name\": \"Independent\",\n  \"companies\": [\n    {\n      \"id\" : \"53427b7ecce5722303000003\"\n    }\n  ]\n}\n\nHTTP/1.1 200 Ok\n\n{\n  \"type\": \"tag\",\n  \"name\": \"Independent\",\n  \"id\": \"17513\"\n}\n\nintercom.tags.tag(name: 'Independent', users: [{ id: \"42ea2f1b93891f6a99000427\" }, { email: \"foo@bar.com\" }])\n\n<?php\n# Note that you can use either id, user_id or email to tag a user.\n# You only need to use one per user, e.g. the below will tag\n# three users if each identifier is for a different, unique user\n$intercom->tags->tag([\n    \"name\" => \"VIPs\",\n    \"users\" => [\n        [\"id\" => \"5977e20941abfc5aae4552d1\"],\n        [\"user_id\" => \"12345\"],\n        [\"email\" => \"camus@phil.com\"]\n    ]\n]);\n?>\n\nUser one = new User().setEmail(\"river@serenity.io\");\nUser two = new User().setEmail(\"simon@serenity.io\")\nList<User> users = Lists.newArrayList(one, two);\nTag.tag(tag, new UserCollection(users));\n\n\nYou can tag a single or a list of companies.\n\nRequest Body Parameters\nParameters\tType\tRequired\tDescription\nname\tString\tYes\tThe name of the tag, which will be created if not found.\ncompanies\tObject\tYes\tAn array of objects with the unique id or company_id of the company to be tagged.\nResponse\n\nThis will return a Tag Model for the tag that was applied to the given company."
  },
  {
    "title": "Update a collection",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/update-a-collection/",
    "html": "Update a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collection/<id> \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"New title\\\",  \\\"translated_content\\\": {    \\\"es\\\": {      \\\"name\\\": \\\"Nuevo título\\\"    }  }}\n\n\nYou can update the details of a single collection by making a PUT request to https://api.intercom.io/help_center/collection/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the collection which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\ndescription\tString\tNo\tThe description of the collection. For multilingual articles, this will be the description of the default language's content.\ntranslated_content\tObject\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Collection Model of the collection you just updated."
  },
  {
    "title": "Update a section",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/update-a-section/",
    "html": "Update a section\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections/<id> \\\\\\n-X PUT \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"name\\\": \\\"New title\\\",\\n  \\\"translated_content\\\": {\\n    \\\"type\\\": \\\"group_translated_content\\\",\\n    \\\"es\\\": {\\n      \\\"type\\\": \\\"group_content\\\",\\n      \\\"name\\\": \\\"Nuevo título\\\"\\n    }\\n  }\\n}\n\n\nYou can update the details of a single section by making a PUT request to https://api.intercom.io/help_center/sections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the section which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the section. For multilingual collections, this will be the name of the default language's content.\nparent_id\tString\tNo\tThe id for the collection this section will be within.\ntranslated_content\tObject\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Section object of the section you just updated."
  },
  {
    "title": "The collection & section models",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/the-collection-section-models/",
    "html": "The collection & section models\nExample Collection Object\nJSON\n{  \\\"id\\\": 1,  \\\"type\\\": \\\"collection\\\",  \\\"workspace_id\\\": \\\"abcdef\\\",  \\\"name\\\": \\\"Default language name\\\",  \\\"description\\\": \\\"Default language description\\\",   \\\"created_at\\\": 123456,  \\\"updated_at\\\": 123456,  \\\"url\\\": \\\"http://intercom.test/help/collection/name\\\",  \\\"icon\\\": \\\"http://intercom/help_center/icon-1\\\",  \\\"order\\\": 0,  \\\"default_locale\\\": \\\"en\\\",  \\\"translated_content\\\": {    \\\"type\\\": \\\"group_translated_content\\\",    \\\"fr\\\": {      \\\"type\\\": \\\"group_content\\\",      \\\"name\\\": \\\"French name\\\",      \\\"description\\\": \\\"French description\\\"    }  }}\n\nExample Section Object\n{\n  \"id\": 1,\n  \"type\": \"section\",\n  \"workspace_id\": \"abcdef\",\n  \"name\": \"Default language name\",\n  \"created_at\": 123456,\n  \"updated_at\": 123456,\n  \"url\": \"http://intercom.test/help/section/name\",\n  \"icon\": \"http://intercom/help_center/icon-1\",\n  \"order\": 0,\n  \"collection_id\": \"1\",\n  \"default_locale\": \"en\",\n  \"translated_content\": {\n    \"type\": \"group_translated_content\",\n    \"fr\": {\n      \"type\": \"group_content\",\n      \"name\": \"French name\"\n    }\n  }\n}\n\n\nThe Help Center API is a central place to gather all information and take actions on those elements within a Help Center - namely the collections and sections. Collections are top level containers for Articles within the Help Center. Sections are subdivisions of a collection, with a collection potentially having multiple sections.\n\nFor articles you should refer to the Articles endpoint.\n\nCollection Object\nKey\tType\tDescription\ntype\tString\tThe type of object - collection.\nid\tString\tThe unique identifier for the collection which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the collection belongs to.\nname\tString\tThe name of the collection. For multilingual help centers, this will be the title of the default language's content.\ndescription\tString\tThe description of the collection. For multilingual help centers, this will be the description of the collection for the default language.\ncreated_at\tTimestamp\tThe time when the article was created. For multilingual articles, this will be the timestamp of creation of the default language's content.\nupdated_at\tTimestamp\tThe time when the article was last updated. For multilingual articles, this will be the timestamp of last update of the default language's content.\nurl\tString\tThe URL of the collection. For multilingual help centers, this will be the URL of the collection for the default language.\nicon\tString\tThe icon for the collection.\norder\tInteger\tThe order of the section in relation to others sections within a collection. Values go from 0 upwards. 0 is the default if there's no order.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Group Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nSection Object\nKey\tType\tDescription\ntype\tString\tThe type of object - section.\nid\tString\tThe unique identifier for the section which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the section belongs to.\nname\tString\tThe name of the section. For multilingual help centers, this will be the name of the section for the default language.\ncreated_at\tTimestamp\tThe time when the section was created. For multilingual help centers, this will be the timestamp of the section's creation for the default language.\nupdated_at\tTimestamp\tThe time when the section was last updated. For multilingual help centers, this will be the timestamp of the section's last update for the default language.\nurl\tString\tThe URL of the section. For multilingual help centers, this will be the URL of the section for the default language.\nicon\tString\tThe icon for the section.\norder\tInteger\tThe order of the section in relation to others sections within a collection. Values go from 0 upwards. 0 is the default if there's no order.\ncollection_id\tString\tThe id of the collection to which this section belongs to.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Group Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nGroup Translated Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - group_translated_content.\n<locale> ar, bg, bs, ca, cs, da, de, 'de-form', el, en, es, et, fi, fr, he, hr, hu, id, it, ja, ko, lt, lv, mn, nb, nl, pl, 'pt-BR', pt, ro, ru, sl, sr, sv, tr, vi, 'zh-CN', 'zh-TW'\tObject\tYes\tAn Group Content Object for each supported locale of the multilingual help center. The default locale's content and information will be contained in the initial Collection Object or Section Object respectively. If there's no content for a locale, the value will be nil.\nGroup Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - group_content.\nname\tString\tYes\tThe name of the collection or section.\ndescription\tString\tYes\tThe description of the collection. Only available for collections."
  },
  {
    "title": "List all subscription types",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/subscription-types/list-all-subscription-types/",
    "html": "List all subscription types\nExample List Subscription Types Request\n$ curl https://api.intercom.io/subscription_types \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 OK\n{\n  \"type\": \"list\",\n  \"data\": [\n    {\n      \"type\": \"subscription\",\n      \"id\": \"1\",\n      \"state\": \"live\",\n      \"consent_type\": \"opt_out\",\n      \"default_translation\": {\n        \"name\": \"Announcements\",\n        \"description\": \"Offers, product and feature announcements\",\n        \"locale\": \"en\"\n      },\n      \"translations\": [\n        {\n          \"name\": \"Ankündigungen\",\n          \"description\": \"Angebote, Produkt- und Funktionsankündigungen\",\n          \"locale\": \"de\"\n        },\n        {\n          \"name\": \"Announcements\",\n          \"description\": \"Offers, product and feature announcements\",\n          \"locale\": \"en\"\n        }\n      ]\n    },\n    {\n      \"type\": \"subscription\",\n      \"id\": \"2\",\n      \"state\": \"live\",\n      \"consent_type\": \"opt_out\",\n      \"default_translation\": {\n        \"name\": \"Newsletter\",\n        \"description\": \"The latest news and updates, on a regular basis\",\n        \"locale\": \"en\"\n      },\n      \"translations\": [\n        {\n          \"name\": \"Newsletter\",\n          \"description\": \"Regelmäßig die neuesten Nachrichten und Updates\",\n          \"locale\": \"de\"\n        },\n        {\n          \"name\": \"Newsletter\",\n          \"description\": \"The latest news and updates, on a regular basis\",\n          \"locale\": \"en\"\n        }\n      ]\n    },\n    {\n      \"type\": \"subscription\",\n      \"id\": \"3\",\n      \"state\": \"live\",\n      \"consent_type\": \"opt_out\",\n      \"default_translation\": {\n        \"name\": \"Best practices\",\n        \"description\": \"Tips, tricks and recommendations\",\n        \"locale\": \"en\"\n      },\n      \"translations\": [\n        {\n          \"name\": \"Best Practices\",\n          \"description\": \"Tipps, Tricks und Empfehlungen\",\n          \"locale\": \"de\"\n        },\n        {\n          \"name\": \"Best practices\",\n          \"description\": \"Tips, tricks and recommendations\",\n          \"locale\": \"en\"\n        }\n      ]\n    }\n  ]\n}\n\n\nYou can list all subscription types.\n\nResponse\n\nA list of subscription type objects.\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'list'\ndata\tarray\tA list of subscription type objects"
  },
  {
    "title": "The translation model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/subscription-types/the-translation-model/",
    "html": "The translation model\nExample translation Object\nJSON\n{\\n  \\\"name\\\": \\\"Announcements\\\",\\n  \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n  \\\"locale\\\": \\\"en\\\"\\n}\n\n\nA translation object contains the localised details of a subscription type.\n\nTranslation Object\nKey\tType\tDescription\nname\tString\tThe localised name of the subscription type.\ndescription\tString\tThe localised description of the subscription type.\nlocale\tString\tThe two character identifier for the language of the translation object."
  },
  {
    "title": "Retrieve a segment",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/segments/view-a-segment/",
    "html": "Retrieve a segment\nExample Request & Response\n$ curl https://api.intercom.io/segments/53203e244cba153d39000062 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment\",\n  \"id\": \"53203e244cba153d39000062\",\n  \"name\": \"New\",\n  \"created_at\": 1394621988,\n  \"updated_at\": 1394622004\n}\n\nintercom.segments.find(:id => '1234')\n\nSegment segment = Segment.find(\"1234\");\n\n\nYou can fetch the details of a single segment.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identified of a given segment.\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIncludes the count of contacts that belong to a given segment.\nResponse\n\nThis will return a Segment Model."
  },
  {
    "title": "Leads",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/leads/leads/",
    "html": "Leads\n\nContacts (for Leads only) is no longer available as a resource. In order to see information and take action on leads, you should be using the Contacts API."
  },
  {
    "title": "The subscription type model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/subscription-types/the-subscription-type-model/",
    "html": "The subscription type model\nExample Subscription type Object\nJSON\n{\\n  \\\"type\\\": \\\"subscription\\\",\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"state\\\": \\\"live\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\",\\n  \\\"default_translation\\\": {\\n    \\\"name\\\": \\\"Announcements\\\",\\n    \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n    \\\"locale\\\": \\\"en\\\"\\n  },\\n  \\\"translations\\\": [\\n    {\\n      \\\"name\\\": \\\"Ankündigungen\\\",\\n      \\\"description\\\": \\\"Angebote, Produkt- und Funktionsankündigungen\\\",\\n      \\\"locale\\\": \\\"de\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"Announcements\\\",\\n      \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n      \\\"locale\\\": \\\"en\\\"\\n    }\\n  ]\\n}\n\n\nA subscription type lets customers easily opt out of non-essential communications without missing what's important to them.\n\nSubscription type Object\nKey\tType\tDescription\ntype\tString\tThe type of the object - subscription\nid\tString\tThe unique identifier representing the subscription type.\nstate\tString\tThe state of the subscription type: live, draft, archived.\ndefault_translation\tObject\tA translation object with the localised version of the subscription type in the default language for the workspace.\ntranslations\tArray\tAn array of translations objects with the localised version of the subscription type in each available locale within your translation settings.\nconsent_type\tString\tDescribes the type of consent, this is always opt_out."
  },
  {
    "title": "Retrieve a section",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/retrieve-a-section/",
    "html": "Retrieve a section\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections/<id> \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch the details of a single section by making a GET request to https://api.intercom.io/help_center/sections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the section which is given by Intercom.\nResponse\n\nThis will return a Section object."
  },
  {
    "title": "The message model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/messages/messages-model/",
    "html": "The message model\nExample Message Object\n{\n    \"type\": \"message\",\n    \"id\": \"489373052\",\n    \"created_at\": 1539897198,\n    \"subject\": \"This is the subject - if it's an email\",\n    \"body\": \"<p>Hello</p>\",\n    \"message_type\": \"email\"\n}\n\n\nMessage are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact.\n\nMessage Object\nKey\tType\tDescription\ntype\tString\tAlways message.\nid\tString\tThe id representing the message.\ncreated_at\tUNIX Timestamp\tThe time the conversation was created.\nsubject\tString\tThe subject of the message. Only present if message_type: email.\nbody\tString\tThe message body, which may contain HTML.\nmessage_type\tString\tThe type of message that was sent. Can be email, inapp, facebook or twitter.\nconversation_id\tString\tThe associated conversation_id. Only returned when creating a conversation."
  },
  {
    "title": "List all tags",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/list-tags-for-an-app/",
    "html": "List all tags\nExample List Tag Request\n$ curl https://api.intercom.io/tags \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\n{\n  \"type\": \"list\",\n  \"data\": [\n    {\n      \"type\": \"tag\",\n      \"name\": \"Beta User\",\n      \"id\": 1\n    },\n    {\n      \"type\": \"tag\",\n      \"name\": \"Amazing User\",\n      \"id\": 2\n    },\n    {\n      \"type\": \"tag\",\n      \"name\": \"Epic User\",\n      \"id\": 3\n    }\n  ]\n}\n\nintercom.tags.all.each { ... }\n\n<?php\n$tags= $intercom->tags->getTags([]);\nforeach ($tags->tags as $tag) {\n    print \"id:\".$tag->id.\" name:\".$tag->name.\"\\n\";\n}?>\n\nTagCollection tags = Tag.list();\nwhile (tags.hasNext()) {\n    out.println(tags.next().getId());\n}\n\n\nYou can list all tags.\n\nResponse\n\nA list of tag objects.\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'list'\ntags\tarray\tA list of tag objects"
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/retrieve-a-collection/",
    "html": "Retrieve a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections/<id> \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the collection which is given by Intercom.\nResponse\n\nThis will return a Collection Model."
  },
  {
    "title": "Detach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/detach-a-tag-from-a-conversation/",
    "html": "Detach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags/<tag_id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"admin_id\\\": \\\"123\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can untag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nadmin_id\tString\tYes\tThe unique identifier for the admin who is removing the tag.\nResponse\n\nThis will return a Tag model for the tag that was removed from the conversation."
  },
  {
    "title": "Detach a contact from a subscription",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/subscription-types/detach-a-contact/",
    "html": "Detach a contact from a subscription\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/subscriptions/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can detach an opt out subscription for a single contact.\n\nRequest Path Parameter\nAttribute\tType\tDescription\ncontact_id\tString\tThe unique identifier for the contact which is given by Intercom\nid\tString\tThe unique identifier for the subscription type which is given by Intercom\nResponse\n\nThis will return a Subscription Type model for the opt out subscription type that was removed from the contact."
  },
  {
    "title": "List all sections",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/list-all-sections/",
    "html": "List all sections\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch a list of all sections by making a GET request to https://api.intercom.io/help_center/sections.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through sections.\ntotal_count\tInteger\tA count of the total number of sections.\ndata\tArray\tAn array of Section objects\nHOW ARE THE SECTIONS SORTED AND ORDERED?\n\nSections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated sections first."
  },
  {
    "title": "Update a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Attributes/updateDataAttribute/",
    "html": "You can update a data attribute.\n\n🚧 Updating the data type is not possible\n\nIt is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/notes/view-a-note/",
    "html": "Retrieve a note\nExample Request\n$ curl https://api.intercom.io/notes/<id> \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"note\",\n  \"id\": \"2\",\n  \"created_at\": 1389913951,\n  \"body\": \"<p>Text for my note</p>\",\n  \"user\": {\n      \"id\": \"5310d8e8598c9a0b24000005\",\n      \"type\": \"user\"\n    },\n  \"author\": {\n    \"type\": \"admin\",\n    \"id\": \"21\",\n    \"name\": \"Jayne Cobb\",\n    \"email\": \"jayne@serenity.io\",\n    \"avatar\" : {\n       \"type\":\"avatar\",\n      \"image_url\": \"http://example.org/128Jayne.jpg\"\n    },\n    \"companies\": []\n  }\n}\n\nintercom.notes.find(:id => note)\n\n<?php\n$note = $intercom->notes->getNote(\"9259097\");\n?>\n\nNote note = Note.find(\"2\");\n\n\nYou can fetch the details of a single note.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given note.\nResponse\n\nThis will return a Note model."
  },
  {
    "title": "Cancel content data export",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Export/cancelDataExport/",
    "html": "You can cancel your job"
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/list-all-collections/",
    "html": "List all collections\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through collections.\ntotal_count\tInteger\tA count of the total number of collections.\ndata\tArray\tAn array of Collection objects.\nHOW ARE THE COLLECTIONS SORTED AND ORDERED?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "List all messages",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/messages/list-all-messages/",
    "html": "List all messages\n\nTo list all messages, you will need to use our Export API and download the data in CSV format. This API is available in v2.5 and above.\n\nLearn more about Exporting Message Data | Learn more about Unstable API version"
  },
  {
    "title": "Create or update a tag",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/create-and-update-tags/",
    "html": "Create or update a tag\nExample Request & Response\n$ curl https://api.intercom.io/tags \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d'\n{\n  \"name\": \"Independent\"\n}'\n\nHTTP/1.1 200 Ok\n\n{\n  \"type\": \"tag\",\n  \"name\": \"Independent\",\n  \"id\": \"17513\"\n}\n\nintercom.tags.tag(name: 'Independent', users: [{ id: \"42ea2f1b93891f6a99000427\" }])\n\n<?php\n$intercom->tags->tag([\"name\" => \"php-tag\"]);\n?>\n\nTag t = new Tag().setName(\"Independent\");\nt = Tag.create(t);\n\n\nYou can create or update a tag.\n\nRequest Body Parameters\nAttribute\tRequired\tDescription\nname\tYes\tThe name of the tag, which will be created if not found, or the new name for the tag if this is an update request. Names are case insensitive.\nid\tOnly for update\tThe id of tag to updates.\nResponse\n\nThis will return a Tag Model of the tag you just created or updated."
  },
  {
    "title": "Retrieve the exported data",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/exports-content-stats/downloading-the-data/",
    "html": "Retrieve the exported data\n\nWhen a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message data will be streamed continuously back down to you in a gzipped CSV format.\n\nOCTET HEADER REQUIRED\n\nYou will have to specify the header Accept: application/octet-stream when hitting this endpoint.\n\nExample Request\ncurlcurl\ncurl https://api.intercom.io/download/content/data/xyz1234 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/octet-stream'\\n\n\ncurl --compressed https://api.intercom.io/download/messages/data/xyz1234 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/octet-stream'\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"errors\\\": [\\n      {\\n        \\\"code\\\": \\\"not_found\\\",\\n        \\\"message\\\": \\\"The requested resource does not exist.\\\"\\n      }\\n  ]\\n}\\n\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"errors\\\": [\\n      {\\n        \\\"code\\\": \\\"not_found\\\",\\n        \\\"message\\\": \\\"Object not found.\\\"\\n      }\\n  ]\\n}\\n\n\nResponse\n\nThis will return a gzipped folder containing multiple CSVs, one for each message statistic that you will need to unzip. If a statistic has no records then it will not be included in the zipped file.\n\nreceipts_YYYYMMDD_hhmmss.csv\nField\tType\tDescription\nuser_id\tstring\tThe user_id of the user who was sent the message.\nuser_external_id\tstring\tThe external_user_id of the user who was sent the message\ncompany_id\tstring\tThe company ID of the user in relation to the message that was sent. Will return -1 if no company is present.\nemail\tstring\tThe users email who was sent the message.\nname\tstring\tThe full name of the user receiving the message\nruleset_id\tstring\tThe id of the message.\ncontent_id\tstring\tThe specific content that was received. In an A/B test each version has its own Content ID.\ncontent_type\tstring\tEmail, Chat, Post etc.\ncontent_title\tstring\tThe title of the content you see in your Intercom workspace.\nruleset_version_id\tstring\tAs you edit content we record new versions. This ID can help you determine which version of a piece of content that was received.\nreceipt_id\tstring\tID for this receipt. Will be included with any related stats in other files to identify this specific delivery of a message.\nreceived_at\ttimestamp\tTimestamp for when the receipt was recorded.\nseries_id\tstring\tThe id of the series that this content is part of. Will return -1 if not part of a series.\nseries_title\tstring\tThe title of the series that this content is part of.\nnode_id\tstring\tThe id of the series node that this ruleset is associated with. Each block in a series has a corresponding node_id.\nfirst_reply\ttimestamp\tThe first time a user replied to this message if the content was able to receive replies.\nfirst_completion\ttimestamp\tThe first time a user completed this message if the content was able to be completed e.g. Tours, Surveys.\nfirst_series_completion\ttimestamp\tThe first time the series this message was a part of was completed by the user.\nfirst_series_disengagement\ttimestamp\tThe first time the series this message was a part of was disengaged by the user.\nfirst_series_exit\ttimestamp\tThe first time the series this message was a part of was exited by the user.\nfirst_goal_success\ttimestamp\tThe first time the user met this messages associated goal if one exists.\nfirst_open\ttimestamp\tThe first time the user opened this message.\nfirst_click\ttimestamp\tThe first time the series the user clicked on a link within this message.\nfirst_dismisall\ttimestamp\tThe first time the series the user dismissed this message.\nfirst_unsubscribe\ttimestamp\tThe first time the user unsubscribed from this message.\nfirst_hard_bounce\ttimestamp\tThe first time this message hard bounced for this user\nclick_YYYYMMDD_hhmmss.csv\n\nA click is recorded whenever a user, lead or visitor clicks a link in a piece of content. Here a link could be a regular text link, a button or an image that links somewhere.\n\nLink this file with the receipts file to track and analyze multiple clicks within the same message.\n\nField\tType\tDescription\nreceipt_id\tstring\tID of the receipt linked to this stat\nclicked_at\ttimestamp\tTimestamp for when the link, image or button was clicked."
  },
  {
    "title": "The note model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/notes/note-model/",
    "html": "The note model\nExample Note Object\n{\\n  \\\"type\\\": \\\"note\\\",\\n  \\\"id\\\": \\\"16\\\",\\n  \\\"created_at\\\": 1389913941,\\n  \\\"body\\\": \\\"<p>Text for my note</p>\\\",\\n  \\\"author\\\": {\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"21\\\",\\n    \\\"name\\\": \\\"Jayne Cobb\\\",\\n    \\\"email\\\": \\\"jayne@serenity.io\\\",\\n    \\\"companies\\\": []\\n  },\\n  \\\"user\\\": {\\n    \\\"type\\\": \\\"user\\\",\\n    \\\"id\\\": \\\"5310d8e8598c9a0b24000005\\\"\\n  }\\n}\n\n\nNotes allow you to annotate and comment on your contacts.\n\nCOMPANIES AND CONVERSATIONS\n\nCurrently not possible to create notes for companies. Reach out if you want to submit a feature request, we take these into account.\\n\\nConversations notes are created via the Reply a conversations API.\n\nNote Object\nKey\tType\tDescription\ntype\tString\tvalue is 'note'\nid\tString\tThe id representing the note\ncreated_at\tTimestamp\tThe time the note was created\nuser\tObject\tThe user the note was created about\nbody\tString\tThe body text of the note.\nauthor\tObject\tOptional. Represents the Admin that created the note"
  },
  {
    "title": "Show content data export",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Export/getDataExport/",
    "html": "You can view the status of your job by sending a GET request to the URL https://api.intercom.io/export/content/data/{job_identifier} - the {job_identifier} is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.\n\n🚧 Jobs expire after two days All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available."
  },
  {
    "title": "Create content data export",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Export/createDataExport/",
    "html": "To create your export job, you need to send a POST request to the export endpoint https://api.intercom.io/export/content/data.\n\nThe only parameters you need to provide are the range of dates that you want exported.\n\n🚧 Limit of one active job\n\nYou can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.\n\n❗️ Updated_at not included\n\nIt should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.\n\n📘 Date ranges are inclusive\n\nRequesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99."
  },
  {
    "title": "Delete a section",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/delete-a-section/",
    "html": "Delete a section\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can delete a single section by making a DELETE request to https://api.intercom.io/help_center/sections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the section which is given by Intercom.\nResponse\nKey\tType\tDescription\nid\tString\tThe unique identifier for the section which you provided in the URL.\nobject\tString\tThe type of object which was deleted - section.\ndeleted\tBoolean\tWhether the section was deleted successfully or not."
  },
  {
    "title": "Creating an export job",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/exports-content-stats/creating-an-export-job/",
    "html": "Creating an export job\n\nTo create your export job, you need to send a POST request to the export endpoint https://api.intercom.io/export/content/data.\n\nThe only parameters you need to provide are the range of dates that you want exported.\n\nParameter\tRequired?\tDescription\ncreated_at_after\tYes\tThe start date that you request data for. It must be formatted as a unix timestamp.\ncreated_at_before\tYes\tThe end date that you request data for. It must be formatted as a unix timestamp.\n\n🚧 Limit of one active job\n\nYou can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.\n\n❗️ Updated_at not included\n\nIt should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.\n\nDATE RANGES ARE INCLUSIVE\n\nRequesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99.\n\nExample Request\ncURL\ncurl https://api.intercom.io/export/content/data \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' -d '\\n{\\n  \\\"created_at_after\\\": 1527811200,\\n  \\\"created_at_before\\\": 1530316800\\n}'\n\nExample Response\nHTTP\nHTTP/1.1 200 OK\\n{\\n  \\\"job_identifier\\\":\\\"v5xsp8c19ji0s82\\\",\\n  \\\"status\\\":\\\"pending\\\",\\n  \\\"download_expires_at\\\": \\\"\\\",\\n  \\\"download_url\\\": \\\"\\\",\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"created_at_after is greater than created_at_before\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"'created_at_before' is a required parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nReturns\n\nSee Export Job Model"
  },
  {
    "title": "Submit a data event",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/data-events/submitting-events/",
    "html": "Submit a data event\nSubmit an Event\n$ curl https://api.intercom.io/events \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Content-Type: application/json\" -d'\n{\n  \"event_name\" : \"placed-order\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"314159\",\n  \"metadata\": {\n    \"order_date\": 1392036272,\n    \"stripe_invoice\": \"inv_3434343434\",\n    \"order_number\": {\n      \"value\":\"3434-3434\",\n      \"url\": \"https://example.org/orders/3434-3434\"\n    },\n    \"price\": {\n      \"currency\":\"usd\",\n      \"amount\": 2999\n    }\n  }\n}'\n\nvar more_metadata = {\n  order_date: 1392036272,\n  stripe_invoice: 'inv_3434343434',\n  order_number: {\n    value: \"3434-3434\",\n    url: 'https://example.org/orders/3434-3434'\n  },\n  price: {\n    currency: 'usd',\n    amount: 2999\n  }\n};\nIntercom('trackEvent', 'placed-order', more_metadata);\n\nmore_metadata = {\n  :order_date => Time.now.to_i,\n  :stripe_invoice => 'inv_3434343434',\n  :order_number => {\n    :value => '3434-3434',\n    :url => 'https://example.org/orders/3434-3434'\n  },\n  price: {\n    :currency => 'usd',\n    :amount => 2999\n  }\n}\nintercom.events.create({\n  :event_name => \"placed-order\",\n  :email => current_user.email,\n  :created_at => 1391691571,\n  :metadata => more_metadata\n})\n\n<?php\n$metadata = ([\n    \"order_date\" => time(),\n    \"stripe_invoice\" => \"inv_3434343434\",\n    \"order_number\" => ([\n        \"value\" => \"3434-3434\",\n        \"url\" => \"https://example.org/orders/3434-3434\"]),\n        \"price\" => ([\n            \"currency\" => \"usd\",\n            \"amount\" => 2999])\n]);\n\n$intercom->events->create([\n    \"event_name\" => \"placed-order\",\n    \"created_at\" => 1500907515,\n    \"user_id\" => \"20413\",\n    \"metadata\" => $metadata\n]);\n?>\n\nMap<String,Object> order = Maps.newHashMap();\norder.put(\"value\", \"3434-3434\");\norder.put(\"url\", \"https://example.org/orders/3434-3434\");\n\nMap<String,Object> price = Maps.newHashMap();\nprice.put(\"currency\", \"usd\");\nprice.put(\"amount\", 2999);\n\nMap<String,Object> meta = Maps.newHashMap();\nmeta.put(\"order_date\", currentTimeMillis()/1000L);\nmeta.put(\"stripe_invoice\", \"inv_3434343434\");\nmeta.put(\"price\", price);\nmeta.put(\"order_number\", order);\n\nEvent event = new Event()\n  .setEventName(\"placed-order\")\n  .setUserID(\"314159\")\n  .setMetadata(meta);\n\nEvent.create(event);\n\n\nYou will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a Content-Type of application/json.\n\nWhen using the JavaScript API, adding the code to your app makes the Events API available. Once added, you can submit an event using the trackEvent method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nWith the Ruby client you pass a hash describing the event to Intercom::Event.create, or call the track_user method directly on the current user object (e.g. user.track_event).\n\nMetadata Object\nType\tDescription\tExample\nString\tThe value is a JSON String\t\"source\":\"desktop\"\nNumber\tThe value is a JSON Number\t\"load\": 3.67\nDate\tThe key ends with the String _date or _at and the value is a Unix timestamp, assumed to be in the UTC timezone.\t\"contact_date\": 1392036272 or \"contacted_at\": 1392036272\nLink\tThe value is a HTTP or HTTPS URI.\t\"article\": \"<https://example.org/ab1de.html\">\nRich Link\tThe value is a JSON object that contains url and value keys.\t\"article\": {\"url\": \"<https://example.org/ab1de.html>\", \"value\":\"the dude abides\"}\nMonetary Amount\tThe value is a JSON object that contains amount and currency keys. The amount key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.\t\"price\": {\"amount\": 34999, \"currency\": \"eur\"}\n\nNB: For the JSON object types, please note that we do not currently support nested JSON structure.\n\n🚧 Lead Events\n\nWhen submitting events for Leads, you will need to specify the Lead's id.\n\nMETADATA BEHAVIOUR\n\nWe currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.\n\nIt is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.\nThere might be up to 24 hrs delay when you send a new metadata for an existing event.\nEVENT DE-DUPLICATION\n\nThe API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is strongly recommended to send a second granularity Unix timestamp in the created_at field.\n\nDuplicated events are responded to using the normal 202 Accepted code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.\n\nHTTP API Responses\nSuccessful responses to submitted events return 202 Accepted with an empty body.\nUnauthorised access will be rejected with a 401 Unauthorized or 403 Forbidden response code.\nEvents sent about users that cannot be found will return a 404 Not Found.\nEvent lists containing duplicate events will have those duplicates ignored.\nServer errors will return a 500 response code and may contain an error message in the body."
  },
  {
    "title": "Retrieve a job status",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/exports-content-stats/checking-the-status-of-the-job/",
    "html": "Retrieve a job status\n\nYou can view the status of your job by sending a GET request to the URL\nhttps://api.intercom.io/export/content/data/{job_identifier} - the {job_identifier} is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.\n\n🚧 Jobs expire after two days\n\nAll jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available.\n\n❗️ Why does my job have a failed status?\n\nIf a job has failed, then the HTTP Response Code will show as a 504 (Timeout). This is because this type of error commonly comes from **jobs taking over 12 hours to process **and thus timing out.\n\nExample Request\ncurl https://api.intercom.io/export/content/data/v5xsp8c19ji0s82 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>'\\n-H 'Accept: application/json'\n\nExample Responses\nHTTP/1.1 200 OK\n{\n  \"job_identifier\":\"v5xsp8c19ji0s82\",\n  \"status\":\"pending\",\n  \"download_expires_at\": \"\",\n  \"download_url\": \"\",\n}\n\nHTTP/1.1 200 OK\n{\n  \"job_identifier\":\"v5xsp8c19ji0s82\",\n  \"status\":\"complete\",\n  \"download_expires_at\": \"1530545400\",\n  \"download_url\": \"https://api.intercom.io/download/messages/data/message-data-export.nsayjlto.5973fb2a-2617-45x9-9f30-60a27b1480f6.csv\",\n}\n\nHTTP/1.1 504 TIMEOUT\n{\n  \"job_identifier\":\"v5xsp8c19ji0s82\",\n  \"status\":\"failed\",\n  \"download_expires_at\": \"\",\n  \"download_url\": \"\",\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000l13h1qd7ktp11tidg\\\",\\n  \\\"errors\\\": [\\n      {\\n        \\\"code\\\": \\\"not_found\\\",\\n        \\\"message\\\": \\\"Export job not found for identifier: mqj3mpa4has8\\\"\\n      }\\n  ]\\n}\\n\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"errors\\\": [\\n      {\\n        \\\"code\\\": \\\"not_found\\\",\\n        \\\"message\\\": \\\"The requested resource does not exist; check your path and try again\\\"\\n      }\\n  ]\\n}\n\nResponse\n\nThis will return a Export Job Model."
  },
  {
    "title": "Redact a conversation part",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/redactConversation/",
    "html": "You can redact a conversation part or the source message of a conversation (as seen in the source object).\n\n📘 Which parts and source messages can I redact?\n\nIf you are redacting a conversation part, it must have a body. If you are redacting a source message, it must have been created by a contact. We will return a conversation_part_not_redactable error if these criteria are not met."
  },
  {
    "title": "Detach a contact from a group conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/detachContactFromConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Manage a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/manageConversation/",
    "html": "You can close a conversation. You can snooze a conversation to reopen on a future date. You can open a conversation which is snoozed or closed. You can assign a conversation to an admin and/or team."
  },
  {
    "title": "Delete a collection",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/delete-a-collection/",
    "html": "Delete a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can delete a single collection by making a DELETE request to https://api.intercom.io/help_center/collections/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the collection which is given by Intercom.\nResponse\nKey\tType\tDescription\nid\tString\tThe unique identifier for the collection which you provided in the URL.\nobject\tString\tThe type of object which was deleted - collection.\ndeleted\tBoolean\tWhether the collections was deleted successfully or not."
  },
  {
    "title": "List all data attributes",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Attributes/lisDataAttributes/",
    "html": "You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Rate Limiting",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/errors/rate-limiting/",
    "html": "Rate Limiting\n# Example with the default rate limit of 1000\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332510\n\n# After another request:\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1487332510\n\n# After window resets\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332520\n\n# If you make more than the allowed requests\nHTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1487332520\n\nintercom.rate_limit_details\n#=> {:limit=>1000, :remaining=>999, :reset_at=>2019-08-05 14:59:00 +0100}\n\n\nAPI Rate Limits are in place to protect Intercom from API traffic spikes that could put our databases at risk. We therefore measure the amount of requests sent to the API in order to throttle these when they surpass the amount allowed. We will respond with '429 Too Many Requests' and the following headers:\n\nHeader Name\tHeader Description\nX-RateLimit-Limit\tMaximum number of requests allowed for the app.\nX-RateLimit-Remaining\tNumber of requests left in the current time.\nX-RateLimit-Reset\tTime when the number of requests will be reset to the maximum limit.\nShown as UNIX timestamp.\nWHAT ABOUT CANVAS KIT REQUESTS?\n\nRate Limits only apply to calls to the REST API, not to any webhook requests that are sent as part of the Canvas Kit capabilities.\n\nWhat is the default amount of requests?\n\nEvery app will have default rate limits. The amount we rate limit them by is different for apps which are privately built for your own usage, or for apps that are publicly installed by third-parties.\n\nPrivate\n\nPrivate apps have a default rate limit of 10,000 API calls per minute per app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple private apps installed, every one contributes towards total number of requests.\n\nPublic\n\nPublic apps have a default rate limit of 10,000 API calls per minute for each app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple public apps installed, each one has its own separate request limit without contributing to the others.\n\nHIGHER RATE LIMITS\n\nIf you require higher rate limits than the defaults, you can contact us using the messenger in the bottom right.\n\nWhen does the amount of requests reset?\n\nAlthough the permitted limit of requests lasts for 1 minute, we evenly distribute this into 10 second windows. This means that every 10 seconds, the amount of permitted requests resets. For example, a default rate limit of 1000 per minute means that you can send a maximum of 166 operations per 10 second period (1000/6).\n\nHow can I handle rate limits?\n\nTo prevent hitting the rate limits, here are a few options for handling within your code.\n\nUse the header information\n\nYou can find the number of requests allowed in your current window in the Intercom headers, or if you are using the Intercom Ruby SDK you can call your client's rate_limit_details which returns a Hash with information about your app's rate limit.\n\nYou can use the remaining number of requests allowed in your current window and when this is below a certain value you can rest until your rate limit is reset.\n\nIn the example below the app is restricted to a rate limit of 5 just to show the output returned — note that we’ve also shown what information is available in the Intercom client and the response for your current rate limits using the Ruby SDK.\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n    # These are the headers we have access to when making requests\n    puts(\"Rate Limit: #{intercom.rate_limit_details[:limit]} \\n\")\n    puts(\"Remaining: #{intercom.rate_limit_details[:remaining]} \\n\")\n    puts(\"Reset Time: #{intercom.rate_limit_details[:reset_at]} \\n\")\n\n    # Check when request limit is under a certain number\n    if not intercom.rate_limit_details[:remaining].nil? and intercom.rate_limit_details[:remaining] < 2\n      sleep_time = intercom.rate_limit_details[:reset_at].to_i - Time.now.to_i\n      puts(\"Waiting for #{sleep_time} seconds to allow for rate limit to be reset\")\n      sleep sleep_time\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nThe output from the above code is below. You would not need to output all of this data, but this should offer an example of what to expect and how you might approach implementing a rest until the limit is reset.\n\nRequest Number 1\nRate Limit:\nRemaining:\nReset Time:\nRequest Number 2\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 3\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 4\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 5\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 6\nRate Limit: 5\nRemaining: 1\nReset Time: 2023-12-08 15:19:51 +0000 \nWaiting for 38 seconds to allow for rate limit to be reset\nRequest Number 7\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 8\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 9\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 10\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 11\nRate Limit: 5\nRemaining: 1\nReset Time: 2016-11-16 16:15:00 +0000\nWaiting for 58 seconds to allow for rate limit to be reset\n\nUse randomization\n\nWhile the reset option is one way to deal with rate limiting, you may want more granular control over your rate limit handling. For example, you might have a specific retry timeframe that you want to follow and not wait for the minute window to pass for your entire rate limit to be reset.\n\nIf you want more control over your rate limiting handling then you can check for the specific rate limit error returned and use some form of randomization in the backoff calculation.\n\nYou could change the retry code above to look like this to achieve some randomization:\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  rescue Intercom::RateLimitExceeded => error\n    #At this point we know we have encountered a limit\n    #So lets try for a few times and backoff a little in each case\n    puts(\"Error Msg: #{error.inspect} \\n\")\n    puts(\"http_code: #{error.http_code[:http_code]}\\n\" )\n    puts(\"http_code: #{error.http_code[:application_error_code]}\\n\" )\n    if retries <= max_retries\n      # Lets try it a few more times\n      retries += 1\n      # Set a range from num of retries to backoff and randomly sample from that\n      # You can pick any range you like here, this is just an example\n      backoff = rand(retries..(backoff_factor * retries))\n      puts(\"Backoff for #{backoff} seconds\")\n      sleep backoff\n    else\n      # Rasing error here so you can perform some action based on this event\n      raise(\"No longer retrying since we have retried #{retries} times.\\n\"\\\n              \"The error returned was: '#{error.message}'\")\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nAfter running this code, your output would look like this:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nRequest Number 7\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 2 seconds\nRequest Number 8\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 9\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 10\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 6 seconds\nRequest Number 11\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nadvanced_throttle.rb:32:in `rescue in block in <main>': No longer retrying since we have retried 4 times. (RuntimeError)\nThe error returned was: 'More than 5 requests received in 1 minute'\n\tfrom advanced_throttle.rb:9:in `block in <main>'\n\tfrom advanced_throttle.rb:8:in `each'\n\tfrom advanced_throttle.rb:8:in `<main>'\n\nUse a library for exponential backoff\n\nTo prevent having to implement your own backoff forumlas, you can use a library that will handle this for you. Some examples include:\n\nretry for Node.js\nbackoff for Python\nretries, a RubyGem which will be used for the below example\n\nWith retries, all you specify the number of retries you want and it will handle the rest.\n\nrequire 'intercom'\nrequire 'stringio'\nrequire 'retries'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nmax_retries = 3\n\nfor num in 0..20\n  handler = Proc.new do |exception, attempt_number, total_delay|\n    puts \"Handler saw a #{exception.class}; retry attempt #{attempt_number}; #{total_delay} seconds have passed.\"\n  end\n  with_retries(:max_tries => max_retries, :handler => handler, :rescue => [Intercom::RateLimitExceeded]) do |attempt|\n    puts(\"Request Number #{num+1}\")\n    # You can check for the max retry number and raise an error so you can take some action based on this event\n    if attempt >= max_retries\n      raise(\"No longer retrying since we have retried #{attempt} time.\\n\"\\\n    \"The error returned was: '#{Intercom::RateLimitExceeded}'\")\n    end\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  end\nend\n\n\nThe is what the output of the above example looks like using retries:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 1; 0.328696139 seconds have passed.\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 2; 1.194656588 seconds have passed.\nRequest Number 6\nthrottle_retries.rb:14:in `block (2 levels) in <main>': No longer retrying since we have retried 3 times. (RuntimeError)\nThe error returned was: 'Intercom::RateLimitExceeded'\n\tfrom /home/ec2-user/.rvm/gems/ruby-2.3.0/gems/retries-0.0.5/lib/retries.rb:46:in `with_retries'\n\tfrom throttle_retries.rb:11:in `block in <main>'\n\tfrom throttle_retries.rb:7:in `each'\n\tfrom throttle_retries.rb:7:in `<main>'\n[ec2-user@ip-10-0-2-162 ~]$\n"
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "Run Assignment Rules on a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/autoAssignConversation/",
    "html": "You can let a conversation be automatically assigned following assignment rules."
  },
  {
    "title": "Create a section",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/create-a-section/",
    "html": "Create a section\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/sections \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"name\\\": \\\"Section 1\\\",\\n  \\\"parent_id\\\": \\\"1\\\",\\n  \\\"translated_content\\\": {\\n  \\t\\\"type\\\": \\\"group_translated_content\\\",\\n    \\\"es\\\": {\\n      \\\"type\\\": \\\"group_content\\\",\\n      \\\"name\\\": \\\"Sección 1\\\",\\n      \\\"description\\\": \\\"Spanish description\\\"\\n    }\\n  }\\n}\n\n\nYou can create a new section by making a POST request to https://api.intercom.io/help_center/sections.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\nname\tString\tYes\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\nparent_id\tString\tYes\tThe id for the collection this section will be within.\ntranslated_content\tString\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Section Model of the section you just created."
  },
  {
    "title": "HTTP Responses",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/errors/http-responses/",
    "html": "HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The codes listed below are often used, and the API may use others. Note that 4xx and 5xx responses may be returned for any request and clients should cater for them.\n\nResponse Code\tDescription\n400\tBad Request -- General client error, possibly malformed data.\n401\tUnauthorized -- The API Key was not authorised (or no API Key was found).\n402\tPayment Required -- The API is not available on your current plan.\n403\tForbidden -- The request is not allowed.\n404\tNot Found -- The resource was not found.\n405\tMethod Not Allowed -- The resource does not accept the HTTP method.\n406\tNot Acceptable -- The resource cannot return the client's required content type.\n408\tRequest Timeout -- The server would not wait any longer for the client.\n409\tConflict - Multiple existing users match this email address - must be more specific using user_id\n415\tUnsupported Media Type - The server doesn't accept the submitted content-type.\n422\tUnprocessable Entity -- The data was well-formed but invalid.\n429\tToo Many Requests -- The client has reached or exceeded a rate limit, or the server is overloaded.\n500, 502, 503, 504\tServer errors - something went wrong with Intercom's servers.\n\nThese responses are most likely momentary operational errors (e.g. temporary unavailability), and, as a result, requests should be retried once."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/attachContactToConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/replyConversation/",
    "html": "You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins."
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/updateConversation/",
    "html": "You can update an existing conversation.\n\n📘\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters."
  },
  {
    "title": "Search conversations",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/searchConversations/",
    "html": "You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString\nAccepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString"
  },
  {
    "title": "Retrieve a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/retrieveConversation/",
    "html": "You can fetch the details of a single conversation.\n\nThis will return a single Conversation model with all its conversation parts.\n\n🚧 Hard limit of 500 parts\n\nThe maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.\n\n📘 Bot name in conversation parts\n\nFor conversation parts generated by a bot, bot name will depend on the following:\n\nCustomers that never turned on AI answers will have operator as the bot name\nCustomers that have turned on AI answers at some point will have fin as the bot name"
  },
  {
    "title": "List all conversations",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/listConversations/",
    "html": "You can fetch a list of all conversations.\n\nYou can optionally request the result page size and the cursor to start after to fetch the result"
  },
  {
    "title": "Creates a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/createConversation/",
    "html": "You can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.\n\n📘 Sending for visitors\n\nYou can also send a message from a visitor by specifying their user_id or id value in the from field, along with a type field value of contact. This visitor will be automatically converted to a contact with a lead role once the conversation is created.\n\nThis will return the Message model that has been created."
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/admins/set-admin-away-mode/",
    "html": "Set an admin to away\n\nYou can set an Admin as away for the Inbox.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nid\tstring\tThe id of the admin you want to set away mode or re-assign conversations.\naway_mode_enabled\tboolean\tSet to 'true' to change the status of the admin to away.\naway_mode_reassign\tboolean\tSet to 'true' to assign any new conversation replies to your default inbox.\nExample Request & Response\ncurltext\n$ curl https://api.intercom.io/admins/814860/away \\\\\\n-X PUT \\\\\\n-H 'Authorization: Bearer <Your access token>' \\\\\\n-H 'Accept: application/json'  \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"away_mode_enabled\\\": true,\\n  \\\"away_mode_reassign\\\": false\\n\\n}\n\nExample Errors\nAdmin without seat\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n\nResponse\n\nThis will return an Admin model of the admin set away."
  },
  {
    "title": "The data attribute model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/data-attributes/data-attribute-model/",
    "html": "The data attribute model\nExample Data Attribute Object\n{  \\\"type\\\": \\\"data_attribute\\\",  \\\"model\\\": \\\"contact\\\",  \\\"name\\\": \\\"paid_subscriber\\\",  \\\"full_name\\\": \\\"custom_attributes.paid_subscriber\\\",   \\\"label\\\": \\\"paid_subscriber\\\",   \\\"description\\\": \\\"\\\",  \\\"data_type\\\": \\\"string\\\",   \\\"options\\\": [    \\\"pick_value_1\\\",    \\\"pick_value_2\\\"  ],  \\\"api_writable\\\": true,   \\\"ui_writable\\\": true,   \\\"custom\\\": true,   \\\"archived\\\": false,   \\\"admin_id\\\": \\\"1\\\",  \\\"created_at\\\": 1392734388,  \\\"updated_at\\\": 1392734388}\n\n\nData Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes.\n\nData Attribute Object\nKey\tType\tDescription\ntype\tstring\tValue is data_attribute\nmodel\tstring\tValue is contact for user/lead attributes, company for company attributes and conversation for conversation attributes.\nname\tstring\tName of the attributeExamples:email``region_name for region_name stored in location_data objectimage_url for image_url stored in avatar objectpaid_subscriber for CDA named paid_subscriber\nfull_name\tstring\tFull name of the attribute. Should match the name unless it's a nested attribute.Examples:email``location_data.region_name``avatar.image_url``custom_attributes.paid_subscriberWe can split full_name on . to access nested user object values.\nlabel\tstring\tReadable name of the attribute (i.e. name you see in the UI)\ndescription\tstring\tReadable description of the attribute\ndata_type\tstring\tType of data stored in the attribute.Possible values: string``integer``float``boolean``date\noptions\tlist\tList of predefined options for attribute value\napi_writable\tboolean\tCan this attribute be updated through API\nui_writable\tboolean\tCan this attribute be updated in the UI\ncustom\tboolean\tSet to true if this is a CDA\narchived\tboolean\tOnly applicable to CDAs\ncreated_at\ttimestamp\tThe time the CDA was created.Only applicable to CDAs.\nupdated_at\ttimestamp\tThe last time the CDA was updated.Only applicable to CDAs\nadmin_id\tstring\tTeammate who created the attribute.Only applicable to CDAs"
  },
  {
    "title": "List all data attributes",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/data-attributes/list-data-attributes/",
    "html": "List all data attributes\nExample Request & Response\ncurlcurl\n$ curl https://api.intercom.io/data_attributes?model=contact-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'\n\n{  \\\"type\\\": \\\"list\\\",  \\\"data\\\": [    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"customer\\\",      \\\"name\\\": \\\"paid_subscriber\\\",      \\\"full_name\\\": \\\"custom_attributes.paid_subscriber\\\",      \\\"label\\\": \\\"paid_subscriber\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"options\\\": [        \\\"pick_value_1\\\",        \\\"pick_value_2\\\"      ],      \\\"api_writable\\\": true,      \\\"ui_writable\\\": true,      \\\"custom\\\": true,      \\\"archived\\\": false,      \\\"admin_id\\\": \\\"1\\\",      \\\"created_at\\\": 1392734388,      \\\"updated_at\\\": 1392734388    },    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"customer\\\",      \\\"name\\\": \\\"region_name\\\",      \\\"full_name\\\": \\\"location_data.region_name\\\",      \\\"label\\\": \\\"Region\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"api_writable\\\": false,      \\\"ui_writable\\\": true,      \\\"custom\\\": false,      \\\"archived\\\": false    },    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"company\\\",      \\\"name\\\": \\\"plan\\\",      \\\"full_name\\\": \\\"plan\\\",      \\\"label\\\": \\\"Plan\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"api_writable\\\": true,      \\\"ui_writable\\\": true,      \\\"custom\\\": false,      \\\"archived\\\": false    },    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"conversation\\\",      \\\"name\\\": \\\"priority\\\",      \\\"full_name\\\": \\\"priority\\\",      \\\"label\\\": \\\"Priority\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"api_writable\\\": true,      \\\"ui_writable\\\": true,      \\\"custom\\\": true,      \\\"archived\\\": false    }  ]}\n\n\nYou can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\nmodel\tString\tNo\tSpecify the data attribute model to return. Possible values are contact, company and conversation.\ninclude_archived\tBoolean\tNo\tInclude archived attributes in the list.By default we return only non archived data attributes.\nResponse\n\nThis will return a List of Data Attribute Models."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/admins/list-admins/",
    "html": "List all admins\nExample Request & Response\n$ curl https://api.intercom.io/admins \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"type\": \"admin.list\",\n    \"admins\": [\n        {\n        \t\t\"type\": \"admin\",\n            \"id\": \"493881\",\n      \t\t\t\"name\": \"Hoban Washburne\",\n      \t\t\t\"email\": \"wash@serenity.io\"\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"mal@serenity.io\",\n            \"id\": \"646303\",\n            \"name\": \"Malcolm Reynolds \",\n            \"away_mode_enabled\": true,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"jayne@serenity.io\",\n            \"id\": \"1195856\",\n            \"name\": \"Jayne Cobb \",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"team\",\n            \"email\": null,\n            \"id\": \"814865\",\n            \"name\": \"SerenityTeam\",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"admin_ids\": [\n                493881,\n                646303,\n                1195856\n            ]\n        }\n    ]\n}\n\nintercom.admins.all.each { ... }\n\n<?php\n$admins= $intercom->admins->getAdmins();\nforeach ($admins->admins as $admin) {\n    print_r($admin->id);\n}?>\n\nAdminCollection admins = Admin.list();\n// get first page...\nList<Admin> pageItems = admins.getPageItems();\n// ...or iterate over pages\nwhile (admins.hasNext()) {\n    System.out.println(admins.next().getName());\n}\n\n\nYou can fetch a list of admins for a given workspace.\n\nResponse\n\nThis will return a list of Admin Objects for a given workspace. The result may also have a pages object if the response is paginated.\n\nAdmin List\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin.list'\nadmins\tarray\tA list of admin objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Users",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/users/users/",
    "html": "Users\n\n📘\n\nUsers is no longer available as a resource. In order to see information and take action on users, you should use the Contacts API."
  },
  {
    "title": "The visitor model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/visitors/visitor-object/",
    "html": "The visitor model\n\nVisitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform. The Visitors resource provides methods to fetch, update, convert and delete.\n\nVisitor Object\nAttribute\tType\tDescription\ntype\tString\tValue is 'visitor'.\nid\tString\tThe Intercom defined id representing the Visitor.\ncreated_at\tDate (UNIX timestamp)\tThe time the Visitor was added to Intercom.\nupdated_at\tDate (UNIX timestamp)\tThe last time the Visitor was updated.\nuser_id\tString\tAutomatically generated identifier for the Visitor.\nname\tString\tThe name of the Visitor.\ncustom_attributes\tObject\tThe custom attributes you have set on the Visitor.\nlast_request_at\tDate (UNIX timestamp)\tThe time the Lead last recorded making a request.\navatar\tObject\tAn avatar object for the Visitor.\nunsubscribed_from_emails\tBoolean\tWhether the Visitor is unsubscribed from emails.\nlocation_data\tObject\tA Location Object relating to the Visitor.\nsocial_profiles\tList\tA list of social profiles associated with the Visitor.\nsegments\tList\tA list of segments the Visitor.\ntags\tList\tA list of tags associated with the Visitor."
  },
  {
    "title": "Retrieve a visitor",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/visitors/view-a-visitor/",
    "html": "Retrieve a visitor\nExample ID Request\n$ curl \\\n-s https://api.intercom.io/visitors/<id> \\   \n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nor \n\n$ curl \\\n-s https://api.intercom.io/visitors\\?user_id\\=16e690c0-485a-4e87-ae98-a326e788a4f7 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"visitor\",\n  \"id\": \"573479f784c5acde6a000575\",\n  \"user_id\": \"16e690c0-485a-4e87-ae98-a326e788a4f7\",\n  \"email\": \"winstonsmith@truth.org\",\n  \"name\": \"Winston Smith\",\n  ...\n}\n# NB: Full Visitor objects are returned\n\nvisitor = intercom.visitors.find(:id => \"530370b477ad7120001d\")\nvisitor = intercom.visitors.find(:user_id => \"8a88a590-e1c3-41e2-a502-e0649dbf721c\")\n\n\nYou can fetch the details of a single visitor.\n\nRequest Path Parameters\nParameter\tRequired?\tDescription\nid\tOne of\tId provided by Intercom.\n?user_id=\tOne of\tTo get the visitor user_id from the browser you can use the Intercom JS SDK following method : Intercom('getVisitorId').\nResponse\n\nThis will return a Visitor Model."
  },
  {
    "title": "Update Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/update_conversation_request/",
    "html": "Payload of the request to update a conversation"
  },
  {
    "title": "Tag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/tag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "Update Section Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/update_section_request/",
    "html": "You can update a Section"
  },
  {
    "title": "Update Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/update_collection_request/",
    "html": "You can update a collection"
  },
  {
    "title": "Untag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/untag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "Update Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/update_contact_request/",
    "html": "You can update a contact"
  },
  {
    "title": "Team List",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/team_list/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Update Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/update_article_request/",
    "html": "You can Update an Article"
  },
  {
    "title": "Tag Users Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/tag_multiple_users_request/",
    "html": "You can tag a list of users."
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/tag_list/",
    "html": "A list of tags objects in the workspace."
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/conversations/update-a-conversation/",
    "html": "Update a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations/<id> \\\n-X PUT \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-H 'Content-Type:application/json' -d\n\n{\n  \"read\": true,\n  \"custom_attributes\": {\n\t  \"issue_type\": \"Billing\",\n\t  \"priority\": \"High\"\n  }\n}\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },   \n}\n\nconversation.read = true\nintercom.conversations.save(conversation)\n\n<?php\n$intercom->conversations->markConversationAsRead(\"10957850396\");\n?>\n\nAdmin admin = new Admin().setId(\"1\");\nAdminReply adminReply = new AdminReply(admin);\nadminReply.setMessageType(\"close\");\nConversation.reply(\"66\", adminReply);\n\n\nYou can update an existing conversation.\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nread\tBoolean\tNo\tMark a conversation as read within Intercom.\ncustom_attributes\tHash\tNo\tSet custom attributes and their values for the conversation.\nResponse\n\nThis will return the Conversation that has been updated."
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/subscription_type_list/",
    "html": "A list of subscription type objects."
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/social_profile/",
    "html": "A Social Profile allows you to label your contacts, companies, and conversations and list them using that Social Profile."
  },
  {
    "title": "Conversation Count Model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/counts/conversation-counts/",
    "html": "Conversation Count Model\nConversation Count Object\n\nThe conversation count supplies global counts about your App's conversations\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nconversation\tobject\tContains counts related to conversations\nconversation.assigned\tnumber\tContains the number of assigned conversations\nconversation.closed\tnumber\tContains the number of closed conversations\nconversation.open\tnumber\tContains the number of open conversations\nconversation.unassigned\tnumber\tContains the number of unassigned conversations\n{\n    \"type\": \"count\",\n    \"conversation\": {\n        \"open\": 30,\n        \"closed\": 17,\n        \"unassigned\": 0,\n        \"assigned\": 30\n    }\n}\n\n# Conversation Counts\n$ curl 'https://api.intercom.io/counts?type=conversation' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# Conversation App Counts\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"count\",\n    \"conversation\": {\n        \"open\": 30,\n        \"closed\": 17,\n        \"unassigned\": 0,\n        \"assigned\": 30\n    }\n}\n\nintercom.counts.for_type(type: 'conversation')\n\n<?php\n$counts = $intercom->counts->getCounts([\"type\" => \"conversation\"]);\nprint_r($counts);\n?>\n\n// Conversation Counts\nfinal Counts.Conversation totals = Counts.conversationTotals();\ntotals.getAssigned();\ntotals.getClosed();\ntotals.getOpen();\ntotals.getUnassigned();\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nConversation Count\tconversation\tNone"
  },
  {
    "title": "Snooze Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/snooze_conversation_request/",
    "html": "Payload of the request to snooze a conversation"
  },
  {
    "title": "Company User/Segment/Tag Count Model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/counts/company-tag-counts/",
    "html": "Company User/Segment/Tag Count Model\nCompany User/Segment/Tag Count Object\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\ncompany\tobject\tContains a field called segment containing segment counts\ncompany.segment\tarray\tContains a list of segment objects their name and their number of companies tagged\ncompany.tag\tarray\tContains a list of tag objects with their name and their number of companies tagged\ncompany.user\tarray\tContains an array of companies with their name and their number of users\ncurlcurlrubyphpjava\n# Company Tag Count\\n$ curl 'https://api.intercom.io/counts?type=company&count=tag&per_page=5' \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\\n# Company Segment Count\\n$ curl 'https://api.intercom.io/counts?type=company&count=segment' \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\\n# Company User Count\\n$ curl 'https://api.intercom.io/counts?type=company&count=user' \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\n# Company Tag Count\\nHTTP/1.1 200 OK\\n\\n{\\n    \\\"type\\\": \\\"count\\\",\\n    \\\"company\\\": {\\n        \\\"tag\\\": [\\n            {\\n                \\\"VIP\\\": 0\\n            },\\n            {\\n                \\\"UpMarket\\\": 0\\n            },\\n            {\\n                \\\"test\\\": 0\\n            },\\n            {\\n                \\\"new\\\": 0\\n            },\\n            {\\n                \\\"smb\\\": 0\\n            }\\n        ]\\n    },\\n    \\\"pages\\\": {\\n        \\\"pages\\\": {\\n            \\\"type\\\": \\\"pages\\\",\\n            \\\"next\\\": \\\"https://api.intercom.io/counts?type=company&count=tag&page=2&per_page=5\\\",\\n            \\\"page\\\": 1,\\n            \\\"per_page\\\": 5,\\n            \\\"total_pages\\\": 203\\n        }\\n    }\\n}\\n\\n# Company Segment Count\\nHTTP/1.1 200 OK\\n{\\n    \\\"type\\\": \\\"count\\\",\\n    \\\"company\\\": {\\n        \\\"segment\\\": [\\n            {\\n                \\\"Active\\\": 2\\n            },\\n            {\\n                \\\"New\\\": 0\\n            },\\n            {\\n                \\\"Slipping Away\\\": 0\\n            },\\n            {\\n                \\\"id=10\\\": 10\\n            }\\n        ]\\n    },\\n    \\\"pages\\\": {}\\n}\\n\\n# Company User Count\\nHTTP/1.1 200 OK\\n\\n{\\n  \\\"type\\\": \\\"count\\\",\\n  \\\"company\\\": {\\n    \\\"user\\\": [\\n      {\\n        \\\"Independents\\\": 7,\\n        \\\"remote_company_id\\\": \\\"6\\\"\\n      },\\n      {\\n        \\\"Alliance\\\": 1,\\n        \\\"remote_company_id\\\": \\\"7\\\"\\n      }\\n    ]\\n  },\\n  \\\"pages\\\": {}\\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nCompany Segment Count\tcompany\tsegment\nCompany Tag Count\tcompany\ttag\nCompany User Count\tcompany\tuser\nPAGINATION WITH COMPANY COUNTS\n\nCompany tag counts are returned via pagination, which means it defaults to 50 results per page unless you specify otherwise. e.g. \\n'https://api.intercom.io/counts?type=company&count=tag&per_page=10\\\"\\n\\nTo get the next page of results you need to make a GET request with the \"next\" RUL supplied in the initial response."
  },
  {
    "title": "Part attachment",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/part_attachment/",
    "html": "The file attached to a part"
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/paginated_response/",
    "html": "Paginated Response"
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/note_list/",
    "html": "A paginated list of notes associated with a contact."
  },
  {
    "title": "Open Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/open_conversation_request/",
    "html": "Payload of the request to open a conversation"
  },
  {
    "title": "Create News Item Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/news_item_request/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "detach_contact_from_conversation_request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/detach_contact_from_conversation_request/",
    "html": "The id of the admin who is performing the action."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/scrollOverAllCompanies/",
    "html": "The list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n\n📘 Scroll Parameter\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message: \"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/listAllCollections/",
    "html": "You can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\n📘 How are the collections sorted and ordered?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/scrollOverAllCompanies/",
    "html": "The list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n\n📘 Scroll Parameter\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message: \"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Run Assignment Rules on a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/autoAssignConversation/",
    "html": "You can let a conversation be automatically assigned following assignment rules."
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "List all Help Centers",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/listHelpCenters/",
    "html": "You can list all Help Centers by making a GET request to https://api.intercom.io/help_center/help_centers."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Detach a contact from a group conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/detachContactFromConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Redact a conversation part",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/redactConversation/",
    "html": "You can redact a conversation part or the source message of a conversation (as seen in the source object).\n\n📘 Which parts and source messages can I redact?\n\nIf you are redacting a conversation part, it must have a body. If you are redacting a source message, it must have been created by a contact. We will return a conversation_part_not_redactable error if these criteria are not met."
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/ListContacts/",
    "html": "You can fetch a list of all contacts."
  },
  {
    "title": "HTTP Responses",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/errors/http-responses/",
    "html": "HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The codes listed below are often used, and the API may use others. Note that 4xx and 5xx responses may be returned for any request and clients should cater for them.\n\nResponse Code\tDescription\n400\tBad Request -- General client error, possibly malformed data.\n401\tUnauthorized -- The API Key was not authorised (or no API Key was found).\n402\tPayment Required -- The API is not available on your current plan.\n403\tForbidden -- The request is not allowed.\n404\tNot Found -- The resource was not found.\n405\tMethod Not Allowed -- The resource does not accept the HTTP method.\n406\tNot Acceptable -- The resource cannot return the client's required content type.\n408\tRequest Timeout -- The server would not wait any longer for the client.\n409\tConflict - Multiple existing users match this email address - must be more specific using user_id\n415\tUnsupported Media Type - The server doesn't accept the submitted content-type.\n422\tUnprocessable Entity -- The data was well-formed but invalid.\n429\tToo Many Requests -- The client has reached or exceeded a rate limit, or the server is overloaded.\n500, 502, 503, 504\tServer errors - something went wrong with Intercom's servers.\n\nThese responses are most likely momentary operational errors (e.g. temporary unavailability), and, as a result, requests should be retried once."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/admins/view-the-current-admin/",
    "html": "Identify an admin\nOAUTH ONLY\n\nThis feature is only available when using OAuth. This requires the \"Read admins\" permission.\n\nYou can view the name, email and app ID of the current authorised admin via a GET request to https://api.intercom.io/me.\n\nResponse\n\nThis will return an Admin object, with an embedded app object (a workspace in legacy terminology).\n\nApp Object (a workspace)\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin'\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\nemail_verified\tboolean\tThis field will indicate whether the Intercom user has verified their email or not\napp.type\tstring\tvalue is 'app'\napp.id_code\tstring\tThe id of the app\napp.name\tstring\tThe name of the app\napp.region\tstring\tthe intercom region the app is located in\napp.created_at\ttimestamp\tWhen the app was created\napp.identity_verification\tboolean\tWhether or not the app uses identity verification\nSINGLE SIGN ON\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the user logging, in you should not accept any sign ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/admins/list-admins/",
    "html": "List all admins\nExample Request & Response\n$ curl https://api.intercom.io/admins \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"type\": \"admin.list\",\n    \"admins\": [\n        {\n        \t\t\"type\": \"admin\",\n            \"id\": \"493881\",\n      \t\t\t\"name\": \"Hoban Washburne\",\n      \t\t\t\"email\": \"wash@serenity.io\"\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"mal@serenity.io\",\n            \"id\": \"646303\",\n            \"name\": \"Malcolm Reynolds \",\n            \"away_mode_enabled\": true,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"admin\",\n            \"email\": \"jayne@serenity.io\",\n            \"id\": \"1195856\",\n            \"name\": \"Jayne Cobb \",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"team_ids\": [\n                814865\n            ]\n        },\n        {\n            \"type\": \"team\",\n            \"email\": null,\n            \"id\": \"814865\",\n            \"name\": \"SerenityTeam\",\n            \"away_mode_enabled\": false,\n            \"away_mode_reassign\": false,\n            \"admin_ids\": [\n                493881,\n                646303,\n                1195856\n            ]\n        }\n    ]\n}\n\nintercom.admins.all.each { ... }\n\n<?php\n$admins= $intercom->admins->getAdmins();\nforeach ($admins->admins as $admin) {\n    print_r($admin->id);\n}?>\n\nAdminCollection admins = Admin.list();\n// get first page...\nList<Admin> pageItems = admins.getPageItems();\n// ...or iterate over pages\nwhile (admins.hasNext()) {\n    System.out.println(admins.next().getName());\n}\n\n\nYou can fetch a list of admins for a given workspace.\n\nResponse\n\nThis will return a list of Admin Objects for a given workspace. The result may also have a pages object if the response is paginated.\n\nAdmin List\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin.list'\nadmins\tarray\tA list of admin objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Merge two contacts",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/merge-contact/",
    "html": "Merge two contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/merge \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"from\\\": \\\"5d70dd30de4efd54f42fd526\\\",\\n  \\\"into\\\": \\\"5ba682d23d7cf92bef87bfd4\\\"\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\nHTTP/1.1 400 UNPROCESSABLE ENTITY\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"0019c4t1derm7namdon0\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"invalid_merge\\\",\\n      \\\"message\\\": \\\"Merging can only be performed on a lead into a user\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can merge a contact with a role of lead into a contact with a role of user.\n\nWHAT HAPPENS UPON A CONTACT BEING MERGED?\n\nThe contact that's specified as from will be deleted after being merged into the contact specified as into. Attributes that don't exist on the contact specified as into will be copied over.\n\nRequest Body Parameters\nParameter\tType\tRequired\tDescription\nfrom\tString\tYes\tThe unique identifier for the contact to merge away from. Must be a lead.\ninto\tString\tYes\tThe unique identifier for the contact to merge into. Must be a user.\nResponse\n\nThis will return a Contact model for the contact who's been merged into."
  },
  {
    "title": "Create or update a tag, Tag or untag companies, Tag contacts",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Tags/createTag/",
    "html": "You can use this endpoint to perform the following operations:\n\n1. Create a new tag: You can create a new tag by passing in the tag name as specified in \"Create or Update Tag Request Payload\" described below.\n\n2. Update an existing tag: You can update an existing tag by passing the id of the tag as specified in \"Create or Update Tag Request Payload\" described below.\n\n3. Tag Companies: You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in \"Tag Company Request Payload\" described below. Also, if the tag doesn't exist then a new one will be created automatically.\n\n4. Untag Companies: You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in \"Untag Company Request Payload\" described below.\n\n5. Tag Multiple Users: You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in \"Tag Users Request Payload\" described below.\n\nEach operation will return a tag object."
  },
  {
    "title": "Newsfeed",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/newsfeed/",
    "html": "A newsfeed is a collection of news items, targeted to a specific audience.\n\nNewsfeeds currently cannot be edited through the API, please refer to this article to set up your newsfeeds in Intercom."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/iterating-over-all-companies/",
    "html": "Scroll over all companies\n\nThe list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n# Send a GET request to get the first page of companies\n$ curl \\\n'https://api.intercom.io/companies/scroll' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n# To get the next page use the scroll param returned in the response\n$ curl \\\n'https://api.intercom.io/companies/scroll?scroll_param=562bc29f-ea55-4823-aaaf-f3faadceaa59' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company.list\",\n  \"companies\": [\n    {\n      \"type\": \"company\",\n      \"id\": \"530370b477ad7120001d\",\n       ...\n     },\n     ...\n   ],\n  \"scroll_param\": \"25b649f7-4d33-4ef6-88f5-60e5b8244309\"\n}\n\n# You can use the scroll method to list all your companies\nintercom.companies.scroll.each { |company| puts company.name}\n# Alternatively you can use the scroll.next method to get 100 companies with each request\nresult = intercom.companies.scroll.next\nresult.scroll_param\n=> \"0730e341-63ef-44da-ab9c-9113f886326d\"\nresult = intercom.companies.scroll.next(\"0730e341-63ef-44da-ab9c-9113f886326d\");\n\nSCROLL PARAMETER\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message:\n\"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/list-companies/",
    "html": "List all companies\nList companies\ncurlcurlrubyphpjava\n$ curl https://api.intercom.io/companies \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\\n\\n{\\n  \\\"type\\\": \\\"company.list\\\",\\n  \\\"total_count\\\": 105,\\n  \\\"companies\\\": [\\n    {\\n      \\\"type\\\": \\\"company\\\",\\n      \\\"id\\\": \\\"530370b477ad7120001d\\\",\\n       ...\\n     },\\n     ...\\n   ],\\n  \\\"pages\\\": {\\n    \\\"next\\\": \\\"https://api.intercom.io/companies?per_page=50&page=2\\\",\\n    \\\"page\\\": 1,\\n    \\\"per_page\\\": 50,\\n    \\\"total_pages\\\": 3\\n  }\\n}\\n\\n# NB: Full company objects are returned\n\n\nYou can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nRequest Parameters\n\nYou can optionally request the result page size and which page to fetch as follows -\n\nParameter\tRequired\tDescription\npage\tno\twhat page of results to fetch defaults to first page.\nper_page\tno\thow many results per page defaults to 15.\norder\tno\tasc or desc. Return the companies in ascending or descending order. defaults to desc.\nRequest Query Parameters\nParameter\tRequired\tDescription\ntag_id\tone of\tThe id of the tag to filter by.\nsegment_id\tone of\tThe id of the segment to filter by.\nResponse\n\nThis will return a paginated list of Company Objects\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Company Objects.\ntotal_count\tInteger\tThe total number of companies.\npages\tPagination Object\tThe information needed to paginate through companies\n\n📘\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Retrieve a contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/get-contact/",
    "html": "Retrieve a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch the details of a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a Contact model."
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Messages/createMessage/",
    "html": "You can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\n🚧 Sending for visitors\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nThis will return the Message model that has been created.\n\n🚧 Retrieving Associated Conversations\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Create a contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/create-contact/",
    "html": "Create a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n\\t\\\"role\\\": \\\"user\\\",\\n\\t\\\"external_id\\\": \\\"25\\\",\\n\\t\\\"email\\\": \\\"wash@serenity.io\\\",\\n\\t\\\"phone\\\": \\\"+1123456789\\\",\\n\\t\\\"name\\\": \\\"Hoban Washburn\\\",\\n\\t\\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\n\\t\\\"last_seen_at\\\": 1571069751,\\n\\t\\\"signed_up_at\\\": 1571069751,\\n\\t\\\"owner_id\\\": 127,\\n\\t\\\"unsubscribed_from_emails\\\": false,\\n\\t\\\"custom_attributes\\\": {\\n\\t\\t\\\"paid_subscriber\\\": true,\\n\\t\\t\\\"monthly_spend\\\": 155.5,\\n\\t\\t\\\"team_mates\\\": 1\\n\\t}\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 409 CONFLICT\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"80ec9d92-99ff-4da9-9a0e-c0ab7c42f7e7\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"conflict\\\",\\n      \\\"message\\\": \\\"A contact matching those details already exists with id=5da6f18e3d7cf967e4582d05\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"00043csj9iva7pl9mmmg\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"parameter_invalid\\\",\\n      \\\"message\\\": \\\"The owner specified is not a member of the workspace\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can create a new contact (ie. user or lead).\n\nRequest Body Parameters\nAttribute\tType\tRequired\tDescription\nrole\tString\tYes\tThe role of the contact.\nAccepted values are user or lead.\nexternal_id\tString\tYes - if role is user and email is blank\tA unique identifier for the contact which is given to Intercom\nemail\tString\tYes - if role is user and external_id is blank\tThe contacts email\nphone\tString\tNo\tThe contacts phone\nname\tString\tNo\tThe contacts name\navatar\tString\tNo\tAn image URL containing the avatar of a contact\nsigned_up_at\tTimestamp\tNo\tThe time specified for when a contact signed up\nlast_seen_at\tTimestamp\tNo\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually)\nowner_id\tInteger\tNo\tThe id of an admin that has been assigned account ownership of the contact\nunsubscribed_from_emails\tBoolean\tNo\tWhether the contact is unsubscribed from emails\ncustom_attributes\tObject\tNo\tThe custom attributes which are set for the contact\ncustom_attributes Object for Custom Object Association creation\nAttribute\tType\tRequired\tDescription\nA custom attribute of type relationship e.g \"orders\"\tArray of Strings\tNo\tWith a relationship attribute as the key, an array of Custom Object Instance ids can be passed to create associations between the contact and the Custom Object Instance\nExample\n{\n  \"custom_attributes\": {\n    \"orders\": [\"123\", \"234\", \"345\"]\n  }\n}\n\n\n🚧 Creating new Custom Data Attributes\n\nYou can only write to custom data attributes that already exist on the workspace. If you need to create new attributes to write to, you should Create Data Attributes through the Data Attributes API.\n\nResponse\n\nThis will return a Contact model of the contact you just created."
  },
  {
    "title": "Delete a section",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/deleteSection/",
    "html": "You can delete a single section by making a DELETE request to https://api.intercom.io/sections/<id>."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/detach-contact-from-company/",
    "html": "Detach a contact from a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/companies/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can detach a company from a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return a Company model for the company that was just detached from the contact."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/visitors/convert-a-visitor-to-a-user/",
    "html": "Convert a visitor\n\nYou can merge a Visitor to a Contact of role type lead or user.\n\nWHAT HAPPENS UPON A VISITOR BEING CONVERTED?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers.\n\nRequest Body Parameters\nArgument\tType\tRequired?\tDescription\nvisitor\tObject\tYes\tThe unique identifiers to convert a single Visitor.\nuser\tObject\tYes\tThe unique identifiers retained after converting or merging.\ntype\tString\tYes\tRepresents the role of the Contact model. Accepts lead or user.\nVisitor object\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tOne of\tThe visitor's email.\nUser object (a contact)\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom, which will be represented as external_id.\nemail\tString\tNo\tThe contact's email, retained by default if one is present.\nExample Request & Response\ncurlcurl\n$ curl \\\\https://api.intercom.io/visitors/convert \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json' \\\\-H 'Content-Type: application/json' -d '{  \\\"visitor\\\": {    \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"  },  \\\"user\\\": {    \\\"email\\\": \\\"winstonsmith@truth.org\\\"  },  \\\"type\\\": \\\"user\\\"}'\n\n# NB: Full User objects are returned{  \\\"type\\\": \\\"lead\\\",  \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"}\n\nResponse\n\nThis will return a Contact model of the visitor you just converted or merged into."
  },
  {
    "title": "The data event model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/data-events/event-model/",
    "html": "The data event model\nEvent Object\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"342311\"\n}\n\n// Sufficient to send just the event name\nIntercom('trackEvent', 'invited-friend');\n\n# create an event as a hash\nevent = {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571\n}\nintercom.events.create event\n\n<?php\n$event = array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\"\n);\n$intercom->events->create($event);\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"1314159\");\n  .setCreatedAt(currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nEvents are how you can submit user activity to Intercom. Once you're sending Intercom event data, you can filter your user base with those events and create Auto Messages to send whenever an event occurs. Every event is associated with an event name, the time it happened, the user that caused the event, and optionally some extra metadata. Events record the count, first and last occurrence of an event.\n\nEvents are different to Custom Attributes in that events are information on what Users did and when they did it, whereas Custom Attributes represent the User's current state as seen in their profile. For example, the first time they subscribed to a paid plan, or the most recent time they changed their plan would be represented by events, whereas a User Attribute would be used to record their current plan.\n\nBecause Events are used for filtering and messaging, and event names are used directly in Intercom by your App's Admins we recommend sending high-level activity about your users that you would like to message on, rather than raw clickstream or user interface actions. For example an order action is a good candidate for an Event, versus all the clicks and actions that were taken to get to that point. We also recommend sending event names that combine a past tense verb and nouns, such as 'created-project'.\n\nThe Events API varies slightly from the rest of the APIs as follows -\n\nYou can submit events using JavaScript using the trackEvent method.\nWhen there's an error or errors, a list structure is returned instead of a single error.\nEvent Object\nAttribute\tRequired\tDescription\nevent_name\tyes\tThe name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan.\ncreated_at\tyes\tThe time the event occurred as a UTC Unix timestamp\nuser_id\tyes if no email\tYour identifier for the user.\nid\tyes if no email or user_id.\tYour identifier for a lead or a user.\nemail\tyes if no user_id\tAn email address for your user. An email should only be used where your application uses email to uniquely identify users\nmetadata\tno\toptional metadata about the event.\n\nThe event_name field is processed as follows -\n\nNames are treated as case insensitive - 'Completed-Order' and 'completed-order' will be considered the same event for your application.\nPeriods (.) and dollars ($) in event names are replaced with hyphens. e.g., 'completed.order' will be stored as 'completed-order'.\n\nTo avoid confusion we recommend submitting lower case event names that do not contain periods or dollars!\n\nMetadata Object\n\nSending an event with metadata\n\n$ curl https://api.intercom.io/events \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Content-Type: application/json\" -d'\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"314159\",\n  \"metadata\": {\n     \"invitee_email\": \"pi@example.org\",\n     \"invite_code\": \"ADDAFRIEND\"\n  }\n}'\n\nvar metadata = {\n  invitee_email: 'pi@example.org',\n  invite_code: 'ADDAFRIEND'\n};\nIntercom('trackEvent', 'invited-friend', metadata);\n\nmetadata = {\n  :invitee_email => 'pi@example.org',\n  :invite_code => 'ADDAFRIEND'\n}\nintercom.events.create {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571,\n  :metadata => metadata\n}\n\n<?php\n$metadata = array(\n  \"invitee_email\" => \"pi@example.org\",\n  \"invite_code\" => \"ADDAFRIEND\"\n);\n$intercom->events->create(array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\",\n  \"metadata\" => $metadata\n));\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"314159\")\n  .putMetadata(\"invite_mail\", \"pi@example.org\")\n  .putMetadata(\"invite_code\", \"ADDAFRIEND\")\n  .putMetadata(\"found_date\", currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nMetadata can be used to submit an event with extra key value data. Each event can contain up to ten metadata key values.\n\nSome use cases for event metadata are -\n\nLinking an event back to a page in your website.\nDescribing before and after values for a subscription plan change.\nSending contextual information about an online order, a booking.\n\nYou can now trigger messages to your users based on event and event metadata and also include the metadata in the messages. For more information on how this works, learn more about event based messaging\n\nSee the section 'Metadata Types' for more information on the kinds of metadata you can send."
  },
  {
    "title": "The data event model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/data-events/event-model/",
    "html": "The data event model\nEvent Object\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"342311\"\n}\n\n// Sufficient to send just the event name\nIntercom('trackEvent', 'invited-friend');\n\n# create an event as a hash\nevent = {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571\n}\nintercom.events.create event\n\n<?php\n$event = array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\"\n);\n$intercom->events->create($event);\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"1314159\");\n  .setCreatedAt(currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nEvents are how you can submit user activity to Intercom. Once you're sending Intercom event data, you can filter your user base with those events and create Auto Messages to send whenever an event occurs. Every event is associated with an event name, the time it happened, the user that caused the event, and optionally some extra metadata. Events record the count, first and last occurrence of an event.\n\nEvents are different to Custom Attributes in that events are information on what Users did and when they did it, whereas Custom Attributes represent the User's current state as seen in their profile. For example, the first time they subscribed to a paid plan, or the most recent time they changed their plan would be represented by events, whereas a User Attribute would be used to record their current plan.\n\nBecause Events are used for filtering and messaging, and event names are used directly in Intercom by your App's Admins we recommend sending high-level activity about your users that you would like to message on, rather than raw clickstream or user interface actions. For example an order action is a good candidate for an Event, versus all the clicks and actions that were taken to get to that point. We also recommend sending event names that combine a past tense verb and nouns, such as 'created-project'.\n\nThe Events API varies slightly from the rest of the APIs as follows -\n\nYou can submit events using JavaScript using the trackEvent method.\nWhen there's an error or errors, a list structure is returned instead of a single error.\nEvent Object\nAttribute\tRequired\tDescription\nevent_name\tyes\tThe name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan.\ncreated_at\tyes\tThe time the event occurred as a UTC Unix timestamp\nuser_id\tyes if no email\tYour identifier for the user.\nid\tyes if no email or user_id.\tYour identifier for a lead or a user.\nemail\tyes if no user_id\tAn email address for your user. An email should only be used where your application uses email to uniquely identify users\nmetadata\tno\toptional metadata about the event.\n\nThe event_name field is processed as follows -\n\nNames are treated as case insensitive - 'Completed-Order' and 'completed-order' will be considered the same event for your application.\nPeriods (.) and dollars ($) in event names are replaced with hyphens. e.g., 'completed.order' will be stored as 'completed-order'.\n\nTo avoid confusion we recommend submitting lower case event names that do not contain periods or dollars!\n\nMetadata Object\n\nSending an event with metadata\n\n$ curl https://api.intercom.io/events \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Content-Type: application/json\" -d'\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"314159\",\n  \"metadata\": {\n     \"invitee_email\": \"pi@example.org\",\n     \"invite_code\": \"ADDAFRIEND\"\n  }\n}'\n\nvar metadata = {\n  invitee_email: 'pi@example.org',\n  invite_code: 'ADDAFRIEND'\n};\nIntercom('trackEvent', 'invited-friend', metadata);\n\nmetadata = {\n  :invitee_email => 'pi@example.org',\n  :invite_code => 'ADDAFRIEND'\n}\nintercom.events.create {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571,\n  :metadata => metadata\n}\n\n<?php\n$metadata = array(\n  \"invitee_email\" => \"pi@example.org\",\n  \"invite_code\" => \"ADDAFRIEND\"\n);\n$intercom->events->create(array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\",\n  \"metadata\" => $metadata\n));\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"314159\")\n  .putMetadata(\"invite_mail\", \"pi@example.org\")\n  .putMetadata(\"invite_code\", \"ADDAFRIEND\")\n  .putMetadata(\"found_date\", currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nMetadata can be used to submit an event with extra key value data. Each event can contain up to ten metadata key values.\n\nSome use cases for event metadata are -\n\nLinking an event back to a page in your website.\nDescribing before and after values for a subscription plan change.\nSending contextual information about an online order, a booking.\n\nYou can now trigger messages to your users based on event and event metadata and also include the metadata in the messages. For more information on how this works, learn more about event based messaging\n\nSee the section 'Metadata Types' for more information on the kinds of metadata you can send."
  },
  {
    "title": "Applied SLA",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/sla_applied/",
    "html": "The SLA Applied object contains the details for which SLA has been applied to this conversation. Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null."
  },
  {
    "title": "Sections",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/section_list/",
    "html": "This will return a list of Sections for the App."
  },
  {
    "title": "reply_conversation_request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Reference",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/reference/",
    "html": "reference to another object"
  },
  {
    "title": "redact_conversation_request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/redact_conversation_request/",
    "html": "Payload of the request to redact a conversation part"
  },
  {
    "title": "Phone Switch",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/phone_switch/",
    "html": "Phone Switch Response"
  },
  {
    "title": "Pagination Object",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/pages_link/",
    "html": "The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows."
  },
  {
    "title": "Group Translated Content",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/group_translated_content/",
    "html": "The Translated Content of an Group. The keys are the locale codes and the values are the translated content of the Group."
  },
  {
    "title": "intercom_version",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/intercom_version/",
    "html": "Intercom API version.\nBy default, it's equal to the version set in the app package."
  },
  {
    "title": "Merge contact data",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/merge_contacts_request/",
    "html": "Merge contact data."
  },
  {
    "title": "File",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/file_attribute/",
    "html": "The value describing a file upload set for a custom attribute"
  },
  {
    "title": "Group Content",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/group_content/",
    "html": "The Content of a Group."
  },
  {
    "title": "Error",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/error/",
    "html": "The API will return an Error List for a failed request, which will contain one or more Error objects."
  },
  {
    "title": "Data Export CSV",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/data_export_csv/",
    "html": "A CSV output file"
  },
  {
    "title": "Deleted Object",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Deleted Section Object",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/deleted_section_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Deleted Collection Object",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/deleted_collection_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Data Event List",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/data_event_list/",
    "html": "This will return a list of data events for the App."
  },
  {
    "title": "Data Event Summary",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/data_event_summary/",
    "html": "This will return a summary of data events for the App."
  },
  {
    "title": "Data Attribute List",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/data_attribute_list/",
    "html": "A list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Custom Attributes",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/custom_attributes/",
    "html": "An object containing the different custom attributes associated to the conversation as key-value pairs. For relationship attributes the value will be a list of custom object instance models."
  },
  {
    "title": "customer_request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/customer_request/",
    "html": "The identifier for the contact as given by Intercom."
  },
  {
    "title": "Custom Object Instance",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/custom_object_instance/",
    "html": "An instance of a Custom Object Type."
  },
  {
    "title": "Cursor based pages",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/cursor_pages/",
    "html": "Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data. A \"cursor\" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or \"pages\" as needed."
  },
  {
    "title": "Create Phone Switch Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_phone_switch_request/",
    "html": "You can create an phone switch"
  },
  {
    "title": "Create Section Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_section_request/",
    "html": "You can create a Section"
  },
  {
    "title": "Create Or Update Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_or_update_company_request/",
    "html": "You can create or update a Company"
  },
  {
    "title": "Create Message Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_message_request/",
    "html": "You can create a message"
  },
  {
    "title": "Create Data Export Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_data_exports_request/",
    "html": "Request for creating a data export"
  },
  {
    "title": "Create Data Event Summaries Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_data_event_summaries_request/",
    "html": "You can send a list of event summaries for a user. Each event summary should contain the event name, the time the event occurred, and the number of times the event occurred. The event name should be a past tense \"verb-noun\" combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Create Data Event Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_data_event_request/",
    "html": "The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Create Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_data_attribute_request/",
    "html": "The name of the data attribute."
  },
  {
    "title": "Create Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_collection_request/",
    "html": "You can create a collection"
  },
  {
    "title": "Create Conversation Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_conversation_request/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Create Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_contact_request/",
    "html": "Payload to create a contact"
  },
  {
    "title": "Create Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/create_article_request/",
    "html": "You can create an Article"
  },
  {
    "title": "Conversation teammates",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_teammates/",
    "html": "The list of teammates who participated in the conversation (wrote at least one conversation part)."
  },
  {
    "title": "Convert Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/convert_visitor_request/",
    "html": "You can merge a Visitor to a Contact of role type lead or user."
  },
  {
    "title": "Detach a contact from a tag",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/tags/untag-contact/",
    "html": "Detach a contact from a tag\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/tags/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can untag a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nResponse\n\nThis will return a Tag model for the tag that was removed from the contact."
  },
  {
    "title": "The team model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/teams/teams-model/",
    "html": "The team model\nExample Team Object\n{\\n    \\\"type\\\": \\\"team\\\",\\n    \\\"id\\\": \\\"814865\\\",\\n    \\\"name\\\": \\\"Example Team\\\",\\n    \\\"admin_ids\\\": [\\n        493881\\n    ]\\n}\n\n\nTeams are groups of admins in Intercom.\n\nTeam Object\nKey\tType\tDescription\ntype\tstring\tValue is team.\nid\tstring\tThe id of the team\nname\tstring\tThe name of the team\nadmin_ids\tlist\tThe list of admin id's that are a part of the team"
  },
  {
    "title": "Retrieve a company",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/view-a-company/",
    "html": "Retrieve a company\nExample Request & Response\n$ curl \\\n-s https://api.intercom.io/companies?company_id=141 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Accept:application/json\" \\\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company\",\n  \"id\": \"531ee472cce572a6ec000006\",\n  \"name\": \"Blue Sun\",\n  \"plan\": {\n    \"type\":\"plan\",\n    \"id\":\"1\",\n    \"name\":\"Paid\"\n  },\n  \"company_id\": \"141\",\n  \"remote_created_at\": 1394531169,\n  \"created_at\": 1394533506,\n  \"updated_at\": 1396874658,\n  \"last_request_at\": 1396874658,\n  \"monthly_spend\": 49,\n  \"session_count\": 26,\n  \"user_count\": 10,\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0\n  }\n}\n\nintercom.companies.find(:id => \"41e66f0313708347cb0000d0\")\n\n<?php\n# Using the name of the company\n$intercom->companies->getCompanies(['name' => 'OneAmerica']);\n\n# Via company_id\n$intercom->companies->getCompanies(['company_id' => '10']);\n\n?>\n\nString id = \"541a144b201ebf2ec5000001\";\nCompany company = Company.find(id);\n\n\nYou can fetch a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the company.\nThe parameter should be url encoded.\ncompany_id\tString\tNo\tThe company_id you have given to the company.\n\nA company can also be fetched by its name using a name or company_id parameter in the url, whose values are the ones you have defined for that company -\n\nhttps://api.intercom.io/companies?name={name}\nhttps://api.intercom.io/companies?company_id={company_id}\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "Conversation statistics",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_statistics/",
    "html": "A Statistics object containing all information required for reporting, with timestamps and calculated metrics."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/list-company-contacts/",
    "html": "List attached contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id>/contacts \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nInvalid starting_after param\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000nbboasf1qqab6b910\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"client_error\\\",\\n      \\\"message\\\": \\\"Invalid starting_after param. Please try again using a starting_after value from a paginated response\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch a list of all contacts that belong to a company.\n\nResponse\n\nThis will return a paginated list of Contact objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Contact Objects\ntotal_count\tInteger\tThe total number of contacts\npages\tPagination Object\tThe information needed to paginate through contacts"
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/list-attached-segments-1/",
    "html": "List attached segments for companies\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id>/segments \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\ncompany_not_found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\\n}\\n\n\n\nYou can fetch a list of all segments that belong to a company.\n\nResponse\n\nThis will return a list of Segment objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Segment Objects"
  },
  {
    "title": "Conversation source",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_source/",
    "html": "The Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/detach-contact-from-company/",
    "html": "Detach a contact from a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/companies/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can detach a company from a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\ncontact_id\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return a Company model for the company that was just detached from the contact."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/iterating-over-all-companies/",
    "html": "Scroll over all companies\n\nThe list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n# Send a GET request to get the first page of companies\n$ curl \\\n'https://api.intercom.io/companies/scroll' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n# To get the next page use the scroll param returned in the response\n$ curl \\\n'https://api.intercom.io/companies/scroll?scroll_param=562bc29f-ea55-4823-aaaf-f3faadceaa59' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company.list\",\n  \"companies\": [\n    {\n      \"type\": \"company\",\n      \"id\": \"530370b477ad7120001d\",\n       ...\n     },\n     ...\n   ],\n  \"scroll_param\": \"25b649f7-4d33-4ef6-88f5-60e5b8244309\"\n}\n\n# You can use the scroll method to list all your companies\nintercom.companies.scroll.each { |company| puts company.name}\n# Alternatively you can use the scroll.next method to get 100 companies with each request\nresult = intercom.companies.scroll.next\nresult.scroll_param\n=> \"0730e341-63ef-44da-ab9c-9113f886326d\"\nresult = intercom.companies.scroll.next(\"0730e341-63ef-44da-ab9c-9113f886326d\");\n\nSCROLL PARAMETER\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message:\n\"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "Conversation Rating",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_rating/",
    "html": "The Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/delete-a-company/",
    "html": "Delete a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nCompany not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can delete a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return an object with details on the deleted company.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the company which is given by Intercom\nobject\tString\tThe type of object - company\ndeleted\tBoolean\tWhether the company has been deleted - true"
  },
  {
    "title": "Create or update a company",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/create-or-update-company/",
    "html": "Create or update a company\nExample Request & Response\n$ curl https://api.intercom.io/companies \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type:application/json' -d '\n{\n  \"name\": \"Blue Sun\",\n  \"plan\": \"Paid\",\n  \"company_id\": \"6\",\n  \"remote_created_at\": 1394531169,\n  \"size\": 750,\n  \"website\": \"http://www.example.com\",\n  \"industry\": \"Manufacturing\",\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0,\n    \"monthly_spend\": 155.98\n  }\n}'\n\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"company\",\n    \"company_id\": \"6\",\n    \"id\": \"57e0120926806ceca3c13ba8\",\n    \"app_id\": \"pi3243fa\",\n    \"name\": \"Blue Sun\",\n    \"remote_created_at\": 1394531169,\n    \"created_at\": 1474302473,\n    \"updated_at\": 1475659931,\n    \"last_request_at\": 1473419085,\n    \"monthly_spend\": 49,\n    \"session_count\": 0,\n    \"user_count\": 0,\n    \"tags\": {\n        \"type\": \"tag.list\",\n        \"tags\": []\n    },\n    \"segments\": {\n        \"type\": \"segment.list\",\n        \"segments\": [\n            {\n                \"type\": \"segment\",\n                \"id\": \"56cc69cc8618d37b45000009\"\n            }\n        ]\n    },\n    \"plan\": {\n        \"type\": \"plan\",\n        \"id\": \"108609\",\n        \"name\": \"Paid\"\n    },\n    \"custom_attributes\": {\n        \"paid_subscriber\": true,\n        \"team_mates\": 0,\n        \"referral_source\": \"Google\",\n        \"founded\": \"20th Century\",\n        \"monthly_spend\": 155.98,\n        \"remove\": true\n    }\n}\n\nintercom.companies.create(:company_id => 6, :name => \"Blue Sun\", :plan => \"Paid\")\n\n<?php\n$intercom->companies->create([\n    \"name\" => \"Academy\",\n    \"id\" => \"10\"\n])\n?>\n\nimport static io.intercom.api.CustomAttribute.*;\n\nCompany company = new Company()\n  .setName(\"Blue Sun\")\n  .setCompanyID(\"1\")\n  .setPlan(new Company.Plan(\"premium\"))\n  .addCustomAttribute(newIntegerAttribute(\"items\", 246))\n  .addCustomAttribute(CustomAttribute.newStringAttribute(\"bar\", \"fruity\"));\n\ncompany = Company.create(company);\n\ncompany.setName(\"Blue Sun Corporation\");\nCompany.update(company);\n\n\nYou can create or update a company.\n\nCOMPANIES WITH NO USERS\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated.\n\nRequest Body Parameters\nArgument\tType\tDescription\nremote_created_at\ttimestamp\tThe time the company was created by you.\ncompany_id\tstring\tThe company id you have defined for the company.\nCan't be updated.\nname\tstring\tThe name of the company.\nmonthly_spend\tnumber\tHow much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..\nplan\tstring\tThe name of the plan you have associated with the company.\nsize\tnumber\tThe number of employees in this company.\nwebsite\tstring\tThe URL for this company's website. Please note that the value specified here is not validated. Accepts any string.\nindustry\tstring\tThe industry that this company operates in.\ncustom_attributes\tobject\tA hash of key/value pairs containing any other data about the company you want Intercom to store..\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "The company model",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/company-model/",
    "html": "The company model\nExample Company Object\n{\\n  \\\"type\\\": \\\"company\\\",\\n  \\\"id\\\": \\\"531ee472cce572a6ec000006\\\",\\n  \\\"name\\\": \\\"Blue Sun\\\",\\n  \\\"plan\\\": {\\n        \\\"type\\\": \\\"plan\\\",\\n        \\\"id\\\": \\\"269315\\\",\\n        \\\"name\\\": \\\"pro\\\"\\n    },\\n  \\\"company_id\\\": \\\"6\\\",\\n  \\\"remote_created_at\\\": 1394531169,\\n  \\\"created_at\\\": 1394533506,\\n  \\\"updated_at\\\": 1396874658,\\n  \\\"size\\\": 85,\\n  \\\"website\\\": \\\"http://www.example.com\\\",\\n  \\\"industry\\\": \\\"Manufacturing\\\",\\n  \\\"monthly_spend\\\": 49,\\n  \\\"session_count\\\": 26,\\n  \\\"user_count\\\": 10,\\n  \\\"custom_attributes\\\": {\\n    \\\"paid_subscriber\\\" : true,\\n    \\\"team_mates\\\": 0\\n  }\\n}\n\n\nCompanies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies.\n\nCompanies will not appear within Intercom until users have been added or associated with a company.\n\nCompany object\nAttribute\tType\tDescription\ntype\tString\tValue is 'company'.\nid\tString\tThe Intercom defined id representing the company.\ncreated_at\tDate (UNIX timestamp)\tThe time the company was added to Intercom.\nremote_created_at\tDate (UNIX timestamp)\tThe time the company was created by you.\nupdated_at\tDate (UNIX timestamp)\tThe last time the company was updated.\nlast_request_at\tDate (UNIX timestamp)\tThe time the company last recorded making a request.\ncompany_id\tString\tThe company id you have defined for the company.\nname\tString\tThe name of the company.\ncustom_attributes\tObject\tThe custom attributes you have set on the company.\nsession_count\tInteger\tHow many sessions the company has recorded.\nmonthly_spend\tInteger\tHow much revenue the company generates for your business.\nuser_count\tInteger\tThe number of users in the company.\nplan\tObject\tThe name of the plan you have associated with the company.\nsize\tInteger\tThe number of employees in the company.\nwebsite\tString\tThe URL for the company website.\nindustry\tString\tThe industry that the company operates in.\nPlan object\nAttribute\tType\tDescription\ntype\tstring\tWill always be of type 'plan'\nid\tstring\tThe plan ID\nname\tstring\tThe name of the plan, note that this is the only field that can be set via the API."
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_contacts/",
    "html": "The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature."
  },
  {
    "title": "Attach a contact to a company",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/attach-contact-to-company/",
    "html": "Attach a contact to a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/companies \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n\\t\\\"id\\\": \\\"56cde0cc3deab1bd8c000100\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can attach a company to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return a Company model for the company that was just attached to the contact."
  },
  {
    "title": "Conversation part author",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_part_author/",
    "html": "The object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams. For Twitter, this will be blank."
  },
  {
    "title": "Contact Unarchived",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_unarchived/",
    "html": "unarchived contact object"
  },
  {
    "title": "Conversation List",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_list/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Conversation Part",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_part/",
    "html": "A Conversation Part represents a message in the conversation."
  },
  {
    "title": "First contact reply",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/conversation_first_contact_reply/",
    "html": "An object containing information on the first users message. For a contact initiated message this will represent the users original message."
  },
  {
    "title": "Contact Tags",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_tags/",
    "html": "An object containing tags meta data about the tags that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_social_profiles/",
    "html": "An object containing social profiles that a contact has."
  },
  {
    "title": "Segments",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_segments/",
    "html": "A list of segments objects attached to a specific contact."
  },
  {
    "title": "User ID",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_reply_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their user_id"
  },
  {
    "title": "Intercom User ID",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_reply_intercom_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Contact Reply",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Email",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_reply_email_request/",
    "html": "Payload of the request to reply on behalf of a contact using their email"
  },
  {
    "title": "Contact notes",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_notes/",
    "html": "An object containing notes meta data about the notes that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Reference",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_reference/",
    "html": "reference to contact object"
  },
  {
    "title": "Contact Location",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_location/",
    "html": "An object containing location meta data about a Intercom contact."
  },
  {
    "title": "Contact Deleted",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_deleted/",
    "html": "deleted contact object"
  },
  {
    "title": "Contact List",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_list/",
    "html": "Contacts are your users in Intercom."
  },
  {
    "title": "Contact companies",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_companies/",
    "html": "An object containing companies meta data about the companies that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Attached Companies",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/contact_attached_companies/",
    "html": "A list of Company Objects"
  },
  {
    "title": "Company Attached Segments",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/company_attached_segments/",
    "html": "A list of Segment Objects"
  },
  {
    "title": "Company Attached Contacts",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/company_attached_contacts/",
    "html": "A list of Contact Objects"
  },
  {
    "title": "Visitor Deleted Object",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/visitor_deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Pagination",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/pagination/",
    "html": "Pagination\n\nThe majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.\n\nPages Object\nParameter\tDescription\nnext\tA link to the next page of results. A response that does not contain a next link does not have further data to fetch.\nprev\tA link to the previous page of results.\nfirst\tA link to the first page of results.\nlast\tA link to the last page of results.\nWHAT ABOUT FOR CONTACTS AND SEARCHES?\n\nWhen listing any Contact objects, we will instead use a cursor-based approach.\n\nOur Search resources will instead use a POST-based approach."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/articles/update-an-article/",
    "html": "Update an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X PUT \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"New title\\\",\\n  \\\"translated_content\\\": {\\n    \\\"es\\\": {\\n      \\\"title\\\": \\\"Nuevo título\\\",\\n      \\\"state\\\": \\\"published\\\",\\n      \\\"body\\\": \\\"<p>Spanish body in html</p>\\\",\\n      \\\"author_id\\\": \\\"1\\\"\\n    }\\n  }\\n}\n\n\nYou can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\ntitle\tString\tNo\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tNo\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be updated.\nResponse\n\nThis will return an Article model of the article you just updated."
  },
  {
    "title": "Collections",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/collection_list/",
    "html": "This will return a list of Collections for the App."
  },
  {
    "title": "Close Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/close_conversation_request/",
    "html": "Payload of the request to close a conversation"
  },
  {
    "title": "Use of HTTP",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/use-of-http/",
    "html": "Use of HTTP\n\nRequest methods are used in accordance with HTTP.\n\nGET is used to access resources and perform queries. The API does not allow modifications (creates, updates, deletes) to occur via GET.\nPOST is used to create or update resources. The preferred model for creation is to post JSON to a 'collections' resource - for example the collections resource for users is https://api.intercom.io/users.\nDELETE is used to delete resources.\n\nResponses use standard HTTP codes. Where there are client or server errors, a list of of one or more errors in JSON format is returned in the body - see Error Objects for more details.\n\nThe API may send cache directives where suitable, notably the ETag, Last-Modified and If-Modified-Since headers.\n\nThe Accept header must be used by a client used to indicate a preferred response for GET/HEAD requests. Requests without an Accept header of application/json may be rejected with a client error of 404 or 406.\n\nThe Content-Type header should be used by clients to indicate the submitted format for POST/PUT requests."
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/assign_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "Update Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_collection_request/",
    "html": "You can update a collection"
  },
  {
    "title": "Retrieve a segment",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/segments/view-a-segment/",
    "html": "Retrieve a segment\nExample Request & Response\n$ curl https://api.intercom.io/segments/53203e244cba153d39000062 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment\",\n  \"id\": \"53203e244cba153d39000062\",\n  \"name\": \"New\",\n  \"created_at\": 1394621988,\n  \"updated_at\": 1394622004\n}\n\nintercom.segments.find(:id => '1234')\n\nSegment segment = Segment.find(\"1234\");\n\n\nYou can fetch the details of a single segment.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identified of a given segment.\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIncludes the count of contacts that belong to a given segment.\nResponse\n\nThis will return a Segment Model."
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/attach_contact_to_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "Translation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/translation/",
    "html": "A translation object contains the localised details of a subscription type."
  },
  {
    "title": "Rate Limiting",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/errors/rate-limiting/",
    "html": "Rate Limiting\n# Example with the default rate limit of 1000\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332510\n\n# After another request:\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1487332510\n\n# After window resets\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332520\n\n# If you make more than the allowed requests\nHTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1487332520\n\nintercom.rate_limit_details\n#=> {:limit=>1000, :remaining=>999, :reset_at=>2019-08-05 14:59:00 +0100}\n\n\nAPI Rate Limits are in place to protect Intercom from API traffic spikes that could put our databases at risk. We therefore measure the amount of requests sent to the API in order to throttle these when they surpass the amount allowed. We will respond with '429 Too Many Requests' and the following headers:\n\nHeader Name\tHeader Description\nX-RateLimit-Limit\tMaximum number of requests allowed for the app.\nX-RateLimit-Remaining\tNumber of requests left in the current time.\nX-RateLimit-Reset\tTime when the number of requests will be reset to the maximum limit.\nShown as UNIX timestamp.\nWHAT ABOUT CANVAS KIT REQUESTS?\n\nRate Limits only apply to calls to the REST API, not to any webhook requests that are sent as part of the Canvas Kit capabilities.\n\nWhat is the default amount of requests?\n\nEvery app will have default rate limits. The amount we rate limit them by is different for apps which are privately built for your own usage, or for apps that are publicly installed by third-parties.\n\nPrivate\n\nPrivate apps have a default rate limit of 10,000 API calls per minute per app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple private apps installed, every one contributes towards total number of requests.\n\nPublic\n\nPublic apps have a default rate limit of 10,000 API calls per minute for each app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple public apps installed, each one has its own separate request limit without contributing to the others.\n\nHIGHER RATE LIMITS\n\nIf you require higher rate limits than the defaults, you can contact us using the messenger in the bottom right.\n\nWhen does the amount of requests reset?\n\nAlthough the permitted limit of requests lasts for 1 minute, we evenly distribute this into 10 second windows. This means that every 10 seconds, the amount of permitted requests resets. For example, a default rate limit of 1000 per minute means that you can send a maximum of 166 operations per 10 second period (1000/6).\n\nHow can I handle rate limits?\n\nTo prevent hitting the rate limits, here are a few options for handling within your code.\n\nUse the header information\n\nYou can find the number of requests allowed in your current window in the Intercom headers, or if you are using the Intercom Ruby SDK you can call your client's rate_limit_details which returns a Hash with information about your app's rate limit.\n\nYou can use the remaining number of requests allowed in your current window and when this is below a certain value you can rest until your rate limit is reset.\n\nIn the example below the app is restricted to a rate limit of 5 just to show the output returned — note that we’ve also shown what information is available in the Intercom client and the response for your current rate limits using the Ruby SDK.\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n    # These are the headers we have access to when making requests\n    puts(\"Rate Limit: #{intercom.rate_limit_details[:limit]} \\n\")\n    puts(\"Remaining: #{intercom.rate_limit_details[:remaining]} \\n\")\n    puts(\"Reset Time: #{intercom.rate_limit_details[:reset_at]} \\n\")\n\n    # Check when request limit is under a certain number\n    if not intercom.rate_limit_details[:remaining].nil? and intercom.rate_limit_details[:remaining] < 2\n      sleep_time = intercom.rate_limit_details[:reset_at].to_i - Time.now.to_i\n      puts(\"Waiting for #{sleep_time} seconds to allow for rate limit to be reset\")\n      sleep sleep_time\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nThe output from the above code is below. You would not need to output all of this data, but this should offer an example of what to expect and how you might approach implementing a rest until the limit is reset.\n\nRequest Number 1\nRate Limit:\nRemaining:\nReset Time:\nRequest Number 2\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 3\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 4\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 5\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 6\nRate Limit: 5\nRemaining: 1\nReset Time: 2023-12-08 15:19:51 +0000 \nWaiting for 38 seconds to allow for rate limit to be reset\nRequest Number 7\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 8\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 9\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 10\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 11\nRate Limit: 5\nRemaining: 1\nReset Time: 2016-11-16 16:15:00 +0000\nWaiting for 58 seconds to allow for rate limit to be reset\n\nUse randomization\n\nWhile the reset option is one way to deal with rate limiting, you may want more granular control over your rate limit handling. For example, you might have a specific retry timeframe that you want to follow and not wait for the minute window to pass for your entire rate limit to be reset.\n\nIf you want more control over your rate limiting handling then you can check for the specific rate limit error returned and use some form of randomization in the backoff calculation.\n\nYou could change the retry code above to look like this to achieve some randomization:\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  rescue Intercom::RateLimitExceeded => error\n    #At this point we know we have encountered a limit\n    #So lets try for a few times and backoff a little in each case\n    puts(\"Error Msg: #{error.inspect} \\n\")\n    puts(\"http_code: #{error.http_code[:http_code]}\\n\" )\n    puts(\"http_code: #{error.http_code[:application_error_code]}\\n\" )\n    if retries <= max_retries\n      # Lets try it a few more times\n      retries += 1\n      # Set a range from num of retries to backoff and randomly sample from that\n      # You can pick any range you like here, this is just an example\n      backoff = rand(retries..(backoff_factor * retries))\n      puts(\"Backoff for #{backoff} seconds\")\n      sleep backoff\n    else\n      # Rasing error here so you can perform some action based on this event\n      raise(\"No longer retrying since we have retried #{retries} times.\\n\"\\\n              \"The error returned was: '#{error.message}'\")\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nAfter running this code, your output would look like this:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nRequest Number 7\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 2 seconds\nRequest Number 8\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 9\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 10\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 6 seconds\nRequest Number 11\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nadvanced_throttle.rb:32:in `rescue in block in <main>': No longer retrying since we have retried 4 times. (RuntimeError)\nThe error returned was: 'More than 5 requests received in 1 minute'\n\tfrom advanced_throttle.rb:9:in `block in <main>'\n\tfrom advanced_throttle.rb:8:in `each'\n\tfrom advanced_throttle.rb:8:in `<main>'\n\nUse a library for exponential backoff\n\nTo prevent having to implement your own backoff forumlas, you can use a library that will handle this for you. Some examples include:\n\nretry for Node.js\nbackoff for Python\nretries, a RubyGem which will be used for the below example\n\nWith retries, all you specify the number of retries you want and it will handle the rest.\n\nrequire 'intercom'\nrequire 'stringio'\nrequire 'retries'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nmax_retries = 3\n\nfor num in 0..20\n  handler = Proc.new do |exception, attempt_number, total_delay|\n    puts \"Handler saw a #{exception.class}; retry attempt #{attempt_number}; #{total_delay} seconds have passed.\"\n  end\n  with_retries(:max_tries => max_retries, :handler => handler, :rescue => [Intercom::RateLimitExceeded]) do |attempt|\n    puts(\"Request Number #{num+1}\")\n    # You can check for the max retry number and raise an error so you can take some action based on this event\n    if attempt >= max_retries\n      raise(\"No longer retrying since we have retried #{attempt} time.\\n\"\\\n    \"The error returned was: '#{Intercom::RateLimitExceeded}'\")\n    end\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  end\nend\n\n\nThe is what the output of the above example looks like using retries:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 1; 0.328696139 seconds have passed.\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 2; 1.194656588 seconds have passed.\nRequest Number 6\nthrottle_retries.rb:14:in `block (2 levels) in <main>': No longer retrying since we have retried 3 times. (RuntimeError)\nThe error returned was: 'Intercom::RateLimitExceeded'\n\tfrom /home/ec2-user/.rvm/gems/ruby-2.3.0/gems/retries-0.0.5/lib/retries.rb:46:in `with_retries'\n\tfrom throttle_retries.rb:11:in `block in <main>'\n\tfrom throttle_retries.rb:7:in `each'\n\tfrom throttle_retries.rb:7:in `<main>'\n[ec2-user@ip-10-0-2-162 ~]$\n"
  },
  {
    "title": "Update Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_contact_request/",
    "html": "You can update a contact"
  },
  {
    "title": "Untag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/untag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "Pagination (Cursor)",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/pagination-cursor/",
    "html": "Pagination (Cursor)\n\nWe're starting to adopt a cursor-based approach to pagination for certain list resources.\n\nThis currently only applies when listing Contacts.\n\nExample Initial Request\ncURL (Initial Request)\n$ curl https://api.intercom.io/contacts?per_page=5 \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nInitial Request\n\nYou can initially specify how many items per_page you want to fetch.\n\nParameter\tType\tDescription\nper_page\tInteger\tThe number of items returned in a single response.\nDefault is 50.\nMax is 150.\nExample Initial Pages Object\nJSON\n{\\n  \\\"pages\\\": {\\n    \\\"type\\\": \\\"pages\\\",\\n    \\\"next\\\": {\\n      \\\"page\\\": 4,\\n      \\\"starting_after\\\": \\\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\\\nIncfQLD3ouPkZlCwJ86F\\\\n\\\"\\n    },\\n    \\\"page\\\": 3,\\n    \\\"per_page\\\": 5,\\n    \\\"total_pages\\\": 10\\n   }\\n}\n\nResponse\n\nIn order to iterate through pages, you must parse the query response. A query with multiple response pages will include a next key in the pages object. When a next value is provided, the starting_after value must be sent back in a new request in order to iterate to the next page.\n\nParameter\tType\tDescription\nstarting_after\tString\tThe cursor used for pagination in order to fetch the next page of results.\n\n🚧 Paginating through all results\n\nThis method of pagination is used to iterate through a result set until all results have been fetched, not to directly go to page X of the results. This is not possible.\n\nExample Subsequent Requests\ncURL (Subsequent Requests)\n$ curl https://api.intercom.io/contacts?starting_after=\\\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\\\nIncfQLD3ouPkZlCwJ86F\\\\n\\\" \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n"
  },
  {
    "title": "The translation model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/subscription-types/the-translation-model/",
    "html": "The translation model\nExample translation Object\nJSON\n{\\n  \\\"name\\\": \\\"Announcements\\\",\\n  \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n  \\\"locale\\\": \\\"en\\\"\\n}\n\n\nA translation object contains the localised details of a subscription type.\n\nTranslation Object\nKey\tType\tDescription\nname\tString\tThe localised name of the subscription type.\ndescription\tString\tThe localised description of the subscription type.\nlocale\tString\tThe two character identifier for the language of the translation object."
  },
  {
    "title": "Team List",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/team_list/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Team Priority Level",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/team_priority_level/",
    "html": "Admin priority levels for teams"
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/tags/",
    "html": "A list of tags objects associated with a conversation"
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/tag_list/",
    "html": "A list of tags objects in the workspace."
  },
  {
    "title": "Tag Users Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/tag_multiple_users_request/",
    "html": "You can tag a list of users."
  },
  {
    "title": "Tag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/tag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "single_filter_search_request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/single_filter_search_request/",
    "html": "The Intercom defined id representing the company."
  },
  {
    "title": "redact_conversation_request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/redact_conversation_request/",
    "html": "Payload of the request to redact a conversation part"
  },
  {
    "title": "Pagination Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/pages_link/",
    "html": "The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows."
  },
  {
    "title": "Merge contact data",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/merge_contacts_request/",
    "html": "Merge contact data."
  },
  {
    "title": "Create News Item Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/news_item_request/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/note_list/",
    "html": "A paginated list of notes associated with a contact."
  },
  {
    "title": "Group Translated Content",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/group_translated_content/",
    "html": "The Translated Content of an Group. The keys are the locale codes and the values are the translated content of the Group."
  },
  {
    "title": "Deleted Article Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/deleted_article_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Create Section Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_section_request/",
    "html": "You can create a Section"
  },
  {
    "title": "Custom Object Instance",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/custom_object_instance/",
    "html": "An instance of a Custom Object Type."
  },
  {
    "title": "Cursor based pages",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/cursor_pages/",
    "html": "Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data. A \"cursor\" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or \"pages\" as needed."
  },
  {
    "title": "Create Phone Switch Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_phone_switch_request/",
    "html": "You can create an phone switch"
  },
  {
    "title": "Create Data Event Summaries Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_data_event_summaries_request/",
    "html": "You can send a list of event summaries for a user. Each event summary should contain the event name, the time the event occurred, and the number of times the event occurred. The event name should be a past tense \"verb-noun\" combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Create Or Update Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_or_update_company_request/",
    "html": "You can create or update a Company"
  },
  {
    "title": "Create Message Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_message_request/",
    "html": "You can create a message"
  },
  {
    "title": "Create Data Event Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_data_event_request/",
    "html": "The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Conversation Rating",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_rating/",
    "html": "The Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation."
  },
  {
    "title": "Reply to a ticket",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/replyTicket/",
    "html": "You can reply to a ticket with a note from an admin."
  },
  {
    "title": "Create Data Export Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_data_exports_request/",
    "html": "Request for creating a data export"
  },
  {
    "title": "Conversation statistics",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_statistics/",
    "html": "A Statistics object containing all information required for reporting, with timestamps and calculated metrics."
  },
  {
    "title": "Conversation teammates",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_teammates/",
    "html": "The list of teammates who participated in the conversation (wrote at least one conversation part)."
  },
  {
    "title": "Conversation source",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_source/",
    "html": "The Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated."
  },
  {
    "title": "Contact Reply",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Retrieve a visitor with User ID",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Visitors/retrieveVisitorWithUserId/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Intercom User ID",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_reply_intercom_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Email",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_reply_email_request/",
    "html": "Payload of the request to reply on behalf of a contact using their email"
  },
  {
    "title": "Contact Location",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_location/",
    "html": "An object containing location meta data about a Intercom contact."
  },
  {
    "title": "Company Attached Segments",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/company_attached_segments/",
    "html": "A list of Segment Objects"
  },
  {
    "title": "Contact Reference",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_reference/",
    "html": "reference to contact object"
  },
  {
    "title": "Company Scroll",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/company_scroll/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Retrieve a ticket type",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Ticket-Types/getTicketType/",
    "html": "You can fetch the details of a single ticket type."
  },
  {
    "title": "Contact notes",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_notes/",
    "html": "An object containing notes meta data about the notes that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "Find a specific tag",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/findTag/",
    "html": "You can fetch the details of tags that are on the workspace by their id. This will return a tag object."
  },
  {
    "title": "Close Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/close_conversation_request/",
    "html": "Payload of the request to close a conversation"
  },
  {
    "title": "Create or update a tag, Tag or untag companies, Tag contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/createTag/",
    "html": "You can use this endpoint to perform the following operations:\n\n1. Create a new tag: You can create a new tag by passing in the tag name as specified in \"Create or Update Tag Request Payload\" described below.\n\n2. Update an existing tag: You can update an existing tag by passing the id of the tag as specified in \"Create or Update Tag Request Payload\" described below.\n\n3. Tag Companies: You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in \"Tag Company Request Payload\" described below. Also, if the tag doesn't exist then a new one will be created automatically.\n\n4. Untag Companies: You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in \"Untag Company Request Payload\" described below.\n\n5. Tag Multiple Users: You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in \"Tag Users Request Payload\" described below.\n\nEach operation will return a tag object."
  },
  {
    "title": "Articles",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/article_list/",
    "html": "This will return a list of articles for the App."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Subscription-Types/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Retrieve a team",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Teams/retrieveTeam/",
    "html": "You can fetch the details of a single team, containing an array of admins that belong to this team."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Segments/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "Admin Reply",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/admin_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of an admin"
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Segments/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "List all newsfeeds",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/listNewsfeeds/",
    "html": "You can fetch a list of all newsfeeds"
  },
  {
    "title": "List all news items",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/listNewsItems/",
    "html": "You can fetch a list of all news items"
  },
  {
    "title": "Delete a section",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/deleteSection/",
    "html": "You can delete a single section by making a DELETE request to https://api.intercom.io/sections/<id>."
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/createCollection/",
    "html": "You can create a new collection by making a POST request to https://api.intercom.io/help_center/collections."
  },
  {
    "title": "Section",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/section/",
    "html": "Sections are subdivisions of a collection, with a collection potentially having multiple sections."
  },
  {
    "title": "List all sections",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/listAllSections/",
    "html": "You can fetch a list of all sections by making a GET request to https://api.intercom.io/help_center/sections.\n\n📘 How are the sections sorted and ordered?\n\nSections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated sections first."
  },
  {
    "title": "Collection",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/collection/",
    "html": "Collections are top level containers for Articles within the Help Center."
  },
  {
    "title": "Retrieve a Help Center",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/retrieveHelpCenter/",
    "html": "You can fetch the details of a single Help Center by making a GET request to https://api.intercom.io/help_center/help_center/<id>."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/attachContactToConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Merge a lead and a user",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/MergeContact/",
    "html": "You can merge a contact with a role of lead into a contact with a role of user."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/DeleteContact/",
    "html": "You can delete a single contact."
  },
  {
    "title": "Data Attribute",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Attributes/data_attribute/",
    "html": "Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Admins/listAdmins/",
    "html": "You can fetch a list of admins for a given workspace."
  },
  {
    "title": "Conversation",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Conversations/conversation/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/listAllCompanies/",
    "html": "You can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Ticket Parts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_parts/",
    "html": "A list of Ticket Part objects for each note and event in the ticket. There is a limit of 500 parts."
  },
  {
    "title": "Article",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Articles/article/",
    "html": "The Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone."
  },
  {
    "title": "Group Content",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/group_content/",
    "html": "The Content of a Group."
  },
  {
    "title": "Error",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/error/",
    "html": "The API will return an Error List for a failed request, which will contain one or more Error objects."
  },
  {
    "title": "Activity Log",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Models/activity_log/",
    "html": "Activities performed by admins."
  },
  {
    "title": "Update a visitor",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Visitors/updateVisitor/",
    "html": "Sending a PUT request to /visitors will result in an update of an existing Visitor.\n\nOption 1. You can update a visitor by passing in the user_id of the visitor in the Request body.\n\nOption 2. You can update a visitor by passing in the id of the visitor in the Request body."
  },
  {
    "title": "customer_request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/customer_request/",
    "html": "The identifier for the contact as given by Intercom."
  },
  {
    "title": "Tag",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tags/tag/",
    "html": "A tag allows you to label your contacts, companies, and conversations and list them using that tag."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Admins/identifyAdmin/",
    "html": "You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).\n\n🚧 Single Sign On\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Retrieve a team",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Teams/retrieveTeam/",
    "html": "You can fetch the details of a single team, containing an array of admins that belong to this team."
  },
  {
    "title": "Search for conversations",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/conversations/search-for-conversations/",
    "html": "Search for conversations\n\nYou can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a conversation that you can search for. See all accepted fields.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\nNESTING & LIMITATIONS\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\\There are some limitations to the amount of multiple's there can be:\\_ There's a limit of max 2 nested filters_ There's a limit of max 15 filters for each AND or OR group\n\nExample Request (Single Filter)\nRequest\n{ \\\"query\\\":  {    \\\"field\\\": \\\"updated_at\\\",    \\\"operator\\\": \\\">\\\",    \\\"value\\\": 1560436784  }}\n\nExample Request (Multiple Filters)\njsonjson\n{ \\\"query\\\":  {    \\\"operator\\\": \\\"AND\\\",    \\\"value\\\": [      {        \\\"field\\\": \\\"statistics.time_to_admin_reply\\\",        \\\"operator\\\": \\\">\\\",        \\\"value\\\": 1000      },       {        \\\"field\\\": \\\"assignee_id\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": \\\"1256789\\\"      },      {        \\\"field\\\": \\\"open\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": true      }    ]  }}\n\n{ \\\"query\\\":  {    \\\"field\\\": \\\"tags\\\",    \\\"operator\\\": \\\"IN\\\",    \\\"value\\\": [\\\"feature-request\\\", \\\"bug\\\", \\\"confusion\\\"]  }}\n\nExample Request (Nested Filters)\nRequest\n{ \\\"query\\\":  {    \\\"operator\\\": \\\"AND\\\",    \\\"value\\\": [      {        \\\"operator\\\": \\\"OR\\\",        \\\"value\\\": [          {            \\\"field\\\": \\\"updated_at\\\",            \\\"operator\\\": \\\">\\\",            \\\"value\\\": 1560436650          },           {            \\\"field\\\": \\\"conversation_rating.rating\\\",            \\\"operator\\\": \\\"=\\\",            \\\"value\\\": 1          }        ]      },      {        \\\"operator\\\": \\\"OR\\\",        \\\"value\\\": [          {            \\\"field\\\": \\\"updated_at\\\",            \\\"operator\\\": \\\">\\\",            \\\"value\\\": 1560436650          },           {            \\\"field\\\": \\\"conversation_rating.rating\\\",            \\\"operator\\\": \\\"=\\\",            \\\"value\\\": 2          }        ]      }    ]  }}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nassignee_id\tString\nchannel_initiated\tString Accepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals\n!=\tAll\tDoesn't Equal\nIN\tAll\tIn Shortcut for OR queries Values must be in Array\nNIN\tAll\tNot In Shortcut for OR ! queries Values must be in Array\n>\tInteger Date (UNIX Timestamp)\tGreater (or equal) than\n<\tInteger Date (UNIX Timestamp)\tLower (or equal) than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Conversations Model that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/2.1/rest-api/articles/update-an-article/",
    "html": "Update an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X PUT \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"New title\\\",\\n  \\\"translated_content\\\": {\\n    \\\"es\\\": {\\n      \\\"title\\\": \\\"Nuevo título\\\",\\n      \\\"state\\\": \\\"published\\\",\\n      \\\"body\\\": \\\"<p>Spanish body in html</p>\\\",\\n      \\\"author_id\\\": \\\"1\\\"\\n    }\\n  }\\n}\n\n\nYou can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\ntitle\tString\tNo\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tNo\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be updated.\nResponse\n\nThis will return an Article model of the article you just updated."
  },
  {
    "title": "The conversation model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/conversations/conversation-model/",
    "html": "The conversation model\nExample Conversation Object\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\"\n        }\n    ],\n    \"title\": \"Conversation Title\",\n    \"admin_assignee_id\": 814860,\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776,\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contact_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"admin_assignee_id\": \"814860\",\n   \"team_assignee_id\": null,\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\": [],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nConversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.\n\nConversation Object\nKey\tType\tDescription\ntype\tString\tAlways conversation.\nid\tString\tThe id representing the conversation.\ncreated_at\tTimestamp\tThe time the conversation was created.\nupdated_at\tTimestamp\tThe last time the conversation was updated.\nsource\tObject\tThe Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated.\ncontacts\tList\tThe list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature.\nteammates\tList\tThe list of teammates who participated in the conversation (wrote at least one conversation part).\ntitle\tString\tThe title given to the conversation.\nadmin_assignee_id\tInteger\tThe id of the admin assigned to the conversation. If it's not assigned to a team it will return null.\nteam_assignee_id\tInteger\tThe id of the team assigned to the conversation. If it's not assigned to a team it will return null.\ncustom_attributes\tObject\tAn object containing the different custom attributes associated to the conversation as key-value pairs.\ntopics\tObject\tAn object containing the different topics associated to the conversation.\nopen\tBoolean\tIndicates whether a conversation is open (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\nwaiting_since\tTimestamp\tThe last time a Contact responded to an Admin. In other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.\nsnoozed_until\tTimestamp\tIf set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time.\ntags\tList\tA list of tags objects associated with the conversation.\nfirst_contact_reply\tObject\tAn object containing information on the first users message. For a contact initiated message this will represent the users original message.\npriority\tString\tIf marked as priority, it will return priority or else not_priority.\nsla_applied\tObject\tThe SLA Applied object contains the details for which SLA has been applied to this conversation.\nconversation_rating\tObject\tThe Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.\nstatistics\tObject\tA Statistics object containing all information required for reporting, with timestamps and calculated metrics.\nconversation_parts\tList\tA list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.\nSource object\nAttribute\tType\tDescription\ntype\tString\tThis includes conversation, push, facebook, twitter and email.\nid\tString\tThe id representing the message.\ndelivered_as\tString\tThe conversation's initiation type.\nPossible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).\nsubject\tString\tOptional. The message subject.\nFor Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tObject\tThe object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nurl\tString\tThe URL where the conversation was started.\nFor Twitter, Email, and Bots, this will be blank.\nredacted\tBoolean\tWhether or not the source message has been redacted. Only applicable for contact initiated messages.\nNOTE\n\nPlease note that URLs for User uploaded images & files have a 30 minute expiration. Once the expiration has passed, the link will no longer be valid and result in a 404. This means that if a URL is copied, and then reused elsewhere, it will continue to work until the expiry threshold. A new URL can be generated by fetching the conversation data again.\n\nContact Object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nTeammate Object\nAttribute\tType\tDescription\ntype\tString\tCurrently this will always be of type admin. Conversations not rated will return null.\nid\tString\tThe ID of the Admin.\nFirst Contact Reply Object\nAttribute\tType\tDescription\ntype\tString\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nurl\tString\tThe URL where the first reply originated from.\nFor Twitter and Email replies, this will be blank.\ncreated_at\tTimestamp\tThe time the users messages was created. This is in unix timestamp format.\nConversation Rating Object\nAttribute\tType\tDescription\nrating\tInteger\tThe rating, between 1 and 5, for the conversation.\nremark\tString\tAn optional field to add a remark to correspond to the number rating.\ncreated_at\tTimestamp\tThe time the rating was requested in the conversation being rated.\ncontact\tObject\tAn object containing the ID and type of the Contact.\nteammate\tObject\tAn object containing the ID and type of the Intercom teammate associated with the conversation when it was rated.\nSLA Object\nAttribute\tType\tDescription\nsla_name\tString\tThe name of the SLA as given by the teammate when it was created.\nsla_status\tString\tOne of \"hit\", \"missed\", \"cancelled\", or \"active\".\nStatistics Object\nAttribute\tType\tDescription\ntime_to_assignment\tInteger\tDuration until last assignment before first admin reply. In seconds.\ntime_to_admin_reply\tInteger\tDuration until first admin reply. Subtracts out of business hours. In seconds.\ntime_to_first_close\tInteger\tDuration until conversation was closed first time. Subtracts out of business hours. In seconds.\ntime_to_last_close\tInteger\tDuration until conversation was closed last time. Subtracts out of business hours. In seconds.\nmedian_time_to_reply\tInteger\tMedian based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.\nfirst_contact_reply_at\tTimestamp\tTime of first text conversation part from a contact.\nfirst_assignment_at\tTimestamp\tTime of first assignment after first_contact_reply_at.\nfirst_admin_reply_at\tTimestamp\tTime of first admin reply after first_contact_reply_at.\nfirst_close_at\tTimestamp\tTime of first close after first_contact_reply_at.\nlast_assignment_at\tTimestamp\tTime of last assignment after first_contact_reply_at.\nlast_assignment_admin_reply_at\tTimestamp\tTime of first admin reply since most recent assignment.\nlast_contact_reply_at\tTimestamp\tTime of the last conversation part from a contact.\nlast_admin_reply_at\tTimestamp\tTime of the last conversation part from an admin.\nlast_close_at\tTimestamp\tTime of the last conversation close.\nlast_closed_by\tObject\tThe last admin who closed the conversation. Returns a reference to an Admin object.\ncount_reopens\tInteger\tNumber of reopens after first_contact_reply_at.\ncount_assignments\tInteger\tNumber of assignments after first_contact_reply_at.\ncount_conversations_parts\tInteger\tTotal number of conversation parts.\nConversation Part Object\n\n🚧\n\nConversation Parts are not returned when listing or searching for all conversations, only when retrieving a single conversation. There is also a limit of 500 parts.\n\nAttribute\tType\tDescription\ntype\tString\tAlways conversation_part.\nid\tString\tThe id representing the conversation part.\npart_type\tString\tThe type of conversation part.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\ncreated_at\tTimestamp\tThe time the conversation part was created.\nupdated_at\tTimestamp\tThe last time the conversation part was updated.\nnotified_at\tTimestamp\tThe time the user was notified with the conversation part.\nassigned_to\tString\tThe id of the admin that was assigned the conversation by this conversation_part (null if there has been no change in assignment.)\nauthor\tString\tThe type of individual that sent the message (user, admin or bot) and their related id.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nredacted\tBoolean\tWhether or not a conversation part has been redacted.\nConversation Part Types\nType\tDescription\ncomment\tStandard reply from customer or admin to a conversation.\nnote\tA note created by an admin on the conversation. A note will only be viewable as an admin.\nnote_and_reopen\tAdd a note and reopen the conversations in the one action.\nassignment\tAn assignment of the conversation to an admin, or Nobody.\nopen\tIdentifies a conversation has been opened.\nclose\tIdentifies a conversation has been closed.\naway_mode_assignment\tConversation has been assigned due to the admin being in away mode.\nparticipant_added\tA participant has been added to a group conversation.\nparticipant_removed\tA participant has been removed from a group conversation.\nconversation_rating_changed\tA conversation rating has been changed, not this can only occur before the rating has been submitted. Once it has been submitted it cannot be changed.\nconversation_rating_remark_added\tA conversation remark has been added to the conversation.\nsnoozed\tA conversation has been snoozed.\nunsnoozed\tA conversation has been unsnoozed.\nassign_and_unsnooze\tAssign a conversation and unsnooze it in one action..\ntimer_unsnooze\tUnsnooze a conversation after a set time.\nexternal_id\tThe identifier of an external channel (like a Twitter DM ID or a Facebook message ID). Will only be non-null for conversations from these sources e.g. Facebook or Twitter"
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/conversations/update-a-conversation/",
    "html": "Update a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations/<id> \\\n-X PUT \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-H 'Content-Type:application/json' -d\n\n{\n  \"read\": true,\n  \"custom_attributes\": {\n\t  \"issue_type\": \"Billing\",\n\t  \"priority\": \"High\"\n  }\n}\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n       \"type\": \"topic.list\",\n       \"topics\": [\n           {\n              \"type\": \"topic\"\n              \"name\": \"Example Topic 1\",\n              \"id\": 839\n           }\n       ],\n       \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },   \n}\n\nconversation.read = true\nintercom.conversations.save(conversation)\n\n<?php\n$intercom->conversations->markConversationAsRead(\"10957850396\");\n?>\n\nAdmin admin = new Admin().setId(\"1\");\nAdminReply adminReply = new AdminReply(admin);\nadminReply.setMessageType(\"close\");\nConversation.reply(\"66\", adminReply);\n\n\nYou can update an existing conversation.\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nread\tBoolean\tNo\tMark a conversation as read within Intercom.\ncustom_attributes\tHash\tNo\tSet custom attributes and their values for the conversation.\nResponse\n\nThis will return the Conversation that has been updated."
  },
  {
    "title": "The collection & section models",
    "url": "https://developers.intercom.com/docs/references/2.1/rest-api/help-center/the-collection-section-models/",
    "html": "The collection & section models\nExample Collection Object\nJSON\n{  \\\"id\\\": 1,  \\\"type\\\": \\\"collection\\\",  \\\"workspace_id\\\": \\\"abcdef\\\",  \\\"name\\\": \\\"Default language name\\\",  \\\"description\\\": \\\"Default language description\\\",   \\\"created_at\\\": 123456,  \\\"updated_at\\\": 123456,  \\\"url\\\": \\\"http://intercom.test/help/collection/name\\\",  \\\"icon\\\": \\\"http://intercom/help_center/icon-1\\\",  \\\"order\\\": 0,  \\\"default_locale\\\": \\\"en\\\",  \\\"translated_content\\\": {    \\\"type\\\": \\\"group_translated_content\\\",    \\\"fr\\\": {      \\\"type\\\": \\\"group_content\\\",      \\\"name\\\": \\\"French name\\\",      \\\"description\\\": \\\"French description\\\"    }  }}\n\nExample Section Object\n{\n  \"id\": 1,\n  \"type\": \"section\",\n  \"workspace_id\": \"abcdef\",\n  \"name\": \"Default language name\",\n  \"created_at\": 123456,\n  \"updated_at\": 123456,\n  \"url\": \"http://intercom.test/help/section/name\",\n  \"icon\": \"http://intercom/help_center/icon-1\",\n  \"order\": 0,\n  \"collection_id\": \"1\",\n  \"default_locale\": \"en\",\n  \"translated_content\": {\n    \"type\": \"group_translated_content\",\n    \"fr\": {\n      \"type\": \"group_content\",\n      \"name\": \"French name\"\n    }\n  }\n}\n\n\nThe Help Center API is a central place to gather all information and take actions on those elements within a Help Center - namely the collections and sections. Collections are top level containers for Articles within the Help Center. Sections are subdivisions of a collection, with a collection potentially having multiple sections.\n\nFor articles you should refer to the Articles endpoint.\n\nCollection Object\nKey\tType\tDescription\ntype\tString\tThe type of object - collection.\nid\tString\tThe unique identifier for the collection which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the collection belongs to.\nname\tString\tThe name of the collection. For multilingual help centers, this will be the title of the default language's content.\ndescription\tString\tThe description of the collection. For multilingual help centers, this will be the description of the collection for the default language.\ncreated_at\tTimestamp\tThe time when the article was created. For multilingual articles, this will be the timestamp of creation of the default language's content.\nupdated_at\tTimestamp\tThe time when the article was last updated. For multilingual articles, this will be the timestamp of last update of the default language's content.\nurl\tString\tThe URL of the collection. For multilingual help centers, this will be the URL of the collection for the default language.\nicon\tString\tThe icon for the collection.\norder\tInteger\tThe order of the section in relation to others sections within a collection. Values go from 0 upwards. 0 is the default if there's no order.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Group Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nSection Object\nKey\tType\tDescription\ntype\tString\tThe type of object - section.\nid\tString\tThe unique identifier for the section which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the section belongs to.\nname\tString\tThe name of the section. For multilingual help centers, this will be the name of the section for the default language.\ncreated_at\tTimestamp\tThe time when the section was created. For multilingual help centers, this will be the timestamp of the section's creation for the default language.\nupdated_at\tTimestamp\tThe time when the section was last updated. For multilingual help centers, this will be the timestamp of the section's last update for the default language.\nurl\tString\tThe URL of the section. For multilingual help centers, this will be the URL of the section for the default language.\nicon\tString\tThe icon for the section.\norder\tInteger\tThe order of the section in relation to others sections within a collection. Values go from 0 upwards. 0 is the default if there's no order.\nparent_id\tString\tThe id of the collection to which this section belongs to.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Group Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nGroup Translated Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - group_translated_content.\n<locale> ar, bg, bs, ca, cs, da, de, 'de-form', el, en, es, et, fi, fr, he, hr, hu, id, it, ja, ko, lt, lv, mn, nb, nl, pl, 'pt-BR', pt, ro, ru, sl, sr, sv, tr, vi, 'zh-CN', 'zh-TW'\tObject\tYes\tAn Group Content Object for each supported locale of the multilingual help center. The default locale's content and information will be contained in the initial Collection Object or Section Object respectively. If there's no content for a locale, the value will be nil.\nGroup Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - group_content.\nname\tString\tYes\tThe name of the collection or section.\ndescription\tString\tYes\tThe description of the collection. Only available for collections."
  },
  {
    "title": "Retrieve an article",
    "url": "https://developers.intercom.com/docs/references/2.1/rest-api/articles/retrieve-an-article/",
    "html": "Retrieve an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch the details of a single article by making a GET request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nResponse\n\nThis will return an Article model."
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.1/rest-api/articles/create-an-article/",
    "html": "Create an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"title\\\": \\\"Thanks for everything\\\",  \\\"description\\\": \\\"English description\\\",  \\\"body\\\": \\\"<p>This is the body in html</p>\\\",  \\\"author_id\\\": 1,  \\\"state\\\": \\\"published\\\",  \\\"parent_id\\\": 1,  \\\"parent_type\\\": \\\"collection\\\",  \\\"translated_content\\\": {    \\\"fr\\\": {      \\\"title\\\": \\\"Allez les verts\\\",      \\\"description\\\": \\\"French description\\\",      \\\"body\\\": \\\"<p>French body in html</p>\\\",      \\\"author_id\\\": 1,      \\\"state\\\": \\\"published\\\"    }  }}\n\n\nYou can create a new article by making a POST request to https://api.intercom.io/articles.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\ntitle\tString\tYes\tThe title of the article. For multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article. For multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML. For multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tYes\tThe id of the author of the article. For multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft. Defaults to draft. For multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be created.\nResponse\n\nThis will return an Article object of the article you just created."
  },
  {
    "title": "Update a ticket",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/updateTicket/",
    "html": "You can update a ticket."
  },
  {
    "title": "Button",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/button/",
    "html": "Button\n\nA button component is used to take an action by clicking a button. This can either:\n\nTrigger a submit request to be sent Inbox Messenger\nOpen a link in a new page Inbox Messenger\nOpen a sheet Messenger\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tbutton\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the component.\nlabel\tAny string\tYes\tThe text that will be rendered inside the button.\naction\tAction Object\tYes\tThis can be a Submit Action, URL Action, or Sheets Action.\nstyle\tprimary``secondary``link\tNo\tStyles the button.Default is primary.\ndisabled\tfalse``true\tNo\tStyles the button and prevents the action.Default is false."
  },
  {
    "title": "HTTP Responses",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/errors/http-responses/",
    "html": "HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The codes listed below are often used, and the API may use others. Note that 4xx and 5xx responses may be returned for any request and clients should cater for them.\n\nResponse Code\tDescription\n400\tBad Request -- General client error, possibly malformed data.\n401\tUnauthorized -- The API Key was not authorised (or no API Key was found).\n402\tPayment Required -- The API is not available on your current plan.\n403\tForbidden -- The request is not allowed.\n404\tNot Found -- The resource was not found.\n405\tMethod Not Allowed -- The resource does not accept the HTTP method.\n406\tNot Acceptable -- The resource cannot return the client's required content type.\n408\tRequest Timeout -- The server would not wait any longer for the client.\n409\tConflict - Multiple existing users match this email address - must be more specific using user_id\n415\tUnsupported Media Type - The server doesn't accept the submitted content-type.\n422\tUnprocessable Entity -- The data was well-formed but invalid.\n429\tToo Many Requests -- The client has reached or exceeded a rate limit, or the server is overloaded.\n500, 502, 503, 504\tServer errors - something went wrong with Intercom's servers.\n\nThese responses are most likely momentary operational errors (e.g. temporary unavailability), and, as a result, requests should be retried once."
  },
  {
    "title": "Rate Limiting",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/errors/rate-limiting/",
    "html": "Rate Limiting\n# Example with the default rate limit of 1000\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332510\n\n# After another request:\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1487332510\n\n# After window resets\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332520\n\n# If you make more than the allowed requests\nHTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1487332520\n\nintercom.rate_limit_details\n#=> {:limit=>1000, :remaining=>999, :reset_at=>2019-08-05 14:59:00 +0100}\n\n\nAPI Rate Limits are in place to protect Intercom from API traffic spikes that could put our databases at risk. We therefore measure the amount of requests sent to the API in order to throttle these when they surpass the amount allowed. We will respond with '429 Too Many Requests' and the following headers:\n\nHeader Name\tHeader Description\nX-RateLimit-Limit\tMaximum number of requests allowed for the app.\nX-RateLimit-Remaining\tNumber of requests left in the current time.\nX-RateLimit-Reset\tTime when the number of requests will be reset to the maximum limit.\nShown as UNIX timestamp.\nWHAT ABOUT CANVAS KIT REQUESTS?\n\nRate Limits only apply to calls to the REST API, not to any webhook requests that are sent as part of the Canvas Kit capabilities.\n\nWhat is the default amount of requests?\n\nEvery app will have default rate limits. The amount we rate limit them by is different for apps which are privately built for your own usage, or for apps that are publicly installed by third-parties.\n\nPrivate\n\nPrivate apps have a default rate limit of 10,000 API calls per minute per app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple private apps installed, every one contributes towards total number of requests.\n\nPublic\n\nPublic apps have a default rate limit of 10,000 API calls per minute for each app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple public apps installed, each one has its own separate request limit without contributing to the others.\n\nHIGHER RATE LIMITS\n\nIf you require higher rate limits than the defaults, you can contact us using the messenger in the bottom right.\n\nWhen does the amount of requests reset?\n\nAlthough the permitted limit of requests lasts for 1 minute, we evenly distribute this into 10 second windows. This means that every 10 seconds, the amount of permitted requests resets. For example, a default rate limit of 1000 per minute means that you can send a maximum of 166 operations per 10 second period (1000/6).\n\nHow can I handle rate limits?\n\nTo prevent hitting the rate limits, here are a few options for handling within your code.\n\nUse the header information\n\nYou can find the number of requests allowed in your current window in the Intercom headers, or if you are using the Intercom Ruby SDK you can call your client's rate_limit_details which returns a Hash with information about your app's rate limit.\n\nYou can use the remaining number of requests allowed in your current window and when this is below a certain value you can rest until your rate limit is reset.\n\nIn the example below the app is restricted to a rate limit of 5 just to show the output returned — note that we’ve also shown what information is available in the Intercom client and the response for your current rate limits using the Ruby SDK.\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n    # These are the headers we have access to when making requests\n    puts(\"Rate Limit: #{intercom.rate_limit_details[:limit]} \\n\")\n    puts(\"Remaining: #{intercom.rate_limit_details[:remaining]} \\n\")\n    puts(\"Reset Time: #{intercom.rate_limit_details[:reset_at]} \\n\")\n\n    # Check when request limit is under a certain number\n    if not intercom.rate_limit_details[:remaining].nil? and intercom.rate_limit_details[:remaining] < 2\n      sleep_time = intercom.rate_limit_details[:reset_at].to_i - Time.now.to_i\n      puts(\"Waiting for #{sleep_time} seconds to allow for rate limit to be reset\")\n      sleep sleep_time\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nThe output from the above code is below. You would not need to output all of this data, but this should offer an example of what to expect and how you might approach implementing a rest until the limit is reset.\n\nRequest Number 1\nRate Limit:\nRemaining:\nReset Time:\nRequest Number 2\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 3\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 4\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 5\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 6\nRate Limit: 5\nRemaining: 1\nReset Time: 2023-12-08 15:19:51 +0000 \nWaiting for 38 seconds to allow for rate limit to be reset\nRequest Number 7\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 8\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 9\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 10\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 11\nRate Limit: 5\nRemaining: 1\nReset Time: 2016-11-16 16:15:00 +0000\nWaiting for 58 seconds to allow for rate limit to be reset\n\nUse randomization\n\nWhile the reset option is one way to deal with rate limiting, you may want more granular control over your rate limit handling. For example, you might have a specific retry timeframe that you want to follow and not wait for the minute window to pass for your entire rate limit to be reset.\n\nIf you want more control over your rate limiting handling then you can check for the specific rate limit error returned and use some form of randomization in the backoff calculation.\n\nYou could change the retry code above to look like this to achieve some randomization:\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  rescue Intercom::RateLimitExceeded => error\n    #At this point we know we have encountered a limit\n    #So lets try for a few times and backoff a little in each case\n    puts(\"Error Msg: #{error.inspect} \\n\")\n    puts(\"http_code: #{error.http_code[:http_code]}\\n\" )\n    puts(\"http_code: #{error.http_code[:application_error_code]}\\n\" )\n    if retries <= max_retries\n      # Lets try it a few more times\n      retries += 1\n      # Set a range from num of retries to backoff and randomly sample from that\n      # You can pick any range you like here, this is just an example\n      backoff = rand(retries..(backoff_factor * retries))\n      puts(\"Backoff for #{backoff} seconds\")\n      sleep backoff\n    else\n      # Rasing error here so you can perform some action based on this event\n      raise(\"No longer retrying since we have retried #{retries} times.\\n\"\\\n              \"The error returned was: '#{error.message}'\")\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nAfter running this code, your output would look like this:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nRequest Number 7\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 2 seconds\nRequest Number 8\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 9\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 10\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 6 seconds\nRequest Number 11\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nadvanced_throttle.rb:32:in `rescue in block in <main>': No longer retrying since we have retried 4 times. (RuntimeError)\nThe error returned was: 'More than 5 requests received in 1 minute'\n\tfrom advanced_throttle.rb:9:in `block in <main>'\n\tfrom advanced_throttle.rb:8:in `each'\n\tfrom advanced_throttle.rb:8:in `<main>'\n\nUse a library for exponential backoff\n\nTo prevent having to implement your own backoff forumlas, you can use a library that will handle this for you. Some examples include:\n\nretry for Node.js\nbackoff for Python\nretries, a RubyGem which will be used for the below example\n\nWith retries, all you specify the number of retries you want and it will handle the rest.\n\nrequire 'intercom'\nrequire 'stringio'\nrequire 'retries'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nmax_retries = 3\n\nfor num in 0..20\n  handler = Proc.new do |exception, attempt_number, total_delay|\n    puts \"Handler saw a #{exception.class}; retry attempt #{attempt_number}; #{total_delay} seconds have passed.\"\n  end\n  with_retries(:max_tries => max_retries, :handler => handler, :rescue => [Intercom::RateLimitExceeded]) do |attempt|\n    puts(\"Request Number #{num+1}\")\n    # You can check for the max retry number and raise an error so you can take some action based on this event\n    if attempt >= max_retries\n      raise(\"No longer retrying since we have retried #{attempt} time.\\n\"\\\n    \"The error returned was: '#{Intercom::RateLimitExceeded}'\")\n    end\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  end\nend\n\n\nThe is what the output of the above example looks like using retries:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 1; 0.328696139 seconds have passed.\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 2; 1.194656588 seconds have passed.\nRequest Number 6\nthrottle_retries.rb:14:in `block (2 levels) in <main>': No longer retrying since we have retried 3 times. (RuntimeError)\nThe error returned was: 'Intercom::RateLimitExceeded'\n\tfrom /home/ec2-user/.rvm/gems/ruby-2.3.0/gems/retries-0.0.5/lib/retries.rb:46:in `with_retries'\n\tfrom throttle_retries.rb:11:in `block in <main>'\n\tfrom throttle_retries.rb:7:in `each'\n\tfrom throttle_retries.rb:7:in `<main>'\n[ec2-user@ip-10-0-2-162 ~]$\n"
  },
  {
    "title": "URL Action",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/actioncomponents/url-action/",
    "html": "URL Action\n\nA URL action opens a given link in a new browser tab.\n\nParameters\nParameters\tPossible Values\tRequired\tDescription\ntype\turl\tYes\tThe type of action you are attaching to a component.\nurl\tA valid HTTPS URL\tYes\tThe link which will open in a new tab.\nExample Object\naction: {\n  \"type\": \"url\",\n  \"url\":  \"https://www.example.com\"\n}\n"
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/UpdateContact/",
    "html": "You can update an existing contact (ie. user or lead)."
  },
  {
    "title": "List content import sources",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/listContentImportSources/",
    "html": "You can retrieve a list of all content import sources for a workspace."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Unarchive contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/UnarchiveContact/",
    "html": "You can unarchive a single contact."
  },
  {
    "title": "Content Import Source",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/content_import_source/",
    "html": "An external source for External Pages that you add to your Fin Content Library."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Delete a content import source",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/deleteContentImportSource/",
    "html": "You can delete a content import source by making a DELETE request this endpoint. This will also delete all external pages that were imported from this source."
  },
  {
    "title": "External Page",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/external_page/",
    "html": "External pages that you have added to your Fin Content Library."
  },
  {
    "title": "Create a content import source",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/createContentImportSource/",
    "html": "You can create a new content import source by sending a POST request to this endpoint."
  },
  {
    "title": "Stored Data",
    "url": "https://developers.intercom.com/docs/references/2.9/canvas-kit/responseobjects/stored-data/",
    "html": "Stored Data\nDescription\n\nA canvas object may optionally contain a stored_data object. This is where you can add key-value pairs of data that you want to be sent in whatever the next request is.\n\nFor example, the flow of your app might have multiple canvases with data being inputted on each one. You may want to have all this data available to use at the end of the flow for the final canvas. You can therefore put all this data in the stored_data object so it's sent in subsequent requests and is available at the end.\n\nExample Object\nstored_data: {\"key\": \"value\"} //Can be more than one pair\n"
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Subscription-Types/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "Object Model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/object-model/",
    "html": "Object Model\nCommon Fields and Metadata\n{\\n  \\\"type\\\": \\\"contacts\\\",\\n  \\\"id\\\": \\\"456456456456\\\",\\n  \\\"created_at\\\": 1392241887,\\n  \\\"custom_attributes\\\": {\\n    \\\"note\\\": \\\"some extra information\\\"\\n  }\\n}\n\n\nCommon Fields\n\nAPI objects have a type field indicating their object type. Each object in the API may be given an identifier, indicated via its id field, and will typically be addressable via a URI. Many objects will also have a created_at field indicating the object's creation date as a UTC Unix timestamp.\n\nDates and Timestamps\n\nAll temporal fields in the API are encoded as Unix timestamps and are by definition always treated as UTC. The most common time fields in the API are created_at and updated_at.\n\nParameter\tDescription\ncreated_at\tThe time the object was created. In most, but not all cases, this is the time the object was created according to the API server.\nupdated_at\tThe time the object was last updated according to the API server.\nOptional Fields\n\nUnpopulated optional data is returned as follows -\n\nNumber, String and Boolean types may be returned as having null values.\nArrays and Objects may be returned as empty ([] {})\n\nIn general clients should be able to handle null and empty fields.\n\nMetadata and Custom Attributes\n\nSome object types, such as Events, Users and Companies, have a metadata or custom_attributes field that allows clients to set custom-defined data about an object."
  },
  {
    "title": "Search contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/SearchContacts/",
    "html": "You can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\n🚧 Why is there a delay when creating contacts and searching for them?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\n\n🚧 Searching for Timestamp Fields\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second. For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards. If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM). This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nAccepted Fields\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nformatted_phone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString"
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/DeleteContact/",
    "html": "You can delete a single contact."
  },
  {
    "title": "Article Translated Content",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/article_translated_content/",
    "html": "The Translated Content of an Article. The keys are the locale codes and the values are the translated content of the article."
  },
  {
    "title": "What are Contacts?",
    "url": "https://developers.intercom.com/docs/guides/contacts/",
    "html": "What are Contacts?\n\nContacts represent your leads and users in Intercom. You can manage contacts with a role of lead or user with the Contacts API.\n\nWhat's the difference between a visitor, lead, or user?\n\nAny unknown visitor to your site who’s not logged in and has no conversation history with you is considered a visitor.\n\nAs soon as a visitor starts a conversation with you, or replies to an outbound message, they become a lead. A lead becomes a user when they sign up to your product, or log into an existing account.\n\nMANAGING VISITORS WITH THE API\n\nIf you need to take actions such as updating, retrieving, deleting, or converting a visitor you can do so using the Visitors API.\n\nWith the Intercom Messenger installed, you can start collecting contact data immediately. You can merge a contact with a role of lead into user with the API as long as you have the id values for both.\n\nHow can I identify a contact?\n\nContacts are assigned two identifiers, an external_id that you define and an Intercom assigned id.\n\nIn order to get, update, or delete a Contact, you will need to have access to the Intercom assigned id value.\n\nWhat are custom attributes?\n\nData Attributes are metadata used to describe your contact model. There is a list of standard attributes collected automatically by Intercom, but you can set your own with custom attributes to aggregate more data about your users.\n\nYou can create a custom attribute for your Contacts by using the Data Attributes API and specifying contact as the model.\n\nWhat is a segment?\n\nA segment is a group of contacts defined by rules (or filters) that you set. You can create segments for every key group of contacts you'd like to send a message to - for example:\n\nContacts who have yet to take action\nContacts based in a certain geographic area\nContacts who signed up less than 7 days ago\n\nYou will need to update a contact's segments in the Intercom UI. However, you can use the Segments API to list all segments. You can use the Segments API to list segments attached to a contact or alternatively can use the Contacts API.\n\nWhat's next?\nImport your existing contacts into Intercom by following this guide\nCreate a new contact using the API\nUse the API to merge a lead and a user"
  },
  {
    "title": "Create an external page (or update an external page by external ID)",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/createExternalPage/",
    "html": "You can create a new external page by sending a POST request to this endpoint. If an external page already exists with the specified source_id and external_id, it will be updated instead."
  },
  {
    "title": "Identifiers and URLs",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/identifiers-and-urls/",
    "html": "Identifiers and URLs\n\nAll objects in the API have an id field indicating their logical identifier.\n\nParameter\tDescription\nid\tA string that identifies the object within the API. The id field will not be larger than 128 characters (in SQL it corresponds to a varchar(128)).\n\nThese fields must always be treated as opaque strings - no guarantees are made about the internal structure of the id fields for an object.\n\nThe id field is always defined by the API server and is guaranteed to be unique relative to the type field - this means no two user objects will have the same id field, but a user and a company may have the same value for their id fields. . Some object types (such as Contact), also support client defined identifiers.\n\nThe company and user objects deserve special mention when it comes to identity for two reasons -\n\nThey allow you send your own external identifiers\nThe contact id field is in some cases, aliased to intercom_user_id. This is done to distinguish it from other identifiers in the API and to avoid confusion as to which object type an id denotes."
  },
  {
    "title": "Article Statistics",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/article_statistics/",
    "html": "The statistics of an article."
  },
  {
    "title": "The subscription type model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/subscription-types/the-subscription-type-model/",
    "html": "The subscription type model\nExample Subscription type Object\nJSON\n{\\n  \\\"type\\\": \\\"subscription\\\",\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"state\\\": \\\"live\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\",\\n  \\\"default_translation\\\": {\\n    \\\"name\\\": \\\"Announcements\\\",\\n    \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n    \\\"locale\\\": \\\"en\\\"\\n  },\\n  \\\"translations\\\": [\\n    {\\n      \\\"name\\\": \\\"Ankündigungen\\\",\\n      \\\"description\\\": \\\"Angebote, Produkt- und Funktionsankündigungen\\\",\\n      \\\"locale\\\": \\\"de\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"Announcements\\\",\\n      \\\"description\\\": \\\"Offers, product and feature announcements\\\",\\n      \\\"locale\\\": \\\"en\\\"\\n    }\\n  ]\\n}\n\n\nA subscription type lets customers easily opt out of non-essential communications without missing what's important to them.\n\nSubscription type Object\nKey\tType\tDescription\ntype\tString\tThe type of the object - subscription\nid\tString\tThe unique identifier representing the subscription type.\nstate\tString\tThe state of the subscription type: live, draft, archived.\ndefault_translation\tObject\tA translation object with the localised version of the subscription type in the default language for the workspace.\ntranslations\tArray\tAn array of translations objects with the localised version of the subscription type in each available locale within your translation settings.\nconsent_type\tString\tDescribes the type of consent, this could be either 'opt_out' or 'opt_in'.\ncontent_types\tArray\tThe message types that this subscription supports - can contain 'email' or 'sms_message'."
  },
  {
    "title": "List all subscription types",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/subscription-types/list-all-subscription-types/",
    "html": "List all subscription types\nExample List Subscription Types Request\n$ curl https://api.intercom.io/subscription_types \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 OK\n{\n  \"type\": \"list\",\n  \"data\": [\n    {\n      \"type\": \"subscription\",\n      \"id\": \"1\",\n      \"state\": \"live\",\n      \"consent_type\": \"opt_out\",\n      \"default_translation\": {\n        \"name\": \"Announcements\",\n        \"description\": \"Offers, product and feature announcements\",\n        \"locale\": \"en\"\n      },\n      \"translations\": [\n        {\n          \"name\": \"Ankündigungen\",\n          \"description\": \"Angebote, Produkt- und Funktionsankündigungen\",\n          \"locale\": \"de\"\n        },\n        {\n          \"name\": \"Announcements\",\n          \"description\": \"Offers, product and feature announcements\",\n          \"locale\": \"en\"\n        }\n      ]\n    },\n    {\n      \"type\": \"subscription\",\n      \"id\": \"2\",\n      \"state\": \"live\",\n      \"consent_type\": \"opt_out\",\n      \"default_translation\": {\n        \"name\": \"Newsletter\",\n        \"description\": \"The latest news and updates, on a regular basis\",\n        \"locale\": \"en\"\n      },\n      \"translations\": [\n        {\n          \"name\": \"Newsletter\",\n          \"description\": \"Regelmäßig die neuesten Nachrichten und Updates\",\n          \"locale\": \"de\"\n        },\n        {\n          \"name\": \"Newsletter\",\n          \"description\": \"The latest news and updates, on a regular basis\",\n          \"locale\": \"en\"\n        }\n      ]\n    },\n    {\n      \"type\": \"subscription\",\n      \"id\": \"3\",\n      \"state\": \"live\",\n      \"consent_type\": \"opt_out\",\n      \"default_translation\": {\n        \"name\": \"Best practices\",\n        \"description\": \"Tips, tricks and recommendations\",\n        \"locale\": \"en\"\n      },\n      \"translations\": [\n        {\n          \"name\": \"Best Practices\",\n          \"description\": \"Tipps, Tricks und Empfehlungen\",\n          \"locale\": \"de\"\n        },\n        {\n          \"name\": \"Best practices\",\n          \"description\": \"Tips, tricks and recommendations\",\n          \"locale\": \"en\"\n        }\n      ]\n    }\n  ]\n}\n\n\nYou can list all subscription types.\n\nResponse\n\nA list of subscription type objects.\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'list'\ndata\tarray\tA list of subscription type objects"
  },
  {
    "title": "Encoding",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/encoding/",
    "html": "Encoding\n\nData is encoded as defined by JSON in RFC4627. The default encoding for APIs is UTF-8. Certain characters, such as Emojji may be handled as surrogate unicode pairs (see section '2.5. Strings' of RFC4627).\n\nSome query parameters may need to be url encoded when sending - for example, the email parameter value used to query users should be encoded.\n\nHTML ENCODING\n\nIt should be noted that the following identifiers are encoded to protect from potential cross-site scripting attacks: 'name', 'user_id', 'company_id' and 'email'. As a result you may see these identifiers in their encoded format when you retrieve them via the API. \\nNote that the characters we encode are double quote, single quote, ampersand, less than and greater than symbols i.e \" ' & < >\n\nHTML Encoding example\n\\\"X&Ys\\\" == \\\"X&amp;Y&#39;s\\\"\n"
  },
  {
    "title": "Articles",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/article_list/",
    "html": "This will return a list of articles for the App."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/admins/view-admin-activity-logs/",
    "html": "List all activity logs\nExample Request & Response\ncurlhtml\ncurl https://api.intercom.io/admins/activity_logs?created_at_after=489222000&created_at_before=685695600 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json'\n\n\nExample Errors\n\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"parameter_not_found\\\",\\n\\t\\\"message\\\" => \\\"Please provide the following parameters: created_at_after\\\"\\n  }]\\n}\\n\n\nHTTP/1.1 403 RESTRICTED\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"api_plan_restricted\\\",\\n\\t\\\"message\\\" => \\\"This feature is not yet available to your app\\\"\\n  }]\\n}\n\n\nYou can get a log of activities by all admins in an app by sending a GET request to the URL https://api.intercom.io/admins/activity_logs.\n\nActivity List\nAttribute\tType\tDescription\ntype\tstring\tValue is activity_log.list\nactivity_logs\tarray\tA list of activity objects\npages\tobject\tOptional. A pagination object which may be empty, indication no further pages to fetch\nActivity Object\nAttribute\tType\tDescription\nactivity_type\tstring\tThe type of activity - see Activity Types & Descriptions below.\nactivity_description\tstring\tA sentence or two describing the activity - see Activity Types & Descriptions below.\nmetadata\tobject\tAn object containing information on the activity and what it modified\ncreated_at\ttimestamp\tThe time the activity was performed\nperformed_by\tobject\tAn Admin object of the admin who performed the activity\nid\tstring\tThe id representing the activity\nActivity Types & Descriptions\nType\tDescription\nadmin_assignment_limit_change\tA teammate changed their assignment limit\nadmin_away_mode_change\tA teammate changed their away mode and conversation reassignment settings\nadmin_deletion\tA teammate was removed from your workspace\nadmin_deprovisioned\tA teammate was deprovisioned from your workspace via SCIM\nadmin_invite_change\tThe permissions for a teammate invite were changed\nadmin_invite_creation\tA teammate invite was created\nadmin_invite_deletion\tA teammate invite was deleted\nadmin_login_failure\tA teammate tried to login with the wrong credentials\nadmin_login_success\tA teammate logged in successfully\nadmin_logout\tA teammate logged out\nadmin_password_reset_request\tA teammate requested a password reset\nadmin_password_reset_success\tA teammate's password was successfully reset\nadmin_permission_change\tThe permissions for a teammate were changed\nadmin_provisioned\tA teammate was provisioned on your workspace via SCIM\napp_admin_join\tA teammate joined your workspace (i.e. accepted your invite)\napp_authentication_method_change\tYour workspace's authentication methods were changed\napp_data_deletion\tA user or lead was deleted from your workspace\napp_data_export\tMessage or conversation data was exported from your workspace\napp_google_sso_domain_change\tYour workspace's Google SSO domain was changed\napp_identity_verification_change\tYour workspace's identity verification setting was changed\napp_name_change\tThe name of your workspace was changed\napp_outbound_address_change\tThe outbound email address was changed for your workspace\napp_package_installation\tAn app package was installed on your workspace\napp_package_token_regeneration\tAn access token for a specific app package was updated\napp_package_uninstallation\tAn app package was uninstalled from your workspace\napp_team_creation\tA team was created\napp_team_deletion\tA team was deleted\napp_team_membership_modification\tA team's membership was modified\napp_timezone_change\tAn app package was installed in your workspace\napp_webhook_creation\tA webhook subscription was created\napp_webhook_deletion\tA webhook subscription was deleted\narticles_in_messenger_enabled_change\tThe Messenger search for articles setting was changed\nbulk_delete\tUser or lead data was deleted from your workspace\nbulk_export\tUser or lead data was exported from your workspace\ncampaign_deletion\tA campaign was deleted from your workspace\ncampaign_state_change\tA campaign was changed on your workspace\nconversation_topic_change\tA conversation topic was changed\nconversation_topic_creation\tA conversation topic was created\nconversation_topic_deletion\tA conversation topic was deleted\nhelp_center_settings_change\tYour Help Center was turned on or off\ninbound_conversations_change\tThe Messenger inbound conversations setting was changed\ninbox_access_change\tThe inbox access setting was changed\nmessage_deletion\tA team was deleted from your workspace\nmessage_state_change\tA message's state was changed\nmessenger_look_and_feel_change\tThe Messenger look and feel setting was changed\nmessenger_search_required_change\tThe Messenger search required setting was changed\noffice_hours_change\tThe office hours setting was changed\nrole_change\tA role was changed\nrole_creation\tA role was created\nrole_deletion\tA role was deleted\nseat_change\tA teammate's seat was changed\nseat_revoke\tA teammate's seat was revoked\nsecurity_settings_change\tYour workspace's security settings were changed\ntemporary_expectation_change\tThe Messenger special notice settings were changed\nupfront_email_collection_change\tThe Messenger upfront email collection settings were changed\nwelcome_message_change\tThe Messenger welcome message settings were changed\nRequest Query Parameters\nParameter\tRequired?\tDescription\ncreated_at_after\tYes\tThe start date that you request data for. It must be formatted as a UNIX timestamp.\ncreated_at_before\tNo\tThe end date that you request data for. It must be formatted as a UNIX timestamp.\nResponse\n\nThis will return an Activity List which will contain an array titled activity_logs, in turn containing multiple Activity Objects."
  },
  {
    "title": "Article Content",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/article_content/",
    "html": "The Content of an Article."
  },
  {
    "title": "Admins",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/admin_list/",
    "html": "A list of admins associated with a given workspace."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/conversations/reply-to-a-conversation/",
    "html": "Reply to a conversation\nExample Request & Response (Contact Reply)\n$ curl 'https://api.intercom.io/conversations/{id/last}/reply' \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-H 'Content-Type:application/json' -d \n\n{\n  \"message_type\": \"comment\",\n  \"type\": \"user\",\n  \"intercom_user_id\": \"536e564f316c83104c000020\",\n  \"body\": \"Thanks again :)\"\n}\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },  \n}\n\n#Reply without attachment\nintercom.conversations.reply(:id => conversation.id, :type => 'user', \n  :email => 'bob@example.com', :message_type => 'comment', :body => 'foo')\n\n#Reply with attachment\nintercom.conversations.reply(:id => conversation.id, :type => 'user', \n  :email => 'bob@example.com', :message_type => 'comment', \n  :body => 'foo', :attachment_urls => [\"http://www.example.com/attachment.jpg\"])\n\n<?php\n//Reply without attachment\n$intercom->conversations->replyToConversation(\"10957850396\", [\n    \"intercom_user_id\" => \"5977303470ab497b1babb9ef\",\n    \"body\" => \"Thinking: the talking of the soul with itself\",\n    \"type\" => \"user\",\n    \"message_type\" => \"comment\"\n]);\n\n\n//Reply with attachment\n$intercom->conversations->replyToConversation(\"10957850396\", [\n  \"intercom_user_id\" => \"5977303470ab497b1babb9ef\",\n  \"body\" => \"Thinking: the talking of the soul with itself\",\n  \"type\" => \"user\",\n  \"message_type\" => \"comment\",\n  \"attachment_urls\" => [\"http://www.example.com/attachment.jpg\"]\n]);\n?>\n\nUser user = new User().setId(\"5310d8e8598c9a0b24000005\");\nUserReply userReply = new UserReply(user);\nuserReply.setBody(\"Mighty fine shindig\");\n\nConversation.reply(\"66\", userReply);\n\nAdmin admin = new Admin().setId(\"1\");\nAdminReply adminReply = new AdminReply(admin);\nadminReply.setBody(\"These apples are healthsome\");\n\nConversation.reply(\"66\", adminReply);\n\nExample Request & Response (Admin Reply - Note)\ncurltext\n$ curl 'https://api.intercom.io/conversations/{id/last}/reply' \\\\\\n-X POST \\\\\\n-H 'Authorization: Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"message_type\\\": \\\"note\\\",\\n  \\\"type\\\": \\\"admin\\\",\\n  \\\"admin_id\\\": \\\"814860\\\",\\n  \\\"body\\\": \\\"<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>  <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>   </body> </html>\\\",\\n}\\n\n\n\nYou can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes, if not last\tThe identifier for the conversation as given by Intercom.\nlast\tString\tYes, if no id\tYou can also reply to the most recent conversation on a workspace by specifying last as the string.\nRequest Body Parameters\n\nFor a reply sent on behalf a contact:\n\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways comment.\ntype\tString\tYes\tAlways user.\nbody\tString\tYes\tThe text body of the comment.\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact.\nemail\tString\tYes, if no intercom_user_id or user_id\tThe email you have defined for the user.\nattachment_urls\tArray of Strings\tNo\tA list of image URLs that will be added as attachments. You can include up to 5 URLs.\n\nFor a reply sent on behalf of an admin:\n\nArgument\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAccepts comment or note.\ntype\tString\tYes\tAlways admin.\nadmin_id\tString\tYes\tThe id of the admin who is authoring the comment.\nbody\tString\tYes\tThe text body of the reply. Notes accept some HTML formatting.\nattachment_urls\tArray of Strings\tNo\tA list of URLs of files that will be added as attachments. You can include up to 5 attachments.\nResponse\n\nThis will return the Conversation which was replied to."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/conversations/adding-to-group-conversations-as-admin/",
    "html": "Attach a contact to a conversation\nExample Request & Response\ncurlcurl\n$ curl 'https://api.intercom.io/conversations/<id>/customers' \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json' \\\\-H 'Content-Type:application/json' -d{  \\\"admin_id\\\": \\\"781236\\\",  \\\"customer\\\": {    \\\"intercom_user_id\\\": \\\"58c1c78946a0aa9ef45b098a\\\"  }}\n\nHTTP/1.1 200 OK{\\\"customers\\\":[  {\\\"type\\\":\\\"user\\\",\\\"id\\\":\\\"597f02cb22f4bb37597e0b7d\\\"},   {\\\"type\\\":\\\"lead\\\",\\\"id\\\":\\\"58ff3f670f14ab4f1aa83750\\\"}]}\n\n\nYou can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameter\nAdmin's adding a participant\nParameter\tType\tRequired?\tDescription\nadmin_id\tString\tYes\tThe id of the admin who is adding the new participant.\ncustomer\tObject\tYes\tSee Customer Object below for more.\nContact's adding a participant\nParameter\tType\tRequired?\tDescription\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact who is adding the new participant.\nemail\tString\tYes, if no intercom_user_id or user_id\tThe email you have defined for the contact who is adding the new participant.\ncustomer\tObject\tYes\tSee Contact Object below for more.\nCustomer Object\nAttribute\tType\tRequired?\tDescription\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact who is being added as a participant.\nemail\tString\tYes, if the contact's role is lead. Yes, if no intercom_user_id or user_id.\tThe email you have defined for the contact who is being added as a participant.\nNOTE ABOUT CONTACTS WITHOUT AN EMAIL\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead.\n\nResponse\n\nThis will return a customers array containing objects listing the participants in the conversation:\n\nAttribute\tType\tDescription\ntype\tString\tThe role associated to the contact - user or lead.\nid\tString\tThe identifier for the contact as given by Intercom."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/admin_with_app/",
    "html": "Admins are the teammate accounts that have access to a workspace"
  },
  {
    "title": "Detach a contact from a subscription",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/subscription-types/detach-a-contact/",
    "html": "Detach a contact from a subscription\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<contact_id>/subscriptions/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can detach a subscription for a single contact.\n\nRequest Path Parameter\nAttribute\tType\tDescription\ncontact_id\tString\tThe unique identifier for the contact which is given by Intercom\nid\tString\tThe unique identifier for the subscription type which is given by Intercom\nResponse\n\nThis will return a Subscription Type model for the subscription type that was removed from the contact."
  },
  {
    "title": "App",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/app/",
    "html": "App is a workspace on Intercom"
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/admins/set-admin-away-mode/",
    "html": "Set an admin to away\n\nYou can set an Admin as away for the Inbox.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nid\tstring\tThe id of the admin you want to set away mode or re-assign conversations.\naway_mode_enabled\tboolean\tSet to 'true' to change the status of the admin to away.\naway_mode_reassign\tboolean\tSet to 'true' to assign any new conversation replies to your default inbox.\nExample Request & Response\ncurltext\n$ curl https://api.intercom.io/admins/814860/away \\\\\\n-X PUT \\\\\\n-H 'Authorization: Bearer <Your access token>' \\\\\\n-H 'Accept: application/json'  \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"away_mode_enabled\\\": true,\\n  \\\"away_mode_reassign\\\": false\\n\\n}\n\nExample Errors\nAdmin without seat\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n\nResponse\n\nThis will return an Admin model of the admin set away."
  },
  {
    "title": "Retrieve a visitor with ID",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Visitors/retrieveVisitor/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Retrieve a team",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Teams/retrieveTeam/",
    "html": "You can fetch the details of a single team, containing an array of admins that belong to this team."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/admins/view-an-admin/",
    "html": "Retrieve an admin\nExample Request & Response\n$ curl https://api.intercom.io/admins/493881 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n\n{\n    \"type\": \"admin\",\n    \"id\": \"493881\",\n    \"name\": \"Hoban Washburne\",\n    \"email\": \"wash@serenity.io\",\n    \"away_mode_enabled\": false,\n    \"away_mode_reassign\": false,\n    \"team_ids\": [\n        814865\n    ]\n}\n\n<?php\n$admin = $intercom->admins->getAdmin(\"493881\");\n?>\n\nErrors for admins without inbox seats\n{\n    \"type\": \"error.list\",\n    \"request_id\": \"0002miv9og586ig3aln0\",\n    \"errors\": [\n        {\n            \"code\": \"action_forbidden\",\n            \"message\": \"This admin does not have Inbox access permissions\"\n        }\n    ]\n}\n\n\nYou can fetch the details of a single admin.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given admin\nResponse\n\nThis will return an Admin object."
  },
  {
    "title": "Admin Reply",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/admin_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of an admin"
  },
  {
    "title": "Delete a visitor",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Visitors/deleteVisitor/",
    "html": "You can delete a single visitor."
  },
  {
    "title": "Addressable List",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/addressable_list/",
    "html": "A list used to access other resources from a parent model."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Visitors/convertVisitor/",
    "html": "You can merge a Visitor to a Contact of role type lead or user.\n\n📘 What happens upon a visitor being converted?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/activity_log_list/",
    "html": "A paginated list of activity logs."
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Teams/listTeams/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/notes/view-a-note/",
    "html": "Retrieve a note\nExample Request\n$ curl https://api.intercom.io/notes/<id> \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"note\",\n  \"id\": \"2\",\n  \"created_at\": 1389913951,\n  \"body\": \"<p>Text for my note</p>\",\n  \"user\": {\n      \"id\": \"5310d8e8598c9a0b24000005\",\n      \"type\": \"user\"\n    },\n  \"author\": {\n    \"type\": \"admin\",\n    \"id\": \"21\",\n    \"name\": \"Jayne Cobb\",\n    \"email\": \"jayne@serenity.io\",\n    \"avatar\" : {\n       \"type\":\"avatar\",\n      \"image_url\": \"http://example.org/128Jayne.jpg\"\n    },\n    \"companies\": []\n  }\n}\n\nintercom.notes.find(:id => note)\n\n<?php\n$note = $intercom->notes->getNote(\"9259097\");\n?>\n\nNote note = Note.find(\"2\");\n\n\nYou can fetch the details of a single note.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of a given note.\nResponse\n\nThis will return a Note model."
  },
  {
    "title": "The note model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/notes/note-model/",
    "html": "The note model\nExample Note Object\n{\\n  \\\"type\\\": \\\"note\\\",\\n  \\\"id\\\": \\\"16\\\",\\n  \\\"created_at\\\": 1389913941,\\n  \\\"body\\\": \\\"<p>Text for my note</p>\\\",\\n  \\\"author\\\": {\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"21\\\",\\n    \\\"name\\\": \\\"Jayne Cobb\\\",\\n    \\\"email\\\": \\\"jayne@serenity.io\\\",\\n    \\\"companies\\\": []\\n  },\\n  \\\"user\\\": {\\n    \\\"type\\\": \\\"user\\\",\\n    \\\"id\\\": \\\"5310d8e8598c9a0b24000005\\\"\\n  }\\n}\n\n\nNotes allow you to annotate and comment on your contacts.\n\nCOMPANIES AND CONVERSATIONS\n\nCurrently not possible to create notes for companies. Reach out if you want to submit a feature request, we take these into account.\n\nConversations notes are created via the Reply a conversations API.\n\nNote Object\nKey\tType\tDescription\ntype\tString\tvalue is 'note'\nid\tString\tThe id representing the note\ncreated_at\tTimestamp\tThe time the note was created\nuser\tObject\tThe user the note was created about\nbody\tString\tThe body text of the note.\nauthor\tObject\tOptional. Represents the Admin that created the note"
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/notes/list-notes-of-contact/",
    "html": "List all notes\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/notes \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of notes that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a paginated list of Note objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - note.list\ndata\tArray\tAn array containing Note Objects\ntotal_count\tInteger\tThe total number of companies associated to this contact\npages\tPagination Object\tThe information needed to paginate through companies"
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Tags/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "The message model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/messages/messages-model/",
    "html": "The message model\nExample Message Object\n{\n    \"type\": \"message\",\n    \"id\": \"489373052\",\n    \"created_at\": 1539897198,\n    \"subject\": \"This is the subject - if it's an email\",\n    \"body\": \"<p>Hello</p>\",\n    \"message_type\": \"email\"\n}\n\n\nMessage are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact.\n\nMessage Object\nKey\tType\tDescription\ntype\tString\tAlways message.\nid\tString\tThe id representing the message.\ncreated_at\tUNIX Timestamp\tThe time the conversation was created.\nsubject\tString\tThe subject of the message.\nOnly present if message_type: email.\nbody\tString\tThe message body, which may contain HTML.\nmessage_type\tString\tThe type of message that was sent. Can be email, inapp, facebook or twitter.\nconversation_id\tString\tThe associated conversation_id. Only returned when creating a conversation."
  },
  {
    "title": "Search for conversations",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/search-for-conversations/",
    "html": "Search for conversations\n\nYou can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a conversation that you can search for. See all accepted fields.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\n\nThere are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\n\nExample Request (Single Filter)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"updated_at\\\",\\n    \\\"operator\\\": \\\">\\\",\\n    \\\"value\\\": 1560436784\\n  }\\n}\n\nExample Request (Multiple Filters)\njsonjson\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"field\\\": \\\"statistics.time_to_admin_reply\\\",\\n        \\\"operator\\\": \\\">\\\",\\n        \\\"value\\\": 1000\\n      }, \\n      {\\n        \\\"field\\\": \\\"admin_assignee_id\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"1627383\\\"\\n      },\\n      {\\n        \\\"field\\\": \\\"open\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": true\\n      }\\n    ]\\n  }\\n}\n\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"tags\\\",\\n    \\\"operator\\\": \\\"IN\\\",\\n    \\\"value\\\": [\\\"feature-request\\\", \\\"bug\\\", \\\"confusion\\\"]\\n  }\\n}\n\nExample Request (Nested Filters)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"updated_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436650\\n          }, \\n          {\\n            \\\"field\\\": \\\"conversation_rating.rating\\\",\\n            \\\"operator\\\": \\\"=\\\",\\n            \\\"value\\\": 1\\n          }\\n        ]\\n      },\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"updated_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436650\\n          }, \\n          {\\n            \\\"field\\\": \\\"conversation_rating.rating\\\",\\n            \\\"operator\\\": \\\"=\\\",\\n            \\\"value\\\": 2\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString\nAccepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals\n!=\tAll\tDoesn't Equal\nIN\tAll\tIn\nShortcut for OR queries\nValues most be in Array\nNIN\tAll\tNot In\nShortcut for OR ! queries\nValues must be in Array\n>\tInteger\nDate (UNIX Timestamp)\tGreater (or equal) than\n<\tInteger\nDate (UNIX Timestamp)\tLower (or equal) than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Conversations Model that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/reply-to-a-conversation/",
    "html": "Reply to a conversation\nExample Request & Response (Contact Reply)\n$ curl 'https://api.intercom.io/conversations/{id/last}/reply' \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-H 'Content-Type:application/json' -d \n\n{\n  \"message_type\": \"comment\",\n  \"type\": \"user\",\n  \"intercom_user_id\": \"536e564f316c83104c000020\",\n  \"body\": \"Thanks again :)\"\n}\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },  \n}\n\n#Reply without attachment\nintercom.conversations.reply(:id => conversation.id, :type => 'user', \n  :email => 'bob@example.com', :message_type => 'comment', :body => 'foo')\n\n#Reply with attachment\nintercom.conversations.reply(:id => conversation.id, :type => 'user', \n  :email => 'bob@example.com', :message_type => 'comment', \n  :body => 'foo', :attachment_urls => [\"http://www.example.com/attachment.jpg\"])\n\n<?php\n//Reply without attachment\n$intercom->conversations->replyToConversation(\"10957850396\", [\n    \"intercom_user_id\" => \"5977303470ab497b1babb9ef\",\n    \"body\" => \"Thinking: the talking of the soul with itself\",\n    \"type\" => \"user\",\n    \"message_type\" => \"comment\"\n]);\n\n\n//Reply with attachment\n$intercom->conversations->replyToConversation(\"10957850396\", [\n  \"intercom_user_id\" => \"5977303470ab497b1babb9ef\",\n  \"body\" => \"Thinking: the talking of the soul with itself\",\n  \"type\" => \"user\",\n  \"message_type\" => \"comment\",\n  \"attachment_urls\" => [\"http://www.example.com/attachment.jpg\"]\n]);\n?>\n\nUser user = new User().setId(\"5310d8e8598c9a0b24000005\");\nUserReply userReply = new UserReply(user);\nuserReply.setBody(\"Mighty fine shindig\");\n\nConversation.reply(\"66\", userReply);\n\nAdmin admin = new Admin().setId(\"1\");\nAdminReply adminReply = new AdminReply(admin);\nadminReply.setBody(\"These apples are healthsome\");\n\nConversation.reply(\"66\", adminReply);\n\nExample Request & Response (Admin Reply - Note)\ncurltext\n$ curl 'https://api.intercom.io/conversations/{id/last}/reply' \\\\\\n-X POST \\\\\\n-H 'Authorization: Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"message_type\\\": \\\"note\\\",\\n  \\\"type\\\": \\\"admin\\\",\\n  \\\"admin_id\\\": \\\"814860\\\",\\n  \\\"body\\\": \\\"<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>  <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>   </body> </html>\\\",\\n}\\n\n\n\nYou can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes, if not last\tThe identifier for the conversation as given by Intercom.\nlast\tString\tYes, if no id\tYou can also reply to the most recent conversation on a workspace by specifying last as the string.\nRequest Body Parameters\n\nFor a reply sent on behalf a contact:\n\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways comment.\ntype\tString\tYes\tAlways user.\nbody\tString\tYes\tThe text body of the comment.\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact.\nemail\tString\tYes, if no intercom_user_id or user_id\tThe email you have defined for the user.\nattachment_urls\tArray of Strings\tNo\tA list of image URLs that will be added as attachments. You can include up to 5 URLs.\n\nFor a reply sent on behalf of an admin:\n\nArgument\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAccepts comment or note.\ntype\tString\tYes\tAlways admin.\nadmin_id\tString\tYes\tThe id of the admin who is authoring the comment.\nbody\tString\tYes\tThe text body of the reply.\nNotes accept some HTML formatting.\nattachment_urls\tArray of Strings\tNo\tA list of URLs of files that will be added as attachments. You can include up to 5 attachments.\nResponse\n\nThis will return the Conversation which was replied to."
  },
  {
    "title": "Snooze a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/snooze-a-conversation/",
    "html": "Snooze a conversation\nExample Request & Response\ncurljson\n$ curl 'https://api.intercom.io/conversations/<id>/reply' \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"message_type\\\":\\\"snoozed\\\",\\n  \\\"admin_id\\\": \\\"724860\\\",\\n  \\\"snoozed_until\\\":\\\"1501512795\\\"\\n}\n\n\nYou can snooze a conversation to reopen on a future date.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\n\nTo snooze a conversation:\n\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways snoozed.\nadmin_id\tString\tYes\tThe id of the admin which is performing the action.\nsnoozed_until\tUNIX Timestamp\tYes\tThe time you want the conversation to reopen.\nResponse\n\nThis will return the Conversation which was snoozed."
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/update-a-conversation/",
    "html": "Update a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations/<id> \\\n-X PUT \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-H 'Content-Type:application/json' -d\n\n{\n  \"read\": true,\n  \"custom_attributes\": {\n\t  \"issue_type\": \"Billing\",\n\t  \"priority\": \"High\"\n  }\n}\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },   \n}\n\nconversation.read = true\nintercom.conversations.save(conversation)\n\n<?php\n$intercom->conversations->markConversationAsRead(\"10957850396\");\n?>\n\nAdmin admin = new Admin().setId(\"1\");\nAdminReply adminReply = new AdminReply(admin);\nadminReply.setMessageType(\"close\");\nConversation.reply(\"66\", adminReply);\n\n\nYou can update an existing conversation.\n\n📘\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters.\n\n📘\n\nEnsure that Content-Type header is set to application/json. It's required for the update to succeed.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nread\tBoolean\tNo\tMark a conversation as read within Intercom.\ncustom_attributes\tHash\tNo\tSet custom attributes and their values for the conversation.\ncustom_attributes Hash for Custom Object Association creation\nAttribute\tType\tRequired?\tDescription\nA custom attribute of type relationship e.g \"orders\"\tArray of Strings\tNo\tWith a relationship attribute as the key, an array of Custom Object Instance ids can be passed to create associations between the contact and the Custom Object Instance\nExample\n{\n  \"custom_attributes\": {\n    \"orders\": [\"123\", \"234\", \"345\"]\n  }\n}\n\nResponse\n\nThis will return the Conversation that has been updated."
  },
  {
    "title": "Retrieve a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/retrieve-a-conversation/",
    "html": "Retrieve a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations/<id> \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\nintercom.conversations.find(:id => '147')\n\n<?php\n$intercom->conversations->getConversation(\"10957850396\");\n?>\n\nConversation conversation = Conversation.find(\"147\");\n\nConversationMessage message =\n  conversation.getConversationMessage();\n\nConversationPartCollection parts =\n  conversation.getConversationPartCollection();\n\nList<ConversationPart> list = parts.getPageItems();\n\nfor (ConversationPart part : list) {\n  String partType = part.getPartType();\n  Author author = part.getAuthor();\n  String body = part.getBody();\n}\n\nConversationPart recent =\n  conversation.getMostRecentConversationPart();\n\nAdmin assignee =\n  conversation.getAssignee();\n\nUser user =\n  conversation.getUser();\n\n\nYou can fetch the details of a single conversation.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ndisplay_as\tString\tNo\tSet to plaintext to retrieve conversation messages in plain text.\nResponse\n\nThis will return a single Conversation model with all its conversation parts.\n\n🚧 Hard limit of 500 parts\n\nThe maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts."
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Tags/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Tags/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Redact a conversation part",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/redact-a-conversation-part/",
    "html": "Redact a conversation part\nExample Request & Response\n$ curl https://api.intercom.io/conversations/redact \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-d \n\n{\n  \"type\": <resource_type>,\n  \"conversation_id\": <conversation_id>,\n  \"conversation_part_id\": <conversation_part_id>,\n  \"source_id\": <source_id>,\n}\n\nHTTP/1.1 200 OK\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\nExample Errors\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"ffa661e0-a805-4ca1-9c8f-87a926ce72bc\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_not_found\",\n      \"message\": \"conversation_id is a required parameter\"\n    }\n  ]\n}\n\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"ffa661e0-a805-4ca1-9c8f-87a926ce72bc\",\n  \"errors\": [\n    {\n      \"code\": \"conversation_part_not_redactable\",\n      \"message\": \"Part can't be redacted\"\n    }\n  ]\n}\n\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"ffa661e0-a805-4ca1-9c8f-87a926ce72bc\",\n  \"errors\": [\n    {\n      \"code\": \"type_mismatch\",\n      \"message\": \"The type attribute provided should be either 'conversation_part' or 'source'\"\n    }\n  ]\n}\n\n\nYou can redact a conversation part or the source message of a conversation (as seen in the source object).\n\nWHICH PARTS AND SOURCE MESSAGES CAN I REDACT?\n\nIf you are redacting a conversation part, it must have a body.\n\nIf you are redacting a source message, it must have been created by a contact.\nWe will return a conversation_part_not_redactable error if these criteria are not met.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\ntype\tString\tYes\tThe type of resource being redacted.\nAccepted values are conversation_part or source.\nconversation_id\tString\tYes\tThe id of the conversation.\nconversation_part_id\tString\tYes (if type: conversation_part)\tThe id of the conversation_part.\nsource_id\tString\tYes (if type: source)\tThe id of the source.\nResponse\n\nThis will return the Conversation with the Conversation Parts which have been redacted."
  },
  {
    "title": "Open a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/open-a-conversation/",
    "html": "Open a conversation\nExample Request & Response\ncurljson\n$ curl 'https://api.intercom.io/conversations/<id>/parts' \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"message_type\\\":\\\"open\\\",\\n  \\\"admin_id\\\": \\\"724860\\\"\\n}\n\n\nYou can open a conversation which is snoozed or closed.\n\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways open.\nadmin_id\tString\tYes\tThe id of the admin which is performing the action.\nResponse\n\nThis will return the Conversation which was opened."
  },
  {
    "title": "Assign a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/assign-a-conversation/",
    "html": "Assign a conversation\nExample Request & Response (Assigning to Admin)\ncurljson\n$ curl https://api.intercom.io/conversations/{id}/parts \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"type\\\": \\\"admin\\\",\\n  \\\"admin_id\\\": \\\"814860\\\",\\n  \\\"assignee_id\\\": \\\"814860\\\",\\n  \\\"message_type\\\": \\\"assignment\\\",\\n  \\\"body\\\": \\\"Reassigning for X reason.\\\",\\n}\n\nExample Request & Response (Auto Assignment)\ncurljson\n$ curl 'https://api.intercom.io/conversations/{id}/run_assignment_rules'\\n-X POST \\n-H 'Authorization: Bearer <Your access token>' \\n-H 'Accept: application/json' \\n-H 'Content-Type: application/json'\\n\n\n\nYou can assign a conversation to an admin and/or team. You can also let it be automatically assigned following assignment rules.\n\nRequest Path Parameters\nParameter\tRequired?\tDescription\nid\tYes\tThe identifier for the conversation as given by Intercom.\nrun_assignment_rules\tNo\tRuns through all assignment rules created in the Intercom Inbox product for a given workspace.\nRequest Body Parameters\n\n📘\n\nNo body parameters are required when auto assigning conversations using the {id}/run_assignment_rules path parameter.\n\nArgument\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways assignment.\ntype\tString\tYes\tAccepts admin or team.\nadmin_id\tString\tYes\tThe id of the admin who is performing the action.\nassignee_id\tString\tYes\tThe id of the admin or team which will be assigned the conversation.\nA conversation can be assigned both an admin and a team.\nSet 0 if you want this assign to no admin or team (ie. Unassigned).\nbody\tString\tNo\tOptionally you can leave a note in the conversation for additional context to other teammates.\nResponse\n\nThis will return the Conversation that has been assigned."
  },
  {
    "title": "Close a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/close-a-conversation/",
    "html": "Close a conversation\nExample Request & Response\ncurljson\n$ curl https://api.intercom.io/conversations/<id>/parts\\n-X POST\\n-H 'Authorization:Bearer <Your access token>'\\n-H 'Accept:application/json'\\n-H 'Content-Type:application/json' -d\\n\\n{ \\n  \\\"message_type\\\": \\\"close\\\",\\n  \\\"type\\\": \\\"admin\\\",\\n  \\\"admin_id\\\": 5784329,\\n  \\\"body\\\": \\\"Closed conversation because of X.\\\"\\n}\n\n\nYou can close a conversation.\n\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescripton\nmessage_type\tString\tYes\tAlways close.\ntype\tString\tYes\tAlways admin.\nadmin_id\tString\tYes\tThe id of the admin who is performing the action.\nbody\tString\tNo\tOptionally you can leave a message in the conversation to provide additional context to the user and other teammates.\nResponse\n\nThis will return the Conversation that has been closed."
  },
  {
    "title": "Detach a contact from a group conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/deleting-from-group-conversations/",
    "html": "Detach a contact from a group conversation\nExample Request & Response\ncurlhttp\n$ curl 'https://api.intercom.io/conversations/<conversation_id>/customers/<contact_id>' \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"admin_id\\\": \\\"781345\\\"\\n}\n\n\nRemoves a Contact from a group conversation.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nconversation_id\tString\tYes\tThe identifier for the conversation as given by Intercom.\ncontact_id\tString\tYes\tThe identifier for the contact as given by Intercom.\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nadmin_id\tString\tYes\tThe id of the admin who is performing the action.\nResponse\n\nThis will return the Contact who was detached from the conversation."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/adding-to-group-conversations-as-admin/",
    "html": "Attach a contact to a conversation\nExample Request & Response\ncurlcurl\n$ curl 'https://api.intercom.io/conversations/<id>/customers' \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type:application/json' -d\\n\\n{\\n  \\\"admin_id\\\": \\\"781236\\\",\\n  \\\"customer\\\": {\\n    \\\"intercom_user_id\\\": \\\"58c1c78946a0aa9ef45b098a\\\"\\n  }\\n}\n\nHTTP/1.1 200 OK\\n\\n{\\\"customers\\\":[\\n  {\\\"type\\\":\\\"user\\\",\\\"id\\\":\\\"597f02cb22f4bb37597e0b7d\\\"}, \\n  {\\\"type\\\":\\\"lead\\\",\\\"id\\\":\\\"58ff3f670f14ab4f1aa83750\\\"}]\\n}\n\n\nYou can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe identifier for the conversation as given by Intercom.\nRequest Body Parameter\nAdmin's adding a participant\nParameter\tType\tRequired?\tDescription\nadmin_id\tString\tYes\tThe id of the admin who is adding the new participant.\ncustomer\tObject\tYes\tSee Customer Object below for more.\nContact's adding a participant\nParameter\tType\tRequired?\tDescription\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact who is adding the new participant.\nemail\tString\tYes, if no intercom_user_id or user_id\tThe email you have defined for the contact who is adding the new participant.\ncustomer\tObject\tYes\tSee Contact Object below for more.\nCustomer Object\nAttribute\tType\tRequired?\tDescription\nintercom_user_id\tString\tYes, if no user_id or email\tThe identifier for the contact as given by Intercom.\nuser_id\tString\tYes, if no intercom_user_id or email\tThe external_id you have defined for the contact who is being added as a participant.\nemail\tString\tYes, if the contact's role is lead.\nYes, if no intercom_user_id or user_id.\tThe email you have defined for the contact who is being added as a participant.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead.\n\nResponse\n\nThis will return a customers array containing objects listing the participants in the conversation:\n\nAttribute\tType\tDescription\ntype\tString\tThe role associated to the contact - user or lead.\nid\tString\tThe identifier for the contact as given by Intercom."
  },
  {
    "title": "Stored Data",
    "url": "https://developers.intercom.com/docs/references/2.6/canvas-kit/responseobjects/stored-data/",
    "html": "Stored Data\nDescription\n\nA canvas object may optionally contain a stored_data object. This is where you can add key-value pairs of data that you want to be sent in whatever the next request is.\n\nFor example, the flow of your app might have multiple canvases with data being inputted on each one. You may want to have all this data available to use at the end of the flow for the final canvas. You can therefore put all this data in the stored_data object so it's sent in subsequent requests and is available at the end.\n\nExample Object\nstored_data: {\"key\": \"value\"} //Can be more than one pair\n"
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/update-contact/",
    "html": "Update a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-X PUT \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n\\t\\\"role\\\": \\\"user\\\",\\n\\t\\\"external_id\\\": \\\"25\\\",\\n\\t\\\"email\\\": \\\"wash@serenity.io\\\",\\n\\t\\\"phone\\\": \\\"+1123456789\\\",\\n\\t\\\"name\\\": \\\"Hoban Washburn\\\",\\n\\t\\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\n\\t\\\"last_seen_at\\\": 1571069751,\\n\\t\\\"signed_up_at\\\": 1571069751,\\n\\t\\\"owner_id\\\": 127,\\n\\t\\\"unsubscribed_from_emails\\\": false,\\n\\t\\\"custom_attributes\\\": {\\n\\t\\t\\\"paid_subscriber\\\": true,\\n\\t\\t\\\"monthly_spend\\\": 155.5,\\n\\t\\t\\\"team_mates\\\": 1\\n\\t}\\n}\\n\n\nExample Errors\nHTTP/1.1 404 FOUND\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"9a3d0816-9707-4598-977e-c009ba630148\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"Contact Not Found\"\n    }\n  ]\n}\n\nHTTP/1.1 409 CONFLICT\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"80ec9d92-99ff-4da9-9a0e-c0ab7c42f7e7\",\n  \"errors\": [\n    {\n      \"code\": \"conflict\",\n      \"message\": \"A contact matching those details already exists with id=5da6f18e3d7cf967e4582d05\"\n    }\n  ]\n}\n\nHTTP/1.1 400 UNPROCESSABLE ENTITY\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"00043csj9iva7pl9mmmg\",\n  \"errors\": [\n    {\n      \"code\": \"client_error\",\n      \"message\": \"Contact with user role can't be converted to a lead\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"00043csj9iva7pl9mmmg\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"The owner specified is not a member of the workspace\"\n    }\n  ]\n}\n\n\nYou can update an existing contact (ie. user or lead).\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\nrole\tString\tYes\tThe role of the contact.\nAccepted values are user or lead (only if lead already).\nexternal_id\tString\tYes - if role is user and email is blank\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tYes - if role is lead, or if role is user and external_id is blank\tThe contacts email.\nphone\tString\tNo\tThe contacts phone.\nname\tString\tNo\tThe contacts name.\navatar\tString\tNo\tAn image URL containing the avatar of a contact.\nowner_id\tString\tNo\tThe id of an admin that has been assigned account ownership of the contact.\nsigned_up_at\tDate (UNIX timestamp)\tNo\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tNo\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nowner_id\tInteger\tNo\tThe id of an admin that has been assigned account ownership of the contact.\nunsubscribed_from_emails\tBoolean\tNo\tWhether the contact is unsubscribed from emails.\ncustom_attributes\tObject\tNo\tThe custom attributes which are set for the contact.\ncustom_attributes Object for Custom Object Association creation\nAttribute\tType\tRequired?\tDescription\nA custom attribute of type relationship e.g \"orders\"\tArray of Strings\tNo\tWith a relationship attribute as the key, an array of Custom Object Instance ids can be passed to create associations between the contact and the Custom Object Instance\nExample\n{\n  \"custom_attributes\": {\n    \"orders\": [\"123\", \"234\", \"345\"]\n  }\n}\n\n\n🚧 Creating new Custom Data Attributes\n\nYou can only write to custom data attributes that already exist on the workspace. If you need to create new attributes to write to, you should Create Data Attributes through the data Attributes API.\n\nResponse\n\nThis will return a Contact model of the contact you just updated."
  },
  {
    "title": "Object Model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/common-structures/object-model/",
    "html": "Object Model\n\nCommon Fields and Metadata\n{\\n  \\\"type\\\": \\\"contacts\\\",\\n  \\\"id\\\": \\\"456456456456\\\",\\n  \\\"created_at\\\": 1392241887,\\n  \\\"custom_attributes\\\": {\\n    \\\"note\\\": \\\"some extra information\\\"\\n  }\\n}\n\nCommon Fields\n\nAPI objects have a type field indicating their object type. Each object in the API may be given an identifier, indicated via its id field, and will typically be addressable via a URI. Many objects will also have a created_at field indicating the object's creation date as a UTC Unix timestamp.\n\nDates and Timestamps\n\nAll temporal fields in the API are encoded as Unix timestamps and are by definition always treated as UTC. The most common time fields in the API are created_at and updated_at.\n\nParameter\tDescription\ncreated_at\tThe time the object was created. In most, but not all cases, this is the time the object was created according to the API server.\nupdated_at\tThe time the object was last updated according to the API server.\nOptional Fields\n\nUnpopulated optional data is returned as follows -\n\nNumber, String and Boolean types may be returned as having null values.\nArrays and Objects may be returned as empty ([] {})\n\nIn general clients should be able to handle null and empty fields.\n\nMetadata and Custom Attributes\n\nSome object types, such as Events, Users and Companies, have a metadata or custom_attributes field that allows clients to set custom-defined data about an object."
  },
  {
    "title": "The Admin model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/admins/the-admin-model/",
    "html": "The Admin model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\nINFORMATION ON `HAS_INBOX_SEAT`\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true. We only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "Search for contacts",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/search-for-contacts/",
    "html": "Search for contacts\n\nYou can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\n🚧 Why is there a delay when creating contacts and searching for them?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a customer that you can search for. See all accepted fields below.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\n\nThere are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nExample Request (Single Filter)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"custom_attributes.salesforce_status\\\",\\n    \\\"operator\\\": \\\"~\\\",\\n    \\\"value\\\": \\\"open\\\"\\n  }\\n}\n\nExample Request (Multiple Filters)\njsonjson\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"facebook\\\"\\n      }, \\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"twitter\\\"\\n      },\\n      {\\n        \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n        \\\"operator\\\": \\\"=\\\",\\n        \\\"value\\\": \\\"instagram\\\"\\n      }\\n    ]\\n  }\\n}\n\n{\\n \\\"query\\\":  {\\n    \\\"field\\\": \\\"custom_attributes.social_network\\\",\\n    \\\"operator\\\": \\\"IN\\\",\\n    \\\"value\\\": [\\\"facebook\\\", \\\"twitter\\\", \\\"instagram\\\"]\\n  }\\n}\n\nExample Request (Nested Filters)\nRequest\n{\\n \\\"query\\\":  {\\n    \\\"operator\\\": \\\"AND\\\",\\n    \\\"value\\\": [\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"created_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436650\\n          }, \\n          {\\n            \\\"field\\\": \\\"signed_up_at\\\",\\n            \\\"operator\\\": \\\">\\\",\\n            \\\"value\\\": 1560436784\\n          }\\n        ]\\n      },\\n      {\\n        \\\"operator\\\": \\\"OR\\\",\\n        \\\"value\\\": [\\n          {\\n            \\\"field\\\": \\\"custom_attributes.salseforce_status\\\",\\n            \\\"operator\\\": \\\"~\\\",\\n            \\\"value\\\": \\\"Open\\\"\\n          }, \\n          {\\n            \\\"field\\\": \\\"custom_attributes.salesforce_object_type\\\",\\n            \\\"operator\\\": \\\"=\\\",\\n            \\\"value\\\": \\\"Lead\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"email does not support operator: >\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nAccepted Fields\n\n🚧 Searching for Timestamp Fields\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.\n\nFor example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.\n\nIf you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).\n\nThis behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals\n!=\tAll\tDoesn't Equal\nIN\tAll\tIn\nShortcut for OR queries\nValues must be in Array\nNIN\tAll\tNot In\nShortcut for OR ! queries\nValues must be in Array\n>\tInteger\nDate (UNIX Timestamp)\tGreater than\n<\tInteger\nDate (UNIX Timestamp)\tLower than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Contact objects that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "Unarchive a contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/unarchive-a-contact/",
    "html": "Unarchive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/unarchive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can unarchive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the unarchived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - false"
  },
  {
    "title": "List all newsfeeds",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/listNewsfeeds/",
    "html": "You can fetch a list of all newsfeeds"
  },
  {
    "title": "Retrieve a newsfeed",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/retrieveNewsfeed/",
    "html": "You can fetch the details of a single newsfeed"
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Notes/retrieveNote/",
    "html": "You can fetch the details of a single note."
  },
  {
    "title": "List all live newsfeed items",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/listLiveNewsfeedItems/",
    "html": "You can fetch a list of all news items that are live on a given newsfeed"
  },
  {
    "title": "List attached tags",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/list-tags-of-contact/",
    "html": "List attached tags\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/tags \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of tags that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Tag objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - tag.list\ntags\tArray\tAn array containing Tag Objects"
  },
  {
    "title": "Update a news item",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/updateNewsItem/",
    "html": "The unique identifier for the news item which is given by Intercom."
  },
  {
    "title": "Delete a news item",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/deleteNewsItem/",
    "html": "You can delete a single news item."
  },
  {
    "title": "List attached companies",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/list-companies-of-contact/",
    "html": "List attached companies\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/companies \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of companies that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a paginated list of Company objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - company.list\ncompanies\tArray\tAn array containing Company Objects\ntotal_count\tInteger\tThe total number of companies associated to this contact\npages\tPagination Object\tThe information needed to paginate through companies"
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Notes/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "Retrieve a news item",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/retrieveNewsItem/",
    "html": "You can fetch the details of a single news item."
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/list-contacts/",
    "html": "List all contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nInvalid starting_after param\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000nbboasf1qqab6b910\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"client_error\\\",\\n      \\\"message\\\": \\\"Invalid starting_after param. Please try again using a starting_after value from a paginated response\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch a list of all contacts.\n\nResponse\n\nThis will return a paginated list of Contact objects .\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Contact Objects\ntotal_count\tInteger\tThe total number of contacts\npages\tPagination Object\tThe information needed to paginate through contacts"
  },
  {
    "title": "Create a news item",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/createNewsItem/",
    "html": "You can create a news item"
  },
  {
    "title": "List attached email and SMS subscriptions",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/list-attached-subscriptions/",
    "html": "List attached email and SMS subscriptions\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/subscriptions \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"cc1a749e-6cc4-4b7c-944c-e26bb6d61662\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"not_found\\\",\\n            \\\"message\\\": \\\"User Not Found\\\"\\n        }\\n    ]\\n}\n\n\nYou can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\nOpt-out subscription types that the user has opted-out from\nOpt-in subscription types that the user has opted-in to receiving\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tA list of subscriptions tied to the contact"
  },
  {
    "title": "List all news items",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/listNewsItems/",
    "html": "You can fetch a list of all news items"
  },
  {
    "title": "Newsfeed Assignment",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/newsfeed_assignment/",
    "html": "Assigns a news item to a newsfeed."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Notes/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/list-attached-segments/",
    "html": "List attached segments for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/segments \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of segments that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Segment objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Segment Objects"
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Messages/createMessage/",
    "html": "You can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\n🚧 Sending for visitors\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nThis will return the Message model that has been created.\n\n🚧 Retrieving Associated Conversations\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Update a section",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/updateSection/",
    "html": "You can update the details of a single section by making a PUT request to https://api.intercom.io/sections/<id>."
  },
  {
    "title": "Retrieve a section",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/retrieveSection/",
    "html": "You can fetch the details of a single section by making a GET request to https://api.intercom.io/help_center/sections/<id>."
  },
  {
    "title": "List all Help Centers",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/listHelpCenters/",
    "html": "You can list all Help Centers by making a GET request to https://api.intercom.io/help_center/help_centers."
  },
  {
    "title": "List all sections",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/listAllSections/",
    "html": "You can fetch a list of all sections by making a GET request to https://api.intercom.io/help_center/sections.\n\n📘 How are the sections sorted and ordered?\n\nSections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated sections first."
  },
  {
    "title": "Create a section",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/createSection/",
    "html": "You can create a new section by making a POST request to https://api.intercom.io/help_center/sections."
  },
  {
    "title": "Use of HTTP",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/common-structures/use-of-http/",
    "html": "Use of HTTP\n\nRequest methods are used in accordance with HTTP.\n\nGET is used to access resources and perform queries. The API does not allow modifications (creates, updates, deletes) to occur via GET.\nPOST is used to create or update resources. The preferred model for creation is to post JSON to a 'collections' resource - for example the collections resource for users is https://api.intercom.io/users.\nDELETE is used to delete resources.\n\nResponses use standard HTTP codes. Where there are client or server errors, a list of of one or more errors in JSON format is returned in the body - see Error Objects for more details.\n\nThe API may send cache directives where suitable, notably the ETag, Last-Modified and If-Modified-Since headers.\n\nThe Accept header must be used by a client used to indicate a preferred response for GET/HEAD requests. Requests without an Accept header of application/json may be rejected with a client error of 404 or 406.\n\nThe Content-Type header should be used by clients to indicate the submitted format for POST/PUT requests."
  },
  {
    "title": "Retrieve a Help Center",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/retrieveHelpCenter/",
    "html": "You can fetch the details of a single Help Center by making a GET request to https://api.intercom.io/help_center/help_center/<id>."
  },
  {
    "title": "View the current admin",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/admins/view-the-current-admin/",
    "html": "View the current admin\nOAUTH ONLY\n\nThis feature is only available when using OAuth. This requires the \"Read admins\" permission.\n\nYou can view the name, email and app ID of the current authorised admin via a GET request to https://api.intercom.io/me.\n\nResponse\n\nThis will return an Admin object, with an embedded app object (a workspace in legacy terminology).\n\nApp Object (a workspace)\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'admin'\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\nemail_verified\tboolean\tThis field will indicate whether the Intercom user has verified their email or not\napp.type\tstring\tvalue is 'app'\napp.id_code\tstring\tThe id of the app\napp.name\tstring\tThe name of the app\napp.region\tstring\tThe Intercom region the app is located in\napp.created_at\ttimestamp\tWhen the app was created\napp.identity_verification\tboolean\tWhether or not the app uses identity verification\n\n🚧 Single Sign On\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the user logging, in you should not accept any sign ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/articles/update-an-article/",
    "html": "Update an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X PUT \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"New title\\\",\\n  \\\"translated_content\\\": {\\n    \\\"es\\\": {\\n      \\\"title\\\": \\\"Nuevo título\\\",\\n      \\\"state\\\": \\\"published\\\",\\n      \\\"body\\\": \\\"<p>Spanish body in html</p>\\\",\\n      \\\"author_id\\\": \\\"1\\\"\\n    }\\n  }\\n}\n\n\nYou can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nRequest Body Parameters\nAttribute\tType\tRequired?\tDescription\ntitle\tString\tNo\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tNo\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be updated.\nResponse\n\nThis will return an Article model of the article you just updated."
  },
  {
    "title": "The Company model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/company-model/",
    "html": "The Company model\nExample Company Object\n{\\n  \\\"type\\\": \\\"company\\\",\\n  \\\"id\\\": \\\"531ee472cce572a6ec000006\\\",\\n  \\\"name\\\": \\\"Blue Sun\\\",\\n  \\\"plan\\\": {\\n        \\\"type\\\": \\\"plan\\\",\\n        \\\"id\\\": \\\"269315\\\",\\n        \\\"name\\\": \\\"pro\\\"\\n    },\\n  \\\"company_id\\\": \\\"6\\\",\\n  \\\"remote_created_at\\\": 1394531169,\\n  \\\"created_at\\\": 1394533506,\\n  \\\"updated_at\\\": 1396874658,\\n  \\\"size\\\": 85,\\n  \\\"website\\\": \\\"http://www.example.com\\\",\\n  \\\"industry\\\": \\\"Manufacturing\\\",\\n  \\\"monthly_spend\\\": 49,\\n  \\\"session_count\\\": 26,\\n  \\\"user_count\\\": 10,\\n  \\\"custom_attributes\\\": {\\n    \\\"paid_subscriber\\\" : true,\\n    \\\"team_mates\\\": 0\\n  }\\n}\n\n\nCompanies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies.\n\nCompanies will not appear within Intercom until users have been added or associated with a company.\n\nCompany object\nAttribute\tType\tDescription\ntype\tString\tValue is 'company'.\nid\tString\tThe Intercom defined id representing the company.\ncreated_at\tDate (UNIX timestamp)\tThe time the company was added to Intercom.\nremote_created_at\tDate (UNIX timestamp)\tThe time the company was created by you.\nupdated_at\tDate (UNIX timestamp)\tThe last time the company was updated.\nlast_request_at\tDate (UNIX timestamp)\tThe time the company last recorded making a request.\ncompany_id\tString\tThe company id you have defined for the company.\nname\tString\tThe name of the company.\ncustom_attributes\tObject\tThe custom attributes you have set on the company.\nsession_count\tInteger\tHow many sessions the company has recorded.\nmonthly_spend\tInteger\tHow much revenue the company generates for your business.\nuser_count\tInteger\tThe number of users in the company.\nplan\tObject\tThe name of the plan you have associated with the company.\nsize\tInteger\tThe number of employees in the company.\nwebsite\tString\tThe URL for the company website.\nindustry\tString\tThe industry that the company operates in.\nPlan object\nAttribute\tType\tDescription\ntype\tstring\tWill always be of type 'plan'\nid\tstring\tThe plan ID\nname\tstring\tThe name of the plan, note that this is the only field that can be set via the API."
  },
  {
    "title": "Show content data export",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Export/getDataExport/",
    "html": "You can view the status of your job by sending a GET request to the URL https://api.intercom.io/export/content/data/{job_identifier} - the {job_identifier} is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.\n\n🚧 Jobs expire after two days All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available."
  },
  {
    "title": "Cancel content data export",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Export/cancelDataExport/",
    "html": "You can cancel your job"
  },
  {
    "title": "Help Centers",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/help_center_list/",
    "html": "A list of Help Centers belonging to the App"
  },
  {
    "title": "Collection",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/collection/",
    "html": "Collections are top level containers for Articles within the Help Center."
  },
  {
    "title": "Create content data export",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Export/createDataExport/",
    "html": "To create your export job, you need to send a POST request to the export endpoint https://api.intercom.io/export/content/data.\n\nThe only parameters you need to provide are the range of dates that you want exported.\n\n🚧 Limit of one active job\n\nYou can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.\n\n❗️ Updated_at not included\n\nIt should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.\n\n📘 Date ranges are inclusive\n\nRequesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99."
  },
  {
    "title": "Delete a collection",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/deleteCollection/",
    "html": "You can delete a single collection by making a DELETE request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Retrieve a company",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/view-a-company/",
    "html": "Retrieve a company\nExample Request & Response\n$ curl \\\n-s https://api.intercom.io/companies?company_id=141 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Accept:application/json\" \\\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"company\",\n  \"id\": \"531ee472cce572a6ec000006\",\n  \"name\": \"Blue Sun\",\n  \"plan\": {\n    \"type\":\"plan\",\n    \"id\":\"1\",\n    \"name\":\"Paid\"\n  },\n  \"company_id\": \"141\",\n  \"remote_created_at\": 1394531169,\n  \"created_at\": 1394533506,\n  \"updated_at\": 1396874658,\n  \"last_request_at\": 1396874658,\n  \"monthly_spend\": 49,\n  \"session_count\": 26,\n  \"user_count\": 10,\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0\n  }\n}\n\nintercom.companies.find(:id => \"41e66f0313708347cb0000d0\")\n\n<?php\n# Using the name of the company\n$intercom->companies->getCompanies(['name' => 'OneAmerica']);\n\n# Via company_id\n$intercom->companies->getCompanies(['company_id' => '10']);\n\n?>\n\nString id = \"541a144b201ebf2ec5000001\";\nCompany company = Company.find(id);\n\n\nYou can fetch a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nname\tString\tNo\tThe name of the company.\nThe parameter should be url encoded.\ncompany_id\tString\tNo\tThe company_id you have given to the company.\n\nA company can also be fetched by its name using a name or company_id parameter in the url, whose values are the ones you have defined for that company -\n\nhttps://api.intercom.io/companies?name={name}\nhttps://api.intercom.io/companies?company_id={company_id}\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/list-company-contacts/",
    "html": "List attached contacts\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id>/contacts \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nInvalid starting_after param\nHTTP/1.1 400 BAD REQUEST\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"000nbboasf1qqab6b910\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"client_error\\\",\\n      \\\"message\\\": \\\"Invalid starting_after param. Please try again using a starting_after value from a paginated response\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can fetch a list of all contacts that belong to a company.\n\nResponse\n\nThis will return a paginated list of Contact objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Contact Objects\ntotal_count\tInteger\tThe total number of contacts\npages\tPagination Object\tThe information needed to paginate through contacts"
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/list-attached-segments-1/",
    "html": "List attached segments for companies\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id>/segments \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\ncompany_not_found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\\n}\\n\n\n\nYou can fetch a list of all segments that belong to a company.\n\nResponse\n\nThis will return a list of Segment objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Segment Objects"
  },
  {
    "title": "Update a collection",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/updateCollection/",
    "html": "You can update the details of a single collection by making a PUT request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/createCollection/",
    "html": "You can create a new collection by making a POST request to https://api.intercom.io/help_center/collections."
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/retrieveCollection/",
    "html": "You can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>."
  },
  {
    "title": "Section",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/section/",
    "html": "Sections are subdivisions of a collection, with a collection potentially having multiple sections."
  },
  {
    "title": "Download content data export",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Export/downloadDataExport/",
    "html": "When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message data will be streamed continuously back down to you in a gzipped CSV format.\n\n📘 Octet header required\n\nYou will have to specify the header Accept: application/octet-stream when hitting this endpoint."
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/listAllCollections/",
    "html": "You can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\n📘 How are the collections sorted and ordered?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "Create or update a company",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/create-or-update-company/",
    "html": "Create or update a company\nExample Request & Response\n$ curl https://api.intercom.io/companies \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type:application/json' -d '\n{\n  \"name\": \"Blue Sun\",\n  \"plan\": \"Paid\",\n  \"company_id\": \"6\",\n  \"remote_created_at\": 1394531169,\n  \"size\": 750,\n  \"website\": \"http://www.example.com\",\n  \"industry\": \"Manufacturing\",\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0,\n    \"monthly_spend\": 155.98\n  }\n}'\n\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"company\",\n    \"company_id\": \"6\",\n    \"id\": \"57e0120926806ceca3c13ba8\",\n    \"app_id\": \"pi3243fa\",\n    \"name\": \"Blue Sun\",\n    \"remote_created_at\": 1394531169,\n    \"created_at\": 1474302473,\n    \"updated_at\": 1475659931,\n    \"last_request_at\": 1473419085,\n    \"monthly_spend\": 49,\n    \"session_count\": 0,\n    \"user_count\": 0,\n    \"tags\": {\n        \"type\": \"tag.list\",\n        \"tags\": []\n    },\n    \"segments\": {\n        \"type\": \"segment.list\",\n        \"segments\": [\n            {\n                \"type\": \"segment\",\n                \"id\": \"56cc69cc8618d37b45000009\"\n            }\n        ]\n    },\n    \"plan\": {\n        \"type\": \"plan\",\n        \"id\": \"108609\",\n        \"name\": \"Paid\"\n    },\n    \"custom_attributes\": {\n        \"paid_subscriber\": true,\n        \"team_mates\": 0,\n        \"referral_source\": \"Google\",\n        \"founded\": \"20th Century\",\n        \"monthly_spend\": 155.98,\n        \"remove\": true\n    }\n}\n\nintercom.companies.create(:company_id => 6, :name => \"Blue Sun\", :plan => \"Paid\")\n\n<?php\n$intercom->companies->create([\n    \"name\" => \"Academy\",\n    \"id\" => \"10\"\n])\n?>\n\nimport static io.intercom.api.CustomAttribute.*;\n\nCompany company = new Company()\n  .setName(\"Blue Sun\")\n  .setCompanyID(\"1\")\n  .setPlan(new Company.Plan(\"premium\"))\n  .addCustomAttribute(newIntegerAttribute(\"items\", 246))\n  .addCustomAttribute(CustomAttribute.newStringAttribute(\"bar\", \"fruity\"));\n\ncompany = Company.create(company);\n\ncompany.setName(\"Blue Sun Corporation\");\nCompany.update(company);\n\n\nYou can create or update a company.\n\nCOMPANIES WITH NO USERS\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated.\n\nRequest Body Parameters\nArgument\tType\tDescription\nremote_created_at\ttimestamp\tThe time the company was created by you.\ncompany_id\tstring\tThe company id you have defined for the company.\nCan't be updated.\nname\tstring\tThe name of the company.\nmonthly_spend\tnumber\tHow much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..\nplan\tstring\tThe name of the plan you have associated with the company.\nsize\tnumber\tThe number of employees in this company.\nwebsite\tstring\tThe URL for this company's website. Please note that the value specified here is not validated. Accepts any string.\nindustry\tstring\tThe industry that this company operates in.\ncustom_attributes\tobject\tA hash of key/value pairs containing any other data about the company you want Intercom to store..\nResponse\n\nThis will return the Company model that has been created or updated."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/delete-a-company/",
    "html": "Delete a company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nCompany not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can delete a single company.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return an object with details on the deleted company.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the company which is given by Intercom\nobject\tString\tThe type of object - company\ndeleted\tBoolean\tWhether the company has been deleted - true"
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Create content data export",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Export/createDataExport/",
    "html": "To create your export job, you need to send a POST request to the export endpoint https://api.intercom.io/export/content/data.\n\nThe only parameters you need to provide are the range of dates that you want exported.\n\n🚧 Limit of one active job\n\nYou can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.\n\n❗️ Updated_at not included\n\nIt should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.\n\n📘 Date ranges are inclusive\n\nRequesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "The Article model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/articles/the-article-model/",
    "html": "The Article model\nExample Article Object\nJSON\n{\\n  \\\"id\\\": 1,\\n  \\\"type\\\": \\\"article\\\",\\n  \\\"workspace_id\\\": \\\"abcdef\\\",\\n  \\\"title\\\": \\\"Default language title\\\",\\n  \\\"description\\\": \\\"Default language description\\\",\\n  \\\"body\\\": \\\"Default language body in html\\\",\\n  \\\"author_id\\\": 1,\\n  \\\"state\\\": \\\"published\\\",\\n  \\\"created_at\\\": 123456,\\n  \\\"updated_at\\\": 123456,\\n  \\\"url\\\": \\\"http://intercom.test/help/en/articles/3-default-language\\\",\\n  \\\"parent_id\\\": 1,\\n  \\\"parent_type\\\": \\\"collection\\\",\\n  \\\"default_locale\\\": \\\"en\\\",\\n  \\\"translated_content\\\": {\\n    \\\"type\\\": \\\"article_translated_content\\\",\\n    \\\"fr\\\": {\\n      \\\"type\\\": \\\"article_content\\\",\\n      \\\"title\\\": \\\"French title\\\",\\n      \\\"description\\\": \\\"French description\\\",\\n   \\t  \\\"body\\\": \\\"French body in html\\\",\\n   \\t  \\\"author_id\\\": 1,\\n     \\t\\\"state\\\": \\\"published\\\",\\n     \\t\\\"created_at\\\": 7891011,\\n     \\t\\\"updated_at\\\": 7891011,\\n     \\t\\\"url\\\": \\\"http://intercom.test/help/fr/articles/3-french-multilingual\\\"\\n    }\\n  },\\n  \\\"statistics\\\": {\\n      \\\"type\\\": \\\"article_statistics\\\",\\n      \\\"views\\\": 10,\\n      \\\"conversations\\\": 0,\\n      \\\"reactions\\\": 8,\\n      \\\"happy_reaction_percentage\\\": 38,\\n      \\\"neutral_reaction_percentage\\\": 38,\\n      \\\"sad_reaction_percentage\\\": 25\\n  }\\n}\n\nExample HTML Body\nHTML\n<h1 class=\\\"intercom-align-left\\\">Header 1</h1>\\n<h2 class=\\\"intercom-align-left\\\">Header 2</h2>\\n<h2 class=\\\"intercom-align-center\\\">Centered Header</h2>\\n<p class=\\\"intercom-align-left\\\">\\n   <a href=\\\"https://intercom.com\\\" target=\\\"_blank\\\">Link</a>\\n</p>\\n<ul>\\n   <li>Single-level List</li>\\n</ul>\\n<pre><code>'Pre' Code</code></pre>\\n<p class=\\\"intercom-align-left\\\"><code>Inline code</code></p>\\n<p class=\\\"intercom-align-left\\\"><b>Bold text</b></p>\\n<p class=\\\"intercom-align-left\\\"><i>Italic text</i></p>\\n<p class=\\\"intercom-align-center\\\">Centered text</p>\\n<p class=\\\"intercom-align-left\\\">Image without link:</p>\\n<div class=\\\"intercom-container intercom-align-left\\\">\\n   <img\\n      src=\\\"https://downloads.intercomcdn.com/i/o/204050460/7a140f62f8e715d1d6cf246d/Image.jpg\\\"\\n      />\\n</div>\\n<p class=\\\"intercom-align-left\\\">Image with link:</p>\\n<div class=\\\"intercom-container intercom-align-left\\\">\\n   <a target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"\\n      ><img\\n      src=\\\"https://downloads.intercomcdn.com/i/o/204049719/b41c9a81c13b8a91023df1e7/Image.jpg\\\"\\n      /></a>\\n</div>\\n<p class=\\\"intercom-align-left\\\">Image with link and centered:</p>\\n<div class=\\\"intercom-container intercom-align-center\\\">\\n   <a target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"\\n      ><img\\n      src=\\\"https://downloads.intercomcdn.com/i/o/204050579/2e85d79a0d9e0c47b088f50c/Image.jpg\\\"\\n      /></a>\\n</div>\\n<div class=\\\"intercom-container intercom-align-left\\\">\\n   <a class=\\\"intercom-h2b-button\\\" target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"\\n      >Button</a\\n      >\\n</div>\\n<div class=\\\"intercom-container intercom-align-center\\\">\\n   <a class=\\\"intercom-h2b-button\\\" target=\\\"_blank\\\" href=\\\"https://intercom.com\\\"\\n      >Centered Button</a\\n      >\\n</div>\\n<p class=\\\"intercom-align-left\\\">Video Embed with iFrame:</p>\\n<div class=\\\"intercom-h2b-video\\\">\\n   <iframe\\n      src=\\\"https://www.youtube.com/embed/jqO8AQHj7Fw?rel=0\\\"\\n      frameborder=\\\"0\\\"\\n      webkitallowfullscreen\\n      mozallowfullscreen\\n      allowfullscreen\\n      ></iframe>\\n</div>\\n<p class=\\\"intercom-align-left\\\"></p>\n\n\nThe Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone.\n\nFor collections and sections you should refer to the Help Center endpoint.\n\nArticle Object\nKey\tType\tDescription\ntype\tString\tThe type of object - article.\nid\tString\tThe unique identifier for the article which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the article belongs to.\ntitle\tString\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nSee more on what we accept in the Supported HTML table below.\nauthor_id\tString\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tWhether the article is published or is a draft.\nFor multilingual articles, this will be the state of the default language's content.\ncreated_at\tTimestamp\tThe time when the article was created.\nFor multilingual articles, this will be the timestamp of creation of the default language's content.\nupdated_at\tTimestamp\tThe time when the article was last updated.\nFor multilingual articles, this will be the timestamp of last update of the default language's content.\nurl\tString\tThe URL of the article.\nFor multilingual articles, this will be the URL of the default language's content.\nparent_id\tString\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tThe type of parent, which can either be a collection or section.\ndefault_locale\tString\tThe default locale of the help center. This field is only returned for multilingual help centers.\ntranslated_content\tObject\tAn Article Translated Content Object for multilingual articles. This field is only returned for multilingual help centers.\nArticle Translated Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - article_translated_content.\n<locale>\n\nar, bg, bs, ca, cs, da, de, 'de-form', el, en, es, et, fi, fr, he, hr, hu, id, it, ja, ko, lt, lv, mn, nb, nl, pl, 'pt-BR', pt, ro, ru, sl, sr, sv, tr, vi, 'zh-CN', 'zh-TW'\tObject\tYes\tAn Article Content Object for each supported locale of the multilingual help center.\nThe default locale's content and information will be contained in the initial Article Object.\nIf there's no content for a locale, the value will be nil.\nArticle Content Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - article_content.\ntitle\tString\tYes\tThe title of the article.\ndescription\tString\tYes\tThe description of the article.\nbody\tString\tYes\tThe body of the article in HTML.\nauthor\tString\tYes\tThe id of the author of the article.\nstate\tString\tYes\tWhether the article is published or is a draft.\ncreated_at\tTimestamp\tNo\tThe time when the article was created.\nupdated_at\tTimestamp\tNo\tThe time when the article was last updated.\nurl\tString\tNo\tThe URL of the article.\nArticle Statistics Object\nKey\tType\tWriteable?\tDescription\ntype\tString\tNo\tThe type of object - article_statistics.\nviews\tInteger\tNo\tThe number of total views the article has received.\nconversations\tInteger\tNo\tThe number of conversations started from the article.\nreactions\tInteger\tNo\tThe number of total reactions the article has received.\nhappy_reaction_percentage\tInteger\tNo\tThe percentage of happy reactions the article has received against other types of reaction.\nneutral_reaction_percentage\tInteger\tNo\tThe percentage of neutral reactions the article has received against other types of reaction.\nsad_reaction_percentage\tInteger\tNo\tThe percentage of sad reactions the article has received against other types of reaction.\nSupported HTML\n\nThe table below defines the subset of HTML accepted when creating or updating an Article. Over time we may add support for new HTML elements and attributes, since this will not constitute a breaking change, we advise any client code to support the full HTML specification when reading article content.\n\nRemoving element support, or otherwise changing the API in a way that causes previously supported HTML to become unsupported will be considered a breaking change.\n\nTag\tWhat does it do?\tAdditional Details\n<p>\tParagraph\tAll text must be placed within paragraph tags.\n<br>\tLine break\tSupported in-line.\n<hr>\tHorizontal rule\tNA\n<h1> <h2>\tHeading\tOnly these two header tags are supported. All others will be replaced with <h2>.\n<a>\tLink\tAn image can be placed in-between the link tags.\n<img>\tImage\tImages will be uploaded to Intercom and we'll use an Intercom link to display these.\nIf these fail to upload then we'll hard fail and return 400 Bad Request.\n<ul> <ol> <li>\tList\tLists must contain at least one non-empty <li> element.\n\n<li> elements can contain plain text, or any other supported HTML tags, except <table>.\n\nIf these criteria aren't met, then the article will hard fail and return 400 Bad request.\n<table>\tTable\tNeeds to have at least one row and one cell.\nCan contain any other supported HTML tags, except another <table> within.\nIf these criteria aren't met then it will hard fail and return 400 Bad request.\n<iframe>\tVideo\tsrc must be for a supported video embed link.\nOnly works for Youtube, Wistia, Vimeo, Loom, Vidyard or StreamIO.\n<pre> <code>\tPre-formatted code\t\n<b> <strong>\tBold\t\n<i> <em>\tItalic\t\nSupported CSS\nClass\tWhat does it do?\tWhere does it work?\nintercom-align-center\tCenter Alignment\tOn tag level: Headers, Paragraphs.\nOn wrapping div: Images, Buttons.\nintercom-h2b-button\tButton\tOn tag level: Links\nUnsupported HTML\nTag\tWhat does it do?\tWhat do we do?\n<dl>\tDefinition List\tHard fail - 400 Bad Request\n<ul> or <ol>\tNested lists\tHard fail - 400 Bad Request\n<iframe>\tiFrame\nUnsupported video\tHard fail - 400 Bad Request\n<div> <span>\tContent division\tReplace with <p>\n<h3> to <h6>\tHeading\tReplace with <h2>\n<form>\tForm\tRemove from content\n<input> <textarea>\tInput\tRemove from content\n<script>\tJavascript Script\tRemove from content\n<head> <html> <footer> etc.\tAll other tags\tRemove from content\nInternals replaced with <p>"
  },
  {
    "title": "Retrieve an article",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/articles/retrieve-an-article/",
    "html": "Retrieve an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch the details of a single article by making a GET request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nResponse\n\nThis will return an Article model."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "Admin Conversations Count Model",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/counts/admin-conversations/",
    "html": "Admin Conversations Count Model\nAdmin Conversation Count Object\n\nThe admin conversation count supplies per Admin counts\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nconversation\tobject\tContains counts related to admins\nconversation.admin\tarray\tContains and array of objects detailing each Admin\nconversation.admin.open\tnumber\tContains the number of open conversations for the Admin\nconversation.admin.closed\tnumber\tContains the number of closed conversations for the Admin\nconversation.admin.id\tstring\tContains the Admin id\nconversation.admin.name\tstring\tContains the Admin name\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\n# Conversation Admin Counts\n$ curl 'https://api.intercom.io/counts?type=conversation&count=admin' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# Conversation Admin Counts\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\nintercom.counts.for_type(type: 'conversation', count: 'admin')\n\n<?php\n// Conversation Admin Count\n$counts = $intercom->counts->getCounts([\"type\" => \"conversation\", \"count\" => \"admin\"]);\nprint_r($counts);\n?>\n\n// Conversation Admin Count\nfinal Counts.Conversation counts = Counts.conversationAdmins();\nList<Admin> admins = counts.getAdmins();\nfor (Admin admin : admins) {\n    out.println(\n      admin.getName() + \": \" +\n      admin.getClosed() + \", \" +\n      admin.getOpen());\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nConversation Admin Count\tconversation\tadmin"
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/articles/create-an-article/",
    "html": "Create an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"Thanks for everything\\\",\\n  \\\"description\\\": \\\"English description\\\",\\n  \\\"body\\\": \\\"<p>This is the body in html</p>\\\",\\n  \\\"author_id\\\": 1,\\n  \\\"state\\\": \\\"published\\\",\\n  \\\"parent_id\\\": 1,\\n  \\\"parent_type\\\": \\\"collection\\\",\\n  \\\"translated_content\\\": {\\n    \\\"fr\\\": {\\n      \\\"title\\\": \\\"Allez les verts\\\",\\n      \\\"description\\\": \\\"French description\\\",\\n      \\\"body\\\": \\\"<p>French body in html</p>\\\",\\n      \\\"author_id\\\": 1,\\n      \\\"state\\\": \\\"published\\\"\\n    }\\n  }\\n}\n\n\nYou can create a new article by making a POST request to https://api.intercom.io/articles.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\ntitle\tString\tYes\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tYes\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nDefaults to draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be created.\nResponse\n\nThis will return an Article model of the article you just created."
  },
  {
    "title": "Visitor Deleted Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/visitor_deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/segments/list-segments/",
    "html": "List all segments\nExample Request & Response\n$ curl https://api.intercom.io/segments\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment.list\",\n  \"segments\": [\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000002\",\n      \"name\": \"Active\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    },\n    {\n      \"created_at\": 1393613030,\n      \"id\": \"5310d8e6598c9a0b24000001\",\n      \"name\": \"New\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613030\n    },\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000003\",\n      \"name\": \"Slipping Away\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    }\n  ]\n}\n\nintercom.segments.all.each { ... }\n\n<?php\n$intercom->segments->getSegments([]);\n?>\n\nSegmentCollection segments = Segment.list();\nwhile (segments.hasNext()) {\n    out.println(segments.next().getId());\n}\n\n\nYou can fetch a list of all segments.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIt includes the count of contacts that belong to each segment.\nResponse\n\nThis will return a list of Segment Objects. The result may also have a pages object if the response is paginated.\n\nAttribute\tType\tDescription\ntype\tString\tvalue is 'segment.list'\nsegments\tArray\tA list of segment objects\npages\tObject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/switch-api/create-a-phone-switch/",
    "html": "Create a phone Switch\n\nExample Request & Response\n\ncurlhttp\n$ curl https://api.intercom.io/phone_call_redirects \\\\\\n  -X POST \\\\\\n  -H 'Authorization:Bearer <Your access token>' \\\\\\n  -H 'Accept: application/json' \\\\\\n  -H 'Content-Type: application/json' -d\\n  \\n  {\\n    \\\"phone\\\": <End-user phone number>,\\n    \\\"custom_attributes\\\": {\\n      \\\"[KEY1]\\\": \\\"[VALUE1]\\\",\\n      \\\"[KEY2]\\\": \\\"[VALUE2]\\\"\\n    }\\n  }\n\n\nExample Errors\n\nhttphttp\nHTTP/1.1 422 \\n{\\n  \\\"error_key\\\": \\\"landline_phone\\\"\\n}\n\nHTTP/1.1 400\\n{\\n  \\\"error_key\\\": \\\"invalid_phone_number\\\",\\n  \\\"message\\\": \\\"Invalid phone number\\\"\\n}\n\n\nYou can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\nIf custom attributes are specified, they will be added to the user or lead's custom data attributes.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nphone\tString\tYes\tPhone number in E.164 format, that will receive the SMS to continue the conversation in the Messenger\ncustom_attributes\tObject\tno\tKey-value pairs corresponding to custom data attributes that will be assigned to the user or lead."
  },
  {
    "title": "Delete a tag",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/delete-a-tag/",
    "html": "Delete a tag\nExample Delete Tag Request\n$ curl https://api.intercom.io/tags/17513 \\\n-X DELETE \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\n# Not exposed in Ruby client\n\n<?php\n// Not exposed in PHP client\n?>\n\nTag.delete(tag);\n\n\nYou can delete a single tag.\n\nRequest Path Parameters\nParemeter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier of the tag.\nResponse\n\nThis will return a Tag Model of the tag you just deleted."
  },
  {
    "title": "Assign a conversation",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/assign-a-conversation/",
    "html": "Assign a conversation\nExample Request & Response (Assigning to Admin)\ncurljson\n$ curl https://api.intercom.io/conversations/{id}/parts \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json' \\\\-H 'Content-Type:application/json' -d{  \\\"type\\\": \\\"admin\\\",  \\\"admin_id\\\": \\\"814860\\\",  \\\"assignee_id\\\": \\\"530165\\\",  \\\"message_type\\\": \\\"assignment\\\",  \\\"body\\\": \\\"Reassigning for X reason.\\\",}\n\nExample Request & Response (Auto Assignment)\ncurlhttp\n$ curl 'https://api.intercom.io/conversations/{id}/run_assignment_rules'-X POST -H 'Authorization: Bearer <Your access token>' -H 'Accept: application/json' -H 'Content-Type: application/json'\n\n\nYou can assign a conversation to an admin and/or team. You can also let it be automatically assigned following assignment rules.\n\nRequest Path Parameters\nParameter\tRequired?\tDescription\nid\tYes\tThe identifier for the conversation as given by Intercom.\nrun_assignment_rules\tNo\tRuns through all assignment rules created in the Intercom Inbox product for a given workspace.\nRequest Body Parameters\n\nNo body parameters are required when auto assigning conversations using the {id}/run_assignment_rules path parameter.\n\nArgument\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tAlways assignment.\ntype\tString\tYes\tAccepts admin or team.\nadmin_id\tString\tYes\tThe id of the admin who is performing the action.\nassignee_id\tString\tYes\tThe id of the admin or team which will be assigned the conversation. A conversation can be assigned both an admin and a team. Set 0 if you want this assign to no admin or team (ie. Unassigned).\nbody\tString\tNo\tOptionally you can leave a note in the conversation for additional context to other teammates.\nResponse\n\nThis will return the Conversation that has been assigned."
  },
  {
    "title": "Webhook models",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/webhooks/webhook-models/",
    "html": "Webhook models\nWebhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tContact\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopics\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Archive a contact",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/contacts/archive-a-contact/",
    "html": "Archive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/archive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can archive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the archived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - true"
  },
  {
    "title": "Attach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/tags/attach-a-tag-to-a-conversation/",
    "html": "Attach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"2084335\\\",\\n  \\\"admin_id\\\": \\\"123\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Conversation Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can tag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nadmin_id\tString\tYes\tThe unique identifier for the admin who is applying the tag.\nResponse\n\nThis will return a Tag model for the tag that was added to the contact."
  },
  {
    "title": "The contact model",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/contacts/contacts-model/",
    "html": "The contact model\nExample Contacts Object\nJSON\n{\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"id\\\": \\\"5ba682d23d7cf92bef87bfd4\\\",\\n  \\\"workspace_id\\\": \\\"ecahpwf5\\\",\\n  \\\"external_id\\\": \\\"25\\\",\\n  \\\"role\\\": \\\"user\\\",\\n  \\\"email\\\": \\\"wash@serenity.io\\\",\\n  \\\"phone\\\": \\\"+1123456789\\\",\\n  \\\"name\\\": \\\"Hoban Washburn\\\",\\n  \\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\n  \\\"owner_id\\\": 127,\\n  \\\"social_profiles\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"social_profile\\\",\\n        \\\"name\\\": \\\"Twitter\\\",\\n        \\\"url\\\": \\\"http://twitter.com/th1sland\\\"\\n      }\\n    ]\\n  },\\n  \\\"has_hard_bounced\\\": false,\\n  \\\"marked_email_as_spam\\\": false,\\n  \\\"unsubscribed_from_emails\\\": false,\\n  \\\"created_at\\\": 1571672154,\\n  \\\"updated_at\\\": 1571672158,\\n  \\\"signed_up_at\\\": 1571069751,\\n  \\\"last_seen_at\\\": 1571069751,\\n  \\\"last_replied_at\\\": 1571672158,\\n  \\\"last_contacted_at\\\": 1571672158,\\n  \\\"last_email_opened_at\\\": 1571673478,\\n  \\\"last_email_clicked_at\\\": 1571676789,\\n  \\\"language_override\\\": null,\\n  \\\"browser\\\": \\\"chrome\\\",\\n  \\\"browser_version\\\": \\\"77.0.3865.90\\\",\\n  \\\"browser_language\\\": \\\"en\\\",\\n  \\\"os\\\": \\\"OS X 10.14.6\\\",\\n  \\\"location\\\": {\\n    \\\"type\\\": \\\"location\\\",\\n    \\\"country\\\": \\\"Ireland\\\",\\n    \\\"region\\\": \\\"Dublin\\\",\\n    \\\"city\\\": \\\"Dublin\\\",\\n    \\\"country_code\\\": \\\"IRL\\\",\\n    \\\"continent_code\\\": \\\"EU\\\"\\n  },\\n  \\\"android_app_name\\\": null,\\n  \\\"android_app_version\\\": null,\\n  \\\"android_device\\\": null,\\n  \\\"android_os_version\\\": null,\\n  \\\"android_sdk_version\\\": null,\\n  \\\"android_last_seen_at\\\": null,\\n  \\\"ios_app_name\\\": null,\\n  \\\"ios_app_version\\\": null,\\n  \\\"ios_device\\\": null,\\n  \\\"ios_os_version\\\": null,\\n  \\\"ios_sdk_version\\\": null,\\n  \\\"ios_last_seen_at\\\": null,\\n  \\\"custom_attributes\\\": {\\n    \\\"paid_subscriber\\\": true,\\n    \\\"monthly_spend\\\": 155.5,\\n    \\\"team_mates\\\": 1\\n  },\\n  \\\"tags\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"tag\\\",\\n        \\\"id\\\": \\\"2\\\",\\n        \\\"url\\\": \\\"/tags/2\\\"\\n      },\\n      {\\n        \\\"type\\\": \\\"tag\\\",\\n        \\\"id\\\": \\\"4\\\",\\n        \\\"url\\\": \\\"/tags/4\\\"\\n      },\\n      {\\n        \\\"type\\\": \\\"tag\\\",\\n        \\\"id\\\": \\\"5\\\",\\n        \\\"url\\\": \\\"/tags/5\\\"\\n      }\\n    ],\\n    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/tags\\\",\\n    \\\"total_count\\\": 3,\\n    \\\"has_more\\\": false\\n  },\\n  \\\"notes\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"note\\\",\\n        \\\"id\\\": \\\"20114858\\\",\\n        \\\"url\\\": \\\"/notes/20114858\\\"\\n      }\\n    ],\\n    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/notes\\\",\\n    \\\"total_count\\\": 1,\\n    \\\"has_more\\\": false\\n  },\\n  \\\"opted_out_subscription_types\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n     \\\"data\\\": [\\n       {\\n         \\\"id\\\": \\\"1\\\",\\n         \\\"type\\\": \\\"subscription\\\",\\n         \\\"url\\\": \\\"/subscription_types/1\\\"\\n       }\\n     ],\\n     \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/subscriptions\\\",\\n     \\\"total_count\\\": 1,\\n     \\\"has_more\\\": false\\n  },\\n  \\\"companies\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"company\\\",\\n        \\\"id\\\": \\\"5ba686093d7cf93552a3dc99\\\",\\n        \\\"url\\\": \\\"/companies/5ba686093d7cf93552a3dc99\\\"\\n        \\n      },\\n      {\\n        \\\"type\\\": \\\"company\\\",\\n        \\\"id\\\": \\\"5cee64a03d7cf90c51b36f19\\\",\\n        \\\"url\\\": \\\"/companies/5cee64a03d7cf90c51b36f19\\\"\\n      },\\n      {\\n        \\\"type\\\": \\\"company\\\",\\n        \\\"id\\\": \\\"5d7668883d7cf944dbc5c791\\\",\\n        \\\"url\\\": \\\"/companies/5d7668883d7cf944dbc5c791\\\"\\n      }\\n    ],\\n    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/companies\\\",\\n    \\\"total_count\\\": 3,\\n    \\\"has_more\\\": false\\n  },\\n  \\\"utm_campaign\\\": \\\"my-campaign\\\",\\n  \\\"utm_content\\\": null,\\n  \\\"utm_medium\\\": \\\"social\\\",\\n  \\\"utm_source\\\": null,\\n  \\\"utm_term\\\": null,\\n  \\\"referrer\\\": null\\n}\n\n\nOur Contacts API is a central place to gather all information and take actions on your contacts (ie. users and leads), such as fetching, searching, creating, updating, and deleting.\n\nThe Contacts Model provides details on these contacts within Intercom, and will specify whether they are a user or lead through the role attribute.\n\nContact Object\nKey\tType\tDescription\ntype\tString\tThe type of object - contact.\nid\tString\tThe unique identifier for the contact which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the contact belongs to.\nexternal_id\tString\tA unique identifier for the contact which is given to Intercom.\nrole\tString\tThe role of the contact - user or lead.\nemail\tString\tThe contacts email.\nphone\tString\tThe contacts phone.\nname\tString\tThe contacts name.\navatar\tString\tAn image URL containing the avatar of a contact.\nowner_id\tInteger\tThe id of an admin that has been assigned account ownership of the contact.\nsocial_profiles\tList\tA list of social profiles associated to the contact.\nhas_hard_bounced\tBoolean\tWhether the contact has had an email sent to them hard bounce.\nmarked_email_as_spam\tBoolean\tWhether the contact has marked an email sent to them as spam.\nunsubscribed_from_emails\tBoolean\tWhether the contact is unsubscribed from emails.\ncreated_at\tDate (UNIX timestamp)\tThe time when the contact was created.\nupdated_at\tDate (UNIX timestamp)\tThe time when the contact was last updated.\nsigned_up_at\tDate (UNIX timestamp)\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nlast_replied_at\tDate (UNIX timestamp)\tThe time when the contact last messaged in.\nlast_contacted_at\tDate (UNIX timestamp)\tThe time when the contact was last messaged.\nlast_email_opened_at\tDate (UNIX timestamp)\tThe time when the contact last opened an email.\nlast_email_clicked_at\tDate (UNIX timestamp)\tThe time when the contact last clicked a link in an email.\nlanguage_override\tString\tA preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.\nbrowser\tString\tThe name of the browser which the contact is using.\nbrowser_version\tString\tThe version of the browser which the contact is using.\nbrowser_language\tString\tThe language set by the browser which the contact is using.\nos\tString\tThe operating system which the contact is using.\nlocation\tObject\tAn object showing location details of the contact.\nandroid_app_name\tString\tThe name of the Android app which the contact is using.\nandroid_app_version\tString\tThe version of the Android app which the contact is using.\nandroid_device\tString\tThe Android device which the contact is using.\nandroid_os_version\tString\tThe version of the Android OS which the contact is using.\nandroid_sdk_version\tString\tThe version of the Android SDK which the contact is using.\nandroid_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the Android app.\nios_app_name\tString\tThe name of the iOS app which the contact is using.\nios_app_version\tString\tThe version of the iOS app which the contact is using.\nios_device\tString\tThe iOS device which the contact is using.\nios_os_version\tString\tThe version of iOS which the contact is using.\nios_sdk_version\tString\tThe version of the iOS SDK which the contact is using.\nios_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the iOS app.\ncustom_attributes\tObject\tThe custom attributes which are set for the contact.\ntags\tAddressable List\tThe tags which have been added to the contact.\nnotes\tAddressable List\tThe notes which have been added to the contact.\ncompanies\tAddressable List\tThe companies which the contact belongs to.\nutm_campaign\tString\tIdentifies a specific product promotion or strategic campaign\nutm_content\tString\tIdentifies what specifically was clicked to bring the user to the site\nutm_medium\tString\tIdentifies what type of link was used\nutm_source\tString\tIdentifies which site sent the traffic\nutm_term\tString\tIdentifies search terms\nreferrer\tString\tThe URL of the page the contact was last on.\nLocation Object\nKey\tType\tDescription\ntype\tString\tThe type of object - location.\ncountry\tString\tThe country where the contact is.\nregion\tString\tA subdivision of the country which the contact is in (ie. state, province, county, territory, etc).\ncity\tString\tThe city where the contact is.\ncountry_code\tString\tThe country code where the contact is.\ncontinent_code\tString\tThe continent code where the contact is.\nSocial Profile Object\nKey\tType\tDescription\ntype\tString\tThe type of object - social_profile.\nname\tString\tThe name of the service (ie. Twitter, Facebook, etc).\nurl\tString\tThe profile page for the contact on the service.\nAddressable List\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\ndata\tArray\tAn array of Addressable Objects. Maximum of 10.\nurl\tString\tThe URL where the full list can be accessed (ie. /contacts/1234/companies).\ntotal_count\tInteger\tThe total amount of records.\nhas_more\tBoolean\tWhether there's more Addressable Objects to be viewed. If true, use the url to view all.\nAddressable Object\nKey\tType\tDescription\ntype\tString\tThe type of object - company, note, tag.\nid\tString\tThe id of the object.\nurl\tString\tThe URL where the object in question can be accessed (ie. /companies/45678)."
  },
  {
    "title": "The conversation model",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/conversations/conversation-model/",
    "html": "The conversation model\nExample Conversation Object\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\"\n        }\n    ],\n    \"title\": \"Conversation Title\",\n    \"admin_assignee_id\": 814860,\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776,\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contact_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"admin_assignee_id\": \"814860\",\n   \"team_assignee_id\": null,\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\": [],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nConversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.\n\nConversation Object\nKey\tType\tDescription\ntype\tString\tAlways conversation.\nid\tString\tThe id representing the conversation.\ncreated_at\tTimestamp\tThe time the conversation was created.\nupdated_at\tTimestamp\tThe last time the conversation was updated.\nsource\tObject\tThe Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated.\ncontacts\tList\tThe list of contacts (users or leads) involved in this conversation.\nThis will only contain one customer unless more were added via the group conversation feature.\nteammates\tList\tThe list of teammates who participated in the conversation (wrote at least one conversation part).\ntitle\tString\tThe title given to the conversation.\nadmin_assignee_id\tInteger\tThe id of the admin assigned to the conversation. If it's not assigned to an admin it will return null.\nteam_assignee_id\tString\tThe id of the team assigned to the conversation. If it's not assigned to a team it will return null.\ncustom_attributes\tObject\tAn object containing the different custom attributes associated to the conversation as key-value pairs.\nopen\tBoolean\tIndicates whether a conversation is open (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\nwaiting_since\tTimestamp\tThe last time a Contact responded to an Admin.\nIn other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.\nsnoozed_until\tTimestamp\tIf set this is the time in the future when this conversation will be marked as open.\ni.e. it will be in a snoozed state until this time.\ntags\tList\tA list of tags objects associated with the conversation.\nfirst_contact_reply\tObject\tAn object containing information on the first users message. For a contact initiated message this will represent the users original message.\npriority\tString\tIf marked as priority, it will return priority or else not_priority.\nsla_applied\tObject\tThe SLA Applied object contains the details for which SLA has been applied to this conversation.\nconversation_rating\tObject\tThe Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.\nstatistics\tObject\tA Statistics object containing all information required for reporting, with timestamps and calculated metrics.\nconversation_parts\tList\tA list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.\nSource object\nAttribute\tType\tDescription\ntype\tString\tThis includes conversation, push, facebook, twitter and email.\nid\tString\tThe id representing the message.\ndelivered_as\tString\tThe conversation's initiation type.\nPossible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).\nsubject\tString\tOptional. The message subject.\nFor Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tObject\tThe object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nurl\tString\tThe URL where the conversation was started.\nFor Twitter, Email, and Bots, this will be blank.\nredacted\tBoolean\tWhether or not the source message has been redacted. Only applicable for contact initiated messages.\nContact Object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nTeammate Object\nAttribute\tType\tDescription\ntype\tString\tCurrently this will always be of type admin. Conversations not rated will return null.\nid\tString\tThe ID of the Admin.\nFirst Contact Reply Object\nAttribute\tType\tDescription\ntype\tString\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nurl\tString\tThe URL where the first reply originated from.\nFor Twitter and Email replies, this will be blank.\ncreated_at\tTimestamp\tThe time the users messages was created. This is in unix timestamp format.\nConversation Rating Object\nAttribute\tType\tDescription\nrating\tInteger\tThe rating, between 1 and 5, for the conversation.\nremark\tString\tAn optional field to add a remark to correspond to the number rating.\ncreated_at\tTimestamp\tThe time the rating was requested in the conversation being rated.\ncontact\tObject\tAn object containing the ID and type of the Contact.\nteammate\tObject\tAn object containing the ID and type of the Intercom teammate associated with the conversation when it was rated.\nSLA Object\nAttribute\tType\tDescription\nsla_name\tString\tThe name of the SLA as given by the teammate when it was created.\nsla_status\tString\tOne of \"hit\", \"missed\", \"cancelled\", or \"active\".\nStatistics Object\nAttribute\tType\tDescription\ntime_to_assignment\tInteger\tDuration until last assignment before first admin reply. In seconds.\ntime_to_admin_reply\tInteger\tDuration until first admin reply. Subtracts out of business hours. In seconds.\ntime_to_first_close\tInteger\tDuration until conversation was closed first time. Subtracts out of business hours. In seconds.\ntime_to_last_close\tInteger\tDuration until conversation was closed last time. Subtracts out of business hours. In seconds.\nmedian_time_to_reply\tInteger\tMedian based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.\nfirst_contact_reply_at\tTimestamp\tTime of first text conversation part from a contact.\nfirst_assignment_at\tTimestamp\tTime of first assignment after first_contact_reply_at.\nfirst_admin_reply_at\tTimestamp\tTime of first admin reply after first_contact_reply_at.\nfirst_close_at\tTimestamp\tTime of first close after first_contact_reply_at.\nlast_assignment_at\tTimestamp\tTime of last assignment after first_contact_reply_at.\nlast_assignment_admin_reply_at\tTimestamp\tTime of first admin reply since most recent assignment.\nlast_contact_reply_at\tTimestamp\tTime of the last conversation part from a contact.\nlast_admin_reply_at\tTimestamp\tTime of the last conversation part from an admin.\nlast_close_at\tTimestamp\tTime of the last conversation close.\nlast_closed_by\tObject\tThe last admin who closed the conversation. Returns a reference to an Admin object.\ncount_reopens\tInteger\tNumber of reopens after first_contact_reply_at.\ncount_assignments\tInteger\tNumber of assignments after first_contact_reply_at.\ncount_conversations_parts\tInteger\tTotal number of conversation parts.\nConversation Part Object\n\n🚧\n\nConversation Parts are not returned when listing or searching for all conversations, only when retrieving a single conversation. There is also a limit of 500 parts.\n\nAttribute\tType\tDescription\ntype\tString\tAlways conversation_part.\nid\tString\tThe id representing the conversation part.\npart_type\tString\tThe type of conversation part.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\ncreated_at\tTimestamp\tThe time the conversation part was created.\nupdated_at\tTimestamp\tThe last time the conversation part was updated.\nnotified_at\tTimestamp\tThe time the user was notified with the conversation part.\nassigned_to\tString\tThe id of the admin that was assigned the conversation by this conversation_part (null if there has been no change in assignment.)\nauthor\tString\tThe type of individual that sent the message (user, admin or bot) and their related id.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nredacted\tBoolean\tWhether or not a conversation part has been redacted.\nConversation Part Types\nType\tDescription\ncomment\tStandard reply from customer or admin to a conversation.\nnote\tA note created by an admin on the conversation. A note will only be viewable as an admin.\nnote_and_reopen\tAdd a note and reopen the conversations in the one action.\nassignment\tAn assignment of the conversation to an admin, or Nobody.\nopen\tIdentifies a conversation has been opened.\nclose\tIdentifies a conversation has been closed.\naway_mode_assignment\tConversation has been assigned due to the admin being in away mode.\nparticipant_added\tA participant has been added to a group conversation.\nparticipant_removed\tA participant has been removed from a group conversation.\nconversation_rating_changed\tA conversation rating has been changed, not this can only occur before the rating has been submitted. Once it has been submitted it cannot be changed.\nconversation_rating_remark_added\tA conversation remark has been added to the conversation.\nsnoozed\tA conversation has been snoozed.\nunsnoozed\tA conversation has been unsnoozed.\nassign_and_unsnooze\tAssign a conversation and unsnooze it in one action..\ntimer_unsnooze\tUnsnooze a conversation after a set time."
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/segments/list-segments/",
    "html": "List all segments\nExample Request & Response\n$ curl https://api.intercom.io/segments\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment.list\",\n  \"segments\": [\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000002\",\n      \"name\": \"Active\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    },\n    {\n      \"created_at\": 1393613030,\n      \"id\": \"5310d8e6598c9a0b24000001\",\n      \"name\": \"New\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613030\n    },\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000003\",\n      \"name\": \"Slipping Away\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    }\n  ]\n}\n\nintercom.segments.all.each { ... }\n\n<?php\n$intercom->segments->getSegments([]);\n?>\n\nSegmentCollection segments = Segment.list();\nwhile (segments.hasNext()) {\n    out.println(segments.next().getId());\n}\n\n\nYou can fetch a list of all segments.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIt includes the count of contacts that belong to each segment.\nResponse\n\nThis will return a list of Segment Objects. The result may also have a pages object if the response is paginated.\n\nAttribute\tType\tDescription\ntype\tString\tvalue is 'segment.list'\nsegments\tArray\tA list of segment objects\npages\tObject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Update Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_data_attribute_request/",
    "html": "Whether the attribute is to be archived or not."
  },
  {
    "title": "Create Content Import Source Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_content_import_source_request/",
    "html": "You can modify a Content Import Source of your Fin Content Library."
  },
  {
    "title": "The Conversation model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/conversation-model/#conversation-part-object",
    "html": "The Conversation model\nExample Conversation Object\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\"\n        }\n    ],\n    \"title\": \"Conversation Title\",\n    \"admin_assignee_id\": 814860,\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776,\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contact_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"admin_assignee_id\": \"814860\",\n   \"team_assignee_id\": null,\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\": [],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nConversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.\n\nConversation Object\nKey\tType\tDescription\ntype\tString\tAlways conversation.\nid\tString\tThe id representing the conversation.\ncreated_at\tTimestamp\tThe time the conversation was created.\nupdated_at\tTimestamp\tThe last time the conversation was updated.\nsource\tObject\tThe Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated.\ncontacts\tList\tThe list of contacts (users or leads) involved in this conversation.\nThis will only contain one customer unless more were added via the group conversation feature.\nteammates\tList\tThe list of teammates who participated in the conversation (wrote at least one conversation part).\ntitle\tString\tThe title given to the conversation.\nadmin_assignee_id\tInteger\tThe id of the admin assigned to the conversation. If it's not assigned to an admin it will return null.\nteam_assignee_id\tString\tThe id of the team assigned to the conversation. If it's not assigned to a team it will return null.\ncustom_attributes\tObject\tAn object containing the different custom attributes associated to the conversation as key-value pairs.\nopen\tBoolean\tIndicates whether a conversation is open (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\nwaiting_since\tTimestamp\tThe last time a Contact responded to an Admin.\nIn other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.\nsnoozed_until\tTimestamp\tIf set this is the time in the future when this conversation will be marked as open.\ni.e. it will be in a snoozed state until this time.\ntags\tList\tA list of tags objects associated with the conversation.\nfirst_contact_reply\tObject\tAn object containing information on the first users message. For a contact initiated message this will represent the users original message.\npriority\tString\tIf marked as priority, it will return priority or else not_priority.\nsla_applied\tObject\tThe SLA Applied object contains the details for which SLA has been applied to this conversation.\nconversation_rating\tObject\tThe Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.\nstatistics\tObject\tA Statistics object containing all information required for reporting, with timestamps and calculated metrics.\nconversation_parts\tList\tA list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.\nSource object\nAttribute\tType\tDescription\ntype\tString\tThis includes conversation, push, facebook, twitter and email.\nid\tString\tThe id representing the message.\ndelivered_as\tString\tThe conversation's initiation type.\nPossible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).\nsubject\tString\tOptional. The message subject.\nFor Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tObject\tThe object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nurl\tString\tThe URL where the conversation was started.\nFor Twitter, Email, and Bots, this will be blank.\nredacted\tBoolean\tWhether or not the source message has been redacted. Only applicable for contact initiated messages.\nContact Object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nTeammate Object\nAttribute\tType\tDescription\ntype\tString\tCurrently this will always be of type admin. Conversations not rated will return null.\nid\tString\tThe ID of the Admin.\nFirst Contact Reply Object\nAttribute\tType\tDescription\ntype\tString\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nurl\tString\tThe URL where the first reply originated from.\nFor Twitter and Email replies, this will be blank.\ncreated_at\tTimestamp\tThe time the users messages was created. This is in unix timestamp format.\nConversation Rating Object\nAttribute\tType\tDescription\nrating\tInteger\tThe rating, between 1 and 5, for the conversation.\nremark\tString\tAn optional field to add a remark to correspond to the number rating.\ncreated_at\tTimestamp\tThe time the rating was requested in the conversation being rated.\ncontact\tObject\tAn object containing the ID and type of the Contact.\nteammate\tObject\tAn object containing the ID and type of the Intercom teammate associated with the conversation when it was rated.\nSLA Object\nAttribute\tType\tDescription\nsla_name\tString\tThe name of the SLA as given by the teammate when it was created.\nsla_status\tString\tOne of \"hit\", \"missed\", \"cancelled\", or \"active\".\nStatistics Object\nAttribute\tType\tDescription\ntime_to_assignment\tInteger\tDuration until last assignment before first admin reply. In seconds.\ntime_to_admin_reply\tInteger\tDuration until first admin reply. Subtracts out of business hours. In seconds.\ntime_to_first_close\tInteger\tDuration until conversation was closed first time. Subtracts out of business hours. In seconds.\ntime_to_last_close\tInteger\tDuration until conversation was closed last time. Subtracts out of business hours. In seconds.\nmedian_time_to_reply\tInteger\tMedian based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.\nfirst_contact_reply_at\tTimestamp\tTime of first text conversation part from a contact.\nfirst_assignment_at\tTimestamp\tTime of first assignment after first_contact_reply_at.\nfirst_admin_reply_at\tTimestamp\tTime of first admin reply after first_contact_reply_at.\nfirst_close_at\tTimestamp\tTime of first close after first_contact_reply_at.\nlast_assignment_at\tTimestamp\tTime of last assignment after first_contact_reply_at.\nlast_assignment_admin_reply_at\tTimestamp\tTime of first admin reply since most recent assignment.\nlast_contact_reply_at\tTimestamp\tTime of the last conversation part from a contact.\nlast_admin_reply_at\tTimestamp\tTime of the last conversation part from an admin.\nlast_close_at\tTimestamp\tTime of the last conversation close.\nlast_closed_by\tObject\tThe last admin who closed the conversation. Returns a reference to an Admin object.\ncount_reopens\tInteger\tNumber of reopens after first_contact_reply_at.\ncount_assignments\tInteger\tNumber of assignments after first_contact_reply_at.\ncount_conversations_parts\tInteger\tTotal number of conversation parts.\nConversation Part Object\n\n🚧\n\nConversation Parts are not returned when listing or searching for all conversations, only when retrieving a single conversation. There is also a limit of 500 parts.\n\nAttribute\tType\tDescription\ntype\tString\tAlways conversation_part.\nid\tString\tThe id representing the conversation part.\npart_type\tString\tThe type of conversation part.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\ncreated_at\tTimestamp\tThe time the conversation part was created.\nupdated_at\tTimestamp\tThe last time the conversation part was updated.\nnotified_at\tTimestamp\tThe time the user was notified with the conversation part.\nassigned_to\tString\tThe id of the admin that was assigned the conversation by this conversation_part (null if there has been no change in assignment.)\nauthor\tString\tThe type of individual that sent the message (user, admin or bot) and their related id.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nredacted\tBoolean\tWhether or not a conversation part has been redacted.\nConversation Part Types\nType\tDescription\ncomment\tStandard reply from customer or admin to a conversation.\nnote\tA note created by an admin on the conversation. A note will only be viewable as an admin.\nnote_and_reopen\tAdd a note and reopen the conversations in the one action.\nnote_and_unsnooze\tAdd a note and unsnooze the conversations in the one action.\nassignment\tAn assignment of the conversation to an admin, or Nobody.\nassign_and_unsnooze\tAn assignment of the conversation to an admin, or Nobody and Unsnooze the conversation in one action\nworkflow_assignment\tAn inbox workflow has assigned a admin to a conversation.\nopen\tIdentifies a conversation has been opened.\nclose\tIdentifies a conversation has been closed.\naway_mode_assignment\tConversation has been assigned due to the admin being in away mode.\nparticipant_added\tA participant has been added to a group conversation.\nparticipant_removed\tA participant has been removed from a group conversation.\nconversation_rating_changed\tA conversation rating has been changed, not this can only occur before the rating has been submitted. Once it has been submitted it cannot be changed.\nconversation_rating_remark_added\tA conversation remark has been added to the conversation.\nsnoozed\tA conversation has been snoozed.\nunsnoozed\tA conversation has been unsnoozed.\nassign_and_unsnooze\tAssign a conversation and unsnooze it in one action.\ntimer_unsnooze\tUnsnooze a conversation after a set time.\nquick_reply\tA quick reply from a customer.\ncustom_action_started\tHighlights that a custom action has been triggered an specific conversation.\ncustom_action_finished\tHighlights that a custom action has finished execution an specific conversation.\nconversation_attribute_updated_by_user\tHighlights that a conversation attribute was updated by the user.\nconversation_attribute_updated_by_admin\tHighlights that a conversation attribute was updated by an admin.\nconversation_attribute_updated_by_workflow\tHighlights that a conversation attribute was updated by an Inbox workflow.\nconversation_sla_applied_by_rule\tHighlights that a inbox rule has added an SLA to a conversation.\nconversation_sla_applied_by_workflow\tHighlights that a workflow has added an SLA to a conversation.\nconversation_sla_removed\tHighlights that a SLA has been removed from a conversation.\nconversation_sla_target_missed\tHighlights that a conversation has missed its SLA target.\nuser_became_idle\tOperator did not receive a reply from the user in time.\npriority_changed\tThe priority of the conversation has changed.\npriority_changed_by_rule\tAn inbox rule has changed the priority of a conversation.\nresolution_bot_found_no_answer\tResolution bot found no answer to the user's query.\nconversation_tags_updated\tConversation tags have been updated.\nattribute_collector\tOperator has added an attribute collector.\nattribute_collected\tUser has given Operator a response to the attribute_collector"
  },
  {
    "title": "Update Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_contact_request/",
    "html": "You can update a contact"
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/messages/admin-initiated-conversation/",
    "html": "Create a message\nExample Request & Response\n$ curl https://api.intercom.io/messages \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d\n\n{\n  \"message_type\": \"email\",\n  \"subject\": \"Hey\",\n  \"body\": \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"from\": {\n    \"type\": \"admin\",\n    \"id\": \"394051\"\n  },\n  \"to\": {\n    \"type\": \"user\",\n    \"id\": \"536e564f316c83104c000020\"\n  }\n}\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"admin_message\",\n  \"id\": \"2001\",\n  \"created_at\": 1401916877,\n  \"message_type\": \"email\",\n  \"subject\" : \"Hey\",\n  \"body\" : \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"owner\": {\n    \"email\": \"wash@serenity.io\",\n    \"id\": \"394051\",\n    \"name\": \"Wash\",\n    \"type\": \"admin\"\n  }\n}\n\nintercom.messages.create(\n  :message_type => 'email',\n  :subject  => 'This Land',\n  :body     => \"Har har har! Mine is an evil laugh!\",\n  :template => \"plain\", # or \"personal\",\n  :from => {\n    :type => \"admin\",\n    :id   => \"394051\"\n  },\n  :to => {\n    :type => \"user\",\n    :id => \"536e564f316c83104c000020\"\n  }\n)\n\n<?php\n$intercom->messages->create([\n    \"message_type\" => \"email\",\n    \"subject\" => \"Plato Quote\",\n    \"body\" => \"And what, Socrates, is the food of the soul?\",\n    \"from\" => [\n        \"type\" => \"admin\",\n        \"id\" => \"814860\"\n    ],\n    \"to\" => [\n        \"type\" => \"user\",\n        \"email\" => \"socrates@email.com\"\n    ]\n]);\n?>\n\nUser user = new User()\n  .setId(\"5310d8e8598c9a0b24000005\");\nAdmin admin = new Admin()\n  .setId(\"394051\");\nAdminMessage adminMessage = new AdminMessage()\n  .setAdmin(admin)\n  .setUser(user)\n  .setSubject(\"This Land\")\n  .setBody(\"Har har har! Mine is an evil laugh!\")\n  .setMessageType(\"email\")\n  .setTemplate(\"plain\"); // or personal\nConversation.create(adminMessage);\n\n\nYou can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\n🚧 Delay after contact creation\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tThe kind of message being created. Values: inapp or email\nsubject\tString\tYes, if message_type: email.\tThe title of the email.\nbody\tString\tYes\tThe content of the message.\nHTML and plaintext are supported.\ntemplate\tString\tYes, if message_type: email.\tThe style of the outgoing message.\nPossible values plain or personal.\nfrom\tObject\tYes\tSee From Object below for more.\nto\tObject\tYes\tSee To Object below for more.\ncreate_conversation_without_contact_reply\tBoolean\tNo\tWhether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.\nFrom Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tAlways admin.\nid\tString\tYes\tThe identifier for the admin which is given by Intercom.\nTo Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tThe role associated to the contact - user or lead.\nid\tString\tYes\tThe identifier for the contact which is given by Intercom.\nResponse\n\nThis will return the Message that has been created.\n\n🚧 Retrieving Associated Conversations\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/articles/create-an-article/",
    "html": "Create an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"Thanks for everything\\\",\\n  \\\"description\\\": \\\"English description\\\",\\n  \\\"body\\\": \\\"<p>This is the body in html</p>\\\",\\n  \\\"author_id\\\": 1,\\n  \\\"state\\\": \\\"published\\\",\\n  \\\"parent_id\\\": 1,\\n  \\\"parent_type\\\": \\\"collection\\\",\\n  \\\"translated_content\\\": {\\n    \\\"fr\\\": {\\n      \\\"title\\\": \\\"Allez les verts\\\",\\n      \\\"description\\\": \\\"French description\\\",\\n      \\\"body\\\": \\\"<p>French body in html</p>\\\",\\n      \\\"author_id\\\": 1,\\n      \\\"state\\\": \\\"published\\\"\\n    }\\n  }\\n}\n\n\nYou can create a new article by making a POST request to https://api.intercom.io/articles.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\ntitle\tString\tYes\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tYes\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nDefaults to draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be created.\nResponse\n\nThis will return an Article model of the article you just created."
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Switch/createPhoneSwitch/",
    "html": "You can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\n\nIf custom attributes are specified, they will be added to the user or lead's custom data attributes."
  },
  {
    "title": "The data event model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/data-events/event-model/",
    "html": "The data event model\nEvent Object\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"342311\"\n}\n\n// Sufficient to send just the event name\nIntercom('trackEvent', 'invited-friend');\n\n# create an event as a hash\nevent = {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571\n}\nintercom.events.create event\n\n<?php\n$event = array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\"\n);\n$intercom->events->create($event);\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"1314159\");\n  .setCreatedAt(currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nEvents are how you can submit user activity to Intercom. Once you're sending Intercom event data, you can filter your user base with those events and create Auto Messages to send whenever an event occurs. Every event is associated with an event name, the time it happened, the user that caused the event, and optionally some extra metadata. Events record the count, first and last occurrence of an event.\n\nEvents are different to Custom Attributes in that events are information on what Users did and when they did it, whereas Custom Attributes represent the User's current state as seen in their profile. For example, the first time they subscribed to a paid plan, or the most recent time they changed their plan would be represented by events, whereas a User Attribute would be used to record their current plan.\n\nBecause Events are used for filtering and messaging, and event names are used directly in Intercom by your App's Admins we recommend sending high-level activity about your users that you would like to message on, rather than raw clickstream or user interface actions. For example an order action is a good candidate for an Event, versus all the clicks and actions that were taken to get to that point. We also recommend sending event names that combine a past tense verb and nouns, such as 'created-project'.\n\nThe Events API varies slightly from the rest of the APIs as follows -\n\nYou can submit events using JavaScript using the trackEvent method.\nWhen there's an error or errors, a list structure is returned instead of a single error.\nEvent Object\nAttribute\tRequired\tDescription\nevent_name\tyes\tThe name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan.\ncreated_at\tyes\tThe time the event occurred as a UTC Unix timestamp\nuser_id\tyes if no email\tYour identifier for the user.\nid\tyes if no email or user_id.\tYour identifier for a lead or a user.\nemail\tyes if no user_id\tAn email address for your user. An email should only be used where your application uses email to uniquely identify users\nmetadata\tno\toptional metadata about the event.\n\nThe event_name field is processed as follows:\n\nNames are treated as case insensitive - 'Completed-Order' and 'completed-order' will be considered the same event for your application.\nPeriods (.) and dollars ($) in event names are replaced with hyphens. e.g., 'completed.order' will be stored as 'completed-order'.\n\nTo avoid confusion we recommend submitting lower case event names that do not contain periods or dollars!\n\nMetadata Object\n\nSending an event with metadata\n\n$ curl https://api.intercom.io/events \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Content-Type: application/json\" -d'\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"314159\",\n  \"metadata\": {\n     \"invitee_email\": \"pi@example.org\",\n     \"invite_code\": \"ADDAFRIEND\"\n  }\n}'\n\nvar metadata = {\n  invitee_email: 'pi@example.org',\n  invite_code: 'ADDAFRIEND'\n};\nIntercom('trackEvent', 'invited-friend', metadata);\n\nmetadata = {\n  :invitee_email => 'pi@example.org',\n  :invite_code => 'ADDAFRIEND'\n}\nintercom.events.create {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571,\n  :metadata => metadata\n}\n\n<?php\n$metadata = array(\n  \"invitee_email\" => \"pi@example.org\",\n  \"invite_code\" => \"ADDAFRIEND\"\n);\n$intercom->events->create(array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\",\n  \"metadata\" => $metadata\n));\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"314159\")\n  .putMetadata(\"invite_mail\", \"pi@example.org\")\n  .putMetadata(\"invite_code\", \"ADDAFRIEND\")\n  .putMetadata(\"found_date\", currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nMetadata can be used to submit an event with extra key value data. Each event can contain up to ten metadata key values.\n\nSome use cases for event metadata are:\n\nLinking an event back to a page in your website.\nDescribing before and after values for a subscription plan change.\nSending contextual information about an online order, a booking.\n\n📘\n\nYou can now trigger messages to your users based on event and event metadata and also include the metadata in the messages. For more information on how this works, learn more about event based messaging\n\nSee the section 'Metadata Types' for more information on the kinds of metadata you can send."
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/help-center/create-a-collection/",
    "html": "Create a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"name\\\": \\\"Collection 1\\\",\\n  \\\"description\\\": \\\"English description\\\",\\n  \\\"translated_content\\\": {\\n    \\\"es\\\": {\\n      \\\"name\\\": \\\"Colección 1\\\",\\n      \\\"description\\\": \\\"Spanish description\\\"\\n    }\\n  }\\n}\n\n\nYou can create a new collection by making a POST request to https://api.intercom.io/help_center/collections.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\nname\tString\tYes\tThe name of the collection.\nFor multilingual collections, this will be the name of the default language's content.\ndescription\tString\tNo\tThe description of the collection.\nFor multilingual collections, this will be the description of the default language's content.\ntranslated_content\tString\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Collection Model of the collection you just created."
  },
  {
    "title": "Segment",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Segments/segment/",
    "html": "A segment is a group of your contacts defined by the rules that you set."
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/articles/list-all-articles/",
    "html": "List all articles\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through Articles.\ntotal_count\tInteger\tA count of the total number of articles.\ndata\tArray\tAn array of Article Objects.\nHOW ARE THE ARTICLES SORTED AND ORDERED?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "List all conversations",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/list-conversations/",
    "html": "List all conversations\nExample Request & Response\n$ curl \\\"https://api.intercom.io/conversations \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"conversation.list\",\n  \"conversations\": [\n    {\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"custom_attributes\": {\n      \"issue_type\": \"Billing\",\n      \"priority\": \"High\"\n    },\n    \"topics\": {\n        \"type\": \"topic.list\",\n        \"topics\": [\n            {\n                \"type\": \"topic\"\n                \"name\": \"Example Topic 1\",\n                \"id\": 839\n            }\n        ],\n        \"total_count\": 1\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contact_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    }, \n    \n    # list of conversations\n  ],\n \t\"pages\": {\n    \"type\": \"pages\",\n    \"next\": {\n      \"page\": 2,\n      \"starting_after\": \"WzE2NTg3NTk2MzAwMDAsNCwzXQ==\"\n    },\n   \t\"page\": 1,\n   \t\"per_page\": \"1\",\n    \"total_pages\": 3\n  },\n}\n\n\nYou can fetch a list of all conversations.\n\nRequest Parameters\n\nYou can optionally request the result page size and which page to fetch as follows -\n\nParameter\tRequired\tDescription\nper_page\tno\tHow many results per page (defaults to 150).\nstarting_after\tno\tString used to get the next page of conversations.\nResponse\nPAGINATION\n\nThe list all conversations query have a default per_page value of 150.\n\nA Pagination (Cursor) of Conversations is returned, without the conversation_parts object.\n\nRETRIEVING CONVERSATION PARTS\n\nYou must retrieve a single conversation using the conversation's id to return a conversation with the conversation_part array and objects included."
  },
  {
    "title": "Update Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_article_request/",
    "html": "You can Update an Article"
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/scrollOverAllCompanies/",
    "html": "The list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n\n📘 Scroll Parameter\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message: \"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "Admin Conversations Count Model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/counts/admin-conversations/",
    "html": "Admin Conversations Count Model\nAdmin Conversation Count Object\n\nThe admin conversation count supplies per Admin counts\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nconversation\tobject\tContains counts related to admins\nconversation.admin\tarray\tContains and array of objects detailing each Admin\nconversation.admin.open\tnumber\tContains the number of open conversations for the Admin\nconversation.admin.closed\tnumber\tContains the number of closed conversations for the Admin\nconversation.admin.id\tstring\tContains the Admin id\nconversation.admin.name\tstring\tContains the Admin name\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\n# Conversation Admin Counts\n$ curl 'https://api.intercom.io/counts?type=conversation&count=admin' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# Conversation Admin Counts\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\nintercom.counts.for_type(type: 'conversation', count: 'admin')\n\n<?php\n// Conversation Admin Count\n$counts = $intercom->counts->getCounts([\"type\" => \"conversation\", \"count\" => \"admin\"]);\nprint_r($counts);\n?>\n\n// Conversation Admin Count\nfinal Counts.Conversation counts = Counts.conversationAdmins();\nList<Admin> admins = counts.getAdmins();\nfor (Admin admin : admins) {\n    out.println(\n      admin.getName() + \": \" +\n      admin.getClosed() + \", \" +\n      admin.getOpen());\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nConversation Admin Count\tconversation\tadmin"
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/data-attributes/create-data-attributes/",
    "html": "Create a data attribute\nExample Requests & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"name\\\": \\\"list_cda\\\",\\n  \\\"description\\\": \\\"You are either alive or dead\\\",\\n  \\\"data_type\\\": \\\"options\\\",\\n  \\\"model\\\": \\\"contact\\\",\\n  \\\"options\\\": [\\n    {\\\"value\\\": \\\"alive\\\"},\\n    {\\\"value\\\": \\\"dead\\\"}\\n  ]\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0006klvnje6ffng7ot80\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You already have 'text_cda' in your people data. To save this as new company data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Your name for this attribute must only contain alphanumeric characters, currency symbols, and hyphens\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"'Name' is one of our standard attributes for your people data. To save this as new people data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Data Type isn't an option\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You must have at least two options on a list type data attribute\"\n    }\n  ]\n}\n\n\nYou can create a data attributes for a contact or a company.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nname\tstring\tThe name of the attribute.\nmodel\tString\tThe model where the attribute applies to.\nAccepts contact or company .\ndata_type\tstring\tThe type of data stored for this attribute.\nAccepted values are string, integer, float, boolean, date.\ndescription\tstring\t(Optional) The readable description you see in the UI for the attribute.\noptions\tarray\t(Optional) To create list attributes.\nProvide a set of hashes with value as the key of the options you want to make.\ndata_type must be string.\nResponse\n\nThis will return a Data Attribute Model showing the details of your created attribute."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/deleteCompany/",
    "html": "You can delete a single company."
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/listAllCompanies/",
    "html": "You can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Delete an article",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/articles/delete-an-article/",
    "html": "Delete an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can delete a single article by making a DELETE request to https://api.intercom.io/articles/<id>.\n\nRequest Path Parameters\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the article which is given by Intercom.\nResponse\nKey\tType\tDescription\nid\tString\tThe unique identifier for the article which you provided in the URL.\nobject\tString\tThe type of object which was deleted - article.\ndeleted\tBoolean\tWhether the article was deleted successfully or not."
  },
  {
    "title": "Retrieve companies",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/retrieveCompany/",
    "html": "You can fetch a single company by passing in company_id or name.\n\nhttps://api.intercom.io/companies?name={name}\n\nhttps://api.intercom.io/companies?company_id={company_id}\n\nYou can fetch all companies and filter by segment_id or tag_id as a query parameter.\n\nhttps://api.intercom.io/companies?tag_id={tag_id}\n\nhttps://api.intercom.io/companies?segment_id={segment_id}"
  },
  {
    "title": "Retrieve a company by ID",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/RetrieveACompanyById/",
    "html": "You can fetch a single company."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Admins/retrieveAdmin/",
    "html": "You can retrieve the details of a single admin."
  },
  {
    "title": "Update a company",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/UpdateCompany/",
    "html": "You can update a single company"
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/ListAttachedSegmentsForCompanies/",
    "html": "You can fetch a list of all segments that belong to a company."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Admins/listActivityLogs/",
    "html": "You can get a log of activities by all admins in an app."
  },
  {
    "title": "Create or Update a company",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/createOrUpdateCompany/",
    "html": "You can create or update a company.\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Admins/listAdmins/",
    "html": "You can fetch a list of admins for a given workspace."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Admins/setAwayAdmin/",
    "html": "You can set an Admin as away for the Inbox."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Visitors/convertVisitor/",
    "html": "You can merge a Visitor to a Contact of role type lead or user.\n\n📘 What happens upon a visitor being converted?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Admins/identifyAdmin/",
    "html": "You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).\n\n🚧 Single Sign On\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Visitor",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/visitor/",
    "html": "Visitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform. The Visitors resource provides methods to fetch, update, convert and delete."
  },
  {
    "title": "Update Section Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_section_request/",
    "html": "You can update a Section"
  },
  {
    "title": "Update Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_visitor_request/",
    "html": "Update an existing visitor."
  },
  {
    "title": "Update Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_conversation_request/",
    "html": "Payload of the request to update a conversation"
  },
  {
    "title": "Update Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_data_attribute_request/",
    "html": "Whether the attribute is to be archived or not."
  },
  {
    "title": "Update Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/update_article_request/",
    "html": "You can Update an Article"
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/subscription_type_list/",
    "html": "A list of subscription type objects."
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/social_profile/",
    "html": "A Social Profile allows you to label your contacts, companies, and conversations and list them using that Social Profile."
  },
  {
    "title": "Applied SLA",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/sla_applied/",
    "html": "The SLA Applied object contains the details for which SLA has been applied to this conversation. Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null."
  },
  {
    "title": "Search data",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/search_request/",
    "html": "Search using Intercoms Search APIs."
  },
  {
    "title": "Snooze Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/snooze_conversation_request/",
    "html": "Payload of the request to snooze a conversation"
  },
  {
    "title": "Sections",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/section_list/",
    "html": "This will return a list of Sections for the App."
  },
  {
    "title": "Part attachment",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/part_attachment/",
    "html": "The file attached to a part"
  },
  {
    "title": "reply_conversation_request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Reference",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/reference/",
    "html": "reference to another object"
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/paginated_response/",
    "html": "Paginated Response"
  },
  {
    "title": "Deleted Section Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/deleted_section_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "intercom_version",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/intercom_version/",
    "html": "Intercom API version.\nBy default, it's equal to the version set in the app package."
  },
  {
    "title": "Deleted Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "File",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/file_attribute/",
    "html": "The value describing a file upload set for a custom attribute"
  },
  {
    "title": "multiple_filter_search_request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/multiple_filter_search_request/",
    "html": "An operator to allow boolean inspection between multiple fields."
  },
  {
    "title": "detach_contact_from_conversation_request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/detach_contact_from_conversation_request/",
    "html": "The id of the admin who is performing the action."
  },
  {
    "title": "Error",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/error/",
    "html": "The API will return an Error List for a failed request, which will contain one or more Error objects."
  },
  {
    "title": "Deleted Company Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/deleted_company_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Deleted Collection Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/deleted_collection_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Data Export CSV",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/data_export_csv/",
    "html": "A CSV output file"
  },
  {
    "title": "Data Event Summary",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/data_event_summary/",
    "html": "This will return a summary of data events for the App."
  },
  {
    "title": "Data Event Summary Item",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/data_event_summary_item/",
    "html": "This will return a summary of a data event for the App."
  },
  {
    "title": "Data Attribute List",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/data_attribute_list/",
    "html": "A list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "customer_request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/customer_request/",
    "html": "The identifier for the contact as given by Intercom."
  },
  {
    "title": "Create or Update Tag Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_or_update_tag_request/",
    "html": "You can create or update an existing tag."
  },
  {
    "title": "Custom Attributes",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/custom_attributes/",
    "html": "An object containing the different custom attributes associated to the conversation as key-value pairs. For relationship attributes the value will be a list of custom object instance models."
  },
  {
    "title": "Data Event List",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/data_event_list/",
    "html": "This will return a list of data events for the App."
  },
  {
    "title": "Create Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_data_attribute_request/",
    "html": "The name of the data attribute."
  },
  {
    "title": "Create Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_contact_request/",
    "html": "Payload to create a contact"
  },
  {
    "title": "Create Conversation Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_conversation_request/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Create Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_article_request/",
    "html": "You can create an Article"
  },
  {
    "title": "Create Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/create_collection_request/",
    "html": "You can create a collection"
  },
  {
    "title": "Convert Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/convert_visitor_request/",
    "html": "You can merge a Visitor to a Contact of role type lead or user."
  },
  {
    "title": "Contact Unarchived",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_unarchived/",
    "html": "unarchived contact object"
  },
  {
    "title": "Conversation Parts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_parts/",
    "html": "A list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts."
  },
  {
    "title": "Conversation part author",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_part_author/",
    "html": "The object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams. For Twitter, this will be blank."
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_contacts/",
    "html": "The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature."
  },
  {
    "title": "Conversation Part",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_part/",
    "html": "A Conversation Part represents a message in the conversation."
  },
  {
    "title": "Conversation List",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_list/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "First contact reply",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/conversation_first_contact_reply/",
    "html": "An object containing information on the first users message. For a contact initiated message this will represent the users original message."
  },
  {
    "title": "Contact Tags",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_tags/",
    "html": "An object containing tags meta data about the tags that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Ticket Type",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/ticket_type/",
    "html": "A ticket type, used to define the data fields to be captured in a ticket."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Visitors/convertVisitor/",
    "html": "You can merge a Visitor to a Contact of role type lead or user.\n\n📘 What happens upon a visitor being converted?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers."
  },
  {
    "title": "Contact Subscription Types",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_subscription_types/",
    "html": "An object containing Subscription Types meta data about the SubscriptionTypes that a contact has."
  },
  {
    "title": "Ticket Part",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/ticket_part/",
    "html": "A Ticket Part represents a message in the ticket."
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/ticket_contacts/",
    "html": "The list of contacts affected by a ticket."
  },
  {
    "title": "Delete a visitor",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Visitors/deleteVisitor/",
    "html": "You can delete a single visitor."
  },
  {
    "title": "Retrieve a visitor with ID",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Visitors/retrieveVisitor/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_social_profiles/",
    "html": "An object containing social profiles that a contact has."
  },
  {
    "title": "Segments",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_segments/",
    "html": "A list of segments objects attached to a specific contact."
  },
  {
    "title": "Contact List",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_list/",
    "html": "Contacts are your users in Intercom."
  },
  {
    "title": "Create a ticket type",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Ticket-Types/createTicketType/",
    "html": "You can create a new ticket type.\n\n📘 Creating ticket types.\n\nEvery ticket type will be created with two default attributes: default_title and default_description. For the icon propery, use an emoji from Twemoji Cheatsheet"
  },
  {
    "title": "Update a ticket type",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Ticket-Types/updateTicketType/",
    "html": "You can update a ticket type.\n\n📘 Updating a ticket type.\n\nFor the icon propery, use an emoji from Twemoji Cheatsheet"
  },
  {
    "title": "Rate Limiting",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/errors/rate-limiting/",
    "html": "Rate Limiting\n# Example with the default rate limit of 1000\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332510\n\n# After another request:\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1487332510\n\n# After window resets\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332520\n\n# If you make more than the allowed requests\nHTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1487332520\n\nintercom.rate_limit_details\n#=> {:limit=>1000, :remaining=>999, :reset_at=>2019-08-05 14:59:00 +0100}\n\n\nAPI Rate Limits are in place to protect Intercom from API traffic spikes that could put our databases at risk. We therefore measure the amount of requests sent to the API in order to throttle these when they surpass the amount allowed. We will respond with '429 Too Many Requests' and the following headers:\n\nHeader Name\tHeader Description\nX-RateLimit-Limit\tMaximum number of requests allowed for the app.\nX-RateLimit-Remaining\tNumber of requests left in the current time.\nX-RateLimit-Reset\tTime when the number of requests will be reset to the maximum limit.\nShown as UNIX timestamp.\nWHAT ABOUT CANVAS KIT REQUESTS?\n\nRate Limits only apply to calls to the REST API, not to any webhook requests that are sent as part of the Canvas Kit capabilities.\n\nWhat is the default amount of requests?\n\nEvery app will have default rate limits. The amount we rate limit them by is different for apps which are privately built for your own usage, or for apps that are publicly installed by third-parties.\n\nPrivate\n\nPrivate apps have a default rate limit of 10,000 API calls per minute per app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple private apps installed, every one contributes towards total number of requests.\n\nPublic\n\nPublic apps have a default rate limit of 10,000 API calls per minute for each app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple public apps installed, each one has its own separate request limit without contributing to the others.\n\nHIGHER RATE LIMITS\n\nIf you require higher rate limits than the defaults, you can contact us using the messenger in the bottom right.\n\nWhen does the amount of requests reset?\n\nAlthough the permitted limit of requests lasts for 1 minute, we evenly distribute this into 10 second windows. This means that every 10 seconds, the amount of permitted requests resets. For example, a default rate limit of 1000 per minute means that you can send a maximum of 166 operations per 10 second period (1000/6).\n\nHow can I handle rate limits?\n\nTo prevent hitting the rate limits, here are a few options for handling within your code.\n\nUse the header information\n\nYou can find the number of requests allowed in your current window in the Intercom headers, or if you are using the Intercom Ruby SDK you can call your client's rate_limit_details which returns a Hash with information about your app's rate limit.\n\nYou can use the remaining number of requests allowed in your current window and when this is below a certain value you can rest until your rate limit is reset.\n\nIn the example below the app is restricted to a rate limit of 5 just to show the output returned — note that we’ve also shown what information is available in the Intercom client and the response for your current rate limits using the Ruby SDK.\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n    # These are the headers we have access to when making requests\n    puts(\"Rate Limit: #{intercom.rate_limit_details[:limit]} \\n\")\n    puts(\"Remaining: #{intercom.rate_limit_details[:remaining]} \\n\")\n    puts(\"Reset Time: #{intercom.rate_limit_details[:reset_at]} \\n\")\n\n    # Check when request limit is under a certain number\n    if not intercom.rate_limit_details[:remaining].nil? and intercom.rate_limit_details[:remaining] < 2\n      sleep_time = intercom.rate_limit_details[:reset_at].to_i - Time.now.to_i\n      puts(\"Waiting for #{sleep_time} seconds to allow for rate limit to be reset\")\n      sleep sleep_time\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nThe output from the above code is below. You would not need to output all of this data, but this should offer an example of what to expect and how you might approach implementing a rest until the limit is reset.\n\nRequest Number 1\nRate Limit:\nRemaining:\nReset Time:\nRequest Number 2\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 3\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 4\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 5\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 6\nRate Limit: 5\nRemaining: 1\nReset Time: 2023-12-08 15:19:51 +0000 \nWaiting for 38 seconds to allow for rate limit to be reset\nRequest Number 7\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 8\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 9\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 10\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 11\nRate Limit: 5\nRemaining: 1\nReset Time: 2016-11-16 16:15:00 +0000\nWaiting for 58 seconds to allow for rate limit to be reset\n\nUse randomization\n\nWhile the reset option is one way to deal with rate limiting, you may want more granular control over your rate limit handling. For example, you might have a specific retry timeframe that you want to follow and not wait for the minute window to pass for your entire rate limit to be reset.\n\nIf you want more control over your rate limiting handling then you can check for the specific rate limit error returned and use some form of randomization in the backoff calculation.\n\nYou could change the retry code above to look like this to achieve some randomization:\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  rescue Intercom::RateLimitExceeded => error\n    #At this point we know we have encountered a limit\n    #So lets try for a few times and backoff a little in each case\n    puts(\"Error Msg: #{error.inspect} \\n\")\n    puts(\"http_code: #{error.http_code[:http_code]}\\n\" )\n    puts(\"http_code: #{error.http_code[:application_error_code]}\\n\" )\n    if retries <= max_retries\n      # Lets try it a few more times\n      retries += 1\n      # Set a range from num of retries to backoff and randomly sample from that\n      # You can pick any range you like here, this is just an example\n      backoff = rand(retries..(backoff_factor * retries))\n      puts(\"Backoff for #{backoff} seconds\")\n      sleep backoff\n    else\n      # Rasing error here so you can perform some action based on this event\n      raise(\"No longer retrying since we have retried #{retries} times.\\n\"\\\n              \"The error returned was: '#{error.message}'\")\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nAfter running this code, your output would look like this:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nRequest Number 7\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 2 seconds\nRequest Number 8\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 9\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 10\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 6 seconds\nRequest Number 11\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nadvanced_throttle.rb:32:in `rescue in block in <main>': No longer retrying since we have retried 4 times. (RuntimeError)\nThe error returned was: 'More than 5 requests received in 1 minute'\n\tfrom advanced_throttle.rb:9:in `block in <main>'\n\tfrom advanced_throttle.rb:8:in `each'\n\tfrom advanced_throttle.rb:8:in `<main>'\n\nUse a library for exponential backoff\n\nTo prevent having to implement your own backoff forumlas, you can use a library that will handle this for you. Some examples include:\n\nretry for Node.js\nbackoff for Python\nretries, a RubyGem which will be used for the below example\n\nWith retries, all you specify the number of retries you want and it will handle the rest.\n\nrequire 'intercom'\nrequire 'stringio'\nrequire 'retries'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nmax_retries = 3\n\nfor num in 0..20\n  handler = Proc.new do |exception, attempt_number, total_delay|\n    puts \"Handler saw a #{exception.class}; retry attempt #{attempt_number}; #{total_delay} seconds have passed.\"\n  end\n  with_retries(:max_tries => max_retries, :handler => handler, :rescue => [Intercom::RateLimitExceeded]) do |attempt|\n    puts(\"Request Number #{num+1}\")\n    # You can check for the max retry number and raise an error so you can take some action based on this event\n    if attempt >= max_retries\n      raise(\"No longer retrying since we have retried #{attempt} time.\\n\"\\\n    \"The error returned was: '#{Intercom::RateLimitExceeded}'\")\n    end\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  end\nend\n\n\nThe is what the output of the above example looks like using retries:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 1; 0.328696139 seconds have passed.\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 2; 1.194656588 seconds have passed.\nRequest Number 6\nthrottle_retries.rb:14:in `block (2 levels) in <main>': No longer retrying since we have retried 3 times. (RuntimeError)\nThe error returned was: 'Intercom::RateLimitExceeded'\n\tfrom /home/ec2-user/.rvm/gems/ruby-2.3.0/gems/retries-0.0.5/lib/retries.rb:46:in `with_retries'\n\tfrom throttle_retries.rb:11:in `block in <main>'\n\tfrom throttle_retries.rb:7:in `each'\n\tfrom throttle_retries.rb:7:in `<main>'\n[ec2-user@ip-10-0-2-162 ~]$\n"
  },
  {
    "title": "Visitor Deleted Object",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/visitor_deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Update an existing attribute for a ticket type",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Ticket-Type-Attributes/updateTicketTypeAttribute/",
    "html": "You can update an existing attribute for a ticket type."
  },
  {
    "title": "Contact Deleted",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_deleted/",
    "html": "deleted contact object"
  },
  {
    "title": "Contact companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_companies/",
    "html": "An object containing companies meta data about the companies that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Attached Companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_attached_companies/",
    "html": "A list of Company Objects"
  },
  {
    "title": "HTTP Responses",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/errors/http-responses/",
    "html": "HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The codes listed below are often used, and the API may use others. Note that 4xx and 5xx responses may be returned for any request and clients should cater for them.\n\nResponse Code\tDescription\n400\tBad Request -- General client error, possibly malformed data.\n401\tUnauthorized -- The API Key was not authorised (or no API Key was found).\n402\tPayment Required -- The API is not available on your current plan.\n403\tForbidden -- The request is not allowed.\n404\tNot Found -- The resource was not found.\n405\tMethod Not Allowed -- The resource does not accept the HTTP method.\n406\tNot Acceptable -- The resource cannot return the client's required content type.\n408\tRequest Timeout -- The server would not wait any longer for the client.\n409\tConflict - Multiple existing users match this email address - must be more specific using user_id\n415\tUnsupported Media Type - The server doesn't accept the submitted content-type.\n422\tUnprocessable Entity -- The data was well-formed but invalid.\n429\tToo Many Requests -- The client has reached or exceeded a rate limit, or the server is overloaded.\n500, 502, 503, 504\tServer errors - something went wrong with Intercom's servers.\n\nThese responses are most likely momentary operational errors (e.g. temporary unavailability), and, as a result, requests should be retried once."
  },
  {
    "title": "Retrieve a team",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Teams/retrieveTeam/",
    "html": "You can fetch the details of a single team, containing an array of admins that belong to this team."
  },
  {
    "title": "Contact Archived",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/contact_archived/",
    "html": "archived contact object"
  },
  {
    "title": "Company Attached Contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/company_attached_contacts/",
    "html": "A list of Contact Objects"
  },
  {
    "title": "Companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/company_list/",
    "html": "This will return a list of companies for the App."
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Teams/listTeams/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Collections",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/collection_list/",
    "html": "This will return a list of Collections for the App."
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/attach_contact_to_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "Article Translated Content",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/article_translated_content/",
    "html": "The Translated Content of an Article. The keys are the locale codes and the values are the translated content of the article."
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/assign_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "List all tags",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/listTags/",
    "html": "You can fetch a list of all tags for a given workspace."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Article Statistics",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/article_statistics/",
    "html": "The statistics of an article."
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "App",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/app/",
    "html": "App is a workspace on Intercom"
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "List tags attached to a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/listTagsForAContact/",
    "html": "You can fetch a list of all tags that are attached to a specific contact."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/admin_with_app/",
    "html": "Admins are the teammate accounts that have access to a workspace"
  },
  {
    "title": "Admins",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/admin_list/",
    "html": "A list of admins associated with a given workspace."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/activity_log_list/",
    "html": "A paginated list of activity logs."
  },
  {
    "title": "List subscription types",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Subscription-Types/listSubscriptionTypes/",
    "html": "You can list all subscription types. A list of subscription type objects will be returned."
  },
  {
    "title": "Admin Priority Level",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/admin_priority_level/",
    "html": "Admin priority levels for the team"
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Teams/listTeams/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Subscription-Types/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Subscription-Types/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Retrieve a segment",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Segments/retrieveSegment/",
    "html": "You can fetch the details of a single segment."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Subscription-Types/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Segments/listSegments/",
    "html": "You can fetch a list of all segments."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Subscription-Types/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "List subscription types",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Subscription-Types/listSubscriptionTypes/",
    "html": "You can list all subscription types. A list of subscription type objects will be returned."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Subscription-Types/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Notes/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Notes/retrieveNote/",
    "html": "You can fetch the details of a single note."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Notes/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "Retrieve a newsfeed",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/retrieveNewsfeed/",
    "html": "You can fetch the details of a single newsfeed"
  },
  {
    "title": "Update a news item",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/updateNewsItem/",
    "html": "The unique identifier for the news item which is given by Intercom."
  },
  {
    "title": "Delete a news item",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/deleteNewsItem/",
    "html": "You can delete a single news item."
  },
  {
    "title": "Newsfeed Assignment",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/newsfeed_assignment/",
    "html": "Assigns a news item to a newsfeed."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Notes/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "Newsfeed",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/newsfeed/",
    "html": "A newsfeed is a collection of news items, targeted to a specific audience.\n\nNewsfeeds currently cannot be edited through the API, please refer to this article to set up your newsfeeds in Intercom."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Notes/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Notes/retrieveNote/",
    "html": "You can fetch the details of a single note."
  },
  {
    "title": "Retrieve a section",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/retrieveSection/",
    "html": "You can fetch the details of a single section by making a GET request to https://api.intercom.io/help_center/sections/<id>."
  },
  {
    "title": "Delete a section",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/deleteSection/",
    "html": "You can delete a single section by making a DELETE request to https://api.intercom.io/sections/<id>."
  },
  {
    "title": "Create a news item",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/createNewsItem/",
    "html": "You can create a news item"
  },
  {
    "title": "Retrieve a news item",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/retrieveNewsItem/",
    "html": "You can fetch the details of a single news item."
  },
  {
    "title": "List all live newsfeed items",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/listLiveNewsfeedItems/",
    "html": "You can fetch a list of all news items that are live on a given newsfeed"
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Messages/createMessage/",
    "html": "You can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\n🚧 Sending for visitors\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nThis will return the Message model that has been created.\n\n🚧 Retrieving Associated Conversations\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Create a section",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/createSection/",
    "html": "You can create a new section by making a POST request to https://api.intercom.io/help_center/sections."
  },
  {
    "title": "Update a section",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/updateSection/",
    "html": "You can update the details of a single section by making a PUT request to https://api.intercom.io/sections/<id>."
  },
  {
    "title": "List all Help Centers",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/listHelpCenters/",
    "html": "You can list all Help Centers by making a GET request to https://api.intercom.io/help_center/help_centers."
  },
  {
    "title": "List all sections",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/listAllSections/",
    "html": "You can fetch a list of all sections by making a GET request to https://api.intercom.io/help_center/sections.\n\n📘 How are the sections sorted and ordered?\n\nSections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated sections first."
  },
  {
    "title": "Update a section",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/updateSection/",
    "html": "You can update the details of a single section by making a PUT request to https://api.intercom.io/sections/<id>."
  },
  {
    "title": "Retrieve a Help Center",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/retrieveHelpCenter/",
    "html": "You can fetch the details of a single Help Center by making a GET request to https://api.intercom.io/help_center/help_center/<id>."
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/retrieveCollection/",
    "html": "You can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>."
  },
  {
    "title": "Retrieve a section",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/retrieveSection/",
    "html": "You can fetch the details of a single section by making a GET request to https://api.intercom.io/help_center/sections/<id>."
  },
  {
    "title": "Delete a collection",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/deleteCollection/",
    "html": "You can delete a single collection by making a DELETE request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Update a collection",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/updateCollection/",
    "html": "You can update the details of a single collection by making a PUT request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/listAllCollections/",
    "html": "You can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\n📘 How are the collections sorted and ordered?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "Collection",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/collection/",
    "html": "Collections are top level containers for Articles within the Help Center."
  },
  {
    "title": "Search contacts",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/SearchContacts/",
    "html": "You can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\n🚧 Why is there a delay when creating contacts and searching for them?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\n\n🚧 Searching for Timestamp Fields\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second. For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards. If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM). This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nAccepted Fields\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nformatted_phone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString"
  },
  {
    "title": "Section",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/section/",
    "html": "Sections are subdivisions of a collection, with a collection potentially having multiple sections."
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/retrieveCollection/",
    "html": "You can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>."
  },
  {
    "title": "Archive contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/ArchiveContact/",
    "html": "You can archive a single contact."
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/createCollection/",
    "html": "You can create a new collection by making a POST request to https://api.intercom.io/help_center/collections."
  },
  {
    "title": "Get a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/ShowContact/",
    "html": "You can fetch the details of a single contact."
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/DeleteContact/",
    "html": "You can delete a single contact."
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "Create contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/CreateContact/",
    "html": "You can create a new contact (ie. user or lead)."
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/UpdateContact/",
    "html": "You can update an existing contact (ie. user or lead)."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Merge a lead and a user",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/MergeContact/",
    "html": "You can merge a contact with a role of lead into a contact with a role of user."
  },
  {
    "title": "Manage a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/manageConversation/",
    "html": "You can close a conversation. You can snooze a conversation to reopen on a future date. You can open a conversation which is snoozed or closed. You can assign a conversation to an admin and/or team."
  },
  {
    "title": "Create event summaries",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Events/dataEventSummaries/",
    "html": "Create event summaries for a user. Event summaries are used to track the number of times an event has occurred, the first time it occurred and the last time it occurred."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/replyConversation/",
    "html": "You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins."
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/listAllCompanies/",
    "html": "You can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Search conversations",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/searchConversations/",
    "html": "You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString\nAccepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString"
  },
  {
    "title": "List all data events",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Events/lisDataEvents/",
    "html": "🚧\n\nPlease note that you can only 'list' events that are less than 90 days old. Event counts and summaries will still include your events older than 90 days but you cannot 'list' these events individually if they are older than 90 days\n\nThe events belonging to a customer can be listed by sending a GET request to https://api.intercom.io/events with a user or lead identifier along with a type parameter. The identifier parameter can be one of user_id, email or intercom_user_id. The type parameter value must be user.\n\nhttps://api.intercom.io/events?type=user&user_id={user_id}\nhttps://api.intercom.io/events?type=user&email={email}\nhttps://api.intercom.io/events?type=user&intercom_user_id={id} (this call can be used to list leads)\n\nThe email parameter value should be url encoded when sending.\n\nYou can optionally define the result page size as well with the per_page parameter."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Messages/createMessage/",
    "html": "You can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\n🚧 Sending for visitors\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nThis will return the Message model that has been created.\n\n🚧 Retrieving Associated Conversations\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/ListAttachedSegmentsForCompanies/",
    "html": "You can fetch a list of all segments that belong to a company."
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/updateConversation/",
    "html": "You can update an existing conversation.\n\n📘\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters."
  },
  {
    "title": "Create event summaries",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Events/dataEventSummaries/",
    "html": "Create event summaries for a user. Event summaries are used to track the number of times an event has occurred, the first time it occurred and the last time it occurred."
  },
  {
    "title": "Submit a data event",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Events/createDataEvent/",
    "html": "You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a Content-Type of application/json.\n\nWhen using the JavaScript API, adding the code to your app makes the Events API available. Once added, you can submit an event using the trackEvent method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nWith the Ruby client you pass a hash describing the event to Intercom::Event.create, or call the track_user method directly on the current user object (e.g. user.track_event).\n\nType\tDescription\tExample\nString\tThe value is a JSON String\t\"source\":\"desktop\"\nNumber\tThe value is a JSON Number\t\"load\": 3.67\nDate\tThe key ends with the String _date and the value is a Unix timestamp, assumed to be in the UTC timezone.\t\"contact_date\": 1392036272\nLink\tThe value is a HTTP or HTTPS URI.\t\"article\": \"https://example.org/ab1de.html\"\nRich Link\tThe value is a JSON object that contains url and value keys.\t\"article\": {\"url\": \"https://example.org/ab1de.html\", \"value\":\"the dude abides\"}\nMonetary Amount\tThe value is a JSON object that contains amount and currency keys. The amount key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.\t\"price\": {\"amount\": 34999, \"currency\": \"eur\"}\n\nNB: For the JSON object types, please note that we do not currently support nested JSON structure.\n\n🚧 Lead Events\n\nWhen submitting events for Leads, you will need to specify the Lead's id.\n\n📘 Metadata behaviour\n\nWe currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.\nIt is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.\nThere might be up to 24 hrs delay when you send a new metadata for an existing event.\n\n📘 Event de-duplication\n\nThe API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is strongly recommended to send a second granularity Unix timestamp in the created_at field.\n\nDuplicated events are responded to using the normal 202 Accepted code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.\n\nHTTP API Responses\nSuccessful responses to submitted events return 202 Accepted with an empty body.\nUnauthorised access will be rejected with a 401 Unauthorized or 403 Forbidden response code.\nEvents sent about users that cannot be found will return a 404 Not Found.\nEvent lists containing duplicate events will have those duplicates ignored.\nServer errors will return a 500 response code and may contain an error message in the body."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Retrieve a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/retrieveConversation/",
    "html": "You can fetch the details of a single conversation.\n\nThis will return a single Conversation model with all its conversation parts.\n\n🚧 Hard limit of 500 parts\n\nThe maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.\n\n📘 Bot name in conversation parts\n\nFor conversation parts generated by a bot, bot name will depend on the following:\n\nCustomers that never turned on AI answers will have operator as the bot name\nCustomers that have turned on AI answers at some point will have fin as the bot name"
  },
  {
    "title": "List all data events",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Events/lisDataEvents/",
    "html": "🚧\n\nPlease note that you can only 'list' events that are less than 90 days old. Event counts and summaries will still include your events older than 90 days but you cannot 'list' these events individually if they are older than 90 days\n\nThe events belonging to a customer can be listed by sending a GET request to https://api.intercom.io/events with a user or lead identifier along with a type parameter. The identifier parameter can be one of user_id, email or intercom_user_id. The type parameter value must be user.\n\nhttps://api.intercom.io/events?type=user&user_id={user_id}\nhttps://api.intercom.io/events?type=user&email={email}\nhttps://api.intercom.io/events?type=user&intercom_user_id={id} (this call can be used to list leads)\n\nThe email parameter value should be url encoded when sending.\n\nYou can optionally define the result page size as well with the per_page parameter."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Creates a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/createConversation/",
    "html": "You can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.\n\n📘 Sending for visitors\n\nYou can also send a message from a visitor by specifying their user_id or id value in the from field, along with a type field value of contact. This visitor will be automatically converted to a contact with a lead role once the conversation is created.\n\nThis will return the Message model that has been created."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/deleteCompany/",
    "html": "You can delete a single company."
  },
  {
    "title": "Download content data export",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Export/downloadDataExport/",
    "html": "When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message data will be streamed continuously back down to you in a gzipped CSV format.\n\n📘 Octet header required\n\nYou will have to specify the header Accept: application/octet-stream when hitting this endpoint."
  },
  {
    "title": "Delete an article",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Articles/deleteArticle/",
    "html": "You can delete a single article by making a DELETE request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Submit a data event",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Events/createDataEvent/",
    "html": "You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a Content-Type of application/json.\n\nWhen using the JavaScript API, adding the code to your app makes the Events API available. Once added, you can submit an event using the trackEvent method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nWith the Ruby client you pass a hash describing the event to Intercom::Event.create, or call the track_user method directly on the current user object (e.g. user.track_event).\n\nType\tDescription\tExample\nString\tThe value is a JSON String\t\"source\":\"desktop\"\nNumber\tThe value is a JSON Number\t\"load\": 3.67\nDate\tThe key ends with the String _date and the value is a Unix timestamp, assumed to be in the UTC timezone.\t\"contact_date\": 1392036272\nLink\tThe value is a HTTP or HTTPS URI.\t\"article\": \"https://example.org/ab1de.html\"\nRich Link\tThe value is a JSON object that contains url and value keys.\t\"article\": {\"url\": \"https://example.org/ab1de.html\", \"value\":\"the dude abides\"}\nMonetary Amount\tThe value is a JSON object that contains amount and currency keys. The amount key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.\t\"price\": {\"amount\": 34999, \"currency\": \"eur\"}\n\nNB: For the JSON object types, please note that we do not currently support nested JSON structure.\n\n🚧 Lead Events\n\nWhen submitting events for Leads, you will need to specify the Lead's id.\n\n📘 Metadata behaviour\n\nWe currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.\nIt is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.\nThere might be up to 24 hrs delay when you send a new metadata for an existing event.\n\n📘 Event de-duplication\n\nThe API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is strongly recommended to send a second granularity Unix timestamp in the created_at field.\n\nDuplicated events are responded to using the normal 202 Accepted code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.\n\nHTTP API Responses\nSuccessful responses to submitted events return 202 Accepted with an empty body.\nUnauthorised access will be rejected with a 401 Unauthorized or 403 Forbidden response code.\nEvents sent about users that cannot be found will return a 404 Not Found.\nEvent lists containing duplicate events will have those duplicates ignored.\nServer errors will return a 500 response code and may contain an error message in the body."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Articles/updateArticle/",
    "html": "You can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Update a company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/UpdateCompany/",
    "html": "You can update a single company"
  },
  {
    "title": "List all conversations",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/listConversations/",
    "html": "You can fetch a list of all conversations.\n\nYou can optionally request the result page size and the cursor to start after to fetch the result"
  },
  {
    "title": "Cancel content data export",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Export/cancelDataExport/",
    "html": "You can cancel your job"
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "Retrieve a company by ID",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/RetrieveACompanyById/",
    "html": "You can fetch a single company."
  },
  {
    "title": "Update a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Attributes/updateDataAttribute/",
    "html": "You can update a data attribute.\n\n🚧 Updating the data type is not possible\n\nIt is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead."
  },
  {
    "title": "Retrieve an article",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Articles/retrieveArticle/",
    "html": "You can fetch the details of a single article by making a GET request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Show content data export",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Export/getDataExport/",
    "html": "You can view the status of your job by sending a GET request to the URL https://api.intercom.io/export/content/data/{job_identifier} - the {job_identifier} is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.\n\n🚧 Jobs expire after two days All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Retrieve companies",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/retrieveCompany/",
    "html": "You can fetch a single company by passing in company_id or name.\n\nhttps://api.intercom.io/companies?name={name}\n\nhttps://api.intercom.io/companies?company_id={company_id}\n\nYou can fetch all companies and filter by segment_id or tag_id as a query parameter.\n\nhttps://api.intercom.io/companies?tag_id={tag_id}\n\nhttps://api.intercom.io/companies?segment_id={segment_id}"
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Articles/createArticle/",
    "html": "You can create a new article by making a POST request to https://api.intercom.io/articles."
  },
  {
    "title": "Create content data export",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Export/createDataExport/",
    "html": "To create your export job, you need to send a POST request to the export endpoint https://api.intercom.io/export/content/data.\n\nThe only parameters you need to provide are the range of dates that you want exported.\n\n🚧 Limit of one active job\n\nYou can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.\n\n❗️ Updated_at not included\n\nIt should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.\n\n📘 Date ranges are inclusive\n\nRequesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99."
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Attributes/createDataAttribute/",
    "html": "You can create a data attributes for a contact or a company."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Create or Update a company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/createOrUpdateCompany/",
    "html": "You can create or update a company.\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated."
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Articles/listArticles/",
    "html": "You can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\n📘 How are the articles sorted and ordered?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "List all data attributes",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Attributes/lisDataAttributes/",
    "html": "You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Unarchive contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/UnarchiveContact/",
    "html": "You can unarchive a single contact."
  },
  {
    "title": "Archive contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/ArchiveContact/",
    "html": "You can archive a single contact."
  },
  {
    "title": "Create contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/CreateContact/",
    "html": "You can create a new contact (ie. user or lead)."
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/ListContacts/",
    "html": "You can fetch a list of all contacts."
  },
  {
    "title": "Search contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/SearchContacts/",
    "html": "You can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\n🚧 Why is there a delay when creating contacts and searching for them?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\n\n🚧 Searching for Timestamp Fields\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second. For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards. If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM). This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nAccepted Fields\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nformatted_phone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString"
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Get a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/ShowContact/",
    "html": "You can fetch the details of a single contact."
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/UpdateContact/",
    "html": "You can update an existing contact (ie. user or lead)."
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/listAllCompanies/",
    "html": "You can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "List tags attached to a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/listTagsForAContact/",
    "html": "You can fetch a list of all tags that are attached to a specific contact."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/scrollOverAllCompanies/",
    "html": "The list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n\n📘 Scroll Parameter\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message: \"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/ListAttachedSegmentsForCompanies/",
    "html": "You can fetch a list of all segments that belong to a company."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Admins/retrieveAdmin/",
    "html": "You can retrieve the details of a single admin."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "Delete an article",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Articles/deleteArticle/",
    "html": "You can delete a single article by making a DELETE request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Admins/retrieveAdmin/",
    "html": "You can retrieve the details of a single admin."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "List subscription types",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Subscription-Types/listSubscriptionTypes/",
    "html": "You can list all subscription types. A list of subscription type objects will be returned."
  },
  {
    "title": "Data Attribute",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Attributes/data_attribute/",
    "html": "Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Admins/listActivityLogs/",
    "html": "You can get a log of activities by all admins in an app."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Articles/updateArticle/",
    "html": "You can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/deleteCompany/",
    "html": "You can delete a single company."
  },
  {
    "title": "Contact",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Contacts/contact/",
    "html": "Contact are the objects that represent your leads and users in Intercom."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Admins/listAdmins/",
    "html": "You can fetch a list of admins for a given workspace."
  },
  {
    "title": "Ticket part author",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_part_author/",
    "html": "The author that wrote or triggered the part. Can be a bot, admin, team or user."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/admins/list-all-activity-logs/",
    "html": "List all activity logs\nExample Request & Response\ncurlhtml\ncurl https://api.intercom.io/admins/activity_logs?created_at_after=489222000&created_at_before=685695600 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json'\n\n\nExample Errors\n\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"parameter_not_found\\\",\\n\\t\\\"message\\\" => \\\"Please provide the following parameters: created_at_after\\\"\\n  }]\\n}\\n\n\nHTTP/1.1 403 RESTRICTED\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"api_plan_restricted\\\",\\n\\t\\\"message\\\" => \\\"This feature is not yet available to your app\\\"\\n  }]\\n}\n\n\nYou can get a log of activities by all admins in an app by sending a GET request to the URL https://api.intercom.io/admins/activity_logs.\n\nActivity List\nAttribute\tType\tDescription\ntype\tstring\tValue is activity_log.list\nactivity_logs\tarray\tA list of activity objects\npages\tobject\tOptional. A pagination object which may be empty, indication no further pages to fetch\nActivity Object\nAttribute\tType\tDescription\nactivity_type\tstring\tThe type of activity - see Activity Types & Descriptions below.\nactivity_description\tstring\tA sentence or two describing the activity - see Activity Types & Descriptions below.\nmetadata\tobject\tAn object containing information on the activity and what it modified\ncreated_at\ttimestamp\tThe time the activity was performed\nperformed_by\tobject\tAn Admin object of the admin who performed the activity\nid\tstring\tThe id representing the activity\nActivity Types & Descriptions\nType\tDescription\nadmin_assignment_limit_change\tA teammate changed their assignment limit\nadmin_away_mode_change\tA teammate changed their away mode and conversation reassignment settings\nadmin_deletion\tA teammate was removed from your workspace\nadmin_deprovisioned\tA teammate was deprovisioned from your workspace via SCIM\nadmin_invite_change\tThe permissions for a teammate invite were changed\nadmin_invite_creation\tA teammate invite was created\nadmin_invite_deletion\tA teammate invite was deleted\nadmin_login_failure\tA teammate tried to login with the wrong credentials\nadmin_login_success\tA teammate logged in successfully\nadmin_logout\tA teammate logged out\nadmin_password_reset_request\tA teammate requested a password reset\nadmin_password_reset_success\tA teammate's password was successfully reset\nadmin_permission_change\tThe permissions for a teammate were changed\nadmin_provisioned\tA teammate was provisioned on your workspace via SCIM\napp_admin_join\tA teammate joined your workspace (i.e. accepted your invite)\napp_authentication_method_change\tYour workspace's authentication methods were changed\napp_data_deletion\tA user or lead was deleted from your workspace\napp_data_export\tMessage or conversation data was exported from your workspace\napp_google_sso_domain_change\tYour workspace's Google SSO domain was changed\napp_identity_verification_change\tYour workspace's identity verification setting was changed\napp_name_change\tThe name of your workspace was changed\napp_outbound_address_change\tThe outbound email address was changed for your workspace\napp_package_installation\tAn app package was installed on your workspace\napp_package_token_regeneration\tAn access token for a specific app package was updated\napp_package_uninstallation\tAn app package was uninstalled from your workspace\napp_team_creation\tA team was created\napp_team_deletion\tA team was deleted\napp_team_membership_modification\tA team's membership was modified\napp_timezone_change\tAn app package was installed in your workspace\napp_webhook_creation\tA webhook subscription was created\napp_webhook_deletion\tA webhook subscription was deleted\narticles_in_messenger_enabled_change\tThe Messenger search for articles setting was changed\nbulk_delete\tUser or lead data was deleted from your workspace\nbulk_export\tUser or lead data was exported from your workspace\ncampaign_deletion\tA campaign was deleted from your workspace\ncampaign_state_change\tA campaign was changed on your workspace\nconversation_topic_change\tA conversation topic was changed\nconversation_topic_creation\tA conversation topic was created\nconversation_topic_deletion\tA conversation topic was deleted\nhelp_center_settings_change\tYour Help Center was turned on or off\ninbound_conversations_change\tThe Messenger inbound conversations setting was changed\ninbox_access_change\tThe inbox access setting was changed\nmessage_deletion\tA team was deleted from your workspace\nmessage_state_change\tA message's state was changed\nmessenger_look_and_feel_change\tThe Messenger look and feel setting was changed\nmessenger_search_required_change\tThe Messenger search required setting was changed\noffice_hours_change\tThe office hours setting was changed\nrole_change\tA role was changed\nrole_creation\tA role was created\nrole_deletion\tA role was deleted\nseat_change\tA teammate's seat was changed\nseat_revoke\tA teammate's seat was revoked\nsecurity_settings_change\tYour workspace's security settings were changed\ntemporary_expectation_change\tThe Messenger special notice settings were changed\nupfront_email_collection_change\tThe Messenger upfront email collection settings were changed\nwelcome_message_change\tThe Messenger welcome message settings were changed\nRequest Query Parameters\nParameter\tRequired?\tDescription\ncreated_at_after\tYes\tThe start date that you request data for. It must be formatted as a UNIX timestamp.\ncreated_at_before\tNo\tThe end date that you request data for. It must be formatted as a UNIX timestamp.\nResponse\n\nThis will return an Activity List which will contain an array titled activity_logs, in turn containing multiple Activity Objects."
  },
  {
    "title": "Compatibility",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/common-structures/compatibility/",
    "html": "Compatibility\nUnknown Field\n{\\n  \\\"type\\\": \\\"user\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\",\\n  \\\"such_key\\\": \\\"so_value\\\"\\n}\n\nMust Ignore Interpretation\n{\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\"\\n}\n\n\nJSON objects in the API follow a must ignore processing model, where clients are expected to ignore data fields they don't understand.\n\nFor example if the client saw the JSON as shown in the example on the right ('Unknown Field') and did not understand the such_key field, it must pretend the field wasn't there and will process the object as if it looked liked the object shown in 'Must Ignore'.\n\nWhen fetching content, fields that are optional for API objects are indicated in the documentation - clients must not assume they will always be present. When submitting content, fields that are required to be sent by client are also indicated in the documentation - if these are not sent the API may reject the request.\n\nIn general the API may reject JSON where data is not valid or incomplete with a 422 Unprocessable Entity response and an error message explaining the issue. For example, an email message type may be rejected if it is not sent with a subject field."
  },
  {
    "title": "Data Event",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Events/data_event/",
    "html": "Data events are used to notify Intercom of changes to your data."
  },
  {
    "title": "Ticket List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_list/",
    "html": "Tickets are how you track requests from your users."
  },
  {
    "title": "A Ticket Part representing a note, comment, or quick_reply on a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_reply/",
    "html": "A Ticket Part representing a note, comment, or quick_reply on a ticket"
  },
  {
    "title": "Snooze Conversation Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/snooze_conversation_request/",
    "html": "Payload of the request to snooze a conversation"
  },
  {
    "title": "Segment List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/segment_list/",
    "html": "This will return a list of Segment Objects. The result may also have a pages object if the response is paginated."
  },
  {
    "title": "Reference",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/reference/",
    "html": "reference to another object"
  },
  {
    "title": "reply_conversation_request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Pagination Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/pages_link/",
    "html": "The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows."
  },
  {
    "title": "Merge contact data",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/merge_contacts_request/",
    "html": "Merge contact data."
  },
  {
    "title": "redact_conversation_request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/redact_conversation_request/",
    "html": "Payload of the request to redact a conversation part"
  },
  {
    "title": "Group Translated Content",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/group_translated_content/",
    "html": "The Translated Content of an Group. The keys are the locale codes and the values are the translated content of the Group."
  },
  {
    "title": "intercom_version",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/intercom_version/",
    "html": "Intercom API version.\nBy default, it's equal to the version set in the app package."
  },
  {
    "title": "Linked Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/linked_object/",
    "html": "A linked conversation or ticket."
  },
  {
    "title": "detach_contact_from_conversation_request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/detach_contact_from_conversation_request/",
    "html": "The id of the admin who is performing the action."
  },
  {
    "title": "Linked Objects",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/linked_object_list/",
    "html": "An object containing metadata about linked conversations and linked tickets. Up to 1000 can be returned."
  },
  {
    "title": "Data Event Summary",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/data_event_summary/",
    "html": "This will return a summary of data events for the App."
  },
  {
    "title": "Custom Attributes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/custom_attributes/",
    "html": "An object containing the different custom attributes associated to the conversation as key-value pairs. For relationship attributes the value will be a list of custom object instance models."
  },
  {
    "title": "Data Attribute List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/data_attribute_list/",
    "html": "A list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Activity Log",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Models/activity_log/",
    "html": "Activities performed by admins."
  },
  {
    "title": "Custom Object Instance",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/custom_object_instance/",
    "html": "An instance of a Custom Object Type."
  },
  {
    "title": "Data Event List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/data_event_list/",
    "html": "This will return a list of data events for the App."
  },
  {
    "title": "Deleted Collection Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/deleted_collection_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Subscription-Types/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Retrieve an article",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Articles/retrieveArticle/",
    "html": "You can fetch the details of a single article by making a GET request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Admins/listActivityLogs/",
    "html": "You can get a log of activities by all admins in an app."
  },
  {
    "title": "Retrieve a company by ID",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/RetrieveACompanyById/",
    "html": "You can fetch a single company."
  },
  {
    "title": "Update a company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/UpdateCompany/",
    "html": "You can update a single company"
  },
  {
    "title": "Create Phone Switch Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_phone_switch_request/",
    "html": "You can create an phone switch"
  },
  {
    "title": "News Item",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/News/news_item/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Admins/setAwayAdmin/",
    "html": "You can set an Admin as away for the Inbox."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Subscription-Types/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Articles/createArticle/",
    "html": "You can create a new article by making a POST request to https://api.intercom.io/articles."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Admins/setAwayAdmin/",
    "html": "You can set an Admin as away for the Inbox."
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Articles/listArticles/",
    "html": "You can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\n📘 How are the articles sorted and ordered?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Subscription-Types/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Retrieve companies",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/retrieveCompany/",
    "html": "You can fetch a single company by passing in company_id or name.\n\nhttps://api.intercom.io/companies?name={name}\n\nhttps://api.intercom.io/companies?company_id={company_id}\n\nYou can fetch all companies and filter by segment_id or tag_id as a query parameter.\n\nhttps://api.intercom.io/companies?tag_id={tag_id}\n\nhttps://api.intercom.io/companies?segment_id={segment_id}"
  },
  {
    "title": "Create or Update a company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/createOrUpdateCompany/",
    "html": "You can create or update a company.\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Admins/identifyAdmin/",
    "html": "You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).\n\n🚧 Single Sign On\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "About Inbox Apps",
    "url": "https://developers.intercom.com/docs/guides/inbox/about-inbox/",
    "html": "About Inbox Apps\n\nTeammates can fully customize the Inbox by using Inbox apps — pieces of UI that can be configured to display tools and data directly in the Inbox.\n\nHere's an example of what the Salesforce Inbox app looks like:\n\nYou can build Inbox apps to:\n\nSync data from your CRM\nCreate and update data from project management tools\nView payments data securely\nLink conversations with issue tracking tools\nConnect tickets to issue tracking tools\nHow do I build an Inbox App?\n\nYou can build these apps using our toolkit called Canvas Kit.\n\nTo see how it works, follow this tutorial for building an Inbox app or try the Canvas Kit builder to get an idea of what your app could look like.\n\nWhat's Next?\nBuild an app for your Inbox by following this guide\nInstall an Inbox app from the App Store\nExperiment with customizing an Inbox app with Canvas Kit Builder"
  },
  {
    "title": "Stored Data",
    "url": "https://developers.intercom.com/docs/references/2.7/canvas-kit/responseobjects/stored-data/",
    "html": "Stored Data\nDescription\n\nA canvas object may optionally contain a stored_data object. This is where you can add key-value pairs of data that you want to be sent in whatever the next request is.\n\nFor example, the flow of your app might have multiple canvases with data being inputted on each one. You may want to have all this data available to use at the end of the flow for the final canvas. You can therefore put all this data in the stored_data object so it's sent in subsequent requests and is available at the end.\n\nExample Object\nstored_data: {\"key\": \"value\"} //Can be more than one pair\n"
  },
  {
    "title": "Sheets action",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/actioncomponents/sheets-action/",
    "html": "Sheets action\n\nA sheet action opens the link you give within the Messenger as an embedded iframe.\n\nMore on how Sheets work is in our Canvas Kit documentation.\n\nParameters\nParameters\tPossible Values\tRequired\tDescription\ntype\tsheet\tYes\tThe type of action you are attaching to a component.\nurl\tA valid HTTPS URL\tYes\tThe link which hosts your sheet.\nExample Object\naction: {\n  type: \"sheet\",\n  url:  \"http://example.com\"\n}\n"
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Teams/listTeams/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Retrieve a ticket type",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Ticket-Types/getTicketType/",
    "html": "You can fetch the details of a single ticket type."
  },
  {
    "title": "Update a ticket type",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Ticket-Types/updateTicketType/",
    "html": "You can update a ticket type.\n\n📘 Updating a ticket type.\n\nFor the icon propery, use an emoji from Twemoji Cheatsheet"
  },
  {
    "title": "Attach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/tags/attach-a-tag-to-a-conversation/",
    "html": "Attach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Content-Type: application/json' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"2084335\\\",\\n  \\\"admin_id\\\": \\\"123\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Conversation Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can tag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nadmin_id\tString\tYes\tThe unique identifier for the admin who is applying the tag.\nResponse\n\nThis will return a Tag model for the tag that was added to the conversation."
  },
  {
    "title": "The contact model",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/contacts/contacts-model/",
    "html": "The contact model\nExample Contacts Object\nJSON\n{  \\\"type\\\": \\\"contact\\\",  \\\"id\\\": \\\"5ba682d23d7cf92bef87bfd4\\\",  \\\"workspace_id\\\": \\\"ecahpwf5\\\",  \\\"external_id\\\": \\\"25\\\",  \\\"role\\\": \\\"user\\\",  \\\"email\\\": \\\"wash@serenity.io\\\",  \\\"phone\\\": \\\"+1123456789\\\",  \\\"name\\\": \\\"Hoban Washburn\\\",  \\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",  \\\"owner_id\\\": 127,  \\\"social_profiles\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"social_profile\\\",        \\\"name\\\": \\\"Twitter\\\",        \\\"url\\\": \\\"http://twitter.com/th1sland\\\"      }    ]  },  \\\"has_hard_bounced\\\": false,  \\\"marked_email_as_spam\\\": false,  \\\"unsubscribed_from_emails\\\": false,  \\\"created_at\\\": 1571672154,  \\\"updated_at\\\": 1571672158,  \\\"signed_up_at\\\": 1571069751,  \\\"last_seen_at\\\": 1571069751,  \\\"last_replied_at\\\": 1571672158,  \\\"last_contacted_at\\\": 1571672158,  \\\"last_email_opened_at\\\": 1571673478,  \\\"last_email_clicked_at\\\": 1571676789,  \\\"language_override\\\": null,  \\\"browser\\\": \\\"chrome\\\",  \\\"browser_version\\\": \\\"77.0.3865.90\\\",  \\\"browser_language\\\": \\\"en\\\",  \\\"os\\\": \\\"OS X 10.14.6\\\",  \\\"location\\\": {    \\\"type\\\": \\\"location\\\",    \\\"country\\\": \\\"Ireland\\\",    \\\"region\\\": \\\"Dublin\\\",    \\\"city\\\": \\\"Dublin\\\"  },  \\\"android_app_name\\\": null,  \\\"android_app_version\\\": null,  \\\"android_device\\\": null,  \\\"android_os_version\\\": null,  \\\"android_sdk_version\\\": null,  \\\"android_last_seen_at\\\": null,  \\\"ios_app_name\\\": null,  \\\"ios_app_version\\\": null,  \\\"ios_device\\\": null,  \\\"ios_os_version\\\": null,  \\\"ios_sdk_version\\\": null,  \\\"ios_last_seen_at\\\": null,  \\\"custom_attributes\\\": {    \\\"paid_subscriber\\\": true,    \\\"monthly_spend\\\": 155.5,    \\\"team_mates\\\": 1  },  \\\"tags\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"2\\\",        \\\"url\\\": \\\"/tags/2\\\"      },      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"4\\\",        \\\"url\\\": \\\"/tags/4\\\"      },      {        \\\"type\\\": \\\"tag\\\",        \\\"id\\\": \\\"5\\\",        \\\"url\\\": \\\"/tags/5\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/tags\\\",    \\\"total_count\\\": 3,    \\\"has_more\\\": false  },  \\\"notes\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"note\\\",        \\\"id\\\": \\\"20114858\\\",        \\\"url\\\": \\\"/notes/20114858\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/notes\\\",    \\\"total_count\\\": 1,    \\\"has_more\\\": false  },  \\\"companies\\\": {    \\\"type\\\": \\\"list\\\",    \\\"data\\\": [      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5ba686093d7cf93552a3dc99\\\",        \\\"url\\\": \\\"/companies/5ba686093d7cf93552a3dc99\\\"              },      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5cee64a03d7cf90c51b36f19\\\",        \\\"url\\\": \\\"/companies/5cee64a03d7cf90c51b36f19\\\"      },      {        \\\"type\\\": \\\"company\\\",        \\\"id\\\": \\\"5d7668883d7cf944dbc5c791\\\",        \\\"url\\\": \\\"/companies/5d7668883d7cf944dbc5c791\\\"      }    ],    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/companies\\\",    \\\"total_count\\\": 3,    \\\"has_more\\\": false  }}\n\n\nOur Contacts API is a central place to gather all information and take actions on your contacts (ie. users and leads), such as fetching, searching, creating, updating, and deleting.\n\nThe Contacts Model provides details on these contacts within Intercom, and will specify whether they are a user or lead through the role attribute.\n\nContact Object\nKey\tType\tDescription\ntype\tString\tThe type of object - contact.\nid\tString\tThe unique identifier for the contact which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the contact belongs to.\nexternal_id\tString\tA unique identifier for the contact which is given to Intercom.\nrole\tString\tThe role of the contact - user or lead.\nemail\tString\tThe contacts email.\nphone\tString\tThe contacts phone.\nname\tString\tThe contacts name.\navatar\tString\tAn image URL containing the avatar of a contact.\nowner_id\tInteger\tThe id of an admin that has been assigned account ownership of the contact.\nsocial_profiles\tList\tA list of social profiles associated to the contact.\nhas_hard_bounced\tBoolean\tWhether the contact has had an email sent to them hard bounce.\nmarked_email_as_spam\tBoolean\tWhether the contact has marked an email sent to them as spam.\nunsubscribed_from_emails\tBoolean\tWhether the contact is unsubscribed from emails.\ncreated_at\tDate (UNIX timestamp)\tThe time when the contact was created.\nupdated_at\tDate (UNIX timestamp)\tThe time when the contact was last updated.\nsigned_up_at\tDate (UNIX timestamp)\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nlast_replied_at\tDate (UNIX timestamp)\tThe time when the contact last messaged in.\nlast_contacted_at\tDate (UNIX timestamp)\tThe time when the contact was last messaged.\nlast_email_opened_at\tDate (UNIX timestamp)\tThe time when the contact last opened an email.\nlast_email_clicked_at\tDate (UNIX timestamp)\tThe time when the contact last clicked a link in an email.\nlanguage_override\tString\tA preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.\nbrowser\tString\tThe name of the browser which the contact is using.\nbrowser_version\tString\tThe version of the browser which the contact is using.\nbrowser_language\tString\tThe language set by the browser which the contact is using.\nos\tString\tThe operating system which the contact is using.\nlocation\tObject\tAn object showing location details of the contact.\nandroid_app_name\tString\tThe name of the Android app which the contact is using.\nandroid_app_version\tString\tThe version of the Android app which the contact is using.\nandroid_device\tString\tThe Android device which the contact is using.\nandroid_os_version\tString\tThe version of the Android OS which the contact is using.\nandroid_sdk_version\tString\tThe version of the Android SDK which the contact is using.\nandroid_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the Android app.\nios_app_name\tString\tThe name of the iOS app which the contact is using.\nios_app_version\tString\tThe version of the iOS app which the contact is using.\nios_device\tString\tThe iOS device which the contact is using.\nios_os_version\tString\tThe version of iOS which the contact is using.\nios_sdk_version\tString\tThe version of the iOS SDK which the contact is using.\nios_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the iOS app.\ncustom_attributes\tObject\tThe custom attributes which are set for the contact.\ntags\tAddressable List\tThe tags which have been added to the contact.\nnotes\tAddressable List\tThe notes which have been added to the contact.\ncompanies\tAddressable List\tThe companies which the contact belongs to.\nLocation Object\nKey\tType\tDescription\ntype\tString\tThe type of object - location.\ncountry\tString\tThe country where the contact is.\nregion\tString\tA subdivision of the country which the contact is in (ie. state, province, county, territory, etc).\ncity\tString\tThe city where the contact is.\nSocial Profile Object\nKey\tType\tDescription\ntype\tString\tThe type of object - social_profile.\nname\tString\tThe name of the service (ie. Twitter, Facebook, etc).\nurl\tString\tThe profile page for the contact on the service.\nAddressable List\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\ndata\tArray\tAn array of Addressable Objects. Maximum of 10.\nurl\tString\tThe URL where the full list can be accessed (ie. /contacts/1234/companies).\ntotal_count\tInteger\tThe total amount of records.\nhas_more\tBoolean\tWhether there's more Addressable Objects to be viewed. If true, use the url to view all.\nAddressable Object\nKey\tType\tDescription\ntype\tString\tThe type of object - company, note, tag.\nid\tString\tThe id of the object.\nurl\tString\tThe URL where the object in question can be accessed (ie. /companies/45678)."
  },
  {
    "title": "Conversation Model",
    "url": "https://developers.intercom.com/docs/references/1.1/rest-api/conversations/conversation-model/",
    "html": "Conversation Model\nExample Conversation Object\n{\n    \"assignee\": {\n        \"id\": \"814860\",\n        \"type\": \"admin\"\n    },\n    \"conversation_message\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 25,\n        \"type\": \"conversation_part.list\"\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"customer\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"created_at\": 1539897198,\n    \"customer_first_reply\": {\n        \"created_at\": 1539897198,\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"customers\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"id\": \"1911149811\",\n    \"open\": true,\n    \"read\": true,\n    \"sent_at\": 1539897198,\n    \"snoozed_until\": null,\n    \"state\": \"open\",\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\"\n    },\n    \"type\": \"conversation\",\n    \"updated_at\": 1540393270,\n    \"user\": {\n        \"id\": \"5bc8f7421ffae2d96695c18a\",\n        \"type\": \"lead\"\n    },\n    \"waiting_since\": 64654125776\n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"assignee\":{\n      \"type\":\"admin\",\n      \"id\":\"1223334\"\n   },\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\":[\n\n            ],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nA conversation lets you track and describe communications with your users. Each conversation contains the message that initiated the conversation, the user involved, the admin assigned to the conversation and a list of parts describing the conversation thread. The open or closed status of the conversation is also provided.\n\nConversation Object\nAttribute\tType\tDescription\ntype\tstring\tAlways conversation.\nid\tstring\tThe id representing the conversation.\ncreated_at\ttimestamp\tThe time the conversation was created.\nupdated_at\ttimestamp\tThe last time the conversation was updated.\nwaiting_since\ttimestamp\tThe last time a customer responded to an admin. In other words, the time a customer started waiting for a response.\nsnoozed_until\ttimestamp\tIf set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time.\nconversation_message\tMessage\tThe message that started the conversation rendered for presentation.\nuser\tUser\tThe user the conversation concerns.\ncustomers\tList of customers objects\tThe list of customers (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature\ncustomer_first_reply\tObject\tAn object containing information on the first users message. For a user initiated message this will represent the users original message.\nassignee\tAdmin\tThe admin the conversation is currently assigned to. Note nobody_admin indicates the conversation is assigned to Nobody.\nconversation_parts\tObject\tA conversation part object with a list of conversation parts.\nopen\tBoolean\tIndicates whether a conversation is open (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\ntags\tList\tA list of tags associated with the conversation.\ntotal_count\tInteger\tThe number of conversation parts in this conversation.\nconversation_rating\tobject\tA conversation rating object which contains information on the rating and/or remark added by a customer and the admin assigned to the conversation.\nWAITING_SINCE 2000 YEARS IN THE FUTURE?\n\nWaiting since lets you identify how long a customer has been waiting for a response. This time, however, is not always relevant. For example, when the last person to respond was an admin, or the conversation was closed after a user response (e.g. \"thanks, bye\"). In these cases we will set the date to 2000 years in the future.\n\nMessage Object\nAttribute\tType\tDescription\ntype\tstring\tThis includes conversation, push, facebook, twitter and email.\nid\tstring\tThe id representing the message.\nsubject\tstring\tOptional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tstring\tThe message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tAdmin\tThe type of individual that sent the message (user, lead, admin or team) and their related id. For Twitter, this will be blank.\nattachments\tlist\tA list of attachments for the part\nurl\tstring\tThe URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.\ndelivered_as\tString\tHow was the message delivered by Intercom. They types of delivery are customer_initiated, automated, campaigns_initiated, admin_initiated, and operator_initiated.\nNOTE\n\nPlease note that URLs for User uploaded images & files have a 30 minute expiration. Once the expiration has passed, the link will no longer be valid and result in a 404. This means that if a URL is copied, and then reused elsewhere, it will continue to work until the expiry threshold. A new URL can be generated by fetching the conversation data again.\n\nCustomers object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nCustomer first reply object\nAttribute\t\t\ntype\tstring\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nurl\tstring\tThe URL where the first reply originated from. For Twitter and Email replies, this will be blank.\ncreated_at\ttimestamp\tThe time the users messages was created. This is in unix timestamp format.\nCUSTOMER_FIRST_REPLY SET TO NULL\n\nIf a user has not replied to an Intercom initiated message (e.g. auto messages, admin initiated messages, campaigns) then the customer_first_reply attribute will be null"
  },
  {
    "title": "The admin model",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/admins/admin-model/",
    "html": "The admin model\nExample Object\n{\n    \\\"type\\\": \\\"admin\\\",\n    \\\"id\\\": \\\"493881\\\",\n    \\\"name\\\": \\\"Hoban Washburne\\\",\n    \\\"email\\\": \\\"wash@serenity.io\\\",\n    \\\"job_title\\\": \\\"Philosopher\\\",\n    \\\"away_mode_enabled\\\": false,\n    \\\"away_mode_reassign\\\": false,\n    \\\"has_inbox_seat\\\": true,\n    \\\"team_ids\\\": [\n        814865\n    ]\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\nINFORMATION ON `HAS_INBOX_SEAT`\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "Admin Model",
    "url": "https://developers.intercom.com/docs/references/1.1/rest-api/admins/admin-model/",
    "html": "Admin Model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\nAdmin Object\nAttribute\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right.e\n\nErrors for admins without inbox seats\nJSON\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "List Users",
    "url": "https://developers.intercom.com/docs/references/1.1/rest-api/users/list-users/",
    "html": "List Users\nList Users Example\ncurlcurlrubyphpjava\n$ curl https://api.intercom.io/users \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept: application/json'\n\nHTTP/1.1 200 OK{  \\\"type\\\": \\\"user.list\\\",  \\\"total_count\\\": 105,  \\\"users\\\": [    {      \\\"type\\\": \\\"user\\\",      \\\"id\\\": \\\"530370b477ad7120001d\\\",       ...     },     ...   ],  \\\"pages\\\": {    \\\"next\\\": \\\"https://api.intercom.io/users?per_page=50&page=2\\\",    \\\"page\\\": 1,    \\\"per_page\\\": 50,    \\\"total_pages\\\": 3  }}# NB: Full User objects are returned\n\n\nYou can fetch a list of users. The user list is sorted by the created_at field and by default is ordered descending, most recently created first.\n\nRequest Parameters\n\nYou can optionally request the result page size and which page to fetch as follows -\n\nParameter\tRequired\tDescription\npage\tno\twhat page of results to fetch defaults to first page.\nper_page\tno\thow many results per page defaults to 50, max is 60.\norder\tno\tasc or desc. Return the users in ascending or descending order. defaults to desc.\nsort\tno\twhat field to sort the results by. Valid values: created_at, last_request_at, signed_up_at, updated_at,\ncreated_since\tno\tlimit results to users that were created in that last number of days.\nReturns\n\nA pageable list of users. The user list contains a pages object that indicates if more users exist via the next field, whose value is a URL that can be used to fetch the next page. If the next field is not present, that indicates there are no further users in the list.\n\nWhen using the Users endpoint and the pages object to iterate through the returned users, there is a limit of 10,000 Users that can be returned. If you need to list or iterate on more than 10,000 Users, please use the Scroll API."
  },
  {
    "title": "Create a ticket type",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Ticket-Types/createTicketType/",
    "html": "You can create a new ticket type.\n\n📘 Creating ticket types.\n\nEvery ticket type will be created with two default attributes: default_title and default_description. For the icon propery, use an emoji from Twemoji Cheatsheet"
  },
  {
    "title": "The conversation model",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/conversations/conversation-model/",
    "html": "The conversation model\nExample Conversation Object\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\"\n        }\n    ],\n    \"assignee\": {\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    },\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contact_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"assignee\":{\n      \"type\":\"admin\",\n      \"id\":\"1223334\"\n   },\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\":[\n\n            ],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nConversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.\n\nConversation Object\nKey\tType\tDescription\ntype\tString\tAlways conversation.\nid\tString\tThe id representing the conversation.\ncreated_at\tTimestamp\tThe time the conversation was created.\nupdated_at\tTimestamp\tThe last time the conversation was updated.\nsource\tObject\tThe Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated.\ncontacts\tList\tThe list of contacts (users or leads) involved in this conversation.\nThis will only contain one customer unless more were added via the group conversation feature.\nteammates\tList\tThe list of teammates who participated in the conversation (wrote at least one conversation part).\nassignee\tObject\tThe Admin or Team assigned to the conversation. If it's unassigned it will return null.\nopen\tBoolean\tIndicates whether a conversation is open/snoozed (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\nwaiting_since\tTimestamp\tThe last time a Contact responded to an Admin.\nIn other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.\nsnoozed_until\tTimestamp\tIf set this is the time in the future when this conversation will be marked as open.\ni.e. it will be in a snoozed state until this time.\ntags\tList\tA list of tags objects associated with the conversation.\nfirst_contact_reply\tObject\tAn object containing information on the first users message. For a contact initiated message this will represent the users original message.\npriority\tString\tIf marked as priority, it will return priority or else not_priority.\nsla_applied\tObject\tThe SLA Applied object contains the details for which SLA has been applied to this conversation.\nconversation_rating\tObject\tThe Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.\nstatistics\tObject\tA Statistics object containing all information required for reporting, with timestamps and calculated metrics.\nconversation_parts\tList\tA list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.\nSource object\nAttribute\tType\tDescription\ntype\tString\tThis includes conversation, push, facebook, twitter and email.\nid\tString\tThe id representing the message.\ndelivered_as\tString\tThe message subject.\nFor Twitter, this will show a generic message regarding why\nsubject\tString\tThe message subject.\nFor Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tObject\tThe object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nurl\tString\tThe URL where the conversation was started.\nFor Twitter, Email, and Bots, this will be blank.\nNOTE\n\nPlease note that URLs for User uploaded images & files have a 30 minute expiration. Once the expiration has passed, the link will no longer be valid and result in a 404. This means that if a URL is copied, and then reused elsewhere, it will continue to work until the expiry threshold. A new URL can be generated by fetching the conversation data again.\n\nContact Object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nTeammate Object\nAttribute\tType\tDescription\ntype\tString\tCurrently this will always be of type admin. Conversations not rated will return null.\nid\tString\tThe ID of the Admin.\nFirst Contact Reply Object\nAttribute\tType\tDescription\ntype\tString\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nurl\tString\tThe URL where the first reply originated from.\nFor Twitter and Email replies, this will be blank.\ncreated_at\tTimestamp\tThe time the users messages was created. This is in unix timestamp format.\nConversation Rating Object\nAttribute\tType\tDescription\nrating\tInteger\tThe rating, between 1 and 5, for the conversation.\nremark\tString\tAn optional field to add a remark to correspond to the number rating.\ncreated_at\tTimestamp\tThe time the rating was requested in the conversation being rated.\ncontact\tObject\tAn object containing the ID and type of the Contact.\nteammate\tObject\tAn object containing the ID and type of the Intercom teammate associated with the conversation when it was rated.\nSLA Object\nAttribute\tType\tDescription\nsla_name\tString\tThe name of the SLA as given by the teammate when it was created.\nsla_status\tString\tOne of \"hit\", \"missed\", or \"cancelled\".\nStatistics Object\nAttribute\tType\tDescription\ntime_to_assignment\tInteger\tDuration until last assignment before first admin reply. Subtracts out of business hours. In seconds.\ntime_to_admin_reply\tInteger\tDuration until first admin reply. Subtracts out of business hours. In seconds.\ntime_to_first_close\tInteger\tDuration until conversation was closed first time. Subtracts out of business hours. In seconds.\ntime_to_last_close\tInteger\tDuration until conversation was closed last time. Subtracts out of business hours. In seconds.\nmedian_time_to_reply\tInteger\tMedian based on all admin replies after a contact reply. In seconds.\nfirst_contact_reply_at\tTimestamp\tTime of first text conversation part from a contact.\nfirst_assignment_at\tTimestamp\tTime of first assignment after first_contact_reply_at.\nfirst_admin_reply_at\tTimestamp\tTime of first admin reply after first_contact_reply_at.\nfirst_close_at\tTimestamp\tTime of first close after first_contact_reply_at.\nlast_assignment_at\tTimestamp\tTime of last assignment after first_contact_reply_at.\nlast_assignment_admin_reply_at\tTimestamp\tTime of first admin reply since most recent assignment.\nlast_contact_reply_at\tTimestamp\tTime of the last conversation part from a contact.\nlast_admin_reply_at\tTimestamp\tTime of the last conversation part from an admin.\nlast_close_at\tTimestamp\tTime of the last conversation close.\nlast_closed_by\tObject\tThe last admin who closed the conversation. Returns a reference to an Admin object.\ncount_reopens\tInteger\tNumber of reopens after first_contact_reply_at.\ncount_assignments\tInteger\tNumber of assignments after first_contact_reply_at.\ncount_conversations_parts\tInteger\tTotal number of conversation parts.\nConversation Part Object\n\n🚧\n\nConversation Parts are not returned when listing or searching for all conversations, only when retrieving a single conversation. There is also a limit of 500 parts.\n\nAttribute\tType\tDescription\ntype\tString\tAlways conversation_part.\nid\tString\tThe id representing the conversation part.\npart_type\tString\tThe type of conversation part.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\ncreated_at\tTimestamp\tThe time the conversation part was created.\nupdated_at\tTimestamp\tThe last time the conversation part was updated.\nnotified_at\tTimestamp\tThe time the user was notified with the conversation part.\nassigned_to\tString\tThe id of the admin that was assigned the conversation by this conversation_part (null if there has been no change in assignment.)\nauthor\tString\tThe type of individual that sent the message (user, admin or bot) and their related id.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nConversation Part Types\nType\tDescription\ncomment\tStandard reply from customer or admin to a conversation.\nnote\tA note created by an admin on the conversation. A note will only be viewable as an admin.\nnote_and_reopen\tAdd a note and reopen the conversations in the one action.\nassignment\tAn assignment of the conversation to an admin, or Nobody.\nopen\tIdentifies a conversation has been opened.\nclose\tIdentifies a conversation has been closed.\naway_mode_assignment\tConversation has been assigned due to the admin being in away mode.\nparticipant_added\tA participant has been added to a group conversation.\nparticipant_removed\tA participant has been removed from a group conversation.\nconversation_rating_changed\tA conversation rating has been changed, not this can only occur before the rating has been submitted. Once it has been submitted it cannot be changed.\nconversation_rating_remark_added\tA conversation remark has been added to the conversation.\nsnoozed\tA conversation has been snoozed.\nunsnoozed\tA conversation has been unsnoozed.\nassign_and_unsnooze\tAssign a conversation and unsnooze it in one action..\ntimer_unsnooze\tUnsnooze a conversation after a set time."
  },
  {
    "title": "Update a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/data-attributes/update-data-attributes/",
    "html": "Update a data attribute\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes/163728 \\\\-X PUT \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept: application/json' \\\\-H 'Content-Type: application/json' -d{  \\\"description\\\": \\\"You are either great or bad\\\",  \\\"options\\\": [    {\\\"value\\\": \\\"great\\\"},    {\\\"value\\\": \\\"bad\\\"}  ]}\n\nExample Errors\nHTTP/1.1 404 NOT FOUND{  \"type\": \"error.list\",  \"request_id\": \"0006klvnje6ffng7ot80\",  \"errors\": [    {      \"code\": \"field_not_found\",      \"message\": \"We couldn't find that data attribute to update\"    }  ]}\n\nHTTP/1.1 422 UNPROCESSIBLE ENTITY{  \"type\": \"error.list\",  \"request_id\": \"0006klvnje6ffng7ot80\",  \"errors\": [    {      \"code\": \"data_invalid\",      \"message\": \"The Data Attribute you are trying to archive has a dependant object\"    }  ]}\n\nHTTP/1.1 400 BAD REQUEST{  \"type\": \"error.list\",  \"request_id\": \"0000rnvpf3m1f3nf4k40\",  \"errors\": [    {      \"code\": \"parameter_invalid\",      \"message\": \"You must have at least two options on a list type data attribute\"    }  ]}\n\n\nYou can update data attribute.\n\nRequest Body Parameters\nArgument\tType\tDescription\ndescription\tString\t(Optional) The readable description you see in the UI for the attribute.\noptions\tList\t(Optional) To change to or update list attributes. Provide a set of hashes with value as the key of the options you want to make.data_type must be string.\narchived\tBoolean\t(Optional) Whether the attribute is to be archived or not.\nUPDATING THE DATA TYPE IS NOT POSSIBLE\n\nIt is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead.\n\nResponse\n\nThis will return a Data Attribute Model showing the details of your updated attribute."
  },
  {
    "title": "The data attribute model",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/data-attributes/data-attribute-model/",
    "html": "The data attribute model\nExample Data Attribute Object\n{  \\\"type\\\": \\\"data_attribute\\\",  \\\"model\\\": \\\"contact\\\",  \\\"name\\\": \\\"paid_subscriber\\\",  \\\"full_name\\\": \\\"custom_attributes.paid_subscriber\\\",   \\\"label\\\": \\\"paid_subscriber\\\",   \\\"description\\\": \\\"\\\",  \\\"data_type\\\": \\\"string\\\",   \\\"options\\\": [    \\\"pick_value_1\\\",    \\\"pick_value_2\\\"  ],  \\\"api_writable\\\": true,   \\\"ui_writable\\\": true,   \\\"custom\\\": true,   \\\"archived\\\": false,   \\\"admin_id\\\": \\\"1\\\",  \\\"created_at\\\": 1392734388,  \\\"updated_at\\\": 1392734388}\n\n\nData Attributes are a type of metadata used to describe your contact and company models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes.\n\nData Attribute Object\nKey\tType\tDescription\ntype\tstring\tValue is 'data_attribute'\nmodel\tstring\tValue is contact for user/lead attributes, and company for company attributes.\nname\tstring\tName of the attributeExamples:email``region_name for region_name stored in location_data objectimage_url for image_url stored in avatar objectpaid_subscriber for CDA named paid_subscriber\nfull_name\tstring\tFull name of the attribute. Should match the name unless it's a nested attribute.Examples:email``location_data.region_name``avatar.image_url``custom_attributes.paid_subscriberWe can split full_name on . to access nested user object values.\nlabel\tstring\tReadable name of the attribute (i.e. name you see in the UI)\ndescription\tstring\tReadable description of the attribute\ndata_type\tstring\tType of data stored in the attribute.Possible values: string``integer``float``boolean``date\noptions\tlist\tList of predefined options for attribute value\napi_writable\tboolean\tCan this attribute be updated through API\nui_writable\tboolean\tCan this attribute be updated in the UI\ncustom\tboolean\tSet to true if this is a CDA\narchived\tboolean\tOnly applicable to CDAs\ncreated_at\ttimestamp\tThe time the CDA was created.Only applicable to CDAs.\nupdated_at\ttimestamp\tThe last time the CDA was updated.Only applicable to CDAs\nadmin_id\tstring\tTeammate who created the attribute.Only applicable to CDAs"
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/data-attributes/create-data-attributes/",
    "html": "Create a data attribute\nExample Requests & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept: application/json' \\\\-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"list_cda\\\",  \\\"description\\\": \\\"You are either alive or dead\\\",  \\\"data_type\\\": \\\"options\\\",  \\\"model\\\": \\\"contact\\\",  \\\"options\\\": [    {\\\"value\\\": \\\"alive\\\"},    {\\\"value\\\": \\\"dead\\\"}  ]}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0006klvnje6ffng7ot80\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You already have 'text_cda' in your people data. To save this as new company data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Your name for this attribute must only contain alphanumeric characters, currency symbols, and hyphens\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"'Name' is one of our standard attributes for your people data. To save this as new people data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Data Type isn't an option\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You must have at least two options on a list type data attribute\"\n    }\n  ]\n}\n\n\nYou can create a data attributes for a contact or a company.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nname\tstring\tThe name of the attribute.\nmodel\tString\tThe model where the attribute applies to. Accepts contact or company .\ndata_type\tstring\tThe type of data stored for this attribute. Accepted values are string, fixnum, integer, float, boolean, date, options.\ndescription\tstring\t(Optional) The readable description you see in the UI for the attribute.\noptions\tarray\t(Optional) To create list attributes. Provide a set of hashes with value as the key of the options you want to make.\nResponse\n\nThis will return a Data Attribute Model showing the details of your created attribute."
  },
  {
    "title": "Search for contacts",
    "url": "https://developers.intercom.com/docs/references/2.0/rest-api/contacts/search-for-contacts/",
    "html": "Search for contacts\n\nYou can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\nWHY IS THERE A DELAY WHEN CREATING CONTACTS AND SEARCHING FOR THEM?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a customer that you can search for. See all accepted fields below.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\nNESTING & LIMITATIONS\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\\There are some limitations to the amount of multiple's there can be:\\_ There's a limit of max 2 nested filters_ There's a limit of max 15 filters for each AND or OR group\n\nExample Request (Single Filter)\nRequest\n{ \\\"query\\\":  {    \\\"field\\\": \\\"custom_attributes.salesforce_status\\\",    \\\"operator\\\": \\\"~\\\",    \\\"value\\\": \\\"open\\\"  }}\n\nExample Request (Multiple Filters)\njsonjson\n{ \\\"query\\\":  {    \\\"operator\\\": \\\"AND\\\",    \\\"value\\\": [      {        \\\"field\\\": \\\"custom_attributes.social_network\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": \\\"facebook\\\"      },       {        \\\"field\\\": \\\"custom_attributes.social_network\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": \\\"twitter\\\"      },      {        \\\"field\\\": \\\"custom_attributes.social_network\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": \\\"instagram\\\"      }    ]  }}\n\n{ \\\"query\\\":  {    \\\"field\\\": \\\"custom_attributes.social_network\\\",    \\\"operator\\\": \\\"IN\\\",    \\\"value\\\": [\\\"facebook\\\", \\\"twitter\\\", \\\"instagram\\\"]  }}\n\nExample Request (Nested Filters)\nRequest\n{ \\\"query\\\":  {    \\\"operator\\\": \\\"AND\\\",    \\\"value\\\": [      {        \\\"operator\\\": \\\"OR\\\",        \\\"value\\\": [          {            \\\"field\\\": \\\"created_at\\\",            \\\"operator\\\": \\\">\\\",            \\\"value\\\": 1560436650          },           {            \\\"field\\\": \\\"signed_up_at\\\",            \\\"operator\\\": \\\">\\\",            \\\"value\\\": 1560436784          }        ]      },      {        \\\"operator\\\": \\\"OR\\\",        \\\"value\\\": [          {            \\\"field\\\": \\\"custom_attributes.salseforce_status\\\",            \\\"operator\\\": \\\"~\\\",            \\\"value\\\": \\\"Open\\\"          },           {            \\\"field\\\": \\\"custom_attributes.salesforce_object_type\\\",            \\\"operator\\\": \\\"=\\\",            \\\"value\\\": \\\"Lead\\\"          }        ]      }    ]  }}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"email does not support operator: >\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nAccepted Fields\nSEARCHING FOR TIMESTAMP FIELDS\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.\\For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.\\If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).\\This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals (case sensitive)\n!=\tAll\tDoesn't Equal (case sensitive)\nIN\tAll\tIn Shortcut for OR queries Values must be in Array\nNIN\tAll\tNot In Shortcut for OR ! queries Values must be in Array\n>\tInteger Date (UNIX Timestamp)\tGreater than\n<\tInteger Date (UNIX Timestamp)\tLower than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Contact model that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "Conversation Model",
    "url": "https://developers.intercom.com/docs/references/1.2/rest-api/conversations/conversation-model/",
    "html": "Conversation Model\nExample Conversation Object\n{\n    \"assignee\": {\n        \"id\": \"814860\",\n        \"type\": \"admin\"\n    },\n    \"conversation_message\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 25,\n        \"type\": \"conversation_part.list\"\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"customer\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"created_at\": 1539897198,\n    \"customer_first_reply\": {\n        \"created_at\": 1539897198,\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"customers\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"id\": \"1911149811\",\n    \"open\": true,\n    \"read\": true,\n    \"sent_at\": 1539897198,\n    \"snoozed_until\": null,\n    \"state\": \"open\",\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\"\n    },\n    \"type\": \"conversation\",\n    \"updated_at\": 1540393270,\n    \"user\": {\n        \"id\": \"5bc8f7421ffae2d96695c18a\",\n        \"type\": \"lead\"\n    },\n    \"waiting_since\": 64654125776\n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"assignee\":{\n      \"type\":\"admin\",\n      \"id\":\"1223334\"\n   },\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\":[\n\n            ],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nA conversation lets you track and describe communications with your users. Each conversation contains the message that initiated the conversation, the user involved, the admin assigned to the conversation and a list of parts describing the conversation thread. The open or closed status of the conversation is also provided.\n\nConversation Object\nAttribute\tType\tDescription\ntype\tstring\tAlways conversation.\nid\tstring\tThe id representing the conversation.\ncreated_at\ttimestamp\tThe time the conversation was created.\nupdated_at\ttimestamp\tThe last time the conversation was updated.\nwaiting_since\ttimestamp\tThe last time a customer responded to an admin. In other words, the time a customer started waiting for a response. Set to null if last reply is from an admin.\nsnoozed_until\ttimestamp\tIf set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time.\nconversation_message\tMessage\tThe message that started the conversation rendered for presentation.\nuser\tUser\tThe user the conversation concerns.\ncustomers\tList of customers objects\tThe list of customers (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature.\ncustomer_first_reply\tObject\tAn object containing information on the first users message. For a user initiated message this will represent the users original message.\nassignee\tAdmin\tThe admin the conversation is currently assigned to. Note nobody_admin indicates the conversation is assigned to Nobody.\nconversation_parts\tObject\tA conversation part object with a list of conversation parts.\nopen\tBoolean\tIndicates whether a conversation is open (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\ntags\tList\tA list of tags associated with the conversation.\ntotal_count\tInteger\tThe number of conversation parts in this conversation.\nconversation_rating\tobject\tA conversation rating object which contains information on the rating and/or remark added by a customer and the admin assigned to the conversation.\nMessage Object\nAttribute\tType\tDescription\ntype\tstring\tThis includes conversation, push, facebook, twitter and email.\nid\tstring\tThe id representing the message.\ndelivered_as\tstring\tHow was the message delivered by Intercom. They types of delivery are customer_initiated, automated, campaigns_initiated, admin_initiated, and operator_initiated.\nsubject\tstring\tOptional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tstring\tThe message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tAdmin\tThe type of individual that sent the message (user, lead, admin or team) and their related id. For Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nurl\tstring\tThe URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.\nNOTE\n\nPlease note that URLs for User uploaded images & files have a 30 minute expiration. Once the expiration has passed, the link will no longer be valid and result in a 404. This means that if a URL is copied, and then reused elsewhere, it will continue to work until the expiry threshold. A new URL can be generated by fetching the conversation data again.\n\nCustomers object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nCustomer First reply object\n\t\t\nChannel\tString\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nURL\tString\tThe URL where the first reply originated from. For Twitter and Email replies, this will be blank.\nCreated_at\tTimestamp\tThe time the users messages was created. This is in unix timestamp format.\nCUSTOMER_FIRST_REPLY SET TO NULL\n\nIf a user has not replied to an Intercom initiated message (e.g. auto messages, admin initiated messages, campaigns) then the customer_first_reply attribute will be null"
  },
  {
    "title": "List all data attributes",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/data-attributes/list-data-attributes/",
    "html": "List all data attributes\nExample Request & Response\ncurlcurl\n$ curl https://api.intercom.io/data_attributes?model=contact-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'\n\n{  \\\"type\\\": \\\"list\\\",  \\\"data\\\": [    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"customer\\\",      \\\"name\\\": \\\"paid_subscriber\\\",      \\\"full_name\\\": \\\"custom_attributes.paid_subscriber\\\",      \\\"label\\\": \\\"paid_subscriber\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"options\\\": [        \\\"pick_value_1\\\",        \\\"pick_value_2\\\"      ],      \\\"api_writable\\\": true,      \\\"ui_writable\\\": true,      \\\"custom\\\": true,      \\\"archived\\\": false,      \\\"admin_id\\\": \\\"1\\\",      \\\"created_at\\\": 1392734388,      \\\"updated_at\\\": 1392734388    },    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"customer\\\",      \\\"name\\\": \\\"region_name\\\",      \\\"full_name\\\": \\\"location_data.region_name\\\",      \\\"label\\\": \\\"Region\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"api_writable\\\": false,      \\\"ui_writable\\\": true,      \\\"custom\\\": false,      \\\"archived\\\": false    },    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"company\\\",      \\\"name\\\": \\\"plan\\\",      \\\"full_name\\\": \\\"plan\\\",      \\\"label\\\": \\\"Plan\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"api_writable\\\": true,      \\\"ui_writable\\\": true,      \\\"custom\\\": false,      \\\"archived\\\": false    },    {      \\\"type\\\": \\\"data_attribute\\\",      \\\"model\\\": \\\"conversation\\\",      \\\"name\\\": \\\"priority\\\",      \\\"full_name\\\": \\\"priority\\\",      \\\"label\\\": \\\"Priority\\\",      \\\"description\\\": \\\"\\\",      \\\"data_type\\\": \\\"string\\\",      \\\"api_writable\\\": true,      \\\"ui_writable\\\": true,      \\\"custom\\\": true,      \\\"archived\\\": false    }  ]}\n\n\nYou can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\nmodel\tString\tNo\tSpecify the data attribute model to return. Possible values are contact, company and conversation.\ninclude_archived\tBoolean\tNo\tInclude archived attributes in the list.By default we return only non archived data attributes.\nResponse\n\nThis will return a List of Data Attribute Models."
  },
  {
    "title": "View admin activity logs",
    "url": "https://developers.intercom.com/docs/references/1.2/rest-api/admins/view-admin-activity-logs/",
    "html": "View admin activity logs\nExample Request\ncURL\ncurl https://api.intercom.io/admins/activity_logs?created_at_after=489222000&created_at_before=685695600 \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json'\n\nExample Response\nHTTP/1.1 200 OK\n{\n\t\"type\": \"activity_log.list\",\n  \"pages\": {\n\t\t\"type\": \"pages\",\n\t\t\"next\": nil,\n\t\t\"page\": 1,\n\t\t\"per_page\": 20,\n\t\t\"total_pages\": 1\n\t},\n  \"activity_logs\": [{\n  \t\"id\": \"6\",\n  \t\"performed_by\": {\n    \t\"type\": \"admin\",\n    \t\"id\": \"123456\",\n    \t\"email\": \"jane.doe@company.com\",\n    \t\"ip\": \"127.0.0.1\"\n  \t},\n  \t\"metadata\": {\n    \t\"message\"; {\n      \t\"id\": 123,\n      \t\"title\": \"salt&vinegar\"\n        },\n       \"before\": \"before\",\n       \"after\": \"after\"\n    \t},\n  \t\"created_at\": 1547669358,\n  \t\"activity_type\": \"message_state_change\",\n  \t\"activity_description\"\" \"Jane Doe changed your salt&vinegar message from before to after.\"\n  }]\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"parameter_not_found\\\",\\n\\t\\\"message\\\" => \\\"Please provide the following parameters: created_at_after\\\"\\n  }]\\n}\\n\n\nHTTP/1.1 403 RESTRICTED\\n{\\n  \\\"type\\\" => \\\"error.list\\\",\\n  \\\"request_id\\\" => nil,\\n  \\\"errors\\\" => [{\\n\\t\\\"code\\\" => \\\"api_plan_restricted\\\",\\n\\t\\\"message\\\" => \\\"This feature is not yet available to your app\\\"\\n  }]\\n}\n\n\nYou can get a log of activities by all admins in an app by sending a GET request to the URL https://api.intercom.io/admins/activity_logs.\n\nActivity List\nAttribute\tType\tDescription\ntype\tstring\tValue is activity_log.list\nactivity_logs\tarray\tA list of activity objects\npages\tobject\tOptional. A pagination object which may be empty, indication no further pages to fetch\nActivity Object\nAttribute\tType\tDescription\nactivity_type\tstring\tThe type of activity - see Activity Types & Descriptions below.\nactivity_description\tstring\tA sentence or two describing the activity - see Activity Types & Descriptions below.\nmetadata\tobject\tAn object containing information on the activity and what it modified\ncreated_at\ttimestamp\tThe time the activity was performed\nperformed_by\tobject\tAn Admin object of the admin who performed the activity\nid\tstring\tThe id representing the activity\nActivity Types & Descriptions\nType\tDescription\nadmin_deletion\tAn admin was removed from your app\nadmin_invite_change\tThe permissions for an invited person to be an admin on your app were changed\nadmin_invite_creation\tSomeone was invited to be an admin on your app\nadmin_invite_deletion\tSomeone is no longer invited to be an admin on your app\nadmin_login_failure\tAn admin tried to login with the wrong credentials\nadmin_login_success\tAn admin logged in successfully\nadmin_logout\tAn admin logged out\nadmin_permission_change\tThe permissions for an admin were changed\napp_name_change\tThe name of your app was changed\nadmin_away_mode\tAn admin changed their away mode and conversation reassignment settings\napp_timezone_change\tThe timezone of your app was changed\nbulk_export\tUser or lead data was exported from your app\nmessage_deletion\tA message was deleted from your app\nmessage_state_change\tA message was changed on your app\ncampaign_deletion\tA campaign was deleted from your app\napp_identity_verification_change\tThe identity verification setting was changed on your app\napp_package_token_regeneration\tAn access token for a specific app package was updated\napp_authentication_method_change\tThe authentication methods were changed for you app\napp_data_deletion\tA user or lead was deleted from your app\napp_outbound_address_change\tThe outbound email address was changed for your app\napp_webhook_creation\tA webhook subscription was created for your app\napp_webhook_deletion\tA webhook subscription was deleted for your app\napp_admin_join\tAn admin joined your app (i.e., accepted your invite)\ncampaign_state_change\tA campaign was changed on your app\napp_team_creation\tA team was created for your app\napp_team_deletion\tA team was deleted from you app\napp_package_installation\tAn app package was installed on your app\napp_package_uninstallation\tAn app package was uninstalled from your app\napp_data_export\tMessage or conversation data was exported from your app\nhelp_center_settings_change\tYour help center was turned on or off\nRequest Parameters\nParameter\tRequired?\tDescription\ncreated_at_after\tYes\tThe start date that you request data for. It must be formatted as a UNIX timestamp.\ncreated_at_before\tNo\tThe end date that you request data for. It must be formatted as a UNIX timestamp.\nReturns\n\nThis will return an Activity List which will contain an array titled activity_logs, in turn containing multiple Activity Objects."
  },
  {
    "title": "Admin Model",
    "url": "https://developers.intercom.com/docs/references/1.0/rest-api/admins/admin-model/",
    "html": "Admin Model\nExample Object\n{\n    \"type\": \"admin\",\n    \"id\": \"493881\",\n    \"name\": \"Hoban Washburne\",\n    \"email\": \"wash@serenity.io\",\n    \"job_title\": \"Philosopher\",\n    \"away_mode_enabled\": false,\n    \"away_mode_reassign\": false,\n    \"has_inbox_seat\": true,\n    \"team_ids\": [\n        814865\n    ]\n}\n\nAdmin Object\nAttribute\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\n❗️ Information on has_inbox_seat\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations\nAssigning a conversation to an admin or a team\nAdding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right.\n\nErrors for admins without inbox seats\n{\n    \"type\": \"error.list\",\n    \"request_id\": \"0002miv9og586ig3aln0\",\n    \"errors\": [\n        {\n            \"code\": \"action_forbidden\",\n            \"message\": \"This admin does not have Inbox access permissions\"\n        }\n    ]\n}\n"
  },
  {
    "title": "Admin Model",
    "url": "https://developers.intercom.com/docs/references/1.2/rest-api/admins/admin-model/",
    "html": "Admin Model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\nAdmin Object\nAttribute\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right.\n\nErrors for admins without inbox seats\nJSON\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n"
  },
  {
    "title": "The admin model",
    "url": "https://developers.intercom.com/docs/references/2.1/rest-api/admins/admin-model/",
    "html": "The admin model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/2.1/rest-api/articles/list-all-articles/",
    "html": "List all articles\nExample Request & Response (Single Language Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X GET \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\n\n\nYou can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\nResponse\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\npages\tObject\tA Pages object with the information needed to paginate through Articles.\ntotal_count\tInteger\tA count of the total number of articles.\ndata\tArray\tAn array of Article Objects.\nHOW ARE THE ARTICLES SORTED AND ORDERED?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "Retrieve a ticket",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/getTicket/",
    "html": "You can fetch the details of a single ticket."
  },
  {
    "title": "Create a ticket",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/createTicket/",
    "html": "You can create a new ticket."
  },
  {
    "title": "Contact",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/requestobjects/contact/",
    "html": "Contact\nDescription\n\nThe contact object provides information on the Intercom contact. You can see more about this on the Contacts Model page of our API Reference.\n\nExample Object\n{\n  \"type\": \"contact\",\n  \"id\": \"5ba682d23d7cf92bef87bfd4\",\n  \"workspace_id\": \"ecahpwf5\",\n  \"external_id\": \"25\",\n  \"role\": \"user\",\n  \"email\": \"wash@serenity.io\",\n  \"phone\": \"+1123456789\",\n  \"name\": \"Hoban Washburn\",\n  \"avatar\": \"https://example.org/128Wash.jpg\",\n  \"owner_id\": 127,\n  \"social_profiles\": {\n    \"type\": \"list\",\n    \"data\": [\n      {\n        \"type\": \"social_profile\",\n        \"name\": \"Twitter\",\n        \"url\": \"http://twitter.com/th1sland\"\n      }\n    ]\n  },\n  \"has_hard_bounced\": false,\n  \"marked_email_as_spam\": false,\n  \"unsubscribed_from_emails\": false,\n  \"created_at\": 1571672154,\n  \"updated_at\": 1571672158,\n  \"signed_up_at\": 1571069751,\n  \"last_seen_at\": 1571069751,\n  \"last_replied_at\": 1571672158,\n  \"last_contacted_at\": 1571672158,\n  \"last_email_opened_at\": 1571673478,\n  \"last_email_clicked_at\": 1571676789,\n  \"language_override\": null,\n  \"browser\": \"chrome\",\n  \"browser_version\": \"77.0.3865.90\",\n  \"browser_language\": \"en\",\n  \"os\": \"OS X 10.14.6\",\n  \"location\": {\n    \"type\": \"location\",\n    \"country\": \"Ireland\",\n    \"region\": \"Dublin\",\n    \"city\": \"Dublin\"\n  },\n  \"android_app_name\": null,\n  \"android_app_version\": null,\n  \"android_device\": null,\n  \"android_os_version\": null,\n  \"android_sdk_version\": null,\n  \"android_last_seen_at\": null,\n  \"ios_app_name\": null,\n  \"ios_app_version\": null,\n  \"ios_device\": null,\n  \"ios_os_version\": null,\n  \"ios_sdk_version\": null,\n  \"ios_last_seen_at\": null,\n  \"custom_attributes\": {\n    \"paid_subscriber\": true,\n    \"monthly_spend\": 155.5,\n    \"team_mates\": 1\n  },\n  \"tags\": {\n    \"type\": \"list\",\n    \"data\": [\n      {\n        \"type\": \"tag\",\n        \"id\": \"2\",\n        \"url\": \"/tags/2\"\n      },\n      {\n        \"type\": \"tag\",\n        \"id\": \"4\",\n        \"url\": \"/tags/4\"\n      },\n      {\n        \"type\": \"tag\",\n        \"id\": \"5\",\n        \"url\": \"/tags/5\"\n      }\n    ],\n    \"url\": \"/contacts/5ba682d23d7cf92bef87bfd4/tags\",\n    \"total_count\": 3,\n    \"has_more\": false\n  },\n  \"notes\": {\n    \"type\": \"list\",\n    \"data\": [\n      {\n        \"type\": \"note\",\n        \"id\": \"20114858\",\n        \"url\": \"/notes/20114858\"\n      }\n    ],\n    \"url\": \"/contacts/5ba682d23d7cf92bef87bfd4/notes\",\n    \"total_count\": 1,\n    \"has_more\": false\n  },\n  \"companies\": {\n    \"type\": \"list\",\n    \"data\": [\n      {\n        \"type\": \"company\",\n        \"id\": \"5ba686093d7cf93552a3dc99\",\n        \"url\": \"/companies/5ba686093d7cf93552a3dc99\"\n        \n      },\n      {\n        \"type\": \"company\",\n        \"id\": \"5cee64a03d7cf90c51b36f19\",\n        \"url\": \"/companies/5cee64a03d7cf90c51b36f19\"\n      },\n      {\n        \"type\": \"company\",\n        \"id\": \"5d7668883d7cf944dbc5c791\",\n        \"url\": \"/companies/5d7668883d7cf944dbc5c791\"\n      }\n    ],\n    \"url\": \"/contacts/5ba682d23d7cf92bef87bfd4/companies\",\n    \"total_count\": 3,\n    \"has_more\": false\n  }\n}\n"
  },
  {
    "title": "Context",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/requestobjects/context/",
    "html": "Context\nDescription\n\nThe context object provides additional details on where the app has been added (or is currently being used), what page the app is being used on, and information on the Messenger settings. This is in order for you give a fully customised experience based on the customers use case.\n\nIf the location is conversation then you will also be given a conversation_id. If you need to use details about the conversation, then you have to use the conversation_id to make a call to our Conversations API and retrieve the conversation object.\n\nAttributes\nKey\tType\tLocation\tDescription\nconversation_id\tinteger\tConversation\tThe id of the conversation where the app is added or being used.\nlocation\tstring\tConversation, Messenger Home, Message, Operator\tWhere the app is added or the action took place. Can be either 'conversation', 'home', 'message', or 'operator'.\nlocale\tstring\tConversation, Messenger Home, Message, Operator\tThe default end-user language of the Messenger. Use to localise Messenger App content.\nmessenger_action_colour\tstring\tConversation, Messenger Home, Message, Operator\tThe messengers action colour. Use in Sheets and Icons to make a Messenger App experience feel part of the host Messenger.\nmessenger_background_colour\tstring\tConversation, Messenger Home, Message, Operator\tThe messengers background colour. Use in Sheets and Icons to make a Messenger App experience feel part of the host Messenger.\nreferrer\tstring\tConversation, Messenger Home, Message, Operator\tThe current page URL where the app is being used.\nExample Objects\n{\n  conversation_id: 4294967297,\n  locale: \"en\", \n  location: \"conversation\",\n  messenger_action_color: \"#333333\",\n  messenger_background_color: \"#333333\",\n  referrer: \"https://intercom.com/\"\n}\n\n{\n  locale: \"en\", \n  location: \"conversation\",\n  messenger_action_color: \"#333333\",\n  messenger_background_color: \"#333333\",\n  referrer: \"https://intercom.com/\"\n}\n"
  },
  {
    "title": "Single select",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/single-select/",
    "html": "Single select\n\nselect component is used to capture a choice from up to 10 options that you provide. You can submit the value of the select option by:\n\nAdding an action to the single-select component\nUsing a button component (which will submit all interactive components in the canvas)\n\nWhen a submit action takes place, the results are given in a hash with the id from the single-select component used as the key and the id from the chosen option as the value.\n\nSingle-Select Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tsingle-select\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the component.\noptions\tArray (See Below)\tYes\tThe list of options.Can provide 2 to 10.\nlabel\tAny string\tNo\tThe text shown above the options.\nvalue\tThe id of an option\tNo\tThe option that is selected by default.\nsave_state\tunsaved``saved``failed\tNo\tStyles the input.Default is unsaved.Prevent action with saved.\ndisabled\tfalse``true\tNo\tStyles all options and prevents the action.Default is false.Will be overriden if save_state is saved.\naction\tAction Object\tNo\tThis can be a Submit Action, URL Action, or Sheets Action.\nOptions Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\toption\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the option.\ntext\tAny string\tYes\tThe text shown within this option.\ndisabled\tfalse``true\tNo\tStyles the option and prevents the action.Default is false."
  },
  {
    "title": "List",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/list/",
    "html": "List\n\nA list component renders a list of items which you provide in an array. You can make each list item take an action by adding the relevant action object to the item:\n\nTrigger a submit request to be sent Inbox Messenger\nOpen a link in a new page Inbox Messenger\nOpen a sheet Messenger\nList Parameters\nParameter\tPossible Values\tRequired\tFunction\ntype\tlist\tYes\tThe type of component you are rendering.\nitems\tArray (see below)\tYes\tThe items that will be rendered in the list.\ndisabled\ttrue``false\tNo\tStyles all list items and prevents the action.Default is false.\nItem Parameters\nParameter\tPossible Values\tRequired\tFunction\ntype\titem\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the item.\ntitle\tAny string\tYes\tThe text shown as the title for the item.\nsubtitle\tAny string\tNo\tThe text shown underneath the item's title.\ntertiary_text\tAny string\tNo\tThe text shown next to the subtitle, separates by a bullet.\nimage\tA valid HTTPS URL\tNo\tAn image that will be displayed to the left of the item.\nimage_width\tAny integer\tYes (if image provided)\tThe exact width of the image in pixels.\nimage_height\tAny integer\tYes (if image provided)\tThe exact height of the image in pixels.\nrounded_image\ttrue``false\tNo\tRounds the corners of the image.Default is false.\ndisabled\ttrue``false\tNo\tThe defined state of the inputted value to render a specific style.\naction\tAction Object\tNo\tThis can be a Submit Action, URL Action, or Sheets Action."
  },
  {
    "title": "Checkbox",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/checkbox/",
    "html": "Checkbox\n\nA checkbox component is used to capture multiple choices from as many options as you want to provide. You can submit the options by:\n\nUsing a button component (which will submit all interactive components in the canvas)\n\nWhen a submit action takes place, the results are given in a hash with the id from the checkbox component used as the key and an array containing the id of each chosen option as the value.\n\nCheckbox Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tcheckbox\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the component.\noption\tArray (See Below)\tYes\tThe list of options.Minimum of 1.\nlabel\tAny string\tNo\tThe text shown above the options.\nvalue\tArray containing the id of option's\tNo\tThe option's that are selected by default.\nsave_state\tunsaved``saved``failed\tNo\tStyles the input.Default is unsaved.Prevent action with saved.\ndisabled\tfalse``true\tNo\tStyles all options and prevents the action.Default is false.Will be overriden if save_state is saved.\nOptions Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\toption\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the option.\ntext\tAny string\tYes\tThe text shown next to the checkbox.\ndisabled\tfalse``true\tNo\tStyles the option and prevents the action.Default is false."
  },
  {
    "title": "Dropdown",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/dropdown/",
    "html": "Dropdown\n\nA dropdown component is used to capture a choice from up to 10 options that you provide. You can submit the value of the select option by:\n\nUsing a button component (which will submit all interactive components in the canvas)\n\nWhen a submit action takes place, the results are given in a hash with the id from the dropdown component used as the key and the id from the chosen option as the value.\n\nDropdown Parameters\nParameter\tPossible Values\tRequired\tFunction\ntype\tdropdown\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the component.\noptions\tArray (See Below)\tYes\tThe list of options.Can provide 2 to 10.\nlabel\tAny string\tNo\tThe text shown above the dropdown.\nvalue\tThe id of an option\tNo\tThe option that is selected by default.\nsave_state\tunsaved``saved``failed\tNo\tStyles all options and prevents the action.Default is false.Will be overriden if save_state is saved.\ndisabled\tfalse``true\tNo\tStyles all options and prevents the action.Default is false.Will be overriden if save_state is saved.\naction\tAction Object\tNo\tThis can be a Submit Action, URL Action, or Sheets Action.\nOption Parameters\nParameter\tPossible Values\tRequired\tFunction\ntype\toption\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the option.\ntext\tAny string\tYes\tThe text shown within this option.\ndisabled\tfalse``true\tNo\tStyles the option and prevents the action.Default is false."
  },
  {
    "title": "Input",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/input/",
    "html": "Input\n\nAn input component is used to capture text input from the end user. You can submit the value of the input by:\n\nAdding an action to the input component (which will render an inline button)\nUsing a button component (which will submit all interactive components in the canvas)\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tinput\tYes\tThe type of component you are rendering.\nid\tAny string\tYes\tA unique identifier for the component.\nlabel\tAny string\tNo\tThe text shown above the input.\nplaceholder\tAny string\tNo\tAn example value shown inside the component when it’s empty.\nvalue\tAny string\tNo\tAn entered value which is already inside the component.\naction\tAction Object\tNo\tThis can be a Submit Action, URL Action, or Sheets Action.\nsave_state\tunsaved``saved``failed\tNo\tStyles the input.Default is unsaved.Prevent action with saved.\ndisabled\tfalse``true\tNo\tStyles the input and prevents the action.Default is false.Will be overriden if save_state is saved."
  },
  {
    "title": "Remove tag from a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/detachTagFromTicket/",
    "html": "You can remove tag from a specific ticket. This will return a tag object for the tag that was removed from the ticket."
  },
  {
    "title": "Add tag to a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/attachTagToTicket/",
    "html": "You can tag a specific ticket. This will return a tag object for the tag that was added to the ticket."
  },
  {
    "title": "Delete tag",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/deleteTag/",
    "html": "You can delete the details of tags that are on the workspace by passing in the id."
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "Create or update a tag, Tag or untag companies, Tag contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/createTag/",
    "html": "You can use this endpoint to perform the following operations:\n\n1. Create a new tag: You can create a new tag by passing in the tag name as specified in \"Create or Update Tag Request Payload\" described below.\n\n2. Update an existing tag: You can update an existing tag by passing the id of the tag as specified in \"Create or Update Tag Request Payload\" described below.\n\n3. Tag Companies: You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in \"Tag Company Request Payload\" described below. Also, if the tag doesn't exist then a new one will be created automatically.\n\n4. Untag Companies: You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in \"Untag Company Request Payload\" described below.\n\n5. Tag Multiple Users: You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in \"Tag Users Request Payload\" described below.\n\nEach operation will return a tag object."
  },
  {
    "title": "Find a specific tag",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/findTag/",
    "html": "You can fetch the details of tags that are on the workspace by their id. This will return a tag object."
  },
  {
    "title": "List all tags",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/listTags/",
    "html": "You can fetch a list of all tags for a given workspace."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Create contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/CreateContact/",
    "html": "You can create a new contact (ie. user or lead)."
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "List subscription types",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Subscription-Types/listSubscriptionTypes/",
    "html": "You can list all subscription types. A list of subscription type objects will be returned."
  },
  {
    "title": "Merge a lead and a user",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/MergeContact/",
    "html": "You can merge a contact with a role of lead into a contact with a role of user."
  },
  {
    "title": "Archive contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/ArchiveContact/",
    "html": "You can archive a single contact."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Subscription-Types/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Subscription-Types/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "List tags attached to a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/listTagsForAContact/",
    "html": "You can fetch a list of all tags that are attached to a specific contact."
  },
  {
    "title": "Update an external page",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/updateExternalPage/",
    "html": "You can update an existing external page (if it was created via the API)."
  },
  {
    "title": "Retrieve an external page",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/getExternalPage/",
    "html": "You can retrieve an external page."
  },
  {
    "title": "Delete an external page",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/deleteExternalPage/",
    "html": "Sending a DELETE request for an external page will remove it from the content library UI and from being used for AI answers."
  },
  {
    "title": "Update a content import source",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/updateContentImportSource/",
    "html": "You can update an existing content import source."
  },
  {
    "title": "Retrieve a content import source",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/getContentImportSource/",
    "html": "The unique identifier for the content import source which is given by Intercom."
  },
  {
    "title": "List external pages",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/listExternalPages/",
    "html": "You can retrieve a list of all external pages for a workspace."
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/ListContacts/",
    "html": "You can fetch a list of all contacts."
  },
  {
    "title": "Get a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/ShowContact/",
    "html": "You can fetch the details of a single contact."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "List tags attached to a contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/listTagsForAContact/",
    "html": "You can fetch a list of all tags that are attached to a specific contact."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Results",
    "url": "https://developers.intercom.com/docs/references/canvas-kit/responseobjects/results/",
    "html": "Results\nDescription\n\nThe results object should be sent when you want to end configuration of the app and trigger the Initialize request to be sent. You provide the key-value pairs of data you want access to and we will send these in the Initialize request within a card_creation_options object.\n\nExample Object\nresults: { \"key\": \"value\" } // Can be more than one pair\n"
  },
  {
    "title": "Event",
    "url": "https://developers.intercom.com/docs/references/canvas-kit/responseobjects/event/",
    "html": "Event\nDescription\n\nThe event object enables Intercom to know more about the actions that took place in your app. Currently, you can only tell us when an app's flow has been completed.\n\nAttributes\nKey\tType\tDescription\ntype\tstring\tWhat action took place. The only value currently accepted is completed.\nExample Object\nevent: { \"type\": \"completed\" } // Optional. Recorded by Intercom.\n"
  },
  {
    "title": "Update a data attribute",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Attributes/updateDataAttribute/",
    "html": "You can update a data attribute.\n\n🚧 Updating the data type is not possible\n\nIt is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead."
  },
  {
    "title": "Canvas",
    "url": "https://developers.intercom.com/docs/references/canvas-kit/responseobjects/canvas/",
    "html": "Canvas\nDescription\n\nYou have to respond to the majority of requests with a canvas object. This will tell us what UI to show for your app.\n\nA canvas can either be static (meaning we send you the next request only when an action takes place) or live (meaning we send you the next request when someone views the app).\n\nA static canvas needs a Content Object which will contain the components to show.\nA live canvas needs a content_url which we we will make the Live Canvas requests to when the app is viewed. This is only possible for apps viewed or used in the Messenger.\nAttributes\nKey\tType\tCanvas Type\tDescription\ncontent\tobject\tStatic\tThe Content that will be shown as the UI of the app. Max Size is 64KB.\ncontent_url\tstring\tLive\tThe URL which we make Live Canvas requests to. You must respond to these with a Content Object. Max size is 64KB.\nstored_data\tobject\tStatic, Live\tOptional Stored Data that you want to be returned in the next sent request. Max Size is 64KB.\nExample Objects\n{\n  canvas: {\n    content: {\n      components: [\n        {\n          \"type\": \"text\",\n          \"text\": \"This is a text component.\"\n        }\n      ]\n    },\n    stored_data: { \"key\": \"value\" } //Can be more than one pair \n  }\n}\n\n{\n  canvas: {\n    content_url: \"https://messengerapp.com/get-content-here\",\n    stored_data: { \"key\": \"value\" } //Can be more than one pair \n  }\n}\n"
  },
  {
    "title": "Content",
    "url": "https://developers.intercom.com/docs/references/canvas-kit/responseobjects/content/",
    "html": "Content\nDescription\n\nThe content object is where you specify the UI of your app. You provide us with a set of components in a components array that we then render.\n\nThe content object should usually be returned within the canvas object. If you're responding to a Live Canvas request however, then you should only respond with the content object.\n\nAttributes\nKey\tType\tDescription\ncomponents\tarray\tThe list of components to be rendered. See the components further in this reference.\nExample Object\n{\n  content: {\n    components: [\n      {\n        \"type\": \"text\",\n        \"id\": \"component-1\",\n        \"text\": \"This is the first component\",\n        \"align\": \"center\",\n        \"style\": \"header\"\n      },\n      {\n        \"type\": \"button\",\n        \"id\": \"component-2\",\n        \"label\": \"This is the second component\",\n        \"action\": {\n          \"type\": \"submit\"\n        }\n      }\n    ]\n  }\n}\n"
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Attributes/createDataAttribute/",
    "html": "You can create a data attributes for a contact or a company."
  },
  {
    "title": "List all data attributes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Attributes/lisDataAttributes/",
    "html": "You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Intercom Platform Guidelines",
    "url": "https://developers.intercom.com/docs/publish-to-the-app-store/intercom-platform-guidelines/",
    "html": "Intercom Platform Guidelines\nIntroduction\n\nWe want developers to have a great experience building on the Intercom Platform. We believe that building a vibrant developer ecosystem around Intercom benefits everyone involved, and helps our mission to make internet business personal. :heart-eyes:\n\nWe've written these guidelines for anyone using Intercom's products and services, to show you how to use Intercom and our APIs, and to share best practices as we, and you, continue to build new and exciting products and services.\n\nBut, like everything in life, there have to be some rules of engagement which is why we've drawn up these developer guidelines. Yes, they're written in legal terms, to protect us and you, but we've tried to ensure they are as simple as possible. We want to point you towards opportunities rather than focusing on what can't be done.\n\nNow, over to our lawyers for the legal bits…\n\nBefore starting work, we'll ask you to confirm that you're happy to comply with the spirit and the letter of these guidelines.\n\nPlease use Intercom's products and services responsibly\n\nOur products, services and our brand are really important to us, and we ask that you do not do anything that might damage them:\n\nWe expect data produced with Intercom's products to be represented transparently and honestly. Don't misrepresent data or metrics created by our products.\nWe expect you to use our products and services to help serve your customers. Don't re-sell, re-purpose or license, any data obtained from Intercom. Don't use our products to create a service that competes with Intercom or infringes our copyright.\nWe've spent years building and refining our products to best serve you. Don't reverse engineer the platform, and don't re-sell, transfer or sublicense our code, APIs, or products.\nKeeping our customers' data secure is the most important thing that Intercom does. Don't use spiders, robots crawlers, data mining or similar tools to scrape the Intercom Website or APIs.\nIntercom needs access to monitor your access to our API so don't block us from doing so.\nRespect our rate-limits. Don't overuse our APIs or resources - we expect you to comply with any fair usage guidelines we publish from time to time.\nIf you have an idea as to how our products can be improved or you would like to try something experimental then please let us know and we'd be happy to discuss with you.\nYou can use our logo and branding where you have the right to do so, but please don't do anything that could damage our brand integrity or be misleading or confusing to customers - that includes using our logo in any part of your logo, using the Intercom name in your app name or anything else that could be considered an abuse of our branding, logos or copyrighted materials.\nTreat your customers and their data responsibly\n\nKeeping our customers' data secure is the most important thing that Intercom does. We go to considerable lengths to ensure that all data sent to Intercom is handled securely.\n\nWe expect others with access to our customers' data to treat it with the same level of trust and responsibility. Our terms for developers include:\n\nYou must have appropriate measures in place to protect any information you receive from Intercom against unauthorized access, use, or disclosure.\nYou must only use the data you need to build your product or service.\nYou must have an end user agreement and a privacy policy in place with respect to each of your customers - and it must be compatible with Intercom's terms.\nYou must ensure you're meeting all your legal obligations in terms of applicable data protection and consumer protection; don't use Intercom's products in connection with data you don't have permission to process.\nYou must be able to meet the requirements of the European Union's General Data Protection Regulation (GDPR) for any data you process which falls within the scope of the legislation and fulfil subject access requests as required.\nIn addition to breach notifications required under GDPR, you'll notify Intercom of any personal data breaches within 72 hours of becoming aware of a breach.\nYou must grant Intercom permission to audit your data processing activities. This can include independently produced audit reports.\nFurther Information\n\nThese guidelines sit alongside, and are in addition to our Terms of Service and Privacy Policy so please do make sure you've read and understand these documents. If we feel you are misusing our products or services, we reserve the right to withdraw access to our products and services entirely.\n\nAs our developer platform and business evolves, so too will these guidelines. We'd love for you to get in touch if you've any feedback or suggestions for how we can make them better.\n\nWe know that occasionally things can go wrong and mistakes can be made. If at any time you are concerned that these guidelines may have been breached, please do notify us as soon as you become aware. These guidelines may change over time, so do come back and check periodically.\n\nThanks for reading this far - we're excited to see what you'll build! :rocket:"
  },
  {
    "title": "Download content data export",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Export/downloadDataExport/",
    "html": "When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message data will be streamed continuously back down to you in a gzipped CSV format.\n\n📘 Octet header required\n\nYou will have to specify the header Accept: application/octet-stream when hitting this endpoint."
  },
  {
    "title": "Cancel content data export",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Export/cancelDataExport/",
    "html": "You can cancel your job"
  },
  {
    "title": "Show content data export",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Export/getDataExport/",
    "html": "You can view the status of your job by sending a GET request to the URL https://api.intercom.io/export/content/data/{job_identifier} - the {job_identifier} is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.\n\n🚧 Jobs expire after two days All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available."
  },
  {
    "title": "Attach a contact to a subscription type",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/subscription-types/attach-a-contact/",
    "html": "Attach a contact to a subscription type\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/subscriptions \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\"\\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can opt out a single contact.\n\nRequest Path Parameter\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the subscription type which is given by Intercom\nconsent_type\tString\tThe consent_type of the subscription, currently only opt_out is supported.\nResponse\n\nThis will return a Subscription Type model for the subscription type that was added to the contact."
  },
  {
    "title": "Attach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/tags/attach-a-tag-to-a-conversation/",
    "html": "Attach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"2084335\\\",\\n  \\\"admin_id\\\": \\\"123\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Conversation Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can tag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nadmin_id\tString\tYes\tThe unique identifier for the admin who is applying the tag.\nResponse\n\nThis will return a Tag model for the tag that was added to the contact."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/visitors/convert-a-visitor-to-a-user/",
    "html": "Convert a visitor\n\nYou can merge a Visitor to a Contact of role type lead or user.\n\nWHAT HAPPENS UPON A VISITOR BEING CONVERTED?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers.\n\nRequest Body Parameters\nArgument\tType\tRequired?\tDescription\nvisitor\tObject\tYes\tThe unique identifiers to convert a single Visitor.\nuser\tObject\tYes\tThe unique identifiers retained after converting or merging.\ntype\tString\tYes\tRepresents the role of the Contact model. Accepts lead or user.\nVisitor object\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tOne of\tThe visitor's email.\nUser object (a contact)\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom, which will be represented as external_id.\nemail\tString\tNo\tThe contact's email, retained by default if one is present.\nExample Request & Response\ncurlcurl\n$ curl \\\\https://api.intercom.io/visitors/convert \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json' \\\\-H 'Content-Type: application/json' -d '{  \\\"visitor\\\": {    \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"  },  \\\"user\\\": {    \\\"email\\\": \\\"winstonsmith@truth.org\\\"  },  \\\"type\\\": \\\"user\\\"}'\n\n# NB: Full User objects are returned{  \\\"type\\\": \\\"lead\\\",  \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"}\n\nResponse\n\nThis will return a Contact model of the visitor you just converted or merged into."
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/teams/list-teams/",
    "html": "List all teams\nExample Request & Response\n$ curl https://api.intercom.io/teams \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"teams\": [\n        {\n            \"admin_ids\": [\n                492881,\n                1195856\n            ],\n            \"id\": \"814865\",\n            \"name\": \"BA_App\",\n            \"type\": \"team\"\n        },\n        {\n            \"admin_ids\": [\n                646303,\n                814860\n            ],\n            \"id\": \"2744328\",\n            \"name\": \"the_a_team\",\n            \"type\": \"team\"\n        }\n    ],\n    \"type\": \"team.list\"\n}\n\n\nYou can fetch a list of all teams for a given workspace.\n\nResponse\n\nThis will return a list of team objects for the App. The result may also have a pages object if the response is paginated.\n\nTeam List\nAttribute\tType\tDescription\ntype\tstring\tValue is 'team.list'\nteams\tarray\tA list of team objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/messages/admin-initiated-conversation/",
    "html": "Create a message\nExample Request & Response\n$ curl https://api.intercom.io/messages \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d\n\n{\n  \"message_type\": \"email\",\n  \"subject\": \"Hey\",\n  \"body\": \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"from\": {\n    \"type\": \"admin\",\n    \"id\": \"394051\"\n  },\n  \"to\": {\n    \"type\": \"user\",\n    \"id\": \"536e564f316c83104c000020\"\n  }\n}\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"admin_message\",\n  \"id\": \"2001\",\n  \"created_at\": 1401916877,\n  \"message_type\": \"email\",\n  \"subject\" : \"Hey\",\n  \"body\" : \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"owner\": {\n    \"email\": \"wash@serenity.io\",\n    \"id\": \"394051\",\n    \"name\": \"Wash\",\n    \"type\": \"admin\"\n  }\n}\n\nintercom.messages.create(\n  :message_type => 'email',\n  :subject  => 'This Land',\n  :body     => \"Har har har! Mine is an evil laugh!\",\n  :template => \"plain\", # or \"personal\",\n  :from => {\n    :type => \"admin\",\n    :id   => \"394051\"\n  },\n  :to => {\n    :type => \"user\",\n    :id => \"536e564f316c83104c000020\"\n  }\n)\n\n<?php\n$intercom->messages->create([\n    \"message_type\" => \"email\",\n    \"subject\" => \"Plato Quote\",\n    \"body\" => \"And what, Socrates, is the food of the soul?\",\n    \"from\" => [\n        \"type\" => \"admin\",\n        \"id\" => \"814860\"\n    ],\n    \"to\" => [\n        \"type\" => \"user\",\n        \"email\" => \"socrates@email.com\"\n    ]\n]);\n?>\n\nUser user = new User()\n  .setId(\"5310d8e8598c9a0b24000005\");\nAdmin admin = new Admin()\n  .setId(\"394051\");\nAdminMessage adminMessage = new AdminMessage()\n  .setAdmin(admin)\n  .setUser(user)\n  .setSubject(\"This Land\")\n  .setBody(\"Har har har! Mine is an evil laugh!\")\n  .setMessageType(\"email\")\n  .setTemplate(\"plain\"); // or personal\nConversation.create(adminMessage);\n\n\nYou can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\nDELAY AFTER CONTACT CREATION\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tThe kind of message being created. Values: inapp or email\nsubject\tString\tYes, if message_type: email.\tThe title of the email.\nbody\tString\tYes\tThe content of the message. HTML and plaintext are supported.\ntemplate\tString\tYes, if message_type: email.\tThe style of the outgoing message. Possible values plain or personal.\nfrom\tObject\tYes\tSee From Object below for more.\nto\tObject\tYes\tSee To Object below for more.\ncreate_conversation_without_contact_reply\tBoolean\tNo\tWhether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.\nFrom Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tAlways admin.\nid\tString\tYes\tThe identifier for the admin which is given by Intercom.\nTo Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tThe role associated to the contact - user or lead.\nid\tString\tYes\tThe identifier for the contact which is given by Intercom.\nResponse\n\nThis will return the Message that has been created.\n\nRETRIEVING ASSOCIATED CONVERSATIONS\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Data-Table",
    "url": "https://developers.intercom.com/docs/references/1.3/canvas-kit/presentationcomponents/data-table/",
    "html": "Data-Table\n\nA data-table component is used for rendering a table of key-value pairs. For Messenger, text will wrap around on multiple lines. For Inbox and Frame (ie. Configure) views, we will truncate and use tooltips on hover if the text overflows.\n\nData-Table Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tdata-table\tYes\tThe type of component you are rendering.\nitems\tArray (See Below)\tYes\tThe items that will be rendered in the data-table.\nField-Value Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tfield-value\tYes\tThe type of component you are rendering.\nfield\tAny string\tYes\tThe text of the key in your key-value pair.\nvalue\tAny string\tYes\tThe text of the value in your key-value pair.\nPreview"
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/segments/list-segments/",
    "html": "List all segments\nExample Request & Response\n$ curl https://api.intercom.io/segments\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment.list\",\n  \"segments\": [\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000002\",\n      \"name\": \"Active\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    },\n    {\n      \"created_at\": 1393613030,\n      \"id\": \"5310d8e6598c9a0b24000001\",\n      \"name\": \"New\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613030\n    },\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000003\",\n      \"name\": \"Slipping Away\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    }\n  ]\n}\n\nintercom.segments.all.each { ... }\n\n<?php\n$intercom->segments->getSegments([]);\n?>\n\nSegmentCollection segments = Segment.list();\nwhile (segments.hasNext()) {\n    out.println(segments.next().getId());\n}\n\n\nYou can fetch a list of all segments.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIt includes the count of contacts that belong to each segment.\nResponse\n\nThis will return a list of Segment Objects. The result may also have a pages object if the response is paginated.\n\nAttribute\tType\tDescription\ntype\tString\tvalue is 'segment.list'\nsegments\tArray\tA list of segment objects\npages\tObject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Create a note for contact",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/notes/create-note-for-contact/",
    "html": "Create a note for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/notes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"body\\\": \\\"Shiny\\\",\\n  \\\"admin_id\\\": \\\"12345\\\"\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can remove a note to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom.\nRequest Body Parameter\nParameter\tType\tRequired?\tDescription\nbody\tString\tYes\tThe text of the note.\nadmin_id\tString\tYes\tThe unique identifier for the admin which is given by Intercom.\nResponse\n\nThis will return a Note model for the note that was added to the contact."
  },
  {
    "title": "Admin Model",
    "url": "https://developers.intercom.com/docs/references/1.4/rest-api/admins/admin-model/",
    "html": "Admin Model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\nAdmin Object\nAttribute\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right.\n\nErrors for admins without inbox seats\nJSON\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n"
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/help-center/create-a-collection/",
    "html": "Create a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"Collection 1\\\",  \\\"description\\\": \\\"English description\\\",  \\\"translated_content\\\": {    \\\"es\\\": {      \\\"name\\\": \\\"Colección 1\\\",      \\\"description\\\": \\\"Spanish description\\\"    }  }}\n\n\nYou can create a new collection by making a POST request to https://api.intercom.io/help_center/collections.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\nname\tString\tYes\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\ndescription\tString\tNo\tThe description of the collection. For multilingual collections, this will be the description of the default language's content.\ntranslated_content\tString\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Collection Model of the collection you just created."
  },
  {
    "title": "Admin Model",
    "url": "https://developers.intercom.com/docs/references/1.3/rest-api/admins/admin-model/",
    "html": "Admin Model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\nAdmin Object\nAttribute\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right.\n\nErrors for admins without inbox seats\nJSON\n{\\n    \\\"type\\\": \\\"error.list\\\",\\n    \\\"request_id\\\": \\\"0002miv9og586ig3aln0\\\",\\n    \\\"errors\\\": [\\n        {\\n            \\\"code\\\": \\\"action_forbidden\\\",\\n            \\\"message\\\": \\\"This admin does not have Inbox access permissions\\\"\\n        }\\n    ]\\n}\n"
  },
  {
    "title": "Data Attributes",
    "url": "https://developers.intercom.com/docs/references/1.4/rest-api/data-attributes/data-attributes/",
    "html": "Data Attributes\n\nData Attributes are a type of metadata used to describe your customer and company models. These include standard and custom attributes. In other words data attributes are properties that help to describe your customers and companies in more detail. By using the data attributes endpoint, you can get the global list of attributes for your app as well as the metadata (i.e. datatype and format) associated with each attribute."
  },
  {
    "title": "The data event model",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/data-events/event-model/",
    "html": "The data event model\nEvent Object\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"342311\"\n}\n\n// Sufficient to send just the event name\nIntercom('trackEvent', 'invited-friend');\n\n# create an event as a hash\nevent = {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571\n}\nintercom.events.create event\n\n<?php\n$event = array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\"\n);\n$intercom->events->create($event);\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"1314159\");\n  .setCreatedAt(currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nEvents are how you can submit user activity to Intercom. Once you're sending Intercom event data, you can filter your user base with those events and create Auto Messages to send whenever an event occurs. Every event is associated with an event name, the time it happened, the user that caused the event, and optionally some extra metadata. Events record the count, first and last occurrence of an event.\n\nEvents are different to Custom Attributes in that events are information on what Users did and when they did it, whereas Custom Attributes represent the User's current state as seen in their profile. For example, the first time they subscribed to a paid plan, or the most recent time they changed their plan would be represented by events, whereas a User Attribute would be used to record their current plan.\n\nBecause Events are used for filtering and messaging, and event names are used directly in Intercom by your App's Admins we recommend sending high-level activity about your users that you would like to message on, rather than raw clickstream or user interface actions. For example an order action is a good candidate for an Event, versus all the clicks and actions that were taken to get to that point. We also recommend sending event names that combine a past tense verb and nouns, such as 'created-project'.\n\nThe Events API varies slightly from the rest of the APIs as follows -\n\nYou can submit events using JavaScript using the trackEvent method.\nWhen there's an error or errors, a list structure is returned instead of a single error.\nEvent Object\nAttribute\tRequired\tDescription\nevent_name\tyes\tThe name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan.\ncreated_at\tyes\tThe time the event occurred as a UTC Unix timestamp\nuser_id\tyes if no email\tYour identifier for the user.\nid\tyes if no email or user_id.\tYour identifier for a lead or a user.\nemail\tyes if no user_id\tAn email address for your user. An email should only be used where your application uses email to uniquely identify users\nmetadata\tno\toptional metadata about the event.\n\nThe event_name field is processed as follows -\n\nNames are treated as case insensitive - 'Completed-Order' and 'completed-order' will be considered the same event for your application.\nPeriods (.) and dollars ($) in event names are replaced with hyphens. e.g., 'completed.order' will be stored as 'completed-order'.\n\nTo avoid confusion we recommend submitting lower case event names that do not contain periods or dollars!\n\nMetadata Object\n\nSending an event with metadata\n\n$ curl https://api.intercom.io/events \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H \"Content-Type: application/json\" -d'\n{\n  \"event_name\" : \"invited-friend\",\n  \"created_at\": 1389913941,\n  \"user_id\": \"314159\",\n  \"metadata\": {\n     \"invitee_email\": \"pi@example.org\",\n     \"invite_code\": \"ADDAFRIEND\"\n  }\n}'\n\nvar metadata = {\n  invitee_email: 'pi@example.org',\n  invite_code: 'ADDAFRIEND'\n};\nIntercom('trackEvent', 'invited-friend', metadata);\n\nmetadata = {\n  :invitee_email => 'pi@example.org',\n  :invite_code => 'ADDAFRIEND'\n}\nintercom.events.create {\n  :event_name => \"invited-friend\",\n  :email => current_user.email,\n  :created_at => 1391691571,\n  :metadata => metadata\n}\n\n<?php\n$metadata = array(\n  \"invitee_email\" => \"pi@example.org\",\n  \"invite_code\" => \"ADDAFRIEND\"\n);\n$intercom->events->create(array(\n  \"event_name\" => \"invited-friend\",\n  \"created_at\" => 1391691571,\n  \"user_id\" => \"314159\",\n  \"metadata\" => $metadata\n));\n?>\n\nEvent event = new Event()\n  .setEventName(\"invited-friend\")\n  .setUserID(\"314159\")\n  .putMetadata(\"invite_mail\", \"pi@example.org\")\n  .putMetadata(\"invite_code\", \"ADDAFRIEND\")\n  .putMetadata(\"found_date\", currentTimeMillis()/1000L);\n\nEvent.create(event);\n\n\nMetadata can be used to submit an event with extra key value data. Each event can contain up to ten metadata key values.\n\nSome use cases for event metadata are -\n\nLinking an event back to a page in your website.\nDescribing before and after values for a subscription plan change.\nSending contextual information about an online order, a booking.\n\nYou can now trigger messages to your users based on event and event metadata and also include the metadata in the messages. For more information on how this works, learn more about event based messaging\n\nSee the section 'Metadata Types' for more information on the kinds of metadata you can send."
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/data-attributes/create-data-attributes/",
    "html": "Create a data attribute\nExample Requests & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"name\\\": \\\"list_cda\\\",\\n  \\\"description\\\": \\\"You are either alive or dead\\\",\\n  \\\"data_type\\\": \\\"options\\\",\\n  \\\"model\\\": \\\"contact\\\",\\n  \\\"options\\\": [\\n    {\\\"value\\\": \\\"alive\\\"},\\n    {\\\"value\\\": \\\"dead\\\"}\\n  ]\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0006klvnje6ffng7ot80\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You already have 'text_cda' in your people data. To save this as new company data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Your name for this attribute must only contain alphanumeric characters, currency symbols, and hyphens\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"'Name' is one of our standard attributes for your people data. To save this as new people data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Data Type isn't an option\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You must have at least two options on a list type data attribute\"\n    }\n  ]\n}\n\n\nYou can create a data attributes for a contact or a company.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nname\tstring\tThe name of the attribute.\nmodel\tString\tThe model where the attribute applies to. Accepts contact or company .\ndata_type\tstring\tThe type of data stored for this attribute. Accepted values are string, integer, float, boolean, date.\ndescription\tstring\t(Optional) The readable description you see in the UI for the attribute.\noptions\tarray\t(Optional) To create list attributes. Provide a set of hashes with value as the key of the options you want to make. data_type must be string.\nResponse\n\nThis will return a Data Attribute Model showing the details of your created attribute."
  },
  {
    "title": "Webhook Topics",
    "url": "https://developers.intercom.com/docs/references/unstable/webhooks/webhook-models/",
    "html": "Webhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.activity_log_event.created\tAdmin\tRun each time a new admin activity log is created\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.deleted\tCompany\tCompany deletions\tRead users and companies\nRead one user and one company\ncompany.updated\tCompany\tCompany being updated\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.subscribed\tSubscription\tContacts subscribing to email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tSubscription\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.open.assigned\tConversation\tAdmin open conversation assignments\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nTicket topics\nTopic\tObject\tEvent description\tPermissions\nticket.created\tTicket\tTicket created\tRead tickets\nticket.state.updated\tTicket\tTicket state updated\tRead tickets\nticket.note.created\tTicket\tTicket note created\tRead tickets\nticket.admin.assigned\tTicket\tTicket admin assigned\tRead tickets\nticket.team.assigned\tTicket\tTicket team assigned\tRead tickets\nticket.contact.attached\tTicket\tTicket contact attached\tRead tickets\nticket.contact.detached\tTicket\tTicket contact detached\tRead tickets\nticket.attribute.updated\tTicket\tTicket attribute updated\tRead tickets\nticket.admin.replied\tTicket\tTicket admin replied\tRead tickets\nticket.contact.replied\tTicket\tTicket contact replied\tRead tickets\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopic\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Compatibility",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/common-structures/compatibility/",
    "html": "Compatibility\nUnknown Field\n{\\n  \\\"type\\\": \\\"user\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\",\\n  \\\"such_key\\\": \\\"so_value\\\"\\n}\n\nMust Ignore Interpretation\n{\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\"\\n}\n\n\nJSON objects in the API follow a must ignore processing model, where clients are expected to ignore data fields they don't understand.\n\nFor example if the client saw the JSON as shown in the example on the right ('Unknown Field') and did not understand the such_key field, it must pretend the field wasn't there and will process the object as if it looked liked the object shown in 'Must Ignore'.\n\nWhen fetching content, fields that are optional for API objects are indicated in the documentation - clients must not assume they will always be present. When submitting content, fields that are required to be sent by client are also indicated in the documentation - if these are not sent the API may reject the request.\n\nIn general the API may reject JSON where data is not valid or incomplete with a 422 Unprocessable Entity response and an error message explaining the issue. For example, an email message type may be rejected if it is not sent with a subject field."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/teams/list-teams/",
    "html": "List all teams\nExample Request & Response\n$ curl https://api.intercom.io/teams \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"teams\": [\n        {\n            \"admin_ids\": [\n                492881,\n                1195856\n            ],\n            \"id\": \"814865\",\n            \"name\": \"BA_App\",\n            \"type\": \"team\"\n        },\n        {\n            \"admin_ids\": [\n                646303,\n                814860\n            ],\n            \"id\": \"2744328\",\n            \"name\": \"the_a_team\",\n            \"type\": \"team\"\n        }\n    ],\n    \"type\": \"team.list\"\n}\n\n\nYou can fetch a list of all teams for a given workspace.\n\nResponse\n\nThis will return a list of team objects for the App. The result may also have a pages object if the response is paginated.\n\nTeam List\nAttribute\tType\tDescription\ntype\tstring\tValue is 'team.list'\nteams\tarray\tA list of team objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Attach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/tags/attach-a-tag-to-a-conversation/",
    "html": "Attach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"2084335\\\",\\n  \\\"admin_id\\\": \\\"123\\\"\\n}\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Conversation Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can tag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nadmin_id\tString\tYes\tThe unique identifier for the admin who is applying the tag.\nResponse\n\nThis will return a Tag model for the tag that was added to the contact."
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/segments/list-segments/",
    "html": "List all segments\nExample Request & Response\n$ curl https://api.intercom.io/segments\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"segment.list\",\n  \"segments\": [\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000002\",\n      \"name\": \"Active\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    },\n    {\n      \"created_at\": 1393613030,\n      \"id\": \"5310d8e6598c9a0b24000001\",\n      \"name\": \"New\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613030\n    },\n    {\n      \"created_at\": 1393613031,\n      \"id\": \"5310d8e7598c9a0b24000003\",\n      \"name\": \"Slipping Away\",\n      \"type\": \"segment\",\n      \"updated_at\": 1393613031\n    }\n  ]\n}\n\nintercom.segments.all.each { ... }\n\n<?php\n$intercom->segments->getSegments([]);\n?>\n\nSegmentCollection segments = Segment.list();\nwhile (segments.hasNext()) {\n    out.println(segments.next().getId());\n}\n\n\nYou can fetch a list of all segments.\n\nRequest Query Parameters\nParameter\tType\tRequired?\tDescription\ninclude_count\tBoolean\tNo\tIt includes the count of contacts that belong to each segment.\nResponse\n\nThis will return a list of Segment Objects. The result may also have a pages object if the response is paginated.\n\nAttribute\tType\tDescription\ntype\tString\tvalue is 'segment.list'\nsegments\tArray\tA list of segment objects\npages\tObject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Attach a contact to a subscription type",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/subscription-types/attach-a-contact/",
    "html": "Attach a contact to a subscription type\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/subscriptions \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\"\\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can opt out a single contact.\n\nRequest Path Parameter\nKey\tType\tRequired\tDescription\nid\tString\tYes\t\nRequest Body Parameter\nKey\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the subscription type which is given by Intercom\nconsent_type\tString\tYes\tThe consent_type of the subscription, currently only opt_out is supported.\nResponse\n\nThis will return a Subscription Type model for the subscription type that was added to the contact."
  },
  {
    "title": "Create a note for contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/notes/create-note-for-contact/",
    "html": "Create a note for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/notes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"body\\\": \\\"Shiny\\\",\\n  \\\"admin_id\\\": \\\"12345\\\"\\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can remove a note to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom.\nRequest Body Parameter\nParameter\tType\tRequired?\tDescription\nbody\tString\tYes\tThe text of the note.\nadmin_id\tString\tYes\tThe unique identifier for the admin which is given by Intercom.\nResponse\n\nThis will return a Note model for the note that was added to the contact."
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/messages/admin-initiated-conversation/",
    "html": "Create a message\nExample Request & Response\n$ curl https://api.intercom.io/messages \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d\n\n{\n  \"message_type\": \"email\",\n  \"subject\": \"Hey\",\n  \"body\": \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"from\": {\n    \"type\": \"admin\",\n    \"id\": \"394051\"\n  },\n  \"to\": {\n    \"type\": \"user\",\n    \"id\": \"536e564f316c83104c000020\"\n  }\n}\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"admin_message\",\n  \"id\": \"2001\",\n  \"created_at\": 1401916877,\n  \"message_type\": \"email\",\n  \"subject\" : \"Hey\",\n  \"body\" : \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"owner\": {\n    \"email\": \"wash@serenity.io\",\n    \"id\": \"394051\",\n    \"name\": \"Wash\",\n    \"type\": \"admin\"\n  }\n}\n\nintercom.messages.create(\n  :message_type => 'email',\n  :subject  => 'This Land',\n  :body     => \"Har har har! Mine is an evil laugh!\",\n  :template => \"plain\", # or \"personal\",\n  :from => {\n    :type => \"admin\",\n    :id   => \"394051\"\n  },\n  :to => {\n    :type => \"user\",\n    :id => \"536e564f316c83104c000020\"\n  }\n)\n\n<?php\n$intercom->messages->create([\n    \"message_type\" => \"email\",\n    \"subject\" => \"Plato Quote\",\n    \"body\" => \"And what, Socrates, is the food of the soul?\",\n    \"from\" => [\n        \"type\" => \"admin\",\n        \"id\" => \"814860\"\n    ],\n    \"to\" => [\n        \"type\" => \"user\",\n        \"email\" => \"socrates@email.com\"\n    ]\n]);\n?>\n\nUser user = new User()\n  .setId(\"5310d8e8598c9a0b24000005\");\nAdmin admin = new Admin()\n  .setId(\"394051\");\nAdminMessage adminMessage = new AdminMessage()\n  .setAdmin(admin)\n  .setUser(user)\n  .setSubject(\"This Land\")\n  .setBody(\"Har har har! Mine is an evil laugh!\")\n  .setMessageType(\"email\")\n  .setTemplate(\"plain\"); // or personal\nConversation.create(adminMessage);\n\n\nYou can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\nIt's not possible to send email messages to unsubscribed users via the API. If you need to contact an unsubscribed user you can start a conversation with them from your Intercom workspace.\n\nDELAY AFTER CONTACT CREATION\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tThe kind of message being created. Values: inapp or email\nsubject\tString\tYes, if message_type: email.\tThe title of the email.\nbody\tString\tYes\tThe content of the message. HTML and plaintext are supported.\ntemplate\tString\tYes, if message_type: email.\tThe style of the outgoing message. Possible values plain or personal.\nfrom\tObject\tYes\tSee From Object below for more.\nto\tObject\tYes\tSee To Object below for more.\nFrom Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tAlways admin.\nid\tString\tYes\tThe identifier for the admin which is given by Intercom.\nTo Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tThe role associated to the contact - user or lead.\nid\tString\tYes\tThe identifier for the contact which is given by Intercom.\nResponse\n\nThis will return the Message that has been created.\n\nRETRIEVING ASSOCIATED CONVERSATIONS\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/help-center/create-a-collection/",
    "html": "Create a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"Collection 1\\\",  \\\"description\\\": \\\"English description\\\",  \\\"translated_content\\\": {    \\\"es\\\": {      \\\"name\\\": \\\"Colección 1\\\",      \\\"description\\\": \\\"Spanish description\\\"    }  }}\n\n\nYou can create a new collection by making a POST request to https://api.intercom.io/help_center/collections.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\nname\tString\tYes\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\ndescription\tString\tNo\tThe description of the collection. For multilingual collections, this will be the description of the default language's content.\ntranslated_content\tString\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Collection Model of the collection you just created."
  },
  {
    "title": "Input Values",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/requestobjects/input-values/",
    "html": "Input Values\nDescription\n\nThe input_values object is a JSON hash containing key-value pairs. These key-value pairs represent the data that's been inputted by customers and teammates with a given component.\n\nThe key will be the component_id and the value will be the data that was inputted by this component.\n\nExample Object\ninput_values: { \"<component_id>\": \"<Value entered in component>\" }, //Can be more than one pair\n"
  },
  {
    "title": "Archive a contact",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/contacts/archive-a-contact/",
    "html": "Archive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/archive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can archive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the archived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - true"
  },
  {
    "title": "Admin Conversations Count Model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/counts/admin-conversations/",
    "html": "Admin Conversations Count Model\nAdmin Conversation Count Object\n\nThe admin conversation count supplies per Admin counts\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nconversation\tobject\tContains counts related to admins\nconversation.admin\tarray\tContains and array of objects detailing each Admin\nconversation.admin.open\tnumber\tContains the number of open conversations for the Admin\nconversation.admin.closed\tnumber\tContains the number of closed conversations for the Admin\nconversation.admin.id\tstring\tContains the Admin id\nconversation.admin.name\tstring\tContains the Admin name\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\n# Conversation Admin Counts\n$ curl 'https://api.intercom.io/counts?type=conversation&count=admin' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# Conversation Admin Counts\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\nintercom.counts.for_type(type: 'conversation', count: 'admin')\n\n<?php\n// Conversation Admin Count\n$counts = $intercom->counts->getCounts([\"type\" => \"conversation\", \"count\" => \"admin\"]);\nprint_r($counts);\n?>\n\n// Conversation Admin Count\nfinal Counts.Conversation counts = Counts.conversationAdmins();\nList<Admin> admins = counts.getAdmins();\nfor (Admin admin : admins) {\n    out.println(\n      admin.getName() + \": \" +\n      admin.getClosed() + \", \" +\n      admin.getOpen());\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nConversation Admin Count\tconversation\tadmin"
  },
  {
    "title": "The admin model",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/admins/admin-model/",
    "html": "The admin model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/data-attributes/create-data-attributes/",
    "html": "Create a data attribute\nExample Requests & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept: application/json' \\\\-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"list_cda\\\",  \\\"description\\\": \\\"You are either alive or dead\\\",  \\\"data_type\\\": \\\"string\\\",  \\\"model\\\": \\\"contact\\\",  \\\"options\\\": [    {\\\"value\\\": \\\"alive\\\"},    {\\\"value\\\": \\\"dead\\\"}  ]}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0006klvnje6ffng7ot80\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You already have 'text_cda' in your people data. To save this as new company data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Your name for this attribute must only contain alphanumeric characters, currency symbols, and hyphens\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"'Name' is one of our standard attributes for your people data. To save this as new people data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Data Type isn't an option\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You must have at least two options on a list type data attribute\"\n    }\n  ]\n}\n\n\nYou can create a data attributes for a contact or a company.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nname\tstring\tThe name of the attribute.\nmodel\tString\tThe model where the attribute applies to. Accepts contact or company .\ndata_type\tstring\tThe type of data stored for this attribute. Accepted values are string, integer, float, boolean, date.\ndescription\tstring\t(Optional) The readable description you see in the UI for the attribute.\noptions\tarray\t(Optional) To create list attributes. Provide a set of hashes with value as the key of the options you want to make. data_type must be string.\nResponse\n\nThis will return a Data Attribute Model showing the details of your created attribute."
  },
  {
    "title": "Installation Health Check",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/installation-health-check/",
    "html": "Installation Health Check\nOverview\n\nThere may be issues that result in your app running into a state where it no longer functions after (or during) installation. This causes a poor app experience that can lead teammates to naturally churn from using your app, in most cases not ever knowing the root cause.\n\nIn order to solve this, we provide a Health Check which is designed to increase re-activation of your app and decrease any loss in retention.\n\nHow does it work?\n\nWe will make an API call to the endpoint you provide in the Installation Status section of your app in the Developer Hub. This will happen at least once a day for each workspace where the app is installed. With this information, we expect you to discover if the app is in a healthy state for this workspace and respond to the request telling us whether it's healthy, unhealthy, or you don't currently know.\n\nRequest\n\nYou will receive a POST request with a JSON payload that will include the workspace_id:\n\n{\n  \"workspace_id\": \"exampl3\"\n}\n\n\nThe requests are signed by Intercom via an X-Body-Signature header. You should use it to verify that the request is legit. You can read more about it here.\n\nResponse\n\nYou should respond with the state of your app for the given workspace. The states you can provide are:\n\nState Name\tState Description\nOK\tThe app is healthy and working correctly for the given workspace.\nUNHEALTHY\tEither the whole app or a part of it does not work correctly for that workspace and requires a teammate from that workspace to take action to fix it.\nUNKNOWN\tYou are unable to determine the health status of the given workspace at this time, or you're uncertain of the state (ie. you are getting an API error that you don't know how to interpret).\n\nReturned payloads can contain the following attributes:\n\nAttribute\tAccepted Values\tRequired?\tDescription\nstate\tOK\nUNHEALTHY\nUNKNOWN\tYes\tSee information above to understand which value to provide.\nmessage\tAny string\nMax 2084 characters\tOnly if state is UNHEALTHY\tWrite a concise message of why the app is unhealthy.\ncta_type\tURL_CTA\nREINSTALL_CTA\tNo\tSpecify whether you want a button present to fix the problem. Either choose a URL to navigate to, or to reinstall the app when clicked.\ncta_label\tAny string\tOnly if cta_type is URL_CTA\tWrite a short and concise label for the button's action.\ncta_url\tAny string\nMax 2084 characters\tOnly if cta_type is URL_CTA\tA URL where the teammate can fix the problem. Best practice is to navigate to a settings page.\n{\n  \"state\": \"UNHEALTHY\",\n  \"message\": \"You need to re-authenticate with Mailchimp to continue using the app.\",\n  \"cta_type\": \"URL_CTA\",\n  \"cta_url\": \"https://admin.mailchimp.com/account/\",\n  \"cta_label\": \"Finish setup\"\n}\n\nWhat should I consider as unhealthy?\n\nAn app can be unhealthy for multiple reasons, and these vary between apps. You're best placed to determine what is unhealthy in the context of your app.\n\nBased on previous experience, we have found the most common reasons are because a token has been revoked, an installation is incomplete (ie. you don't have any record for the given workspace_id) or you're missing crucial settings for the app to work at its full potential.\n\nYou should also consider the order in which you want to check for these issues. Consider which are most likely or most fundamental and ensure you check for these first, in order to return the most accurate error.\n\nHow can I proactively notify you if I find the state has changed?\n\nAt the moment, we send these notifications once per day. Rather than waiting for up to 24 hours for you to update an app's state for a given workspace, we offer the possibility to proactively notify us when the state might have changed.\n\nYou'll need to make a POST request to <https://api.intercom.io/app_install/status> with the same payload as shown in the Response section.\n\nPlease note that this endpoint is only available from Version 2.2 and upward. You will need to update your API version for this request to be accepted.\n\n$ curl https://api.intercom.io/app_install/status \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n-H 'Content-Type: application/json' -d\n\n{\n  \"state\": \"UNHEALTHY\",\n  \"message\": \"You need to re-authenticate with Mailchimp to continue using the app.\",\n  \"cta_type\": \"URL_CTA\",\n  \"cta_url\": \"https://admin.mailchimp.com/account/\",\n  \"cta_label\": \"Finish setup\"\n}\n\nWhat will customers see if I respond saying it's unhealthy?\n\nWe'll send out an email to the workspaces admins telling them that there is a problem with your app, which will include a button taking them through to the listing to see more on the issue itself.\n\nINFORMATION ON SENDING EMAILS\nWe only send emails once when the state changes to UNHEALTHY, and it's not immediate.\nIt can take up to 24 hours for the email to kick off.\n\nOn the App Store listing, we will update the top of the listing to reflect the error. This will show the message you gave us in the response, plus any CTA to navigate them towards fixing the app if you specified one."
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/companies/list-attached-segments-1/",
    "html": "List attached segments for companies\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/companies/<id>/segments \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\ncompany_not_found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\\n}\\n\n\n\nYou can fetch a list of all segments that belong to a company.\n\nResponse\n\nThis will return a list of Segment objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Segment Objects"
  },
  {
    "title": "Compatibility",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/common-structures/compatibility/",
    "html": "Compatibility\nUnknown Field\n{\\n  \\\"type\\\": \\\"user\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\",\\n  \\\"such_key\\\": \\\"so_value\\\"\\n}\n\nMust Ignore Interpretation\n{\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\"\\n}\n\n\nJSON objects in the API follow a must ignore processing model, where clients are expected to ignore data fields they don't understand.\n\nFor example if the client saw the JSON as shown in the example on the right ('Unknown Field') and did not understand the such_key field, it must pretend the field wasn't there and will process the object as if it looked liked the object shown in 'Must Ignore'.\n\nWhen fetching content, fields that are optional for API objects are indicated in the documentation - clients must not assume they will always be present. When submitting content, fields that are required to be sent by client are also indicated in the documentation - if these are not sent the API may reject the request.\n\nIn general the API may reject JSON where data is not valid or incomplete with a 422 Unprocessable Entity response and an error message explaining the issue. For example, an email message type may be rejected if it is not sent with a subject field."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/contacts/list-attached-segments/",
    "html": "List attached segments for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/segments \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Intercom-Version: 2.2'\n\nExample Errors\nContact not found\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can fetch a list of segments that are associated to a contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return a list of Segment objects.\n\nAttribute\tType\tDescription\ntype\tString\tThe type of object - list\ndata\tArray\tAn array containing Segment Objects"
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/visitors/convert-a-visitor-to-a-user/",
    "html": "Convert a visitor\n\nYou can merge a Visitor to a Contact of role type lead or user.\n\nWHAT HAPPENS UPON A VISITOR BEING CONVERTED?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers.\n\nRequest Body Parameters\nArgument\tType\tRequired?\tDescription\nvisitor\tObject\tYes\tThe unique identifiers to convert a single Visitor.\nuser\tObject\tYes\tThe unique identifiers retained after converting or merging.\ntype\tString\tYes\tRepresents the role of the Contact model. Accepts lead or user.\nVisitor object\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tOne of\tThe visitor's email.\nUser object (a contact)\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom, which will be represented as external_id.\nemail\tString\tNo\tThe contact's email, retained by default if one is present.\nExample Request & Response\ncurlcurl\n$ curl \\\\https://api.intercom.io/visitors/convert \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json' \\\\-H 'Content-Type: application/json' -d '{  \\\"visitor\\\": {    \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"  },  \\\"user\\\": {    \\\"email\\\": \\\"winstonsmith@truth.org\\\"  },  \\\"type\\\": \\\"user\\\"}'\n\n# NB: Full User objects are returned{  \\\"type\\\": \\\"lead\\\",  \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"}\n\nResponse\n\nThis will return a Contact model of the visitor you just converted or merged into."
  },
  {
    "title": "Redact a conversation part",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/redact-a-conversation-part/",
    "html": "Redact a conversation part\nExample Request & Response\n$ curl https://api.intercom.io/conversations/redact \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json' \\\n-d \n\n{\n  \"type\": <resource_type>,\n  \"conversation_id\": <conversation_id>,\n  \"conversation_part_id\": <conversation_part_id>,\n  \"source_id\": <source_id>,\n}\n\nHTTP/1.1 200 OK\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\",\n          \t\"name\": \"Mark Strong\",\n          \t\"email\": \"mk@acmeinc.org\"\n        }\n    ],\n    \"admin_assignee_id\": \"814860\",\n    \"team_assignee_id\": null,\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null,\n            \"name\": null,\n            \"email\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contacat_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\nExample Errors\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"ffa661e0-a805-4ca1-9c8f-87a926ce72bc\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_not_found\",\n      \"message\": \"conversation_id is a required parameter\"\n    }\n  ]\n}\n\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"ffa661e0-a805-4ca1-9c8f-87a926ce72bc\",\n  \"errors\": [\n    {\n      \"code\": \"conversation_part_not_redactable\",\n      \"message\": \"Part can't be redacted\"\n    }\n  ]\n}\n\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"ffa661e0-a805-4ca1-9c8f-87a926ce72bc\",\n  \"errors\": [\n    {\n      \"code\": \"type_mismatch\",\n      \"message\": \"The type attribute provided should be either 'conversation_part' or 'source'\"\n    }\n  ]\n}\n\n\nYou can redact a conversation part or the source message of a conversation (as seen in the source object).\n\nWHICH PARTS AND SOURCE MESSAGES CAN I REDACT?\n\nIf you are redacting a conversation part, it must have a body.\\nIf you are redacting a source message, it must have been created by a contact.\\nWe will return a conversation_part_not_redactable error if these criteria are not met.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\ntype\tString\tYes\tThe type of resource being redacted. Accepted values are conversation_part or source.\nconversation_id\tString\tYes\tThe id of the conversation.\nconversation_part_id\tString\tYes (if type: conversation_part)\tThe id of the conversation_part.\nsource_id\tString\tYes (if type: source)\tThe id of the source.\nResponse\n\nThis will return the Conversation with the Conversation Parts which have been redacted."
  },
  {
    "title": "Stored Data",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/responseobjects/stored-data/",
    "html": "Stored Data\nDescription\n\nA canvas object may optionally contain a stored_data object. This is where you can add key-value pairs of data that you want to be sent in whatever the next request is.\n\nFor example, the flow of your app might have multiple canvases with data being inputted on each one. You may want to have all this data available to use at the end of the flow for the final canvas. You can therefore put all this data in the stored_data object so it's sent in subsequent requests and is available at the end.\n\nExample Object\nstored_data: {\"key\": \"value\"} //Can be more than one pair\n"
  },
  {
    "title": "Results",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/responseobjects/results/",
    "html": "Results\nDescription\n\nThe results object should be sent when you want to end configuration of the app and trigger the Initialize request to be sent. You provide the key-value pairs of data you want access to and we will send these in the Initialize request within a card_creation_options object.\n\nExample Object\nresults: { \"key\": \"value\" } // Can be more than one pair\n"
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/teams/list-teams/",
    "html": "List all teams\nExample Request & Response\n$ curl https://api.intercom.io/teams \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"teams\": [\n        {\n            \"admin_ids\": [\n                492881,\n                1195856\n            ],\n            \"id\": \"814865\",\n            \"name\": \"BA_App\",\n            \"type\": \"team\"\n        },\n        {\n            \"admin_ids\": [\n                646303,\n                814860\n            ],\n            \"id\": \"2744328\",\n            \"name\": \"the_a_team\",\n            \"type\": \"team\"\n        }\n    ],\n    \"type\": \"team.list\"\n}\n\n\nYou can fetch a list of all teams for a given workspace.\n\nResponse\n\nThis will return a list of team objects for the App. The result may also have a pages object if the response is paginated.\n\nTeam List\nAttribute\tType\tDescription\ntype\tstring\tValue is 'team.list'\nteams\tarray\tA list of team objects\npages\tobject\tOptional. A pagination object, which may be empty, indicating no further pages to fetch."
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/articles/create-an-article/",
    "html": "Create an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"Thanks for everything\\\",\\n  \\\"description\\\": \\\"English description\\\",\\n  \\\"body\\\": \\\"<p>This is the body in html</p>\\\",\\n  \\\"author_id\\\": 1,\\n  \\\"state\\\": \\\"published\\\",\\n  \\\"parent_id\\\": 1,\\n  \\\"parent_type\\\": \\\"collection\\\",\\n  \\\"translated_content\\\": {\\n    \\\"fr\\\": {\\n      \\\"title\\\": \\\"Allez les verts\\\",\\n      \\\"description\\\": \\\"French description\\\",\\n      \\\"body\\\": \\\"<p>French body in html</p>\\\",\\n      \\\"author_id\\\": 1,\\n      \\\"state\\\": \\\"published\\\"\\n    }\\n  }\\n}\n\n\nYou can create a new article by making a POST request to https://api.intercom.io/articles.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\ntitle\tString\tYes\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tYes\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nDefaults to draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be created.\nResponse\n\nThis will return an Article object of the article you just created."
  },
  {
    "title": "Search for conversations",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/search-for-conversations/",
    "html": "Search for conversations\n\nYou can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\nSearch with single filter\n\nYou should provide the following parameters within a query object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tThe fields associated to a conversation that you can search for. See all accepted fields.\noperator\tYes\tThe operator that you want to compare by. See all accepted operators below.\nvalue\tYes\tThe value you want to search by.\nSearch with multiple filters\n\nYou can search with multiple filters by combining a list of single filter objects within a value array and saying whether you want to ensure all given values match (AND), or only one of these match (OR). The query object should contain these parameters.\n\nParameter\tRequired?\tDescription\noperator\tYes\tThe operator (AND or OR) by which to query the combined values.\nvalue\tYes\tAn array of single query objects.\nONLY CHECKING IF ONE VALUE MATCHES?\n\nIf you're only using OR to check that one matches out of the values, you could instead use IN as the operator in a single filter query. You could also use NIN to say that it does not match one of the values.\n\nNESTING & LIMITATIONS\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\\There are some limitations to the amount of multiple's there can be:\\_ There's a limit of max 2 nested filters_ There's a limit of max 15 filters for each AND or OR group\n\nExample Request (Single Filter)\nRequest\n{ \\\"query\\\":  {    \\\"field\\\": \\\"updated_at\\\",    \\\"operator\\\": \\\">\\\",    \\\"value\\\": 1560436784  }}\n\nExample Request (Multiple Filters)\njsonjson\n{ \\\"query\\\":  {    \\\"operator\\\": \\\"AND\\\",    \\\"value\\\": [      {        \\\"field\\\": \\\"statistics.time_to_admin_reply\\\",        \\\"operator\\\": \\\">\\\",        \\\"value\\\": 1000      },       {        \\\"field\\\": \\\"admin_assignee_id\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": \\\"1627383\\\"      },      {        \\\"field\\\": \\\"open\\\",        \\\"operator\\\": \\\"=\\\",        \\\"value\\\": true      }    ]  }}\n\n{ \\\"query\\\":  {    \\\"field\\\": \\\"tags\\\",    \\\"operator\\\": \\\"IN\\\",    \\\"value\\\": [\\\"feature-request\\\", \\\"bug\\\", \\\"confusion\\\"]  }}\n\nExample Request (Nested Filters)\nRequest\n{ \\\"query\\\":  {    \\\"operator\\\": \\\"AND\\\",    \\\"value\\\": [      {        \\\"operator\\\": \\\"OR\\\",        \\\"value\\\": [          {            \\\"field\\\": \\\"updated_at\\\",            \\\"operator\\\": \\\">\\\",            \\\"value\\\": 1560436650          },           {            \\\"field\\\": \\\"conversation_rating.rating\\\",            \\\"operator\\\": \\\"=\\\",            \\\"value\\\": 1          }        ]      },      {        \\\"operator\\\": \\\"OR\\\",        \\\"value\\\": [          {            \\\"field\\\": \\\"updated_at\\\",            \\\"operator\\\": \\\">\\\",            \\\"value\\\": 1560436650          },           {            \\\"field\\\": \\\"conversation_rating.rating\\\",            \\\"operator\\\": \\\"=\\\",            \\\"value\\\": 2          }        ]      }    ]  }}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n      {\n        \"code\": \"bad_request\",\n        \"message\": \"bad 'random_param' parameter\"\n      }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_query\",\n      \"message\": \"Invalid query. Ensure 'field', 'operator', 'value' are present for field queries. Ensure 'operator' and 'value' for composite queries.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"123 is not a valid string\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_field\",\n      \"message\": \"not_a_field is not a valid field\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_values\",\n      \"message\": \"Value depth exceeds 10 items\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_value\",\n      \"message\": \"Number of elements in composite query is greater than 15, please try again with a smaller list\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": null,\n  \"errors\": [\n    {\n      \"code\": \"invalid_operator\",\n      \"message\": \"Composite operators must be of type AND or OR \"\n    }\n  ]\n}\n\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString Accepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolena\nread\tBoolen\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString\nAccepted Operators\n\nThe table below shows the operators you can use to define how you want to search for the value. The operator should be put in as a string (\"=\"). The operator has to be compatible with the field's type (eg. you cannot search with > for a given string value as it's only compatible for integer's and dates).\n\nOperator\tValid Types\tDescription\n=\tAll\tEquals\n!=\tAll\tDoesn't Equal\nIN\tAll\tIn Shortcut for OR queries Values most be in Array\nNIN\tAll\tNot In Shortcut for OR ! queries Values must be in Array\n>\tInteger Date (UNIX Timestamp)\tGreater (or equal) than\n<\tInteger Date (UNIX Timestamp)\tLower (or equal) than\n~\tString\tContains\n!~\tString\tDoesn't Contain\n^\tString\tStarts With\n$\tString\tEnds With\nResponse\n\nA JSON payload with a list of Conversations Model that match the search query, with a total_count integer saying how many models have been returned."
  },
  {
    "title": "The conversation model",
    "url": "https://developers.intercom.com/docs/references/2.2/rest-api/conversations/conversation-model/",
    "html": "The conversation model\nExample Conversation Object\n{\n    \"type\": \"conversation\",\n    \"id\": \"1911149811\",\n    \"created_at\": 1539897198,\n    \"updated_at\": 1540393270,\n    \"source\": {\n        \"attachments\": [],\n        \"author\": {\n            \"id\": \"5bc8f7421ae2d96695c18a\",\n            \"type\": \"lead\"\n        },\n        \"body\": \"<p>Hi</p>\",\n        \"delivered_as\": \"customer_initiated\",\n        \"id\": \"269650473\",\n        \"subject\": \"\",\n        \"type\": \"conversation\",\n        \"url\": \"https://intercom-survey-app.glitch.me/\",\n        \"redacted\": false\n    },\n    \"contacts\": [\n        {\n            \"id\": \"5bc8f7ae2d96695c18a\",\n            \"type\": \"lead\"\n        }\n    ],\n    \"teammates\": [\n        {\n            \"id\": \"814860\",\n            \"type\": \"admin\"\n        }\n    ],\n    \"title\": \"Conversation Title\",\n    \"admin_assignee_id\": 814860,\n    \"team_assignee_id\": null,\n    \"open\": true,\n    \"state\": \"open\",\n    \"read\": true,\n    \"waiting_since\": 64654125776\n    \"snoozed_until\": null,\n    \"tags\": {\n        \"tags\": [],\n        \"type\": \"tag.list\",\n    },\n    \"first_contact_reply\": {\n    \t\"created_at\": 1539897198\n    \t\"type\": \"conversation\",\n    \t\"url\": \"https://intercom-survey-app.glitch.me/\"\n    },\n    \"priority\": \"not_priority\",\n    \"sla_applied\": {\n    \t\"sla_name\": \"VIP customer <5m\",\n      \"sla_status\": \"missed\",\n    },\n    \"conversation_rating\": {\n        \"created_at\": null,\n        \"contact\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"rating\": null,\n        \"remark\": null,\n        \"teammate\": {\n            \"id\": null,\n            \"type\": null\n        }\n    },\n    \"statistics\": {\n      \"time_to_assignment\": 2310,\n      \"time_to_admin_reply\": 2408,\n      \"time_to_first_close\": 4915 ,\n      \"time_to_last_close\": 5125,\n      \"median_time_to_reply\": 321,\n      \"first_contact_reply_at\": 1539897200,\n      \"first_assignment_at\": 1539897200,\n      \"first_admin_reply_at\": 1539897200,\n      \"first_close_at\": 1539897200,\n      \"last_assignment_at\": 1539897200,\n      \"last_assignment_admin_reply_at\": 1539897200,\n      \"last_contact_reply_at\": 1539897200,\n      \"last_admin_reply_at\": 1539897200,\n      \"last_close_at\": 1539897200,\n      \"last_closed_by\": {\n      \t\"type\": \"admin\",\n        \"id\": \"325432652\",\n        \"name\": \"Tom Smith\",\n        \"email\": \"tom@example.com\"\n      },\n      \"count_reopens\": 3,\n      \"count_assignments\": 2,\n      \"count_conversation_parts\": 67\n    },\n    \"conversation_parts\": {\n        \"conversation_parts\": [\n            {\n                \"assigned_to\": null,\n                \"attachments\": [],\n                \"author\": {\n                    \"id\": \"815309\",\n                    \"type\": \"bot\"\n                },\n                \"body\": \"<p>Test_App typically replies in a few hours.</p>\",\n                \"created_at\": 1539897200,\n                \"external_id\": null,\n                \"id\": \"2202737122\",\n                \"notified_at\": 1539897200,\n                \"part_type\": \"comment\",\n                \"type\": \"conversation_part\",\n                \"updated_at\": 1539897200,\n                \"redacted\": false\n            },\n          #List of conversation parts...\n        ],\n        \"total_count\": 67,\n        \"type\": \"conversation_part.list\"\n    }    \n}\n\n{\n   \"type\":\"conversation\",\n   \"id\":\"1122334455\",\n   \"created_at\":1567693209,\n   \"updated_at\":1568367881,\n   \"waiting_since\":1568367881,\n   \"snoozed_until\":null,\n   \"admin_assignee_id\": \"814860\",\n   \"team_assignee_id\": null,\n   \"open\":true,\n   \"state\":\"open\",\n   \"read\":true,\n   \"tags\":{\n      \"type\":\"tag.list\",\n      \"tags\":[\n\n      ]\n   },\n   \"conversation_rating\":{\n      \"rating\":null,\n      \"remark\":null,\n      \"created_at\":null,\n      \"customer\":{\n         \"type\":null,\n         \"id\":null\n      },\n      \"teammate\":{\n         \"type\":null,\n         \"id\":null\n      }\n   },\n   \"conversation_parts\":{\n      \"type\":\"conversation_part.list\",\n      \"conversation_parts\":[\n         {\n            \"type\":\"conversation_part\",\n            \"id\":\"1223445555\",\n            \"part_type\":\"comment\",\n            \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n            \"created_at\":1567693273,\n            \"updated_at\":1567693273,\n            \"notified_at\":1567693273,\n            \"assigned_to\":null,\n             \"author\":{\n               \"type\":\"user\",\n               \"id\":\"5310d8e7598c9a0b24000002\",\n               \"name\":\"\",\n               \"email\":\"\"\n            },\n            \"attachments\": [],\n            \"external_id\":null\n         },\n      ],\n      \"total_count\":1\n   },\n   \"customer_first_reply\":{\n      \"created_at\":1567693209,\n      \"type\":\"twitter\",\n      \"url\":\"\"\n   },\n   \"conversation_message\":{\n      \"type\":\"twitter\",\n      \"id\":\"409820079\",\n      \"delivered_as\":\"customer_initiated\",\n      \"subject\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"body\":\"We've removed this part of the conversation to comply with Twitter's terms and conditions. You can view the complete conversation in Intercom.\",\n      \"author\":{\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\",\n         \"name\":\"\",\n         \"email\":\"\"\n      },\n      \"attachments\":[\n\n      ],\n      \"url\":\"\"\n   },\n   \"customers\":[\n      {\n         \"type\":\"user\",\n         \"id\":\"5310d8e7598c9a0b24000002\"\n      }\n   ],\n   \"user\":{\n      \"type\":\"user\",\n      \"id\":\"5310d8e7598c9a0b24000002\"\n   }\n}\n\n\nConversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.\n\nConversation Object\nKey\tType\tDescription\ntype\tString\tAlways conversation.\nid\tString\tThe id representing the conversation.\ncreated_at\tTimestamp\tThe time the conversation was created.\nupdated_at\tTimestamp\tThe last time the conversation was updated.\nsource\tObject\tThe Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated.\ncontacts\tList\tThe list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature.\nteammates\tList\tThe list of teammates who participated in the conversation (wrote at least one conversation part).\ntitle\tString\tThe title given to the conversation.\nadmin_assignee_id\tInteger\tThe id of the admin assigned to the conversation. If it's not assigned to a team it will return null.\nteam_assignee_id\tString\tThe id of the team assigned to the conversation. If it's not assigned to a team it will return null.\nopen\tBoolean\tIndicates whether a conversation is open (true) or closed (false).\nstate\tString\tCan be set to \"open\", \"closed\" or \"snoozed\".\nread\tBoolean\tIndicates whether a conversation has been read.\nwaiting_since\tTimestamp\tThe last time a Contact responded to an Admin. In other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.\nsnoozed_until\tTimestamp\tIf set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time.\ntags\tList\tA list of tags objects associated with the conversation.\nfirst_contact_reply\tObject\tAn object containing information on the first users message. For a contact initiated message this will represent the users original message.\npriority\tString\tIf marked as priority, it will return priority or else not_priority.\nsla_applied\tObject\tThe SLA Applied object contains the details for which SLA has been applied to this conversation.\nconversation_rating\tObject\tThe Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.\nstatistics\tObject\tA Statistics object containing all information required for reporting, with timestamps and calculated metrics.\nconversation_parts\tList\tA list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.\nSource object\nAttribute\tType\tDescription\ntype\tString\tThis includes conversation, push, facebook, twitter and email.\nid\tString\tThe id representing the message.\ndelivered_as\tString\tOptional. The message subject. For Twitter, this will show a generic message regarding why\nsubject\tString\tOptional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.\nbody\tString\tThe message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.\nauthor\tObject\tThe object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams. For Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nurl\tString\tThe URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.\nredacted\tBoolean\tWhether or not the source message has been redacted. Only applicable for contact initiated messages.\nNOTE\n\nPlease note that URLs for User uploaded images & files have a 30 minute expiration. Once the expiration has passed, the link will no longer be valid and result in a 404. This means that if a URL is copied, and then reused elsewhere, it will continue to work until the expiry threshold. A new URL can be generated by fetching the conversation data again.\n\nContact Object\nAttribute\tType\tDescription\ntype\tString\tThis can be either a user or a lead.\nid\tString\tThe ID for the user or lead.\nTeammate Object\nAttribute\tType\tDescription\ntype\tString\tCurrently this will always be of type admin. Conversations not rated will return null.\nid\tString\tThe ID of the Admin.\nFirst Contact Reply Object\nAttribute\tType\tDescription\ntype\tString\tOver which channel did the first reply occur. Options include conversation, push, facebook, twitter and email.\nurl\tString\tThe URL where the first reply originated from.\nFor Twitter and Email replies, this will be blank.\ncreated_at\tTimestamp\tThe time the users messages was created. This is in unix timestamp format.\nConversation Rating Object\nAttribute\tType\tDescription\nrating\tInteger\tThe rating, between 1 and 5, for the conversation.\nremark\tString\tAn optional field to add a remark to correspond to the number rating.\ncreated_at\tTimestamp\tThe time the rating was requested in the conversation being rated.\ncontact\tObject\tAn object containing the ID and type of the Contact.\nteammate\tObject\tAn object containing the ID and type of the Intercom teammate associated with the conversation when it was rated.\nSLA Object\nAttribute\tType\tDescription\nsla_name\tString\tThe name of the SLA as given by the teammate when it was created.\nsla_status\tString\tOne of \"hit\", \"missed\", or \"cancelled\".\nStatistics Object\nAttribute\tType\tDescription\ntime_to_assignment\tInteger\tDuration until last assignment before first admin reply. In seconds.\ntime_to_admin_reply\tInteger\tDuration until first admin reply. Subtracts out of business hours. In seconds.\ntime_to_first_close\tInteger\tDuration until conversation was closed first time. Subtracts out of business hours. In seconds.\ntime_to_last_close\tInteger\tDuration until conversation was closed last time. Subtracts out of business hours. In seconds.\nmedian_time_to_reply\tInteger\tMedian based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.\nfirst_contact_reply_at\tTimestamp\tTime of first text conversation part from a contact.\nfirst_assignment_at\tTimestamp\tTime of first assignment after first_contact_reply_at.\nfirst_admin_reply_at\tTimestamp\tTime of first admin reply after first_contact_reply_at.\nfirst_close_at\tTimestamp\tTime of first close after first_contact_reply_at.\nlast_assignment_at\tTimestamp\tTime of last assignment after first_contact_reply_at.\nlast_assignment_admin_reply_at\tTimestamp\tTime of first admin reply since most recent assignment.\nlast_contact_reply_at\tTimestamp\tTime of the last conversation part from a contact.\nlast_admin_reply_at\tTimestamp\tTime of the last conversation part from an admin.\nlast_close_at\tTimestamp\tTime of the last conversation close.\nlast_closed_by\tObject\tThe last admin who closed the conversation. Returns a reference to an Admin object.\ncount_reopens\tInteger\tNumber of reopens after first_contact_reply_at.\ncount_assignments\tInteger\tNumber of assignments after first_contact_reply_at.\ncount_conversations_parts\tInteger\tTotal number of conversation parts.\nConversation Part Object\n\n🚧\n\nConversation Parts are not returned when listing or searching for all conversations, only when retrieving a single conversation. There is also a limit of 500 parts.\n\nAttribute\tType\tDescription\ntype\tString\tAlways conversation_part.\nid\tString\tThe id representing the conversation part.\npart_type\tString\tThe type of conversation part.\nbody\tString\tThe message body, which may contain HTML.\nFor Twitter, this will show a generic message regarding why the body is obscured.\ncreated_at\tTimestamp\tThe time the conversation part was created.\nupdated_at\tTimestamp\tThe last time the conversation part was updated.\nnotified_at\tTimestamp\tThe time the user was notified with the conversation part.\nassigned_to\tString\tThe id of the admin that was assigned the conversation by this conversation_part (null if there has been no change in assignment.)\nauthor\tString\tThe type of individual that sent the message (user, admin or bot) and their related id.\nFor Twitter, this will be blank.\nattachments\tList\tA list of attachments for the part.\nredacted\tBoolean\tWhether or not a conversation part has been redacted.\nConversation Part Types\nType\tDescription\ncomment\tStandard reply from customer or admin to a conversation.\nnote\tA note created by an admin on the conversation. A note will only be viewable as an admin.\nnote_and_reopen\tAdd a note and reopen the conversations in the one action.\nassignment\tAn assignment of the conversation to an admin, or Nobody.\nopen\tIdentifies a conversation has been opened.\nclose\tIdentifies a conversation has been closed.\naway_mode_assignment\tConversation has been assigned due to the admin being in away mode.\nparticipant_added\tA participant has been added to a group conversation.\nparticipant_removed\tA participant has been removed from a group conversation.\nconversation_rating_changed\tA conversation rating has been changed, not this can only occur before the rating has been submitted. Once it has been submitted it cannot be changed.\nconversation_rating_remark_added\tA conversation remark has been added to the conversation.\nsnoozed\tA conversation has been snoozed.\nunsnoozed\tA conversation has been unsnoozed.\nassign_and_unsnooze\tAssign a conversation and unsnooze it in one action..\ntimer_unsnooze\tUnsnooze a conversation after a set time."
  },
  {
    "title": "The admin model",
    "url": "https://developers.intercom.com/docs/references/2.3/rest-api/admins/admin-model/",
    "html": "The admin model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "Content",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/responseobjects/content/",
    "html": "Content\nDescription\n\nThe content object is where you specify the UI of your app. You provide us with a set of components in a components array that we then render.\n\nThe content object should usually be returned within the canvas object. If you're responding to a Live Canvas request however, then you should only respond with the content object.\n\nAttributes\nKey\tType\tDescription\ncomponents\tarray\tThe list of components to be rendered. See the components further in this reference.\nExample Object\n{\n  content: {\n    components: [\n      {\n        \"type\": \"text\",\n        \"id\": \"component-1\",\n        \"text\": \"This is the first component\",\n        \"align\": \"center\",\n        \"style\": \"header\"\n      },\n      {\n        \"type\": \"button\",\n        \"id\": \"component-2\",\n        \"label\": \"This is the second component\",\n        \"action\": {\n          \"type\": \"submit\"\n        }\n      }\n    ]\n  }\n}\n"
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/messages/admin-initiated-conversation/",
    "html": "Create a message\nExample Request & Response\n$ curl https://api.intercom.io/messages \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d\n\n{\n  \"message_type\": \"email\",\n  \"subject\": \"Hey\",\n  \"body\": \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"from\": {\n    \"type\": \"admin\",\n    \"id\": \"394051\"\n  },\n  \"to\": {\n    \"type\": \"user\",\n    \"id\": \"536e564f316c83104c000020\"\n  }\n}\n\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"admin_message\",\n  \"id\": \"2001\",\n  \"created_at\": 1401916877,\n  \"message_type\": \"email\",\n  \"subject\" : \"Hey\",\n  \"body\" : \"Ponies, cute small horses or something more sinister?\",\n  \"template\": \"plain\",\n  \"owner\": {\n    \"email\": \"wash@serenity.io\",\n    \"id\": \"394051\",\n    \"name\": \"Wash\",\n    \"type\": \"admin\"\n  }\n}\n\nintercom.messages.create(\n  :message_type => 'email',\n  :subject  => 'This Land',\n  :body     => \"Har har har! Mine is an evil laugh!\",\n  :template => \"plain\", # or \"personal\",\n  :from => {\n    :type => \"admin\",\n    :id   => \"394051\"\n  },\n  :to => {\n    :type => \"user\",\n    :id => \"536e564f316c83104c000020\"\n  }\n)\n\n<?php\n$intercom->messages->create([\n    \"message_type\" => \"email\",\n    \"subject\" => \"Plato Quote\",\n    \"body\" => \"And what, Socrates, is the food of the soul?\",\n    \"from\" => [\n        \"type\" => \"admin\",\n        \"id\" => \"814860\"\n    ],\n    \"to\" => [\n        \"type\" => \"user\",\n        \"email\" => \"socrates@email.com\"\n    ]\n]);\n?>\n\nUser user = new User()\n  .setId(\"5310d8e8598c9a0b24000005\");\nAdmin admin = new Admin()\n  .setId(\"394051\");\nAdminMessage adminMessage = new AdminMessage()\n  .setAdmin(admin)\n  .setUser(user)\n  .setSubject(\"This Land\")\n  .setBody(\"Har har har! Mine is an evil laugh!\")\n  .setMessageType(\"email\")\n  .setTemplate(\"plain\"); // or personal\nConversation.create(adminMessage);\n\n\nYou can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\nDELAY AFTER CONTACT CREATION\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nmessage_type\tString\tYes\tThe kind of message being created. Values: inapp or email\nsubject\tString\tYes, if message_type: email.\tThe title of the email.\nbody\tString\tYes\tThe content of the message. HTML and plaintext are supported.\ntemplate\tString\tYes, if message_type: email.\tThe style of the outgoing message. Possible values plain or personal.\nfrom\tObject\tYes\tSee From Object below for more.\nto\tObject\tYes\tSee To Object below for more.\ncreate_conversation_without_contact_reply\tBoolean\tNo\tWhether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.\nFrom Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tAlways admin.\nid\tString\tYes\tThe identifier for the admin which is given by Intercom.\nTo Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tThe role associated to the contact - user or lead.\nid\tString\tYes\tThe identifier for the contact which is given by Intercom.\nResponse\n\nThis will return the Message that has been created.\n\nRETRIEVING ASSOCIATED CONVERSATIONS\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Attach a contact to a subscription type",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/subscription-types/attach-a-contact/",
    "html": "Attach a contact to a subscription type\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/subscriptions \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\"\\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can opt out a single contact.\n\nRequest Path Parameter\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the subscription type which is given by Intercom\nconsent_type\tString\tThe consent_type of the subscription, currently only opt_out is supported.\nResponse\n\nThis will return a Subscription Type model for the subscription type that was added to the contact."
  },
  {
    "title": "Data Export",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Export/data_export/",
    "html": "The data export api is used to view all message sent & viewed in a given timeframe."
  },
  {
    "title": "Attach a conversation",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/tags/attach-a-tag-to-a-conversation/",
    "html": "Attach a conversation\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/conversations/<id>/tags \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"2084335\\\",\\n  \\\"admin_id\\\": \\\"123\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Conversation Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can tag a single conversation.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the conversation which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the tag which is given by Intercom\nadmin_id\tString\tYes\tThe unique identifier for the admin who is applying the tag.\nResponse\n\nThis will return a Tag model for the tag that was added to the contact."
  },
  {
    "title": "The export job model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/exports-content-stats/export-job-model/",
    "html": "The export job model\n\nYou can use the API to export data for all messages sent or viewed in a given timeframe. This data will be valuable in analysing the performance of your Intercom messages, including all outbound content types such as Posts, Custom Bots, Emails, Surveys and more. As well enabling you to join message engagement data with user data external to Intercom to attribute performance. More on the feature is here.\n\nYou should perform three operations in order to retrieve your message data:\n\nCreate an export job where you set the timeframe for the messages you want to export\nCheck the status of your export job\nDownload the message data once the export job has been completed\nExport Job Object\nKey\tValue\tDescription\njob_identfier\tstring\tThe identifier for your job.\nstatus\tpending, in_progress, failed, completed, no_data,\tThe current state of your job.\ndownload_expires_at\tdate\tThe time after which you will not be able to access the data.\ndownload_url\tURL\tThe location where you can download your data.\nEXPORT LIMIT SIZE\n\nIf your export job exceeds 10 millions rows in size then we will only return the first 10 millions rows. In other words, we cannot export any job greater than 10 million rows"
  },
  {
    "title": "Data Attribute",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Attributes/data_attribute/",
    "html": "Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes."
  },
  {
    "title": "Create Conversation Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_conversation_request/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Create a note for contact",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/notes/create-note-for-contact/",
    "html": "Create a note for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/notes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"body\\\": \\\"Shiny\\\",\\n  \\\"admin_id\\\": \\\"12345\\\"\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can remove a note to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom.\nRequest Body Parameter\nParameter\tType\tRequired?\tDescription\nbody\tString\tYes\tThe text of the note.\nadmin_id\tString\tYes\tThe unique identifier for the admin which is given by Intercom.\nResponse\n\nThis will return a Note model for the note that was added to the contact."
  },
  {
    "title": "Create Data Export Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_data_exports_request/",
    "html": "Request for creating a data export"
  },
  {
    "title": "Create Message Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_message_request/",
    "html": "You can create a message"
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/help-center/create-a-collection/",
    "html": "Create a collection\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/help_center/collections \\\\-X POST \\\\-H 'Authorization:Bearer <Your access token>' \\\\-H 'Accept:application/json'-H 'Content-Type: application/json' -d{  \\\"name\\\": \\\"Collection 1\\\",  \\\"description\\\": \\\"English description\\\",  \\\"translated_content\\\": {    \\\"es\\\": {      \\\"name\\\": \\\"Colección 1\\\",      \\\"description\\\": \\\"Spanish description\\\"    }  }}\n\n\nYou can create a new collection by making a POST request to https://api.intercom.io/help_center/collections.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\nname\tString\tYes\tThe name of the collection. For multilingual collections, this will be the name of the default language's content.\ndescription\tString\tNo\tThe description of the collection. For multilingual collections, this will be the description of the default language's content.\ntranslated_content\tString\tNo\tA Group Translated Content Object whereby you can specify multiple multilingual collections to be created.\nResponse\n\nThis will return a Collection Model of the collection you just created."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "Conversation",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Conversations/conversation/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Create Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_article_request/",
    "html": "You can create an Article"
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/assign_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.2/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.2 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Article Translated Content",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/article_translated_content/",
    "html": "The Translated Content of an Article. The keys are the locale codes and the values are the translated content of the article."
  },
  {
    "title": "Conversation teammates",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_teammates/",
    "html": "The list of teammates who participated in the conversation (wrote at least one conversation part)."
  },
  {
    "title": "Convert Ticket Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/convert_conversation_to_ticket_request/",
    "html": "You can convert a Conversation to a Ticket"
  },
  {
    "title": "Conversation source",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_source/",
    "html": "The Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated."
  },
  {
    "title": "Conversation statistics",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_statistics/",
    "html": "A Statistics object containing all information required for reporting, with timestamps and calculated metrics."
  },
  {
    "title": "Use of HTTP",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/use-of-http/",
    "html": "Use of HTTP\n\nRequest methods are used in accordance with HTTP.\n\nGET is used to access resources and perform queries. The API does not allow modifications (creates, updates, deletes) to occur via GET.\nPOST is used to create or update resources. The preferred model for creation is to post JSON to a 'collections' resource - for example the collections resource for users is https://api.intercom.io/users.\nDELETE is used to delete resources.\n\nResponses use standard HTTP codes. Where there are client or server errors, a list of of one or more errors in JSON format is returned in the body - see Error Objects for more details.\n\nThe API may send cache directives where suitable, notably the ETag, Last-Modified and If-Modified-Since headers.\n\nThe Accept header must be used by a client used to indicate a preferred response for GET/HEAD requests. Requests without an Accept header of application/json may be rejected with a client error of 404 or 406.\n\nThe Content-Type header should be used by clients to indicate the submitted format for POST/PUT requests."
  },
  {
    "title": "Visitor",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/visitor/",
    "html": "Visitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform. The Visitors resource provides methods to fetch, update, convert and delete."
  },
  {
    "title": "Update Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_visitor_request/",
    "html": "Update an existing visitor."
  },
  {
    "title": "Conversation Deleted",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_deleted/",
    "html": "deleted conversation object"
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/visitors/convert-a-visitor-to-a-user/",
    "html": "Convert a visitor\n\nYou can merge a Visitor to a Contact of role type lead or user.\n\nWHAT HAPPENS UPON A VISITOR BEING CONVERTED?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers.\n\nRequest Body Parameters\nArgument\tType\tRequired?\tDescription\nvisitor\tObject\tYes\tThe unique identifiers to convert a single Visitor.\nuser\tObject\tYes\tThe unique identifiers retained after converting or merging.\ntype\tString\tYes\tRepresents the role of the Contact model.\nAccepts lead or user.\nVisitor object\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom.\nemail\tString\tOne of\tThe visitor's email.\nUser object (a contact)\nArgument\tType\tRequired?\tDescription\nid\tString\tOne of\tThe unique identifier for the contact which is given by Intercom.\nuser_id\tString\tOne of\tA unique identifier for the contact which is given to Intercom, which will be represented as external_id.\nemail\tString\tNo\tThe contact's email, retained by default if one is present.\nExample Request & Response\ncurlcurl\n$ curl \\\\\\nhttps://api.intercom.io/visitors/convert \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d '\\n{\\n  \\\"visitor\\\": {\\n    \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"winstonsmith@truth.org\\\"\\n  },\\n  \\\"type\\\": \\\"user\\\"\\n}'\\n\n\n# NB: Full User objects are returned\\n{\\n  \\\"type\\\": \\\"lead\\\",\\n  \\\"user_id\\\": \\\"8a88a590-e1c3-41e2-a502-e0649dbf721c\\\"\\n}\n\nResponse\n\nThis will return a Contact model of the visitor you just converted or merged into."
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/data-attributes/create-data-attributes/",
    "html": "Create a data attribute\nExample Requests & Response\ncurlhttp\n$ curl https://api.intercom.io/data_attributes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"name\\\": \\\"list_cda\\\",\\n  \\\"description\\\": \\\"You are either alive or dead\\\",\\n  \\\"data_type\\\": \\\"options\\\",\\n  \\\"model\\\": \\\"contact\\\",\\n  \\\"options\\\": [\\n    {\\\"value\\\": \\\"alive\\\"},\\n    {\\\"value\\\": \\\"dead\\\"}\\n  ]\\n}\n\nExample Errors\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0006klvnje6ffng7ot80\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You already have 'text_cda' in your people data. To save this as new company data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Your name for this attribute must only contain alphanumeric characters, currency symbols, and hyphens\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"'Name' is one of our standard attributes for your people data. To save this as new people data, use a different name.\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"Data Type isn't an option\"\n    }\n  ]\n}\n\nHTTP/1.1 400 BAD REQUEST\n{\n  \"type\": \"error.list\",\n  \"request_id\": \"0000rnvpf3m1f3nf4k40\",\n  \"errors\": [\n    {\n      \"code\": \"parameter_invalid\",\n      \"message\": \"You must have at least two options on a list type data attribute\"\n    }\n  ]\n}\n\n\nYou can create a data attributes for a contact or a company.\n\nRequest Body Parameters\nAttribute\tType\tDescription\nname\tstring\tThe name of the attribute.\nmodel\tString\tThe model where the attribute applies to. Accepts contact or company .\ndata_type\tstring\tThe type of data stored for this attribute. Accepted values are string, integer, float, boolean, date.\ndescription\tstring\t(Optional) The readable description you see in the UI for the attribute.\noptions\tarray\t(Optional) To create list attributes. Provide a set of hashes with value as the key of the options you want to make. data_type must be string.\nResponse\n\nThis will return a Data Attribute Model showing the details of your created attribute."
  },
  {
    "title": "The admin model",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/admins/admin-model/",
    "html": "The admin model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "Admin Conversations Count Model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/counts/admin-conversations/",
    "html": "Admin Conversations Count Model\nAdmin Conversation Count Object\n\nThe admin conversation count supplies per Admin counts\n\nAttribute\tType\tDescription\ntype\tstring\tvalue is 'count'\nconversation\tobject\tContains counts related to admins\nconversation.admin\tarray\tContains and array of objects detailing each Admin\nconversation.admin.open\tnumber\tContains the number of open conversations for the Admin\nconversation.admin.closed\tnumber\tContains the number of closed conversations for the Admin\nconversation.admin.id\tstring\tContains the Admin id\nconversation.admin.name\tstring\tContains the Admin name\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\n# Conversation Admin Counts\n$ curl 'https://api.intercom.io/counts?type=conversation&count=admin' \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\n# Conversation Admin Counts\nHTTP/1.1 200 OK\n\n{\n  \"type\": \"count\",\n  \"conversation\": {\n    \"admin\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Wash\",\n        \"open\": 0,\n        \"closed\": 1\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Jayne\",\n        \"open\": 0,\n        \"closed\": 0\n      }\n    ]\n  }\n}\n\nintercom.counts.for_type(type: 'conversation', count: 'admin')\n\n<?php\n// Conversation Admin Count\n$counts = $intercom->counts->getCounts([\"type\" => \"conversation\", \"count\" => \"admin\"]);\nprint_r($counts);\n?>\n\n// Conversation Admin Count\nfinal Counts.Conversation counts = Counts.conversationAdmins();\nList<Admin> admins = counts.getAdmins();\nfor (Admin admin : admins) {\n    out.println(\n      admin.getName() + \": \" +\n      admin.getClosed() + \", \" +\n      admin.getOpen());\n}\n\n\nThe counts for your App can be obtained using GET against the https://api.intercom.io/counts URL with the type and count parameters as follows\n\nCount\tType Value\tCount Value\nConversation Admin Count\tconversation\tadmin"
  },
  {
    "title": "Update Ticket Type Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_ticket_type_request/",
    "html": "The request payload for updating a ticket type. You can copy the icon property for your ticket type from Twemoji Cheatsheet"
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/teams/list-teams/",
    "html": "List all teams\nExample Request & Response\n$ curl https://api.intercom.io/teams \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json'\n\nHTTP/1.1 200 Ok\n{\n    \"teams\": [\n        {\n            \"admin_ids\": [\n                492881,\n                1195856\n            ],\n            \"id\": \"814865\",\n            \"name\": \"BA_App\",\n            \"type\": \"team\"\n        },\n        {\n            \"admin_ids\": [\n                646303,\n                814860\n            ],\n            \"id\": \"2744328\",\n            \"name\": \"the_a_team\",\n            \"type\": \"team\"\n        }\n    ],\n    \"type\": \"team.list\"\n}\n\n\nYou can fetch a list of all teams for a given workspace.\n\nResponse\n\nThis will return a list of team objects for the App.\n\nTeam List\nAttribute\tType\tDescription\ntype\tstring\tValue is 'team.list'\nteams\tarray\tA list of team objects"
  },
  {
    "title": "Update a company",
    "url": "https://developers.intercom.com/docs/references/2.4/rest-api/companies/update-a-company/",
    "html": "Update a company\nExample Request\n$ curl https://api.intercom.io/companies/<id> \\\n-X PUT \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type:application/json' -d '\n{\n  \"name\": \"Blue Sun\",\n  \"plan\": \"Paid\",\n  \"company_id\": \"6\",\n  \"remote_created_at\": 1394531169,\n  \"size\": 750,\n  \"website\": \"http://www.example.com\",\n  \"industry\": \"Manufacturing\",\n  \"custom_attributes\": {\n    \"paid_subscriber\" : true,\n    \"team_mates\": 0,\n    \"monthly_spend\": 155.98\n  }\n}'\n\nHTTP/1.1 200 OK\n\n{\n    \"type\": \"company\",\n    \"company_id\": \"6\",\n    \"id\": \"57e0120926806ceca3c13ba8\",\n    \"app_id\": \"pi3243fa\",\n    \"name\": \"Blue Sun\",\n    \"remote_created_at\": 1394531169,\n    \"created_at\": 1474302473,\n    \"updated_at\": 1475659931,\n    \"last_request_at\": 1473419085,\n    \"monthly_spend\": 49,\n    \"session_count\": 0,\n    \"user_count\": 0,\n    \"tags\": {\n        \"type\": \"tag.list\",\n        \"tags\": []\n    },\n    \"segments\": {\n        \"type\": \"segment.list\",\n        \"segments\": [\n            {\n                \"type\": \"segment\",\n                \"id\": \"56cc69cc8618d37b45000009\"\n            }\n        ]\n    },\n    \"plan\": {\n        \"type\": \"plan\",\n        \"id\": \"108609\",\n        \"name\": \"Paid\"\n    },\n    \"custom_attributes\": {\n        \"paid_subscriber\": true,\n        \"team_mates\": 0,\n        \"referral_source\": \"Google\",\n        \"founded\": \"20th Century\",\n        \"monthly_spend\": 155.98,\n        \"remove\": true\n    }\n}\n\n\nExample Errors\n\nCompany not found\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"2a1900aa-59ec-4ffd-96de-6e0ec78a920a\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"company_not_found\\\",\\n      \\\"message\\\": \\\"Company Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can update an existing company\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nRequest Body Parameters\nAttribute\tType\tDescription\nremote_created_at\ttimestamp\tThe time the company was created by you\nname\tstring\tThe name of the company\nmonthly_spend\tnumber\tHow much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647.\nplan\tstring\tThe name of the plan you have associated with the company\nsize\tnumber\tThe number of employees in this company\nwebsite\tstring\tThe URL for this company's website. Please note that the value specified here is not validated. Accepts any string.\nindustry\tstring\tThe industry that this company operates in\ncustom_attributes\tobject\tA hash of key/value pairs containing any other data about the company you want Intercom to store.\nCREATING NEW CUSTOM DATA ATTRIBUTES\n\nYou can only write to custom data attributes that already exist on the workspace. If you need to create new attributes to write to, you should Create Data Attributes through the data Attributes API.\n\nResponse\n\nThis will return the Company model that has been updated."
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/switch-api/create-a-phone-switch/",
    "html": "Create a phone Switch\nExample Request & Response\n$ curl https://api.intercom.io/phone_call_redirects \\\n  -X POST \\\n  -H 'Authorization:Bearer <Your access token>' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' -d\n\n  {\n    \"phone\": <End-user phone number>,\n    \"custom_attributes\": {\n      \"[KEY1]\": \"[VALUE1]\",\n      \"[KEY2]\": \"[VALUE2]\"\n    }\n  }\n\nHTTP/1.1 200 OK\n{\n  \"url\": \"<URL to the Messenger>\",\n  \"type\": \"phone_call_redirect\"\n}\n\nExample Errors\nHTTP/1.1 422\n{\n  \"error_key\": \"landline_phone\"\n}\n\nHTTP/1.1 400\n{\n  \"error_key\": \"invalid_phone_number\",\n  \"message\": \"Invalid phone number\"\n}\n\n\nYou can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified. If custom attributes are specified, they will be added to the user or lead's custom data attributes.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nphone\tString\tYes\tPhone number in E.164 format, that will receive the SMS to continue the conversation in the Messenger\ncustom_attributes\tObject\tno\tKey-value pairs corresponding to custom data attributes that will be assigned to the user or lead."
  },
  {
    "title": "Update Ticket Type Attribute Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_ticket_type_attribute_request/",
    "html": "You can update a Ticket Type Attribute"
  },
  {
    "title": "Compatibility",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/common-structures/compatibility/",
    "html": "Compatibility\nUnknown Field\n{\\n  \\\"type\\\": \\\"user\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\",\\n  \\\"such_key\\\": \\\"so_value\\\"\\n}\n\nMust Ignore Interpretation\n{\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"external_id\\\" : \\\"456456\\\",\\n  \\\"email\\\" : \\\"j@example.org\\\"\\n}\n\n\nJSON objects in the API follow a must ignore processing model, where clients are expected to ignore data fields they don't understand.\n\nFor example if the client saw the JSON as shown in the example on the right ('Unknown Field') and did not understand the such_key field, it must pretend the field wasn't there and will process the object as if it looked liked the object shown in 'Must Ignore'.\n\nWhen fetching content, fields that are optional for API objects are indicated in the documentation - clients must not assume they will always be present. When submitting content, fields that are required to be sent by client are also indicated in the documentation - if these are not sent the API may reject the request.\n\nIn general the API may reject JSON where data is not valid or incomplete with a 422 Unprocessable Entity response and an error message explaining the issue. For example, an email message type may be rejected if it is not sent with a subject field."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "Attach a contact to a subscription type",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/subscription-types/attach-a-contact/",
    "html": "Attach a contact to a subscription type\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/subscriptions \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"id\\\": \\\"1\\\",\\n  \\\"consent_type\\\": \\\"opt_out\\\"\\n}\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"User Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"060932ab-ab9d-4f89-88f3-d0152d005873\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nIn Intercom, we have two different subscription types based on user consent - opt-out and opt-in.\n\nAttaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\nAttaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nRequest Path Parameter\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the subscription type which is given by Intercom\nconsent_type\tString\tThe consent_type of a subscription, opt_out or opt_in.\nResponse\n\nThis will return a Subscription Type model for the subscription type that was added to the contact."
  },
  {
    "title": "Update Ticket Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_ticket_request/",
    "html": "You can update a Ticket"
  },
  {
    "title": "Update External Page Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_external_page_request/",
    "html": "You can update an External Page in your Fin Content Library."
  },
  {
    "title": "Activity Log",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Models/activity_log/",
    "html": "Activities performed by admins."
  },
  {
    "title": "The Contact model",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/contacts-model/",
    "html": "The Contact model\nExample Contacts Object\nJSON\n{\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"id\\\": \\\"5ba682d23d7cf92bef87bfd4\\\",\\n  \\\"workspace_id\\\": \\\"ecahpwf5\\\",\\n  \\\"external_id\\\": \\\"25\\\",\\n  \\\"role\\\": \\\"user\\\",\\n  \\\"email\\\": \\\"wash@serenity.io\\\",\\n  \\\"phone\\\": \\\"+1123456789\\\",\\n  \\\"name\\\": \\\"Hoban Washburn\\\",\\n  \\\"avatar\\\": \\\"https://example.org/128Wash.jpg\\\",\\n  \\\"owner_id\\\": 127,\\n  \\\"social_profiles\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"social_profile\\\",\\n        \\\"name\\\": \\\"Twitter\\\",\\n        \\\"url\\\": \\\"http://twitter.com/th1sland\\\"\\n      }\\n    ]\\n  },\\n  \\\"has_hard_bounced\\\": false,\\n  \\\"marked_email_as_spam\\\": false,\\n  \\\"unsubscribed_from_emails\\\": false,\\n  \\\"created_at\\\": 1571672154,\\n  \\\"updated_at\\\": 1571672158,\\n  \\\"signed_up_at\\\": 1571069751,\\n  \\\"last_seen_at\\\": 1571069751,\\n  \\\"last_replied_at\\\": 1571672158,\\n  \\\"last_contacted_at\\\": 1571672158,\\n  \\\"last_email_opened_at\\\": 1571673478,\\n  \\\"last_email_clicked_at\\\": 1571676789,\\n  \\\"language_override\\\": null,\\n  \\\"browser\\\": \\\"chrome\\\",\\n  \\\"browser_version\\\": \\\"77.0.3865.90\\\",\\n  \\\"browser_language\\\": \\\"en\\\",\\n  \\\"os\\\": \\\"OS X 10.14.6\\\",\\n  \\\"location\\\": {\\n    \\\"type\\\": \\\"location\\\",\\n    \\\"country\\\": \\\"Ireland\\\",\\n    \\\"region\\\": \\\"Dublin\\\",\\n    \\\"city\\\": \\\"Dublin\\\"\\n  },\\n  \\\"android_app_name\\\": null,\\n  \\\"android_app_version\\\": null,\\n  \\\"android_device\\\": null,\\n  \\\"android_os_version\\\": null,\\n  \\\"android_sdk_version\\\": null,\\n  \\\"android_last_seen_at\\\": null,\\n  \\\"ios_app_name\\\": null,\\n  \\\"ios_app_version\\\": null,\\n  \\\"ios_device\\\": null,\\n  \\\"ios_os_version\\\": null,\\n  \\\"ios_sdk_version\\\": null,\\n  \\\"ios_last_seen_at\\\": null,\\n  \\\"custom_attributes\\\": {\\n    \\\"paid_subscriber\\\": true,\\n    \\\"monthly_spend\\\": 155.5,\\n    \\\"team_mates\\\": 1\\n  },\\n  \\\"tags\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"tag\\\",\\n        \\\"id\\\": \\\"2\\\",\\n        \\\"url\\\": \\\"/tags/2\\\"\\n      },\\n      {\\n        \\\"type\\\": \\\"tag\\\",\\n        \\\"id\\\": \\\"4\\\",\\n        \\\"url\\\": \\\"/tags/4\\\"\\n      },\\n      {\\n        \\\"type\\\": \\\"tag\\\",\\n        \\\"id\\\": \\\"5\\\",\\n        \\\"url\\\": \\\"/tags/5\\\"\\n      }\\n    ],\\n    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/tags\\\",\\n    \\\"total_count\\\": 3,\\n    \\\"has_more\\\": false\\n  },\\n  \\\"notes\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"note\\\",\\n        \\\"id\\\": \\\"20114858\\\",\\n        \\\"url\\\": \\\"/notes/20114858\\\"\\n      }\\n    ],\\n    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/notes\\\",\\n    \\\"total_count\\\": 1,\\n    \\\"has_more\\\": false\\n  },\\n  \\\"opted_out_subscription_types\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n     \\\"data\\\": [\\n       {\\n         \\\"id\\\": \\\"1\\\",\\n         \\\"type\\\": \\\"subscription\\\",\\n         \\\"url\\\": \\\"/subscription_types/1\\\"\\n       }\\n     ],\\n     \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/subscriptions\\\",\\n     \\\"total_count\\\": 1,\\n     \\\"has_more\\\": false\\n  },\\n  \\\"opted_in_subscription_types\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n     \\\"data\\\": [\\n       {\\n         \\\"id\\\": \\\"2\\\",\\n         \\\"type\\\": \\\"subscription\\\",\\n         \\\"url\\\": \\\"/subscription_types/2\\\"\\n       }\\n     ],\\n     \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/subscriptions\\\",\\n     \\\"total_count\\\": 1,\\n     \\\"has_more\\\": false\\n  },\\n  \\\"companies\\\": {\\n    \\\"type\\\": \\\"list\\\",\\n    \\\"data\\\": [\\n      {\\n        \\\"type\\\": \\\"company\\\",\\n        \\\"id\\\": \\\"5ba686093d7cf93552a3dc99\\\",\\n        \\\"url\\\": \\\"/companies/5ba686093d7cf93552a3dc99\\\"\\n        \\n      },\\n      {\\n        \\\"type\\\": \\\"company\\\",\\n        \\\"id\\\": \\\"5cee64a03d7cf90c51b36f19\\\",\\n        \\\"url\\\": \\\"/companies/5cee64a03d7cf90c51b36f19\\\"\\n      },\\n      {\\n        \\\"type\\\": \\\"company\\\",\\n        \\\"id\\\": \\\"5d7668883d7cf944dbc5c791\\\",\\n        \\\"url\\\": \\\"/companies/5d7668883d7cf944dbc5c791\\\"\\n      }\\n    ],\\n    \\\"url\\\": \\\"/contacts/5ba682d23d7cf92bef87bfd4/companies\\\",\\n    \\\"total_count\\\": 3,\\n    \\\"has_more\\\": false\\n  },\\n  \\\"utm_campaign\\\": \\\"my-campaign\\\",\\n  \\\"utm_content\\\": null,\\n  \\\"utm_medium\\\": \\\"social\\\",\\n  \\\"utm_source\\\": null,\\n  \\\"utm_term\\\": null,\\n  \\\"referrer\\\": null\\n}\n\n\nOur Contacts API is a central place to gather all information and take actions on your contacts (ie. users and leads), such as fetching, searching, creating, updating, and deleting.\n\nThe Contacts Model provides details on these contacts within Intercom, and will specify whether they are a user or lead through the role attribute.\n\nContact Object\nKey\tType\tDescription\ntype\tString\tThe type of object - contact.\nid\tString\tThe unique identifier for the contact which is given by Intercom.\nworkspace_id\tString\tThe id of the workspace which the contact belongs to.\nexternal_id\tString\tA unique identifier for the contact which is given to Intercom.\nrole\tString\tThe role of the contact - user or lead.\nemail\tString\tThe contacts email.\nphone\tString\tThe contacts phone.\nname\tString\tThe contacts name.\navatar\tString\tAn image URL containing the avatar of a contact.\nowner_id\tInteger\tThe id of an admin that has been assigned account ownership of the contact.\nsocial_profiles\tList\tA list of social profiles associated to the contact.\nhas_hard_bounced\tBoolean\tWhether the contact has had an email sent to them hard bounce.\nmarked_email_as_spam\tBoolean\tWhether the contact has marked an email sent to them as spam.\nunsubscribed_from_emails\tBoolean\tWhether the contact is unsubscribed from emails.\ncreated_at\tDate (UNIX timestamp)\tThe time when the contact was created.\nupdated_at\tDate (UNIX timestamp)\tThe time when the contact was last updated.\nsigned_up_at\tDate (UNIX timestamp)\tThe time specified for when a contact signed up.\nlast_seen_at\tDate (UNIX timestamp)\tThe time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).\nlast_replied_at\tDate (UNIX timestamp)\tThe time when the contact last messaged in.\nlast_contacted_at\tDate (UNIX timestamp)\tThe time when the contact was last messaged.\nlast_email_opened_at\tDate (UNIX timestamp)\tThe time when the contact last opened an email.\nlast_email_clicked_at\tDate (UNIX timestamp)\tThe time when the contact last clicked a link in an email.\nlanguage_override\tString\tA preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.\nbrowser\tString\tThe name of the browser which the contact is using.\nbrowser_version\tString\tThe version of the browser which the contact is using.\nbrowser_language\tString\tThe language set by the browser which the contact is using.\nos\tString\tThe operating system which the contact is using.\nlocation\tObject\tAn object showing location details of the contact.\nandroid_app_name\tString\tThe name of the Android app which the contact is using.\nandroid_app_version\tString\tThe version of the Android app which the contact is using.\nandroid_device\tString\tThe Android device which the contact is using.\nandroid_os_version\tString\tThe version of the Android OS which the contact is using.\nandroid_sdk_version\tString\tThe version of the Android SDK which the contact is using.\nandroid_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the Android app.\nios_app_name\tString\tThe name of the iOS app which the contact is using.\nios_app_version\tString\tThe version of the iOS app which the contact is using.\nios_device\tString\tThe iOS device which the contact is using.\nios_os_version\tString\tThe version of iOS which the contact is using.\nios_sdk_version\tString\tThe version of the iOS SDK which the contact is using.\nios_last_seen_at\tDate (UNIX timestamp)\tThe last time the contact used the iOS app.\ncustom_attributes\tObject\tThe custom attributes which are set for the contact.\ntags\tAddressable List\tThe tags which have been added to the contact.\nnotes\tAddressable List\tThe notes which have been added to the contact.\ncompanies\tAddressable List\tThe companies which the contact belongs to.\nLocation Object\nKey\tType\tDescription\ntype\tString\tThe type of object - location.\ncountry\tString\tThe country where the contact is.\nregion\tString\tA subdivision of the country which the contact is in (ie. state, province, county, territory, etc).\ncity\tString\tThe city where the contact is.\nSocial Profile Object\nKey\tType\tDescription\ntype\tString\tThe type of object - social_profile.\nname\tString\tThe name of the service (ie. Twitter, Facebook, etc).\nurl\tString\tThe profile page for the contact on the service.\nAddressable List\nKey\tType\tDescription\ntype\tString\tThe type of object - list.\ndata\tArray\tAn array of Addressable Objects.\nMaximum of 10.\nurl\tString\tThe URL where the full list can be accessed (ie. /contacts/1234/companies).\ntotal_count\tInteger\tThe total amount of records.\nhas_more\tBoolean\tWhether there's more Addressable Objects to be viewed. If true, use the url to view all.\nAddressable Object\nKey\tType\tDescription\ntype\tString\tThe type of object - company, note, tag.\nid\tString\tThe id of the object.\nurl\tString\tThe URL where the object in question can be accessed (ie. /companies/45678)."
  },
  {
    "title": "Team",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Teams/team/",
    "html": "Teams are groups of admins in Intercom."
  },
  {
    "title": "The admin model",
    "url": "https://developers.intercom.com/docs/references/2.5/rest-api/admins/admin-model/",
    "html": "The admin model\nExample Object\n{\\n    \\\"type\\\": \\\"admin\\\",\\n    \\\"id\\\": \\\"493881\\\",\\n    \\\"name\\\": \\\"Hoban Washburne\\\",\\n    \\\"email\\\": \\\"wash@serenity.io\\\",\\n    \\\"job_title\\\": \\\"Philosopher\\\",\\n    \\\"away_mode_enabled\\\": false,\\n    \\\"away_mode_reassign\\\": false,\\n    \\\"has_inbox_seat\\\": true,\\n    \\\"team_ids\\\": [\\n        814865\\n    ]\\n}\n\n\nAdmins are the teammate accounts that have access to a workspace.\n\nAdmin Object\nKey\tType\tDescription\ntype\tstring\tValue is admin.\nid\tstring\tThe id of the admin\nname\tstring\tThe name of the admin\nemail\tstring\tThe email address of the admin\njob_title\tstring\tThe job title of the admin\naway_mode_enabled\tboolean\tIdentifies if this admin is currently set in away mode.\naway_mode_reassign\tboolean\tIdentifies if this admin is set to automatically reassign new conversations to the apps default inbox.\nhas_inbox_seat\tboolean\tIdentifies if a teammate has a paid inbox seat to restrict/allow features that require them\nteam_ids\tlist\tThis is a list of teams id's that you are part of\navatar\turl\tImage for the associated team or teammate\n\nAs inbox seats are a new feature with our new pricing plans, customers not migrated to our new pricing will have has_inbox_seat set to true.\n\nWe only check if the teammate making the API call has seats, not the app itself, nor all admins within the app.\n\nIf an admin has_inbox_seats set to false, then certain calls will fail, such as:\n\nSetting an admin to have away mode and/or to reassign conversations Assigning a conversation to an admin or a team Adding or removing another customer to a group conversation\n\nIf it fails, we let the developer know by returning a 403 Forbidden error, alongside a clarifying error code/message as can be seen in the examples to the right."
  },
  {
    "title": "Update a visitor",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Visitors/updateVisitor/",
    "html": "Sending a PUT request to /visitors will result in an update of an existing Visitor.\n\nOption 1. You can update a visitor by passing in the user_id of the visitor in the Request body.\n\nOption 2. You can update a visitor by passing in the id of the visitor in the Request body."
  },
  {
    "title": "Create a note for contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/notes/create-note-for-contact/",
    "html": "Create a note for contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/notes \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' -d\\n\\n{\\n  \\\"body\\\": \\\"Shiny\\\",\\n  \\\"admin_id\\\": \\\"12345\\\"\\n}\\n\n\nExample Errors\nhttphttp\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Resource Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can remove a note to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired?\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom.\nRequest Body Parameter\nParameter\tType\tRequired?\tDescription\nbody\tString\tYes\tThe text of the note.\nadmin_id\tString\tYes\tThe unique identifier for the admin which is given by Intercom.\nResponse\n\nThis will return a Note model for the note that was added to the contact."
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/delete-contact/",
    "html": "Delete a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id> \\\\\\n-X DELETE \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can delete a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the deleted contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\ndeleted\tBoolean\tWhether the contact has been deleted - true"
  },
  {
    "title": "Update Conversation Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_conversation_request/",
    "html": "Payload of the request to update a conversation"
  },
  {
    "title": "Tag",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Tags/tag/",
    "html": "A tag allows you to label your contacts, companies, and conversations and list them using that tag."
  },
  {
    "title": "Create a conversation",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/conversations/create-a-conversation/",
    "html": "Create a conversation\nExample Request & Response\n$ curl https://api.intercom.io/conversations \\\n-X POST \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept: application/json' \\\n-H 'Content-Type: application/json' -d\n\n{\n  \"from\": {\n    \"type\": \"user\",\n    \"id\": \"536e564f316c83104c000020\"\n  },\n  \"body\": \"Hey\"\n}\n\nHTTP/1.1 200 OK\n{\n  \"type\": \"user_message\",\n  \"id\": \"2001\",\n  \"created_at\": 1401917202,\n  \"body\" : \"Hey, is the new thing in stock?\",\n  \"message_type\": \"inapp\",\n  \"conversation_id\": \"36000324324\"\n}\n\nintercom.messages.create(\n  :from => {\n    :type => \"user\",\n    :id => \"536e564f316c83104c000020\"\n  },\n  :body => \"Hey\"\n)\n\n<?php\n$intercom->messages->create([\n    \"message_type\" => \"inapp\",\n    \"body\" => \"Surely, I said, knowledge is the food of the soul\",\n    \"from\" => [\n        \"type\" => \"user\",\n        \"id\" => \"5989303470da497b1babb9ef\"\n    ]\n]);\n?>\n\nUserMessage userMessage = new UserMessage()\n  .setBody(\"Hey! Is there, is there a reward?\")\n  .setUser(user);\nConversation.create(userMessage);\n\n\nYou can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.\n\nSENDING FOR VISITORS\n\nYou can also send a message from a visitor by specifying their user_id or id value in the from field, along with a type field value of contact. This visitor will be automatically converted to a contact with a lead role once the conversation is created.\n\nRequest Body Parameters\nParameter\tType\tRequired?\tDescription\nfrom\tObject\tYes\tSee Form Object below for more.\nbody\tString\tYes\tThe content of the message.\nHTML is not supported.\nFrom Object\nAttribute\tType\tRequired?\tDescription\ntype\tString\tYes\tThe role associated to the contact - user or lead.\nid\tString\tYes\tThe identifier for the contact which is given by Intercom.\nResponse\n\nThis will return the Message model that has been created."
  },
  {
    "title": "Update Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/update_collection_request/",
    "html": "You can update a collection"
  },
  {
    "title": "Webhook Topics",
    "url": "https://developers.intercom.com/docs/references/2.6/webhooks/webhook-models/",
    "html": "Webhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tContact\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopics\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Note",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Notes/note/",
    "html": "Notes allow you to annotate and comment on your contacts."
  },
  {
    "title": "Untag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/untag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "News Item",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/News/news_item/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Archive a contact",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/contacts/archive-a-contact/",
    "html": "Archive a contact\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/archive \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\n\nExample Errors\nContact not found\nHTTP/1.1 404 FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\\n\n\n\nYou can archive a single contact.\n\nRequest Path Parameters\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nResponse\n\nThis will return an object with details on the archived contact.\n\nAttribute\tType\tDescription\nid\tString\tThe unique identifier for the contact which is given by Intercom\nobject\tString\tThe type of object - contact\narchived\tBoolean\tWhether the contact has been archived - true"
  },
  {
    "title": "Message",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Messages/message/",
    "html": "Message are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/companies/attach-a-contact-to-a-company/",
    "html": "Attach a Contact to a Company\nExample Request & Response\ncurlhttp\n$ curl https://api.intercom.io/contacts/<id>/companies \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json' \\\\\\n-H 'Content-Type: application/json' -d\\n\\n{\\n\\t\\\"id\\\": \\\"56cde0cc3deab1bd8c000100\\\"\\n}\\n\n\nExample Errors\nhttphtml\nHTTP/1.1 404 NOT FOUND\\n{\\n  \\\"type\\\": \\\"error.list\\\",\\n  \\\"request_id\\\": \\\"9a3d0816-9707-4598-977e-c009ba630148\\\",\\n  \\\"errors\\\": [\\n    {\\n      \\\"code\\\": \\\"not_found\\\",\\n      \\\"message\\\": \\\"Contact Not Found\\\"\\n    }\\n  ]\\n}\n\n\nYou can attach a company to a single contact.\n\nRequest Path Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the contact which is given by Intercom\nRequest Body Parameter\nParameter\tType\tRequired\tDescription\nid\tString\tYes\tThe unique identifier for the company which is given by Intercom\nResponse\n\nThis will return a Company model for the company that was just attached to the contact."
  },
  {
    "title": "Translation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/translation/",
    "html": "A translation object contains the localised details of a subscription type."
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Help-Center/help_center/",
    "html": "Help Centers contain collections"
  },
  {
    "title": "Data Export",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Data-Export/data_export/",
    "html": "The data export api is used to view all message sent & viewed in a given timeframe."
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/2.6/rest-api/articles/create-an-article/",
    "html": "Create an article\nExample Request & Response (Multilingual Help Center)\ncurlhttp\n$ curl https://api.intercom.io/articles \\\\\\n-X POST \\\\\\n-H 'Authorization:Bearer <Your access token>' \\\\\\n-H 'Accept:application/json'\\n-H 'Content-Type: application/json' -d\\n\\n{\\n  \\\"title\\\": \\\"Thanks for everything\\\",\\n  \\\"description\\\": \\\"English description\\\",\\n  \\\"body\\\": \\\"<p>This is the body in html</p>\\\",\\n  \\\"author_id\\\": 1,\\n  \\\"state\\\": \\\"published\\\",\\n  \\\"parent_id\\\": 1,\\n  \\\"parent_type\\\": \\\"collection\\\",\\n  \\\"translated_content\\\": {\\n    \\\"fr\\\": {\\n      \\\"title\\\": \\\"Allez les verts\\\",\\n      \\\"description\\\": \\\"French description\\\",\\n      \\\"body\\\": \\\"<p>French body in html</p>\\\",\\n      \\\"author_id\\\": 1,\\n      \\\"state\\\": \\\"published\\\"\\n    }\\n  }\\n}\n\n\nYou can create a new article by making a POST request to https://api.intercom.io/articles.\n\nRequest Body Parameters\nKey\tType\tRequired?\tDescription\ntitle\tString\tYes\tThe title of the article.\nFor multilingual articles, this will be the title of the default language's content.\ndescription\tString\tNo\tThe description of the article.\nFor multilingual articles, this will be the description of the default language's content.\nbody\tString\tNo\tThe body of the article in HTML.\nFor multilingual articles, this will be the body of the default language's content.\nauthor_id\tString\tYes\tThe id of the author of the article.\nFor multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.\nstate\tString\tNo\tWhether the article will be published or will be a draft.\nDefaults to draft.\nFor multilingual articles, this will be the state of the default language's content.\nparent_id\tString\tNo\tThe id of the article's parent collection or section. An article without this field stands alone.\nparent_type\tString\tNo\tThe type of parent, which can either be a collection or section.\ntranslated_content\tObject\tNo\tAn Article Translated Content Object whereby you can specify multiple multilingual articles to be created.\nResponse\n\nThis will return an Article model of the article you just created."
  },
  {
    "title": "Ticket Type Attributes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_type_attribute_list/",
    "html": "A list of attributes associated with a given ticket type."
  },
  {
    "title": "Ticket Type Attribute",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_type_attribute/",
    "html": "Ticket type attribute, used to define each data field to be captured in a ticket."
  },
  {
    "title": "Ticket Attributes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_request_custom_attributes/",
    "html": "The attributes set on the ticket. When setting the default title and description attributes, the attribute keys that should be used are _default_title_ and _default_description_. When setting ticket type attributes of the list attribute type, the key should be the attribute name and the value of the attribute should be the list item id, obtainable by listing the ticket type. For example, if the ticket type has an attribute called priority of type list, the key should be priority and the value of the attribute should be the guid of the list item (e.g. de1825a0-0164-4070-8ca6-13e22462fa7e)."
  },
  {
    "title": "Ticket Types",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_type_list/",
    "html": "A list of ticket types associated with a given workspace."
  },
  {
    "title": "Team Priority Level",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/team_priority_level/",
    "html": "Admin priority levels for teams"
  },
  {
    "title": "Company",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Companies/company/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Ticket Attributes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/ticket_custom_attributes/",
    "html": "An object containing the different attributes associated to the ticket as key-value pairs. For the default title and description attributes, the keys are _default_title_ and _default_description_."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Admins/admin/",
    "html": "Admins are teammate accounts that have access to a workspace."
  },
  {
    "title": "Team List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/team_list/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Tag Users Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/tag_multiple_users_request/",
    "html": "You can tag a list of users."
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/tags/",
    "html": "A list of tags objects associated with a conversation"
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/tag_list/",
    "html": "A list of tags objects in the workspace."
  },
  {
    "title": "Tag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/tag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/subscription_type_list/",
    "html": "A list of subscription type objects."
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/social_profile/",
    "html": "A Social Profile allows you to label your contacts, companies, and conversations and list them using that Social Profile."
  },
  {
    "title": "Applied SLA",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/sla_applied/",
    "html": "The SLA Applied object contains the details for which SLA has been applied to this conversation. Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null."
  },
  {
    "title": "Search data",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/search_request/",
    "html": "Search using Intercoms Search APIs."
  },
  {
    "title": "single_filter_search_request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/single_filter_search_request/",
    "html": "The Intercom defined id representing the company."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/note_list/",
    "html": "A paginated list of notes associated with a contact."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/paginated_response/",
    "html": "Paginated Response"
  },
  {
    "title": "Part attachment",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/part_attachment/",
    "html": "The file attached to a part"
  },
  {
    "title": "Open Conversation Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/open_conversation_request/",
    "html": "Payload of the request to open a conversation"
  },
  {
    "title": "Phone Switch",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/phone_switch/",
    "html": "Phone Switch Response"
  },
  {
    "title": "Deleted Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "multiple_filter_search_request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/multiple_filter_search_request/",
    "html": "An operator to allow boolean inspection between multiple fields."
  },
  {
    "title": "Create News Item Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/news_item_request/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "File",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/file_attribute/",
    "html": "The value describing a file upload set for a custom attribute"
  },
  {
    "title": "Deleted Company Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/deleted_company_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Card Creation Options",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/requestobjects/card-creation-options/",
    "html": "Card Creation Options\nDescription\n\nThe card_creation_options object is a JSON hash containing key-value pairs. These key-value pairs either represent:\n\nData that was sent within the results object in response to the Configure request.\nData that was sent within the card_creation_options object in response to the Submit request.\nExample Object\ncard_creation_options: { \"key\": \"value\" } //Can be more than one pair\n"
  },
  {
    "title": "Deleted Article Object",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/deleted_article_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Update a visitor",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Visitors/updateVisitor/",
    "html": "Sending a PUT request to /visitors will result in an update of an existing Visitor.\n\nOption 1. You can update a visitor by passing in the user_id of the visitor in the Request body.\n\nOption 2. You can update a visitor by passing in the id of the visitor in the Request body."
  },
  {
    "title": "Ticket",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Tickets/ticket/",
    "html": "Tickets are how you track requests from your users."
  },
  {
    "title": "Data Event Summary Item",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/data_event_summary_item/",
    "html": "This will return a summary of a data event for the App."
  },
  {
    "title": "List all ticket types",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Ticket-Types/listTicketTypes/",
    "html": "You can get a list of all ticket types for a workspace."
  },
  {
    "title": "Team",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Teams/team/",
    "html": "Teams are groups of admins in Intercom."
  },
  {
    "title": "Data Export CSV",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/data_export_csv/",
    "html": "A CSV output file"
  },
  {
    "title": "Create a new attribute for a ticket type",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Ticket-Type-Attributes/createTicketTypeAttribute/",
    "html": "You can create a new attribute for a ticket type."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Switch/createPhoneSwitch/",
    "html": "You can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\n\nIf custom attributes are specified, they will be added to the user or lead's custom data attributes."
  },
  {
    "title": "Tag",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Tags/tag/",
    "html": "A tag allows you to label your contacts, companies, and conversations and list them using that tag."
  },
  {
    "title": "Activity Log",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Models/activity_log/",
    "html": "Activities performed by admins."
  },
  {
    "title": "Team",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Teams/team/",
    "html": "Teams are groups of admins in Intercom."
  },
  {
    "title": "Cursor based pages",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/cursor_pages/",
    "html": "Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data. A \"cursor\" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or \"pages\" as needed."
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Subscription-Types/subscription_type/",
    "html": "A subscription type lets customers easily opt out of non-essential communications without missing what's important to them."
  },
  {
    "title": "Segment",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Segments/segment/",
    "html": "A segment is a group of your contacts defined by the rules that you set."
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Switch/createPhoneSwitch/",
    "html": "You can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\n\nIf custom attributes are specified, they will be added to the user or lead's custom data attributes."
  },
  {
    "title": "Create Ticket Type Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_ticket_type_request/",
    "html": "The request payload for creating a ticket type. You can copy the icon property for your ticket type from Twemoji Cheatsheet"
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Subscription-Types/subscription_type/",
    "html": "A subscription type lets customers easily opt out of non-essential communications without missing what's important to them."
  },
  {
    "title": "Segment",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Segments/segment/",
    "html": "A segment is a group of your contacts defined by the rules that you set."
  },
  {
    "title": "Note",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Notes/note/",
    "html": "Notes allow you to annotate and comment on your contacts."
  },
  {
    "title": "Create Ticket Type Attribute Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_ticket_type_attribute_request/",
    "html": "You can create a Ticket Type Attribute"
  },
  {
    "title": "Create Ticket Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_ticket_request/",
    "html": "You can create a Ticket"
  },
  {
    "title": "News Item",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/News/news_item/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Create Ticket Reply Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_ticket_reply_with_comment_request/",
    "html": "You can create a reply on a ticket."
  },
  {
    "title": "Message",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Messages/message/",
    "html": "Message are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact."
  },
  {
    "title": "Note",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Notes/note/",
    "html": "Notes allow you to annotate and comment on your contacts."
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Help-Center/help_center/",
    "html": "Help Centers contain collections"
  },
  {
    "title": "Create or Update Tag Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_or_update_tag_request/",
    "html": "You can create or update an existing tag."
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Help-Center/help_center/",
    "html": "Help Centers contain collections"
  },
  {
    "title": "Message",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Messages/message/",
    "html": "Message are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact."
  },
  {
    "title": "Create Or Update Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_or_update_company_request/",
    "html": "You can create or update a Company"
  },
  {
    "title": "Data Event",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Events/data_event/",
    "html": "Data events are used to notify Intercom of changes to your data."
  },
  {
    "title": "Data Event",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Data-Events/data_event/",
    "html": "Data events are used to notify Intercom of changes to your data."
  },
  {
    "title": "Data Export",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Export/data_export/",
    "html": "The data export api is used to view all message sent & viewed in a given timeframe."
  },
  {
    "title": "Contact",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Contacts/contact/",
    "html": "Contact are the objects that represent your leads and users in Intercom."
  },
  {
    "title": "Company",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Companies/company/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Article",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Articles/article/",
    "html": "The Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone."
  },
  {
    "title": "Create Data Event Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_data_event_request/",
    "html": "The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Data Attribute",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Data-Attributes/data_attribute/",
    "html": "Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes."
  },
  {
    "title": "Create Data Event Summaries Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_data_event_summaries_request/",
    "html": "You can send a list of event summaries for a user. Each event summary should contain the event name, the time the event occurred, and the number of times the event occurred. The event name should be a past tense \"verb-noun\" combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Create External Page Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_external_page_request/",
    "html": "You can add an External Page to your Fin Content Library."
  },
  {
    "title": "Conversation",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Conversations/conversation/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Article",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Articles/article/",
    "html": "The Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/2.7/rest-api/api.intercom.io/Subscription-Types/subscription_type/",
    "html": "A subscription type lets customers easily opt out of non-essential communications without missing what's important to them."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Admins/admin/",
    "html": "Admins are teammate accounts that have access to a workspace."
  },
  {
    "title": "Contact",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Contacts/contact/",
    "html": "Contact are the objects that represent your leads and users in Intercom."
  },
  {
    "title": "Create Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_data_attribute_request/",
    "html": "The name of the data attribute."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/2.9/rest-api/api.intercom.io/Admins/admin/",
    "html": "Admins are teammate accounts that have access to a workspace."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Company",
    "url": "https://developers.intercom.com/docs/references/2.8/rest-api/api.intercom.io/Companies/company/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Create Content Import Source Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_content_import_source_request/",
    "html": "You can add an Content Import Source to your Fin Content Library."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Webhook Topics",
    "url": "https://developers.intercom.com/docs/references/2.7/webhooks/webhook-models/",
    "html": "Webhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.deleted\tCompany\tCompany deletions\tRead users and companies\nRead one user and one company\ncompany.updated\tCompany\tCompany being updated\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.subscribed\tSubscription\tContacts subscribing to email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tSubscription\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopics\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Create Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_contact_request/",
    "html": "Payload to create a contact"
  },
  {
    "title": "Create Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/create_collection_request/",
    "html": "You can create a collection"
  },
  {
    "title": "Set up sheets flows",
    "url": "https://developers.intercom.com/docs/build-an-integration/getting-started/build-an-app-for-your-messenger/sheets-flow/",
    "html": "Set up sheets flows\nOverview\n\nSheets give you the ability to perform much more complicated workflows within the context of a Messenger App. In effect, a sheet is a full-bleed iframe takeover of the Messenger. Sheets give developers the ability to inject a completely custom UI into the Messenger.\n\nExample Sheets Flow\n\nOpening a sheet\n\nThis request flow is used when an end-user triggers an action that opens a sheet. Sheets can only be opened from the Sheets Action. When a sheet is opened, the Messenger will make a HTTP POST request to the URL defined in the action.\n\nWhen you receive that POST you will be able to send your HTML page in the response to create your customized UI. This page will be embedded in the sheet. To allow this to happen the appropriate X-Frame-Options header should also be returned in the response. The page itself should include the Messenger Sheet Library.\n\n🚧 Decrypt the user object\n\nThe open sheet request is not signed and thus has no X-Body-Signature header. Instead, you are urged to decrypt the user object in order to verify that this request comes from a legitimate Intercom user. There's an example below of how to achieve this in Ruby, PHP, Java and Node.js.\n\nOpen-sheet Flow\n# The body of this request is described in `open-sheet` flow. This will be sent as a single stringified JSON object under the key `intercom_data`.\n\n{\n  \"workspace_id\": /* string id_code of the app using the card */,\n  \"current_canvas\": /* Canvas object */,\n  \"component_id\": /* component_id, component which triggered action */,\n  \"input_values\": {\n    \"component_id\": /* value entered in component */,\n    ...\n  },\n  \"user\": /* Encrypted user object of end-user who triggered action */,\n  \"context\": /* Context object */\n}\n\n# As defined by the `open-sheet` flow, the user object that we send as part of the payload to the `sheet` will be encrypted.\n\n# The user is encrypted using AES256-CGM and then Base64 encoded.\n\n# The below example is in Ruby:\n\nintercom_data[:user] = encrypt({ test: \"test\" }.to_json)\nencrypted_user = intercom_data[:user]\ndecoded_user = Base64.decode64(encrypted.encode('utf-8'))\n\nsecret = \"<OAUTH_CLIENT_SECRET>\"\nkey = Digest::SHA256.digest(secret)\ndecipher = ::OpenSSL::Cipher.new('aes-256-gcm')\n\nGCM_IV_LENGTH = 12\nGCM_AUTH_TAG_LENGTH = 16\n\ndecipher.decrypt\ndecipher.key = key\ndecipher.iv = decoded_user[0, GCM_IV_LENGTH]\ndecipher.auth_tag = decoded_user[(decoded_user.length - GCM_AUTH_TAG_LENGTH), GCM_AUTH_TAG_LENGTH]\nciphertext = decoded_user[GCM_IV_LENGTH, (decoded_user.length - GCM_AUTH_TAG_LENGTH - GCM_IV_LENGTH)]\ndecipher.update(ciphertext) + decipher.final\n=> \"{\\\"test\\\":\\\"test\\\"}\"\n\n/* As defined by the `open-sheet` flow, the user object that we send as part of the payload to the `sheet` will be encrypted.\n\nThe user is encrypted using AES256-CGM and then Base64 encoded.\n\nThe below example is in PHP: */\n\n<?php\n$encodedUser = \"<USER-FROM-REQUEST>\";\n\n$decodedUser = base64_decode($encodedUser);\n\n$secret = \"<THIS-IS-A-SECRET>\";\n$key = openssl_digest($secret, 'sha256', TRUE);\n\n$ivlen = 12;\n$taglen = 16;\n\n$iv = substr($decodedUser, 0, $ivlen);\n$tag = substr($decodedUser, strlen($decodedUser) - $taglen, $taglen);\n\n$cipherLen = strlen($decodedUser) - $taglen - $ivlen;\n$cipherText = substr($decodedUser, $ivlen, $cipherLen);\n\n$decryptedUser = openssl_decrypt($cipherText, 'aes-256-gcm', $key, OPENSSL_RAW_DATA, $iv, $tag);\n?>\n\n/* As defined by the `open-sheet` flow, the user object that we send as part of the payload to the `sheet` will be encrypted.\n\nThe user is encrypted using AES256-CGM and then Base64 encoded.\n\nThe below example is in Java: */\n\nString encodedUser = \"<USER-FROM-REQUEST>\";\nbyte[] decodedUser = Base64.getDecoder().decode(encodedUser.replaceAll(\"\\n\", \"\").getBytes());\nString secret = \"<THIS-IS-A-SECRET>\";\n\nMessageDigest sha256MessageDigest = MessageDigest.getInstance(\"SHA-256\");\nsha256MessageDigest.update(secret.getBytes());\nbyte[] keyBytes = sha256MessageDigest.digest();\n\nint ivlen = 12;\nbyte[] iv = Arrays.copyOfRange(decodedUser, 0, ivlen);\nbyte[] cipherText = Arrays.copyOfRange(decodedUser, ivlen, decodedUser.length);\n\nCipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\", \"SunJCE\");\nGCMParameterSpec spec = new GCMParameterSpec(128, iv);\nSecretKey key = new SecretKeySpec(keyBytes, \"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key, spec);\n\nbyte[] res = cipher.doFinal(cipherText);\nString decryptedUser = new String(res);\n\n/* As defined by the `open-sheet` flow, the user object that we send as part of the payload to the `sheet` will be encrypted.\n\nThe user is encrypted using AES256-CGM and then Base64 encoded.\n\nThe below example is in Node.js: */\n\nconst masterkey = 'your-master-key';\n\n// base64 decoding\nconst bData = Buffer.from(decoded, 'base64');\n\n// convert data to buffers\nconst ivlen = 12;\nconst iv = bData.slice(0, ivlen);\n\nconst taglen = 16;\nconst tag = bData.slice(bData.length - taglen, bData.length);\n\nconst cipherLen = bData.length - taglen;\nconst cipherText = bData.slice(ivlen, cipherLen);\n\nlet hash = crypto.createHash('sha256').update(masterkey);\nlet key = Buffer.from(hash.digest(\"binary\"), \"binary\");//buffer from binary string.\n\n// AES 256 GCM Mode\nconst decipher = crypto.createDecipheriv('aes-256-gcm', key, iv);\ndecipher.setAuthTag(tag);\n\n// encrypt the given text\nlet decrypted = decipher.update(cipherText, 'binary', 'utf8');\ndecrypted += decipher.final('utf8');\n\nconsole.log(decrypted);\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Sheet 1</title>\n  <script src=\"https://s3.amazonaws.com/intercom-sheets.com/messenger-sheet-library.latest.js\"></script>\n</head>\n<body>\n  <button id=\"done\">Done</button>\n\n  <script>\n    const done = document.querySelector('#done');\n    done.addEventListener('click', () => {\n      INTERCOM_MESSENGER_SHEET_LIBRARY.submitSheet({ super: \"secret\" });\n    });\n  </script>\n</body>\n</html>\n\nClosing a sheet\n\nThere are 2 ways to close a sheet:\n\nThe user closes the sheet via the Messenger chrome (i.e. the close button in the Messenger).\nThe sheet is programmatically closed via the Messenger sheet library which triggers the submit-sheet HTTP request flow\nSubmitting a sheet\n\nOnce an end user has completed their interaction with your sheet, you may want to collect information on the actions they have taken. The submit-sheet flow allows you to both close the sheet and collect some information from the user.\n\nApp Completion Tracking (optional)\n\nApp completion events will help you understand how your customers are using your app and will add more value to it, making it possible for bots to know when to continue with their flows.\n\nYou can optionally add an event object to your submit-sheet flow response to tell us if your messenger app has completed its purpose. For example, an email collector app completes when the end user submits their email address.\n\nSubmit-sheet Flow\n# When a **Sheet** is submitted, Intercom POSTs a request to the messenger-app's submit-sheet URL with the following payload.\n\n{\n  \"workspace_id\": /* string id_code of the app using the card */,\n  \"current_canvas\": /* Canvas object */,\n  \"sheet_values\": {\n    \"key\": /* value */,\n    ...\n  },\n  \"user\": /* User object of end-user who triggered action */,\n  \"context\": /* Context object */\n}\n\n{\n  \"canvas\": /* Canvas object */,\n  \"event\": { \"type\": \"completed\" } //App Completion Tracking (optional)\n}\n\n# The app completion event is recorded by Intercom.\n\nMessenger Sheet Library\n\nThis library allows the sheet and the Messenger to communicate with one another.\n\nIncluding this in all pages embedded in a sheet enhances the user experience and allows the developer to tell the Messenger when to submit the sheet, which will trigger the submit-sheet flow (allowing the canvas for the card that triggered the sheet to be updated).\n\nTo include the library, simply include the following code in your pages:\n\n<script src=\"https://js.intercomcdn.com/messenger-sheet-library.latest.js\" />\n\nThis script will expose a global reference to the Messenger sheet Library called: INTERCOM_MESSENGER_SHEET_LIBRARY.\n\nAvailable Methods\n# Closes the sheet immediately. The Messenger will not be aware of any actions the end-user may have taken in the sheet and the card that triggered the sheet will not be updated.\n\nINTERCOM_MESSENGER_SHEET_LIBRARY.closeSheet()\n\n# Closes the sheet and triggers a request to the submit sheet webhook (see Submit-sheet flow). This allows the third party developer to perform any side-effects and update the card that triggered the sheet if required.\n\nINTERCOM_MESSENGER_SHEET_LIBRARY.submitSheet(sheetValues)\n\n# Set the `title` of the sheet in the Messenger. Title is an optional param which will default to `document.title`. The Messenger will call this method automatically when the script loads.\n\nINTERCOM_MESSENGER_SHEET_LIBRARY.setTitle(title)\n\nContent Security Policy (CSP)\n\nSheets are loaded using an iframe within the Intercom Messenger. Most modern browsers restrict iframes via CSP headers to mitigate security concerns. To abstract sheet users from sheet developers, the Messenger loads a proxy iframe in the intercom-sheets.com domain, and that then loads the sheet.\n\nTo allow sheets to open in the Messenger, proper CSP headers have to be sent both by the website being loaded in the sheet itself and the website that hosts the Messenger in which the sheet will be opened.\n\nIn host website\n\nIf the website that hosts the Intercom Messenger sends CSP header, intercom-sheets.com needs to be added to the frame-src directive of the CSP header.\n\nThis allows the Messenger in the host website to load the sheet from any app provider.\n\nNO CSP HEADER?\n\nIf the host website doesn't send CSP header already, no action is needed.\n\nIn sheet website\n\nThe sheet page is being loaded as an iframe inside domain https://intercom-sheets.com with child-src: https security policy.\n\nTo enable sheet page and its content to be loaded in Messenger, it must follow these rules:\n\nIt must be served via HTTPS and the sheet URL must use https:// protocol (i.e. no redirect)\nIt must not send X-Frame-Options header.\nIf sheet page sends CSP header, frame-ancestors directive must not be included. This allows the sheet to be loaded within Messenger host pages in any domain.\nIf sheet page sends CSP header, add https://js.intercomcdn.com/ to script-src CSP directive. This allows the Messenger sheet Library script to load inside the sheet.\n\nThis will allow your sheet to be loaded by Messenger in any domain Messenger customers use, and at the same time protect your sheet from various attacks."
  },
  {
    "title": "Convert Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/convert_visitor_request/",
    "html": "You can merge a Visitor to a Contact of role type lead or user."
  },
  {
    "title": "Team",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Teams/team/",
    "html": "Teams are groups of admins in Intercom."
  },
  {
    "title": "List all ticket types",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Ticket-Types/listTicketTypes/",
    "html": "You can get a list of all ticket types for a workspace."
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/attach_contact_to_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Segments/listSegments/",
    "html": "You can fetch a list of all segments."
  },
  {
    "title": "List all newsfeeds",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/listNewsfeeds/",
    "html": "You can fetch a list of all newsfeeds"
  },
  {
    "title": "Update a news item",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/updateNewsItem/",
    "html": "The unique identifier for the news item which is given by Intercom."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Notes/retrieveNote/",
    "html": "You can fetch the details of a single note."
  },
  {
    "title": "Retrieve a visitor with User ID",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Visitors/retrieveVisitorWithUserId/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Redact a conversation part",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/redactConversation/",
    "html": "You can redact a conversation part or the source message of a conversation (as seen in the source object).\n\n📘 Which parts and source messages can I redact?\n\nIf you are redacting a conversation part, it must have a body. If you are redacting a source message, it must have been created by a contact. We will return a conversation_part_not_redactable error if these criteria are not met."
  },
  {
    "title": "Changelog (v1.1)",
    "url": "https://developers.intercom.com/docs/references/1.1/changelog/",
    "html": "Changelog (v1.1)\n\n❗️ Breaking changes Note that this version includes breaking changes to the API and may require a code change. See below for more details.\n\nUsers endpoint - Find multiple users via email\n\nPreviously if you searched for a user via email it would return an error if more than one user existed with the email. It returned a user object. Now it will return the same list object as with list users.\n\nFind users via email\n    curl https://api.intercom.io/users?email=test@test.com \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'Accept: application/json' \\\n    -H 'Intercom-Version: 1.1'\n\nHTTP Response - one or more matches\n{\n  \"limited\": false,\n  \"pages\": {\n    \"next\": null,\n    \"page\": 1,\n    \"per_page\": 50,\n    \"total_pages\": 1,\n    \"type\": \"pages\"\n  },\n  \"total_count\": 3,\n  \"type\": \"user.list\",\n  \"users\": [{\n      \"anonymous\": false,\n      \"app_id\": \"fyq3wodw\",\n      \"created_at\": 1506339558,\n      \"custom_attributes\": {},\n      \"do_not_track\": null,\n      \"email\": \"test@test.com\",\n      \"has_hard_bounced\": false,\n      \"id\": \"45c8eae6fac10f5584e7508e\",\n      \"last_request_at\": 1529737920,\n      \"last_seen_ip\": \"78.144.182.179\",\n            ...\n    },\n    {\n      \"anonymous\": true,\n      \"app_id\": \"fyq3wodw\",\n      \"created_at\": 1503488750,\n      \"custom_attributes\": {},\n      \"do_not_track\": null,\n      \"email\": \"test@test.com\",\n      \"has_hard_bounced\": false,\n      \"id\": \"5123d6aeeda850883ed8ba7c2\",\n      \"last_request_at\": 1503488749,\n            ...\n    },\n    {\n      \"anonymous\": false,\n      \"app_id\": \"fyq3wodw\",\n      \"created_at\": 1494940172,\n      \"custom_attributes\": {},\n      \"do_not_track\": null,\n      \"email\": \"test@test.com\",\n      \"has_hard_bounced\": false,\n      \"id\": \"789afa0cb781d52fd3044ecc\",\n      \"last_request_at\": 1494940211,\n            ...\n    }\n  ]\n}\n\nHTTP Response - No match\n{\n  \"limited\": false,\n  \"pages\": {\n    \"next\": null,\n    \"page\": 1,\n    \"per_page\": 50,\n    \"total_pages\": 0,\n    \"type\": \"pages\"\n  },\n  \"total_count\": 0,\n  \"type\": \"user.list\",\n  \"users\": []\n}\n\nConversations endpoint - Adding more information for user's first reply\n\nIt is now possible to get more information about your users first response. Customer have asked for this feature so they can better understand key metrics which may help identify patterns around what encouraged your customers to reply to a particular message. Similarly, it will also allow you to prioritise messages based on whether they were delivered as Auto-Messages, Bot messages or Manual Messages for example.\n\nThe new information will be available in the conversation model object returned when you list your conversations. It will contain:\n\nSource URL - The URL for the page from where your customer replied. This will not be available in all cases, e.g. when a customer replies via email.\nChannel - The channel the replay occurred within e.g. via email, in a conversation or via a 3rd party integration such as twitter or facebook\nCreated at time - The time the users response was created\nHow was the original message delivered - Was it an Auto-Message or a Campaigns Message or a Manual Message for example.\n\n👍 Conversation list\n\nThere is no change to how your list conversations. We have just added some new attributes to the conversation model returned.\n\nNew or updated Attributes\n\nThe conversation model will include the follow new attributes\n\nAttribute\tType\tDescription\ncustomer_first_reply\tObject\tAn object containing information on the first users message. For a user initiated message this will represent the users original message.\ntype\tString\tThis has been updated and now includes conversation, push, facebook, twitter and email\ndelivered_as\tString\tHow was the message delivered by Intercom. They types of delivery are customer_initiated , automated , campaigns_initiated , admin_initiated , and operator_initiated.\ndelivered_as message types explained\n\ncustomer_initiated means this message was delivered as a user initiated message automated means the message was delivered as either a visitor auto message or an automated message campaigns_initiated means the message was delivered as a campaigns message operator_initiated means the message was delivered as a bot auto message admin_initiated means the message was delivered as an admin initiated message\n\nCustomer First reply model\nAttribute\tType\tDescription\nChannel\tString\tOver which channel did the first reply occur. Options include conversation , push , facebook , twitter and email\nURL\tString\tThe URL where the first reply originated from. In some cases, e.g. email replies this will be blank.\nCreated_at\tString\tThe time the users messages was created. This is in unix timestamp format\n\"customer_first_reply\" set to null\n\nIf a user has not replied to an Intercom initiated message (e.g. auto messages, admin initiated messages, campaigns) then the customer_first_reply attribute will be null\n\nYou still list conversations in the same way. The only change is there are some new attributes added as part of the conversation message.\n\nList conversations\n  curl \"https://api.intercom.io/conversations\" \\\n  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Intercom-Version: 1.1'\n\nNew HTTP Response\n{\n  \"conversations\": [\n      {\n          \"assignee\": {\n              \"id\": null,\n              \"type\": \"nobody_admin\"\n          },\n          \"conversation_message\": {\n              \"attachments\": [],\n              \"author\": {\n                  \"id\": \"5bd155b5d8b61587a0203f31\",\n                  \"type\": \"lead\"\n              },\n              \"body\": \"<p>\\ud83d\\ude00</p>\",\n              \"delivered_as\": \"customer_initiated\",\n              \"id\": \"271978806\",\n              \"subject\": \"\",\n              \"type\": \"conversation\",\n              \"url\": \"https://s.codepen.io/test/app\"\n          },\n          \"created_at\": 1540449375,\n          \"customer_first_reply\": null,\n          \"customers\": [\n              {\n                  \"id\": \"5bd112b5d8b61534a0203f12\",\n                  \"type\": \"lead\"\n              }\n          ],\n          \"first_action_at\": 1540449375,\n          \"id\": \"19205537453\",\n          \"last_action_at\": 1540449378,\n          \"open\": true,\n          \"read\": true,\n          \"sent_at\": 1540449378,\n          \"snoozed_until\": null,\n          \"state\": \"open\",\n          \"type\": \"conversation\",\n          \"updated_at\": 1540449379,\n          \"user\": {\n              \"id\": \"5bd112b5d8b61534a0203f12\",\n              \"type\": \"lead\"\n          },\n          \"waiting_since\": 1540449375\n      },\n      ...\n      ...\n      ...\n          ],\n  \"pages\": {\n      \"next\": \"https://api.intercom.io/conversations?per_page=20&page=2\",\n      \"page\": 1,\n      \"per_page\": 20,\n      \"total_pages\": 76,\n      \"type\": \"pages\"\n  },\n  \"type\": \"conversation.list\"\n}\n\nOld HTTP Response\n{\n  \"conversations\": [\n      {\n          \"assignee\": {\n              \"id\": null,\n              \"type\": \"nobody_admin\"\n          },\n          \"conversation_message\": {\n              \"attachments\": [],\n              \"author\": {\n                  \"id\": \"814865\",\n                  \"type\": \"admin\"\n              },\n              \"body\": \"<p>Hi \\ud83d\\ude00 We hope you enjoy the example app. To get started just copy and paste some code into the JS editor. Let us know if you think this is useful? <br></p>\",\n              \"id\": \"55951247\",\n              \"subject\": \"\",\n              \"type\": \"conversation_message\",\n              \"url\": null\n          },\n          \"created_at\": 1540314098,\n          \"customers\": [\n              {\n                  \"id\": \"1234bea776767676676bae2334\",\n                  \"type\": \"lead\"\n              }\n          ],\n          \"first_action_at\": 1540314131,\n          \"id\": \"19179279317\",\n          \"last_action_at\": 1540314133,\n          \"open\": true,\n          \"read\": true,\n          \"sent_at\": 1540314133,\n          \"snoozed_until\": null,\n          \"state\": \"open\",\n          \"type\": \"conversation\",\n          \"updated_at\": 1540314134,\n          \"user\": {\n              \"id\": \"aa444f2314fe1334r345\",\n              \"type\": \"lead\"\n          },\n          \"waiting_since\": 1540314131\n      },\n      ...\n      ...\n          ],\n  \"pages\": {\n      \"next\": \"https://api.intercom.io/conversations?per_page=20&page=2\",\n      \"page\": 1,\n      \"per_page\": 20,\n      \"total_pages\": 15,\n      \"type\": \"pages\"\n  },\n  \"type\": \"conversation.list\"\n}\n\nConversations endpoint - Adding more information to tags\n\nIt is now possible to get more information about the conversation's tags when both fetching one conversation and listing all conversations.\n\nThere's two new attributes you can see in the tag object of a conversation:\n\nAttribute\tType\tDescription\napplied_at\tUNIX Timestamp\tThe date and time when the tag was applied to the conversation.\napplied_by\tObject\tContains the id of the admin that applied the tag.\nMessenger framework - new_canvas no longer accepted\n\nDuring the beta launch of the Messenger framework we accepted both new_canvas and canvas as valid names for the canvas object returned to Intercom during the request flows. The new_canvas name is no longer accepted as a valid name for the canvas object.\n\nMessenger framework - Disable component option\n\nThis version includes the ability to disable certain messenger framework components. This allows you to prevent certain components, such as elements in a list, from being selected. This may occur when customers are signed up to certain packages and have restricted options for some categories. The components which you can now disable are:\n\nInput\nButton\nList + each list item\nDropdown + each dropdown option\nSingle Select + each single select option For each of the above components it simply adds one optional boolean parameter which can be set to identify whether this component should be disabled or not\nAttribute\tType\tRequired\tDescription\ndisabled\tBoolean\tNo\t'true' indicates the component is disabled. This is set to 'false' by default.\nExample disabled button\n{\n  \"type\": \"button\",\n  \"id\": \"button-123\",\n  \"label\": \"Submit form\",\n  \"style\": \"secondary\",\n  \"disabled\": true,\n  \"action\": {\n    \"type\": \"url\",\n    \"url\": \"https://www.intercom.com/\"\n  }\n}\n\nExample list with disabled element\n{\n  \"type\": \"list\",\n  \"items\": [\n    {\n      \"type\": \"item\",\n      \"id\": \"article-123\",\n      \"title\": \"How to install the messenger\",\n      \"subtitle\": \"An article explaining how to integrate Intercom\",\n      \"image\": \"http://somesite.com/article.png\",\n      \"image_width\": 48,\n      \"image_height\": 48,\n      \"roundedImage\": false,\n      \"action\": {\n        \"type\": \"submit\"\n      }\n    },\n    {\n      \"type\": \"item\",\n      \"id\": \"article-133\",\n      \"title\": \"How to un-install the messenger\",\n      \"subtitle\": \"An article explaining how to uninstall Intercom integrations\",\n      \"image\": \"http://somesite.com/article2.png\",\n      \"image_width\": 48,\n      \"image_height\": 48,\n      \"roundedImage\": false,\n      \"disabled\": true,\n      \"action\": {\n        \"type\": \"submit\"\n      }\n    }\n  ]\n}\n\nNew webhook topics\n\nThis version includes a number of new webhook topics to which you can now subscribe. The new topics are described in the table below. To find out more about webhooks and learn how to subscribe to these topics please see our Setting up Webhooks page.\n\nTopic\tItem Type\tDescription\nconversation.admin.snoozed\tConversation\tSubscribe to admin conversation snoozes\nconversation.admin.unsnoozed\tConversation\tSubscribe to admin conversation unsnoozes\ncontact.tag.created\tContactTag\tSubscribe to leads being tagged.\ncontact.tag.deleted\tContactTag\tSubscribe to leads being tagged."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/1.1/introduction/",
    "html": "Introduction\n\nThis is documentation for version 1.1 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Changelog (v2.0)",
    "url": "https://developers.intercom.com/docs/references/2.0/changelog/",
    "html": "Changelog (v2.0)\n\n❗️ Breaking change Note that this version includes breaking changes to the API and may require a code change. Major changes include:\n\nUsers API & Leads API are deprecated and replaced with Contacts API.\nCustom Data Attributes can only be created through the Data Attributes API. If you want to update a contact with an attribute that does not exist yet then you must create it through the Data Attributes API and update the contact afterwards.\nContact, Conversation & Data Attribute APIs\n\nWe're excited to share that we've now launched a major update to our API - giving you more powerful, contextual, and intuitive access to your data:\n\nA new, strictly RESTful Contacts API that combines users and leads — collectively known as \"contacts\" — and enables you to search for the exact contacts you need by filtering using any combination of fields, like location or a custom NPS score. Plus, the API exposes new attributes, like last_contacted and browser_version, and uses cursor-based pagination to give you access to all of your contacts without restrictions.\nAn updated Conversations API that enables you to tag conversations directly, search and retrieve conversations by any combination of fields, and access more granular attributes, like timestamps and out-of-the-box metrics such as time_to_first_response and median_time_to_reply.\nA new Data Attributes API that lets you create and update custom data attributes, set a label and description for each, and build a dropdown list of defined attribute options. This means your app users can more easily leverage data when targeting and communicating with customers and leads."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/1.4/introduction/",
    "html": "Introduction\n\nThis is documentation for version 1.4 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/1.3/introduction/",
    "html": "Introduction\n\nThis is documentation for version 1.3 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Conversation Rating",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_rating/",
    "html": "The Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation."
  },
  {
    "title": "Conversation Parts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_parts/",
    "html": "A list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts."
  },
  {
    "title": "Conversation part author",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_part_author/",
    "html": "The object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams. For Twitter, this will be blank."
  },
  {
    "title": "Conversation Part",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_part/",
    "html": "A Conversation Part represents a message in the conversation."
  },
  {
    "title": "Conversation List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_list/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "First contact reply",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_first_contact_reply/",
    "html": "An object containing information on the first users message. For a contact initiated message this will represent the users original message."
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/conversation_contacts/",
    "html": "The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature."
  },
  {
    "title": "Contact Unarchived",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_unarchived/",
    "html": "unarchived contact object"
  },
  {
    "title": "Contact Tags",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_tags/",
    "html": "An object containing tags meta data about the tags that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Subscription Types",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_subscription_types/",
    "html": "An object containing Subscription Types meta data about the SubscriptionTypes that a contact has."
  },
  {
    "title": "Event",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/responseobjects/event/",
    "html": "Event\nDescription\n\nThe event object enables Intercom to know more about the actions that took place in your app. Currently, you can only tell us when an app's flow has been completed.\n\nAttributes\nKey\tType\tDescription\ntype\tstring\tWhat action took place. The only value currently accepted is completed.\nExample Object\nevent: { \"type\": \"completed\" } // Optional. Recorded by Intercom.\n"
  },
  {
    "title": "Search conversations",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/searchConversations/",
    "html": "You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString\nAccepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString"
  },
  {
    "title": "Current Canvas",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/requestobjects/current-canvas/",
    "html": "Current Canvas\nDescription\n\nThe current_canvas object mirrors the same format as the Canvas Object. This will be the canvas that was most recently showing before the request was sent.\n\nExample Object\n{\n  current_canvas: {\n    content: { \n      components : [\n        {\n          \"type\": \"button\",\n          \"id\": \"button-1\",\n          \"label\": \"This canvas showed before I was clicked\",\n          \"action\": {\n            \"type\": \"submit\"\n          }\n        }\n      ]\n    }\n  }\n}\n"
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_social_profiles/",
    "html": "An object containing social profiles that a contact has."
  },
  {
    "title": "Segments",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_segments/",
    "html": "A list of segments objects attached to a specific contact."
  },
  {
    "title": "Contact Reply",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "User ID",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_reply_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their user_id"
  },
  {
    "title": "Email",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_reply_email_request/",
    "html": "Payload of the request to reply on behalf of a contact using their email"
  },
  {
    "title": "Contact Reply on ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_reply_ticket_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "About Reporting",
    "url": "https://developers.intercom.com/docs/guides/reporting/",
    "html": "About Reporting\n\nYou may want to create your own reports within a business intelligence platform. There are Intercom defined metrics that you can calculate after pulling your data using the API.\n\nYou can also:\n\nUse the Data Export API to view all message sent & viewed in a given timeframe\nExport your Tickets for reporting, analysis, or categorization\nSet up webhooks to pass data for reporting\n\nBe sure to check out the App Store to see if any of the analytics or data and enrichment apps could be useful in your team's workspace.\n\nWhat's Next?\nCalculate metrics to build your own reports\nCreate a content data export using the API\nExport your conversations data as JSON to Amazon S3"
  },
  {
    "title": "Intercom User ID",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_reply_intercom_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Contact notes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_notes/",
    "html": "An object containing notes meta data about the notes that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Reference",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_reference/",
    "html": "reference to contact object"
  },
  {
    "title": "Contact Deleted",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_deleted/",
    "html": "deleted contact object"
  },
  {
    "title": "Ticket Part",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/ticket_part/",
    "html": "A Ticket Part represents a message in the ticket."
  },
  {
    "title": "Configuration",
    "url": "https://developers.intercom.com/installing-intercom/react-native/configuration/",
    "html": "Configuration\n\nTrack who your users are and what they do in your mobile app and customize the Intercom Messenger. Here’s how to configure the Intercom React Native wrapper:\n\nUpdate a user\n\nYou can send any data you like to Intercom from standard user attributes that are common to all Intercom users to custom user attributes that are unique to your app.\n\nStandard user attributes can be updated by calling:\n\nIntercom.updateUser({\n  email: 'bob@example.com',\n  userId: 'bob-123',\n  name: 'Bob',\n  phone: '010-1234-5678',\n  languageOverride: 'fr',\n  signedUpAt: 1621844451,\n  unsubscribedFromEmails: true,\n});\n\n\nTypically our customers see a lot of value in sending custom data that relates to customer development, such as price plan, value of purchases, etc. Custom user attributes can be created and modified by passing in customAttributes object to updateUser:\n\nIntercom.updateUser({\n  customAttributes: {\n    monthly_spend: 123,\n    paid_subscriber: true,\n    team_mates: 3\n  }\n});\n\n\nYou can also set company data on your user with the Company object, like:\n\nIntercom.updateUser({\n  companies: [{\n    createdAt: 1621844451,\n    id: 'companyId', // id is a required field for adding or modifying a company.\n    monthlySpend: 100,\n    name: 'CompanyName',\n    plan: \"plan\",\n    customAttributes: {\n      city: \"New York\"\n    },\n  }],\n});\n\nSubmit an event\n\nYou can log events in Intercom that record what users do in your app and when they do it. For example, you could record the item a user ordered from your mobile app, and when they ordered it.\n\nIntercom.logEvent('order-item', {itemId:'item-1', orderDate:\"1392036272\"})\n\nCustomize the Intercom Messenger\n\nWe definitely recommend that you customize the Intercom Messenger so that it feels completely at home on your mobile app. Here’s how:\n\nSelect the color and language of the Messenger and how personalize your profiles.\nFollow the below steps to choose how the launcher appears and opens for your users.\nChoose how the launcher appears and opens for your users\n\nIf you’d like the standard launcher to appear on the bottom right-hand side of your screen, just call:\n\nIntercom.setLauncherVisibility(Visibility.VISIBLE)\n\n\nIf you want to set the bottom padding for the Messenger, which dictates how far from the bottom of the screen the default launcher and in-app messages will appear, you can call:\n\nIntercom.setBottomPadding(120)\n\nCreate a custom launcher\n\nHowever, if you’d like the Messenger to open from another location in your mobile app, you can create a custom launcher. This allows you to specify a button, link or element that opens the Messenger. For example, you can trigger the launcher to open when a customer clicks on your ‘Help and Support’ button.\n\nIf you have a custom launcher, you can call Intercom.present();\n\n<Button title=\"Open Intercom Messenger\" onPress={()=>{Intercom.present();}}/>\n\n\nThen we’ll ensure the Messenger opens in the best place for each user.\n\nFor example:\n\nIf a user has one unread conversation, we open that conversation.\nIf a user has no conversations, we open the composer.\nIf a user has more than one unread conversation, we open the conversations list.\nIf a user has no unread conversations, we open the last screen they were on when they closed it.\nShow your user’s unread message count\n\nGrab the current count with this method:\n\nIntercom.getUnreadConversationCount()\n\n\nThen, start listening for updates using:\n\nuseEffect(() => {\n    const countListener = Intercom.addEventListener(\n      IntercomEvents.IntercomUnreadCountDidChange,\n      (response) => {\n        setCount(response.count as number);\n      }\n    );\n\n    return () => {\n      countListener.remove();\n    };\n  }, []);\n\nTemporarily hide notifications\n\nYou can prevent in app messages from popping up in certain parts of your app, by calling:\n\nIntercom.setInAppMessageVisibility(Visibility.GONE)\n\n\n📘 Mobile Carousels Visibility\n\nThe method setInAppMessageVisibility does not apply to Mobile Carousels. They will always be displayed.\n\nYou can hide any Intercom screen in your app, by calling:\n\nIntercom.hideIntercom();\n\nPresent a Carousel Programmatically\n\nTo present a Carousel, pass in a carouselId from your Intercom workspace to the following method:\n\nlet carouselContent = IntercomContent.carouselWithCarouselId(carouselId)\nIntercom.presentContent(carouselContent)\n\n\n🚧 Make sure your carousel is live\n\nA carousel must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nPresent a Survey Programmatically\n\nTo present a Survey, pass in a surveyId from your Intercom workspace to the following method:\n\nlet surveyContent = IntercomContent.surveyWithSurveyId(surveyId)\nIntercom.presentContent(surveyContent)\n\n\n🚧 Make sure your survey is live\n\nA survey must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nWhat's next?\n\nNow that you have Intercom configured it's time to:\n\nConfigure your Help enter\nEnable Identity Verification\nConfigure your app for Push Notifications."
  },
  {
    "title": "Contact Location",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_location/",
    "html": "An object containing location meta data about a Intercom contact."
  },
  {
    "title": "Contact List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_list/",
    "html": "Contacts are your users in Intercom."
  },
  {
    "title": "Contact companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_companies/",
    "html": "An object containing companies meta data about the companies that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Attached Companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_attached_companies/",
    "html": "A list of Company Objects"
  },
  {
    "title": "Contact Archived",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/contact_archived/",
    "html": "archived contact object"
  },
  {
    "title": "Company Scroll",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/company_scroll/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Company Attached Segments",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/company_attached_segments/",
    "html": "A list of Segment Objects"
  },
  {
    "title": "Companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/company_list/",
    "html": "This will return a list of companies for the App."
  },
  {
    "title": "Company Attached Contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/company_attached_contacts/",
    "html": "A list of Contact Objects"
  },
  {
    "title": "Close Conversation Request",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/close_conversation_request/",
    "html": "Payload of the request to close a conversation"
  },
  {
    "title": "Collections",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/collection_list/",
    "html": "This will return a list of Collections for the App."
  },
  {
    "title": "Article Statistics",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/article_statistics/",
    "html": "The statistics of an article."
  },
  {
    "title": "Articles",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/article_list/",
    "html": "This will return a list of articles for the App."
  },
  {
    "title": "Article Content",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/article_content/",
    "html": "The Content of an Article."
  },
  {
    "title": "App",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/app/",
    "html": "App is a workspace on Intercom"
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/admin_with_app/",
    "html": "Admins are the teammate accounts that have access to a workspace"
  },
  {
    "title": "Admin Reply on ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/admin_reply_ticket_request/",
    "html": "Payload of the request to reply on behalf of an admin"
  },
  {
    "title": "Admin Reply",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/admin_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of an admin"
  },
  {
    "title": "Admin Priority Level",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/admin_priority_level/",
    "html": "Admin priority levels for the team"
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/activity_log_list/",
    "html": "A paginated list of activity logs."
  },
  {
    "title": "Admins",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/admin_list/",
    "html": "A list of admins associated with a given workspace."
  },
  {
    "title": "Addressable List",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/addressable_list/",
    "html": "A list used to access other resources from a parent model."
  },
  {
    "title": "Retrieve a newsfeed",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/retrieveNewsfeed/",
    "html": "You can fetch the details of a single newsfeed"
  },
  {
    "title": "Retrieve a segment",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Segments/retrieveSegment/",
    "html": "You can fetch the details of a single segment."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Segments/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "Delete a news item",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/deleteNewsItem/",
    "html": "You can delete a single news item."
  },
  {
    "title": "List all live newsfeed items",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/listLiveNewsfeedItems/",
    "html": "You can fetch a list of all news items that are live on a given newsfeed"
  },
  {
    "title": "Retrieve a news item",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/retrieveNewsItem/",
    "html": "You can fetch the details of a single news item."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Visitors/convertVisitor/",
    "html": "You can merge a Visitor to a Contact of role type lead or user.\n\n📘 What happens upon a visitor being converted?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Notes/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Notes/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "Create a news item",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/createNewsItem/",
    "html": "You can create a news item"
  },
  {
    "title": "List all news items",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/listNewsItems/",
    "html": "You can fetch a list of all news items"
  },
  {
    "title": "Newsfeed Assignment",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/newsfeed_assignment/",
    "html": "Assigns a news item to a newsfeed."
  },
  {
    "title": "Update an existing attribute for a ticket type",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Ticket-Type-Attributes/updateTicketTypeAttribute/",
    "html": "You can update an existing attribute for a ticket type."
  },
  {
    "title": "Retrieve a visitor with ID",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Visitors/retrieveVisitor/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Delete a visitor",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Visitors/deleteVisitor/",
    "html": "You can delete a single visitor."
  },
  {
    "title": "Newsfeed",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/newsfeed/",
    "html": "A newsfeed is a collection of news items, targeted to a specific audience.\n\nNewsfeeds currently cannot be edited through the API, please refer to this article to set up your newsfeeds in Intercom."
  },
  {
    "title": "Convert a conversation to a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/convertConversationToTicket/",
    "html": "You can convert a conversation to a ticket."
  },
  {
    "title": "Detach a contact from a group conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/detachContactFromConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/attachContactToConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Run Assignment Rules on a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/autoAssignConversation/",
    "html": "You can let a conversation be automatically assigned following assignment rules."
  },
  {
    "title": "Changelog (v1.0)",
    "url": "https://developers.intercom.com/docs/references/1.0/changelog/",
    "html": "Changelog (v1.0)\n\nThis is the base version of the API that existed before versioning was introduced."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.0/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.0 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can find information on your Access Token here.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Changelog (v1.2)",
    "url": "https://developers.intercom.com/docs/references/1.2/changelog/",
    "html": "Changelog (v1.2)\nRemoving personally identifiable information (PII) from our API & Webhooks\n\nAcross our API & Webhooks, we will no longer return the last_seen_ip, location_data.longitude, location_data.latitude, and user_agent_data for users, leads, and visitors. This is part of an effort to keep customers data secure and uphold the availability of Intercom across services that require such information to not be exposed.\n\nView activity logs for admins through our API\n\nYou can now get a log of activities taken by all admins in an app through our API. Simply send a GET request to https://api.intercom.io/admins/activity_logs. You can see request, params, and responses on our reference.\n\nSet waiting since attribute to null for admin replies\n\nIn previous versions of our API, the value of the waiting_since attribute on the Conversation model is set to 2000 years in the future if the last reply is from an admin. This change sets the value of waiting_since to null instead.\n\nList users by email returns users only\n\nPreviously, the list users by email endpoint returned a list of users and contacts. It will now return users only.\n\nAllow contacts to be viewed/listed by phone\n\nPreviously, the you could list contacts by email only. Now you can also list them by phone.\n\nNew Conversations Part Redacted Webhook\n\nThere is a new webhook which fires when a conversation part is redacted.\n\nNew Conversations Rating Added Webhook\n\nThere is a new webhook which fires when a rating is added to a conversation."
  },
  {
    "title": "Changelog (v2.3)",
    "url": "https://developers.intercom.com/docs/references/2.3/changelog/",
    "html": "Changelog (v2.3)\nConversation Topic Information in Conversation Response\n\nWe've updated our Conversation API to support Conversation Topics as a read-only attribute.\n\nSee top level Conversation Topic data related to conversations within any returned Conversations Model.\nSupport for Conversation Data Attributes\n\nWe've updated both our Conversation and Data Attribute APIs to support the addition of data attributes for conversations.\n\nSee data attributes associated to conversations within any returned Conversations Model.\nUpdate a conversation's data attribute values through the Conversations API.\nList all data attributes associated to conversations through the Data Attributes API in order to understand which data attributes can be added to conversations."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/requestobjects/admin/",
    "html": "Admin\nDescription\n\nThe admin object provides information on the Intercom teammate. You can see more about this on the Admin Model page of our API Reference.\n\nExample Object\n{\n  admin: {\n    type: \"admin\",\n    id: \"814860\",\n    name: \"IntercomTest\",\n    email: \"theadmin@example.com\",\n    job_title: \"Existentialist\",\n    away_mode_enabled: false,\n    away_mode_reassign: false,\n    avatar: {\n      image_url: \"https://static.site.test.icon\"\n    },\n    team_ids: [\n      814865\n    ]\n  }\n}\n"
  },
  {
    "title": "Changelog (v2.1)",
    "url": "https://developers.intercom.com/docs/references/2.1/changelog/",
    "html": "Changelog (v2.1)\nIntroducing the Articles API\n\nWe've now released a brand new way for you to access your Articles and Help Center within Intercom - through the API! This includes:\n\nA fully RESTful Articles endpoint which allows you to create rich & multi-lingual articles, fetch these by retrieving one or listing all, and which can be kept in sync with external repositories through updating their settings and content.\nA fully RESTful Help Center endpoint in order to manage the overall layout of your single-language or multilingual Help Center through the collections and sections under which your Articles live."
  },
  {
    "title": "Changelog (v2.9)",
    "url": "https://developers.intercom.com/docs/references/2.9/changelog/",
    "html": "Changelog (v2.9)\nReply to conversations with Quick Replies\n\nWe added the ability to reply to conversations with Quick Replies. The Reply to a conversation endpoint now allows admins to reply to conversations with quick replies. When a user clicks on one of the given options, a comment conversation part will be created that includes metadata linking back to the quick reply option chosen.\n\nNew Company Webhook Topics\n\nWe added new webhook topics that fire when a company is deleted or updated.\n\nNew Contact Subscribed Webhook Topic\n\nWe added a new webhook topic that fires when a contact resubscribes to receive emails\n\nNew Ticket Webhook Topics\n\nWe added a set of new ticket webhook topics:\n\nTicket state updated topic that fires when a ticket state is updated\nTicket created topic that fires when a ticket is created\nTicket note created topic that fires when a note is added to the ticket\nTeam/Admin assigned topic that fires when an team/admin is assigned to an open ticket\nTicket contact attached/detached topics that fire when a contact is attached or detached to/from an open ticket.\nTicket attribute updated that fires when any attribute on the ticket changed.\nTicket admin replied that fires when a teammate reply to a ticket.\nTicket contact replied that fires when a contact(user/lead) reply to a ticket.\nNew Tickets API\n\nTickets API is a work in progress and we are actively working on adding and updating endpoints. We currently support creating, retrieving and updating Tickets via API. We have also added full support for creating, retrieving and updating ticket types and type attributes via the Tickets Types API and the Ticket Type Attributes API.\n\nFeel free to submit your feedback on the Tickets API via Messenger, we’d love to hear from you!\n\n❗️ Breaking Changes\nConversation Search Associated Custom Object Data\n\nAssociated Custom Object data is included in conversation search responses\n\nChanged Contact Unsubscribed Webhook Topic Payload\n\nAdded the subscription_types object to the contact.unsubscribed webhook topic payload. Previously only the contact object was included.\n\nBecause the contact object is now nested in data.item.contact, this is a breaking change.\n\nConversation actions will no longer be fired if it's a ticket\n\nConversation actions (conversation.admin.replied, conversation.user.replied, conversation.admin.opened, conversation.admin.closed, conversation.admin.snoozed, conversation.admin.unsnoozed, conversation.priority.updated, conversation.rating.added, conversation.admin.assigned, conversation.admin.open.assigned and conversation.admin.noted) will no longer be fired when it is a ticket"
  },
  {
    "title": "Text Area",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/interactivecomponents/text-area/",
    "html": "Text Area\n\nA text area component is used to capture a large amount of text as input with a multi-line text box. You can submit the value of the text area by:\n\nUsing a button component (which will submit all interactive components in the canvas)\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\ttextarea\tYes\tThe type of component you are rendering\nid\tAny string\tYes\tA unique identifier for the component.\nlabel\tAny string\tNo\tThe text shown above the text area.\nplaceholder\tAny string\tNo\tAn example value shown inside the component when it’s empty.\nvalue\tAny string\tNo\tAn entered value which is already inside the component.\nerror\tfalse``true\tNo\tStyles the input as failed.Default is false.\ndisabled\tfalse``true\tNo\tStyles the input and prevents the action.Default is false."
  },
  {
    "title": "Image",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/presentationcomponents/image/",
    "html": "Image\n\nAn image component is used to display an image.\n\n🚧 HTTPS Images\n\nIf your request URLs (or website URLs) are over HTTPS, you will need to ensure that images are loaded over HTTPS likewise. Otherwise, they will not work.\n\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\timage\tYes\tThe type of component you are rendering.\nid\tAny string\tNo\tA unique identifier for the component.\nurl\tA valid HTTPS URL\tYes\tThe URL where the image is located.\nalign\tleft``center``right``full_width\tNo\tAligns the image inside the component.Default is left.\nwidth\tAny integer\tYes\tThe exact width of the image in pixels.\nheight\tAny integer\tYes\tThe exact height of the image in pixels.\nrounded\ttrue``false\tNo\tRounds the corners of the image. Default is false.\nbottom_margin\tnone\tNo\tDisables a component’s margin-bottom of 10px.\naction\tAction Object\tNo\tThis can be a URL Action only.\nPreview"
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "Divider",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/presentationcomponents/divider/",
    "html": "Divider\n\nA divider component is used to separate components with a line.\n\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tdivider\tYes\tThe type of component you are rendering.\nid\tAny string\tNo\tA unique identifier for the component.\nbottom_margin\tnone\tNo\tDisables a component’s margin-bottom of 10px.\nPreview"
  },
  {
    "title": "Tag",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tags/tag/",
    "html": "A tag allows you to label your contacts, companies, and conversations and list them using that tag."
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Subscription-Types/subscription_type/",
    "html": "A subscription type lets customers easily opt out of non-essential communications without missing what's important to them."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Search for articles",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/searchArticles/",
    "html": "You can search for articles by making a GET request to https://api.intercom.io/articles/search."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/replyConversation/",
    "html": "You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins."
  },
  {
    "title": "Retrieve an article",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/retrieveArticle/",
    "html": "You can fetch the details of a single article by making a GET request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/listAllCompanies/",
    "html": "You can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Delete an article",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/deleteArticle/",
    "html": "You can delete a single article by making a DELETE request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "List all Help Centers",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/listHelpCenters/",
    "html": "You can list all Help Centers by making a GET request to https://api.intercom.io/help_center/help_centers."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/updateArticle/",
    "html": "You can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Manage a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/manageConversation/",
    "html": "You can close a conversation. You can snooze a conversation to reopen on a future date. You can open a conversation which is snoozed or closed. You can assign a conversation to an admin and/or team."
  },
  {
    "title": "Retrieve a Help Center",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/retrieveHelpCenter/",
    "html": "You can fetch the details of a single Help Center by making a GET request to https://api.intercom.io/help_center/help_center/<id>."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/scrollOverAllCompanies/",
    "html": "The list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n\n📘 Scroll Parameter\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message: \"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/createArticle/",
    "html": "You can create a new article by making a POST request to https://api.intercom.io/articles."
  },
  {
    "title": "Create event summaries",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Events/dataEventSummaries/",
    "html": "Create event summaries for a user. Event summaries are used to track the number of times an event has occurred, the first time it occurred and the last time it occurred."
  },
  {
    "title": "List all data events",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Events/lisDataEvents/",
    "html": "🚧\n\nPlease note that you can only 'list' events that are less than 90 days old. Event counts and summaries will still include your events older than 90 days but you cannot 'list' these events individually if they are older than 90 days\n\nThe events belonging to a customer can be listed by sending a GET request to https://api.intercom.io/events with a user or lead identifier along with a type parameter. The identifier parameter can be one of user_id, email or intercom_user_id. The type parameter value must be user.\n\nhttps://api.intercom.io/events?type=user&user_id={user_id}\nhttps://api.intercom.io/events?type=user&email={email}\nhttps://api.intercom.io/events?type=user&intercom_user_id={id} (this call can be used to list leads)\n\nThe email parameter value should be url encoded when sending.\n\nYou can optionally define the result page size as well with the per_page parameter."
  },
  {
    "title": "Search conversations",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/searchConversations/",
    "html": "You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString\nAccepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString"
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/listArticles/",
    "html": "You can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\n📘 How are the articles sorted and ordered?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/ListAttachedSegmentsForCompanies/",
    "html": "You can fetch a list of all segments that belong to a company."
  },
  {
    "title": "Delete a collection",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/deleteCollection/",
    "html": "You can delete a single collection by making a DELETE request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Delete a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/deleteConversation/",
    "html": "You can delete a single conversation."
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/updateConversation/",
    "html": "You can update an existing conversation.\n\n📘\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Article Search Response",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/article_search_response/",
    "html": "The results of an Article search"
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/deleteCompany/",
    "html": "You can delete a single company."
  },
  {
    "title": "Retrieve a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/retrieveConversation/",
    "html": "You can fetch the details of a single conversation.\n\nThis will return a single Conversation model with all its conversation parts.\n\n🚧 Hard limit of 500 parts\n\nThe maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.\n\n📘 Bot name in conversation parts\n\nFor conversation parts generated by a bot, bot name will depend on the following:\n\nCustomers that never turned on AI answers will have operator as the bot name\nCustomers that have turned on AI answers at some point will have fin as the bot name"
  },
  {
    "title": "Update a collection",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/updateCollection/",
    "html": "You can update the details of a single collection by making a PUT request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Article Search Highlights",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/article_search_highlights/",
    "html": "The highlighted results of an Article search. In the examples provided my search query is always \"my query\"."
  },
  {
    "title": "Submit a data event",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Events/createDataEvent/",
    "html": "You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a Content-Type of application/json.\n\nWhen using the JavaScript API, adding the code to your app makes the Events API available. Once added, you can submit an event using the trackEvent method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nWith the Ruby client you pass a hash describing the event to Intercom::Event.create, or call the track_user method directly on the current user object (e.g. user.track_event).\n\nType\tDescription\tExample\nString\tThe value is a JSON String\t\"source\":\"desktop\"\nNumber\tThe value is a JSON Number\t\"load\": 3.67\nDate\tThe key ends with the String _date and the value is a Unix timestamp, assumed to be in the UTC timezone.\t\"contact_date\": 1392036272\nLink\tThe value is a HTTP or HTTPS URI.\t\"article\": \"https://example.org/ab1de.html\"\nRich Link\tThe value is a JSON object that contains url and value keys.\t\"article\": {\"url\": \"https://example.org/ab1de.html\", \"value\":\"the dude abides\"}\nMonetary Amount\tThe value is a JSON object that contains amount and currency keys. The amount key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.\t\"price\": {\"amount\": 34999, \"currency\": \"eur\"}\n\nNB: For the JSON object types, please note that we do not currently support nested JSON structure.\n\n🚧 Lead Events\n\nWhen submitting events for Leads, you will need to specify the Lead's id.\n\n📘 Metadata behaviour\n\nWe currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.\nIt is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.\nThere might be up to 24 hrs delay when you send a new metadata for an existing event.\n\n📘 Event de-duplication\n\nThe API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is strongly recommended to send a second granularity Unix timestamp in the created_at field.\n\nDuplicated events are responded to using the normal 202 Accepted code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.\n\nHTTP API Responses\nSuccessful responses to submitted events return 202 Accepted with an empty body.\nUnauthorised access will be rejected with a 401 Unauthorized or 403 Forbidden response code.\nEvents sent about users that cannot be found will return a 404 Not Found.\nEvent lists containing duplicate events will have those duplicates ignored.\nServer errors will return a 500 response code and may contain an error message in the body."
  },
  {
    "title": "Update a company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/UpdateCompany/",
    "html": "You can update a single company"
  },
  {
    "title": "Creates a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/createConversation/",
    "html": "You can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.\n\n📘 Sending for visitors\n\nYou can also send a message from a visitor by specifying their user_id or id value in the from field, along with a type field value of contact. This visitor will be automatically converted to a contact with a lead role once the conversation is created.\n\nThis will return the Message model that has been created."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Admins/retrieveAdmin/",
    "html": "You can retrieve the details of a single admin."
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/retrieveCollection/",
    "html": "You can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>."
  },
  {
    "title": "List all conversations",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/listConversations/",
    "html": "You can fetch a list of all conversations.\n\nYou can optionally request the result page size and the cursor to start after to fetch the result"
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/createCollection/",
    "html": "You can create a new collection by making a POST request to https://api.intercom.io/help_center/collections."
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Admins/listAdmins/",
    "html": "You can fetch a list of admins for a given workspace."
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/listAllCollections/",
    "html": "You can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\n📘 How are the collections sorted and ordered?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Admins/listActivityLogs/",
    "html": "You can get a log of activities by all admins in an app."
  },
  {
    "title": "Retrieve a company by ID",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/RetrieveACompanyById/",
    "html": "You can fetch a single company."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Help Centers",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/help_center_list/",
    "html": "A list of Help Centers belonging to the App"
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Admins/setAwayAdmin/",
    "html": "You can set an Admin as away for the Inbox."
  },
  {
    "title": "Retrieve companies",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/retrieveCompany/",
    "html": "You can fetch a single company by passing in company_id or name.\n\nhttps://api.intercom.io/companies?name={name}\n\nhttps://api.intercom.io/companies?company_id={company_id}\n\nYou can fetch all companies and filter by segment_id or tag_id as a query parameter.\n\nhttps://api.intercom.io/companies?tag_id={tag_id}\n\nhttps://api.intercom.io/companies?segment_id={segment_id}"
  },
  {
    "title": "Create or Update a company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/createOrUpdateCompany/",
    "html": "You can create or update a company.\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Admins/identifyAdmin/",
    "html": "You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).\n\n🚧 Single Sign On\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Collection",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/collection/",
    "html": "Collections are top level containers for Articles within the Help Center."
  },
  {
    "title": "Webhook Topics",
    "url": "https://developers.intercom.com/docs/references/2.9/webhooks/webhook-models/",
    "html": "Webhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.deleted\tCompany\tCompany deletions\tRead users and companies\nRead one user and one company\ncompany.updated\tCompany\tCompany being updated\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.subscribed\tSubscription\tContacts subscribing to email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tSubscription\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.open.assigned\tConversation\tAdmin open conversation assignments\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nTicket topics\nTopic\tObject\tEvent description\tPermissions\nticket.created\tTicket\tTicket created\tRead tickets\nticket.state.updated\tTicket\tTicket state updated\tRead tickets\nticket.note.created\tTicket\tTicket note created\tRead tickets\nticket.admin.assigned\tTicket\tTicket admin assigned\tRead tickets\nticket.team.assigned\tTicket\tTicket team assigned\tRead tickets\nticket.contact.attached\tTicket\tTicket contact attached\tRead tickets\nticket.contact.detached\tTicket\tTicket contact detached\tRead tickets\nticket.attribute.updated\tTicket\tTicket attribute updated\tRead tickets\nticket.admin.replied\tTicket\tTicket admin replied\tRead tickets\nticket.contact.replied\tTicket\tTicket contact replied\tRead tickets\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopics\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Create a Ticket via Intercom API",
    "url": "https://developers.intercom.com/docs/guides/tickets/create-a-ticket/",
    "html": "Create a Ticket via Intercom API\n\nTickets are a convenient way to capture and track complex customer queries in Intercom, so a lot of popular Ticket usecases are related to Customer Support.\n\nHowever, Tickets can also be helpful for other teams in Intercom, to do things like track escalations or operational tasks.\n\nFor example, if you have identified some sort of user behaviour where you would want to intervene and reach out to the customer, Tickets can be useful.\n\nA usecase we've heard from early adopters of tickets is creating follow up items for Sales teams monitoring the progress of leads and prospects through trials of your product. You might have some customers that are considered \"high-value\" in your system, and the definition of high value varies from business to business. You might have also noticed that a certain percentage of these high value customers don't complete your onboarding flow, so you need an easy way for your Sales team to proactively reach out to these clients and make sure they complete onboarding.\n\nTickets make this possible.\n\nStep 1: Create a ticket type\n\nFirst, create a ticket type called \"Onboarding\" that will be a template for all future tickets of this type:\n\ncurl --request POST \\\n     --url https://api.intercom.io/ticket_types \\\n     --header 'Intercom-Version: 2.9' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"icon\": \"🎟️\",\n  \"is_internal\": true,\n  \"name\": \"Onboarding\"\n}\n'\n\n\nNext, create attributes for this Ticket Type. Attributes are data fields to capture in tickets created for users who don't complete onboarding. In this tutorial, we will create just one attribute to track the priority of the ticket, but you may choose to create multiple attributes specific to your business:\n\ncurl --request POST \\\n     --url https://api.intercom.io/ticket_types/1/attributes \\\n     --header 'Intercom-Version: 2.9' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"required_to_create\": true,\n  \"required_to_create_for_contacts\": false,\n  \"visible_on_create\": true,\n  \"visible_to_contacts\": false,\n  \"name\": \"Priority\",\n  \"data_type\": \"list\",\n  \"list_items\": \"P1, P2, P3\"\n}\n'\n\n\nThis is what such a ticket type could look like:\n\nThis tutorial assumes that this is the only ticket type you have in your system.\n\nTICKETS MUST HAVE A TICKET TYPE\n\nYou can't create a ticket without first creating a corresponding Ticket Type. You'll only need to do this once.\n\nStep 2: Create a ticket\n\nYou can create a ticket in Intercom by making a call to the Tickets API:\n\ncurl --request POST \\\n     --url https://api.intercom.io/tickets \\\n     --header 'Intercom-Version: 2.9' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"contacts\": [\n    {\n      \"email\": \"john.doe@gmail.com\"\n    }\n  ],\n  \"ticket_attributes\": {\n    \"priority\": \"1\",\n    \"company_size\": \"100\",\n  },\n  \"ticket_type_id\": \"1\",\n}\n'\n\n\nYou can create a new Ticket directly from the reference docs with the interactive API playground using Node, Ruby, PHP, Java, Python and other languages. The reference docs provide each data field you can send to the API.\n\nOnce the ticket is created, you may also choose to assign it to a specific person or team by making an update to the ticket via the API. This can be your Sales team, whose task it will be to reach out to the affected customer and help them complete the onboarding.\n\nYou can also create an Inbox rule that will auto assign a ticket to a specific team based on a ticket type.\n\nWe hope that this tutorial gives you some ideas about how your business can benefit from Intercom tickets.\n\nNext steps\nLearn more about Tickets as a product.\nBuild an integration between GitHub issues and Intercom tickets.\nBuild a custom web form to submit tickets directly to Intercom."
  },
  {
    "title": "Build an integration with GitHub issues",
    "url": "https://developers.intercom.com/docs/guides/tickets/build-a-ticketing-app/",
    "html": "Build an integration with GitHub issues\n\nTickets are a great way to track work in Intercom, but frequently your engineering team will have their workflows in a tool like GitHub. In this tutorial we'll walk you through how you would sync information between Intercom tickets and GitHub issues. We'll cover registering a webhook, creating an Intercom ticket, writing a listener for your app and creating a corresponding GitHub issue. The Intercom ticket will also be updated with a link to the GitHub issue to make navigation between systems easier.\n\nPrerequisites\nAn Intercom developer workspace and Intercom app. Create both by following this guide.\nA GitHub personal access token with access to the GitHub repo where you'd like to create your new issues.\nStep 1: Register a “ticket.created” webhook\n\nTo be notified when a new ticket is created in Intercom, you need to subscribe to “ticket.created” webhook. Follow this guide to subscribe to “ticket.created” topic:\n\nYou'll also need to add an url pointing to an endpoint in your app that will handle webhook payload from Intercom.\n\nStep 2: Handle webhook payload\n\nYour endpoint needs to handle a POST request that Intercom will send to it once a new ticket is created in Intercom.\n\nBelow is an example Sinatra (Ruby) code handling the payload: it creates an issue in GitHub and then updates the Intercom ticket with a link to this issue.\n\nrequire 'sinatra'\nrequire 'json'\nrequire 'octokit'\nrequire 'httparty'\n\nREPO_NAME_WITH_OWNER = 'owner/repo'\nGITHUB_ACCESS_TOKEN = 'your_github_api_access_token'\nINTERCOM_ACCESS_TOKEN = 'your_intercom_api_access_token'\n\npost '/tickets' do\n  # Create a GitHub issue from Intercom ticket payload:\n  notification = JSON.parse(request.body.read)\n  ticket_title = notification[\"data\"][\"item\"][\"ticket_attributes\"][\"_default_title_\"]\n  ticket_description = notification[\"data\"][\"item\"][\"ticket_attributes\"][\"_default_description_\"]\n  ticket_id = notification[\"data\"][\"item\"][\"id\"]\n\n  client = Octokit::Client.new(access_token: GITHUB_ACCESS_TOKEN)\n\n  # Note that we store Intercom ticket id within the issue title, we'll need it in Step 5 of this tutorial:\n  github_issue = client.create_issue(REPO_NAME_WITH_OWNER, ticket_title + \" [Intercom ticket number: \" + ticket_id + \"]\", ticket_description)\n\n  # Update the Intercom ticket with the GitHub issue link:\n  github_issue_url = github_issue.html_url\n\n  intercom_ticket_endpoint = \"https://api.intercom.io/tickets/#{ticket_id}\"\n  token_string= \"Token token = #{INTERCOM_ACCESS_TOKEN}\"\n  data = { ticket_attributes: { github_issue_url: \"#{github_issue_url}\" } }\n  response = HTTParty.put(intercom_ticket_endpoint, body: data.to_json, headers: { 'Content-Type': 'application/json', 'Authorization': token_string, 'Intercom-Version': 'Unstable'})\nend\n\nStep 3: Create a ticket in Intercom Inbox\n\nFollow the steps in this guide to create your first ticket of ticket type \"bug\":\n\nNote that when creating the ticket type, you should also set \"github_issue_url\" as an attribute shared between tickets of this type. This is necessary to update the ticket once the corresponding GitHub issue gets created:\n\nStep 4: An issue gets created in GitHub\n\nAt this point, the data about your Intercom ticket should be synced to a corresponding GitHub issue:\n\nThe ticket you created in Intercom should be updated with a link to the GitHub issue:\n\nStep 5: Close the issue in GitHub\n\nWhen it's time to close this GitHub issue, you'll probably want to mark the corresponding Intercom ticket as \"resolved\".\n\nTo achieve this, you first need to subscribe your GitHub repo to a webhook that will fire when an issue is closed. Refer to GitHub documentation for how to do this.\n\nYou'll also need to add another endpoint to your app that will handle the incoming webhook from GitHub:\n\npost '/issues' do\n  notification = JSON.parse(request.body.read)\n\n  if notification[\"action\"] == \"closed\"\n    # Parse the ticket id from the issue title:\n    ticket_id = notification[\"issue\"][\"title\"][/Intercom ticket number:\\s*(\\d+)\\]/, 1]\n\n    intercom_ticket_endpoint = \"https://api.intercom.io/tickets/#{ticket_id}\"\n    token_string= \"Token token=#{INTERCOM_ACCESS_TOKEN}\"\n    data = { state: \"resolved\" }\n\n    # Update Intercom ticket state to mark it as \"resolved\":\n    response = HTTParty.put(intercom_ticket_endpoint, body: data.to_json, headers: { 'Content-Type': 'application/json', 'Authorization': token_string, 'Intercom-Version': 'Unstable'})\n  end\nend\n\n\nNow, if you close the issue in GitHub, the Intercom ticket will be closed as well:\n\nCongrats! You are done.\n\nNext steps\nLearn more about Tickets as a product.\nExplore other Ticket webhook topics.\nExplore Ticket API."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "External Pages",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/external_pages_list/",
    "html": "This will return a list of external pages for the App."
  },
  {
    "title": "Import Contacts with the Intercom API",
    "url": "https://developers.intercom.com/docs/guides/tickets/import-contacts/",
    "html": "Import Contacts with the Intercom API\n\nIf you’re switching to Intercom from a different provider or starting out with a brand new workspace (welcome!) you likely need a way to import your users.\n\nThere are a few options for transferring your contact data that include:\n\nUsing an app, like these ones from Mailchimp or Mixpanel\nExporting your contacts as a CSV and uploading via the UI\nUsing your previous provider’s APIs to read the data and save as a JSON file or transfer directly using Intercom APIs\nExporting your contacts as a .xlsx, or JSON file and using the file for import with with Intercom APIs\n\nIn this tutorial you will import contacts into your Intercom app using example data from a JSON file. When complete, you should see the list of contacts in your Intercom workspace, along with a custom data attribute you will set on the contact.\n\nABOUT THIS TUTORIAL\n\nThis tutorial is written in Node.js and is aimed toward developers familiar with making API requests. The code samples are a starting point, but very large imports will require modifications. Note that developer workspaces are limited to 20 users/leads.\n\nWhat are contacts?\n\nIn Intercom, your contacts are your customers or end-users of your product. Contacts can either be a user or a lead. A lead is a person who hasn’t yet signed up for your product (or sometimes, a user who’s not logged in). If someone starts a conversation with you in the Intercom Messenger, they are automatically saved as a lead. A user is a signed-up, logged-in user of your product.\n\nYou can find a full list of Intercom defined terms here.\n\nThe Contacts and Data Attributes APIs\n\nYou will use two Intercom APIs to create data for this tutorial.\n\nPOST /contacts is used to create a contact, an end-user for your Intercom app. The only required parameter for creating a contact is email\n\nPOST /data_attributes is used to create a custom attribute for your contacts. You can create an attribute in the UI as well but for this tutorial you will create one using the API. The request requires name, model, and data_type.\n\nThis tutorial is set up to read data from a JSON file: use this dummy data provided or try using your own data. If you can access your data from another application with their API, you may modify the code to transfer the data directly.\n\nPrerequisites\nA free Intercom developer workspace and Intercom app. Create both by following this guide\nNode.js v16.0 or higher\nStep 1: Set up your project\n\nCreate and navigate to a new directory where you will save your data in the JSON file and the import script.\n\nmkdir import_contacts\ncd import_contacts\n\n\nThen create a new Node.js project and install the dependencies: dotenv for reading your Intercom Access Token and node-fetch for using the Fetch API for your calls to Intercom.\n\nnpm init\nnpm install dotenv node-fetch\n\n\nThe setup guide should have prompted you to create a project file called index.js. Create files for the contact dummy data and the .env file. Make sure to also add \"type\": \"module\" to your package.json file.\n\ntouch contacts.json\ntouch .env\n\n\nFind your Intercom Access Token from the Developer Hub under the Authentication section and paste it in the .env file.\n\nINTERCOM_TOKEN=”XXXXX\"\n\nNext you will add the contacts data to contacts.json\n\nStep 2: The contacts data\n\nThis is a small data set to use as an example. If you utilize another platform’s API to export data, be sure to check the rate limits and pagination methods. Intercom’s rate limits are provided here: At present, the default rate limit is 10,000 API calls per minute per app.\n\nOpen up contacts.json and paste in the following data.\n\n{\n   \"contacts\": [\n       {\n           \"id\": 14637613035933,\n           \"name\": \"Sarah M\",\n           \"email\": \"sarahm@example.com\",\n           \"company_id\": \"15257600000029\",\n           \"custom_attributes\": {\n               \"pronouns\": \"She/Her\"\n           },\n           “role”: “user”\n       },\n       {\n           \"id\": 14637613035934,\n           \"name\": \"Ajay P\",\n           \"email\": \"ajayp@example.com\",\n           \"company_id\": \"15283600000067\",\n           \"custom_attributes\": {\n               \"pronouns\": \"He/Him\"\n           },\n           “role”: “lead”\n       },\n       {\n           \"id\": 14637613035935,\n           \"name\": \"Huong N\",\n           \"email\": \"huongn@example.com\",\n           \"company_id\": \"15257600000029\",\n           \"custom_attributes\": {\n               \"pronouns\": \"They/Them\"\n           },\n           “role”: “user”\n       },\n       {\n           \"id\": 14637613035936,\n           \"name\": \"Jan G\",\n           \"email\": \"jang@example.com\",\n           \"company_id\": \"15259370000094\",\n           \"custom_attributes\": {\n               \"pronouns\": \"He/They\"\n           },\n           “role”: “lead”\n       },\n       {\n           \"id\": 14637613035937,\n           \"name\": \"Amina R\",\n           \"email\": \"aminar@example.com\",\n           \"company_id\": \"15357600000026\",\n           \"custom_attributes\": {\n               \"pronouns\": \"She/Her\"\n           },\n           “role”: “user”\n       }\n   ]\n}\n\n\nWhile the only required parameter for creating a contact is email, in a real case you would probably want to import as much data as possible about a contact. In this data set you have:\n\nname: The name of the contact\nid: The ID provisioned for the contact by the previous provider\nemail: The email of the contact\ncompany_id: The ID of the company provisioned for the contact by a previous provider\ncustom_attributes: These can be any additional attributes you want to add to a contact object. For this example we will look at how to add an attribute for a contact’s pronouns\nrole: Defines if the contact is a user or a lead.\n\nNext you will create the data attribute for pronouns to add to the contacts.\n\nStep 3: Create the data attribute\n\nOpen up index.js and paste in the below code.\n\nimport fetch from 'node-fetch';\nimport dotenv from 'dotenv';\nimport contactData from './contacts.json' assert { type: 'json' };\ndotenv.config();\n\n\nasync function createContactAttribute() {\n// Make a HTTP POST request to Intercom to create a data attribute\n// name, model, and data type are required fields, description is optional\n  const response = await fetch(\n    `https://api.intercom.io/data_attributes`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Intercom-Version': '2.10',\n        Authorization: `Bearer ${process.env.INTERCOM_TOKEN}`\n      },\n      body: JSON.stringify({\n      name: 'pronouns',\n      model: 'contact',\n      data_type: 'string',\n      description: 'The pronouns of the contact.'\n      })\n    }\n  );\n\n // If a successful 200 OK response, log that the attribute was created\n  if (response.ok) {\n    console.log('Data attribute created.');\n  }\n}\n\n// Make the call so the function will run\ncreateContactAttribute();\n\n\nHere you begin by importing the contacts.json file as the variable contactData, then defining a function to create a data attribute for contacts.\n\nYou need to provide your Intercom Access Token in the authorization headers, and for this tutorial we are using version 2.10 of the API.\n\nSince the data will be a string, you will provide that for the data_type and a brief description of what the attribute is.\n\nRun the file in your terminal using the command node index.js. If successful, you will see pronouns in the list of attribute names in Settings > People data in your workspace.\n\nStep 4: Create the contacts\n\nNow you can create the contacts with the new data attribute. Delete the createContactAttribute() code and replace it with the below.\n\nasync function createContact() {\n  // Create an array with the contacts example data\n  let contacts = contactData.contacts\n\n  // Loop over the array to get each contact object\n  for (let i = 0; i < contacts.length; i++) {\n    try {\n      // Make a HTTP POST request to Intercom to create the contact\n      // Email is the only required field to create a contact\n      const response = await fetch(\n        `https://api.intercom.io/contacts`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Intercom-Version': '2.10',\n            Authorization: `Bearer ${process.env.INTERCOM_TOKEN}`\n          },\n          body: JSON.stringify({\n            name: contacts[i].name,\n            email: contacts[i].email,\n            external_id: contacts[i].id,\n            custom_attributes: contacts[i].custom_attributes,\n            unsubscribed_from_emails: true\n          })\n        }\n     );\n     // If the response is not a 200 OK, log the error\n     if (!response.ok) {\n       throw new Error(`${response.status} ${response.statusText}`);\n     }\n     // If the response is successful log that the user has been created\n     console.log('New contact created.');\n    } catch (error) {\n     console.log(error)\n   }\n  }\n}\n\n// Call the function to make the API call\ncreateContact()\n\n\nFor large sets of contacts you may want to run the imports in batches if you are concerned about rate limiting. Batch sizes will depend on the size of your contact list and other API calls you are making within your Intercom app. If you hit the limit, you will see a 429 Error in the response status in your terminal Read more about how you can handle rate limits here.\n\nTo create the contacts, you will loop over the array of contacts in the contactData object. For each contact you are providing the name, email, external_id, and pronouns attribute from your custom attributes.\n\nYou will also set unsubscribed_from_emails to true so that if you take further actions to import more data, for example ticket data, the contact will not receive email notifications about the import. You can use the update a contact API to revert this change once you are finished with imports.\n\nYou will not use the external_id in this tutorial, but it may be helpful for you in the future if you are taking actions like importing tickets. To connect contacts with tickets or companies, you need to have the Intercom provisioned ID which is only accessible once the contact has been created in Intercom. You can find the contact using the search contacts API using the external_id as a parameter.\n\nRun node index.js again. You should see logged statements in the terminal when the contacts are created.\n\nNO DUPLICATE CONTACTS\n\nIf you attempt to create a contact that has already been created in your Intercom app, you will get a 409 Conflict response. You can get the contact's Intercom ID using the get a contact API and update the contact if needed.\n\nNow if you go to your Intercom Inbox under People > All Users you should see the contacts. They may take a few minutes to populate.\n\nConclusion\n\nIn this tutorial you imported contact user and lead data from a JSON file using the Intercom APIs. If you want to try importing data from a spreadsheet, check out the SheetJS library.\n\nIf you’re transferring your contacts using another platform’s APIs, there may be a difference in mapping or cases that weren’t covered in this tutorial. Check the provider’s documentation, and you can always refer to the Intercom contacts API reference for more details on how to create or update a contact.\n\nLet us know how it’s going for you and drop a note in the messenger in the bottom right or leave us some feedback at the bottom of this page.\n\nNext steps\nImport tickets into Intercom\nSet up a webhook for contacts\nCreate a ticket using the API"
  },
  {
    "title": "Build a ticket form with Tickets API",
    "url": "https://developers.intercom.com/docs/guides/tickets/build-a-ticket-form/",
    "html": "Build a ticket form with Tickets API\n\nIn this tutorial, we'll walk you through building a custom web form that will allow your users to submit tickets directly to Intercom, via Tickets API.\n\nPrerequisites\nAn Intercom developer workspace and Intercom app. Create both by following this guide.\nTicket Types of \"Bug\", \"Feature request\" and \"Other\". Create the required Ticket Types via the API or in the UI.\nStep 1: Create an app for your ticket form\n\nIn this tutorial, we'll use Sinatra (Ruby) to power the ticket form on your website. You can refer to official Sinatra docs to learn how to set up a basic Sinatra app.\n\nFor this app, you'll need two endpoints: get /index to display the form and post /tickets to create the ticket. To create a ticket, the app will make a call to Tickets API:\n\nrequire 'sinatra'\nrequire 'json'\nrequire 'httparty'\n\n# To create a ticket in Intercom, you need to provide the id of the corresponding Ticket Type.\n# This is a simplified way to map user selection to a Ticket Type id:\n\nTICKET_TYPES = {\n  '1' => 'Bug',\n  '2' => 'Feature request',\n  '3' => 'Other'\n}\n\nget '/' do\n  # This endpoint displays the `index` template, i.e. the ticket web form itself:\n\n  erb :index\nend\n\npost '/tickets' do\n  # This endpoint gets called when the form is submitted.\n\n  # First, we parse the payload we receive from the form:\n  ticket_type_id  = params['ticket_type']\n  ticket_title = params['ticket_title']\n  ticket_body = params['ticket_body']\n  email = params['email']\n\n  # Then we prepare the payload that will be sent to Intercom Tickets API:\n  intercom_api_token = 'your_intercom_api_access_token'\n  intercom_ticket_endpoint = \"https://api.intercom.io/tickets\"\n  token_string= \"Token token = #{intercom_api_token}\"\n\n  data = { \n    ticket_type_id: \"#{ticket_type_id}\",\n    contacts: [{ email: \"#{email}\" }],\n    ticket_attributes: { _default_title_: \"#{ticket_title}\", _default_description_: \"#{ticket_body}\" }\n  }\n  \n  HTTParty.post(intercom_ticket_endpoint, body: data.to_json, headers: { 'Content-Type': 'application/json', 'Authorization': token_string, 'Intercom-Version': 'Unstable'})\nend\n\n\nThe code above maps Ticket Types to hardcoded numbers for simplicity sake. In a real world app, you'll likely need to query Ticket Types API to match customer's selection to an id of a Ticket Type in your system.\n\nStep 2: Create a ticket form\n\nAdd the following code to index.erb template to display the ticket form:\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset='UTF-8' />\n    <title> Create an Intercom ticket </title>\n  </head>\n  <body class='container'>\n    <h2> Create a ticket </h2>\n    <form action='tickets' method='post'>\n    <label>Choose the type of the ticket you wish to submit:</label><br>\n      <ul>\n        <% TICKET_TYPES.each do |id, text| %>\n          <li>\n            <label>\n              <input type='radio' name='ticket_type' value='<%= id %>' id='ticket_type_<%= id %>' required/>\n              <%= text %>\n            </label>\n          </li>\n        <% end %>\n      </ul>\n      <label>Subject</label><br>\n      <input type=\"text\" name=\"ticket_title\"><br>\n      <label>Description</label><br>\n      <textarea name=\"ticket_body\" rows=\"6\" required></textarea><br>\n      <label>Your email</label><br>\n      <input type=\"text\" name=\"email\" required><br>\n      <button type='submit'>Submit</button>\n    </form>\n  </body>\n</html>\n\nStep 3: Fill out ticket details\n\nFill out the necessary details and click \"submit\":\n\nYou should now see this ticket in your Intercom Inbox:\n\nCongrats! You are done.\n\nNext steps\nLearn more about Tickets as a product.\nExplore Ticket webhook topics.\nExplore Ticket API.\nBuild an integration between Intercom tickets and GitHub issues."
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/listArticles/",
    "html": "You can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\n📘 How are the articles sorted and ordered?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "Content Import Sources",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/AI-Content/content_import_sources_list/",
    "html": "This will return a list of the content import sources for the App."
  },
  {
    "title": "Custom Domains for News Center",
    "url": "https://developers.intercom.com/docs/guides/news-center/custom-domains/",
    "html": "Custom Domains for News Center\n\nWhen you turn on your News Center, your content is available through news.intercom.com by default. Your URL will look like this: news.intercom.com/exampleapp\n\nIf you’d like to use a different URL, you can create one by setting up a custom domain. You can do so by:\n\n1. Entering your custom domain\n2. Creating a custom CNAME record\n3. Choosing to configure SSL\n\nTo recognize logged-in Users on your News Center, your web app (where you have Intercom installed) and your News Center must share a top level domain. E.g. If your domain is app.example.com, your custom News Center domain must be something like news.example.com. This allows Intercom to identify your logged-in users when they visit your News Center.\n\nEnter your custom domain\n\nEnter the custom domain you want to use in your News Center settings. Let’s use ‘news.exampleapp.com’ as an example:\n\nCreate a custom CNAME record\nGo to your DNS provider’s website (e.g. GoDaddy or Cloudflare). If you’re choosing one for the first time, go with one that supports SSL.\nCreate a CNAME (‘canonical name’) record for your custom domain.\nPoint it at Intercom’s host domain news.intercom.com\nREGION SUPPORT\n\nWe currently don't support custom domains for News in Australia or Europe.\n\nHow to create a custom CNAME record with Cloudflare\n\nThese steps will vary, so check with your own DNS provider for support.\nAs an example, here’s how to set up a CNAME record with Cloudflare:\n\nSet up Cloudflare as the resolver for your custom CNAME by changing your domain nameserver to Cloudflare.\nGo to the ‘DNS’ section in Cloudflare and add a CNAME record for your News Center custom domain. Give the CNAME a Name based on the first part of your custom domain e.g. if your custom domain is news-center.example.com, use news-center.\nPoint it at the Intercom host domain: news.intercom.com\n\nTo enable the CNAME record, toggle on Proxy Status so that cloud icon is orange.\n\nChoose to configure SSL (optional)\n\nAfter you set up a custom domain, your News Center will be hosted on your domain, but on HTTP rather than HTTPS. Your News Center will now appear as ‘not secure’ on web browsers like Chrome Here’s how to secure it.\n\nSSL (or TLS), is the most widely used way to secure the connection between your server and your browser. It ensures the connection between the server and browser is encrypted and safe, and appears as HTTPS.\n\nHere’s what an SSL-configured website (with HTTPS) typically looks like on the Chrome browser:\n\nThis is what it looks like if you’ve visited a website not secured by SSL (without HTTPS):\n\nThere are two ways to set up SSL with the News Center on your custom domain:\n\nUse a flexible SSL (using a third party DNS provider like CloudFlare or AWS CloudFront)\nUse your own SSL certificate (using a TLS Termination Proxy)\n\nYou can configure SSL for your custom domain to keep sensitive information encrypted. If you want to do this, make sure you’ve set up your CNAME with a DNS provider that supports SSL, like Cloudflare.\n\nDNS CHANGES CAN TAKE TIME\n\nDNS changes can sometimes take up to 72 hours to take effect, but are typically much faster.\n\nHow to configure SSL with Cloudflare\nAdd SSL support to your domain\n\nGo to the SSL/TLS section and change SSL to ‘Flexible’ or ‘Full’.\n\nDon’t choose ‘Full (Strict)’ as this will result in an invalid SSL certificate.\n\nCreate a page rule enforcing HTTPS\n\nGo to ‘Page Rules’ and create a new page rule with the following settings, replacing news.exampleapp.com with your own custom domain.\n\nDisable Cloudflare page speed features\n\nGo to ‘Speed’ and disable Rocket Loader and Mirage for your custom News Center domain.\n\nBoth of these features result in Cloudflare attempting to add some javascript to your News Center. This will break functionality on your News Center due to security settings your News Center has enabled.\n\nREADY TO GO!\n\nYour custom domain should be fully secured and ready to go. Visitors to your News Center will see the green lock icon in their browser to let them know the site is secure.\n\nHow to configure SSL with AWS\nCreate a CloudFront Distribution\nSign in to the AWS Management Console and open the CloudFront console.\nChoose Create Distribution\nUpdate the 'Origin' settings. The origin domain will be news.intercom.com and the protocol should be HTTPS only. Our servers support TLSv1.2.\nUpdate the 'Default cache behavior' settings.\n\n❗️ Cookie Forwarding and Query String Forwarding\n\nIt is important that your Cloudfront distribution's behaviour is set up to forward all Headers, Cookies and Query Strings or else features of the News Center may not work\n\n🚧 Cache Settings Changed\n\nWhen setting up your Cloudfront distribution, you need to select \"Use legacy cache settings\", which will now show the options for:\n\nHeaders\nQuery strings\nCookies\n\nThese should be set to All\n\nUnder 'Settings', add your custom domain, e.g. news.exampleapp.com as an Alternate domain name and upload your SSL certificate if you have one. You need a certificate that matches your domain. If you use a certificate that does not match your domain, then you will see the following error when navigating to the HTTPS version of your website: NET::ERR_CERT_COMMON_NAME_INVALID\nCreate a CNAME record\nCopy your distribution domain name\nNavigate to your domain provider and create a new CNAME record\nFor host/name input your subdomain (ex news)\nFor value input your CloudFront distribution domain name\nUsing your own SSL certificate with Apache or Nginx\n\nThe SSL certificate used by your News Center is a shared certificate signed by your DNS provider. It uses SNI (Server Name Indication) to secure your site.\n\nIf you wish to host your own security certificates, you can do so through a TLS termination proxy. You’ll need to edit the configuration file on your proxy webserver.\n\nNote: If you created a CNAME record that points to news.intercom.com, you'll need to delete this to host your own SSL certificate.\n\nHere are the basic instructions to set up your own SSL using Apache and Nginx webservers:\n\n# Prerequisites: mod_ssl, mod_proxy and mod_proxy_http should be enabled\n\n# Step 1: Acquire an SSL certificate and private key (e.g. LetsEncrypt.org)\n# Step 2: Set up Apache proxy settings, example below.\n# Step 3: Set custom domain in Intercom News Center settings\n# Step 4: Make sure your custom domain's DNS record resolves to your Apache server\n\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n        ServerName your-news-site.custom-domain.com # specify your custom domain here\n\n        # Set SSL options for your own domain\n        SSLEngine on\n        SSLCertificateFile /path/to/your/fullchain.pem\n       \tSSLCertificateKeyFile /path/to/your/privatekey.pem\n  \n        # Proxy SSL options\n        SSLProxyEngine on\n        SSLProxyVerifyDepth 10\n        SSLProxyCheckPeerCN off\n        SSLProxyCheckPeerName on\n\n       # Set up the reverse proxy to Intercom\n        ProxyPreserveHost On\n        ProxyPass / https://news.intercom.com/\n        ProxyPassReverse / https://news.intercom.com/\n</VirtualHost>\n</IfModule>\n\n# Prerequisites: ngx_http_ssl_module and ngx_http_proxy_module should be enabled\n\n# Step 1: set up normal server with HTTPS https://letsencrypt.org/\n# Step 2: set up proxy settings as shown below \n# Step 3: set custom domain in Intercom News Center settings\n# Step 4: make sure your DNS record is configured to IP of your Nginx server\n\nresolver 8.8.8.8; # use own DNS server if you have one\nserver {\n  listen 443 ssl;\n  server_name your-news-site.custom-domain.com; # replace this with your domain\n\n  ssl_certificate /path/to/your/fullchain.pem;\n  ssl_certificate_key /path/to/your/privatekey.pem;\n\n  location / {\n    # using \"set\" is important as IP addresses of Intercom servers \n    # changes dynamically. \"set\" enables nginx to follow dynamic IPs\n    set $intercom \"https://news.intercom.com:443\"; \n    proxy_set_header Host $host;\n    proxy_pass $intercom;\n  }\n}\n\n\nThere are many ways to set up your own SSL certificate - we can’t guarantee that we can support every type of proxy setup. If you have specific needs, we can't support you in configuring it.\n\nNote that you may also need to add redirect from HTTP protocol (port 80) to HTTPS as part of your server configuration.\n\nWhile most modern browsers support SNI, a few older ones don’t. If you’re supporting those browsers, you should use your own SSL certificate instead. Check with your DNS provider to see if this option is available."
  },
  {
    "title": "Search tickets",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/searchTickets/",
    "html": "You can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for tickets, you send a POST request to https://api.intercom.io/tickets/search. This will accept a query object in the body which will define your filters.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiples there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the Ticket model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foobar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\ntitle\tString\ndescription\tString\ncategory\tString\nticket_type_id\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nopen\tBoolean\nstate\tString\nsnoozed_until\tDate (UNIX timestamp)\nticket_attribute.{id}\tString or Boolean or Date (UNIX timestamp) or Float or Integer"
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/listAdmins/",
    "html": "You can fetch a list of admins for a given workspace."
  },
  {
    "title": "About the SDK",
    "url": "https://developers.intercom.com/installing-intercom/ios/about-the-sdk/",
    "html": "About the SDK\n\nThe Intercom SDK for iOS enables you to use the Intercom Messenger in your app, have conversations with your customers, send rich outbound messages, show your Help Center, and track events.\n\nInstallation\n\nYou can install Intercom for iOS using Cocoapods, Swift Package Manager, or manually. A basic installation takes around 15 minutes, but will take a little longer if you need to configure event tracking or have a more complex use case.\n\nTo install Intercom for iOS you will need an API key. You’ll find that in Intercom > Settings > Installation > iOS. That’s where you can upload your push certificate as well.\n\nSample app\n\nYou’ll find Intercom for iOS on Github here. There’s also a sample app that you can use to play around with the SDK here.\n\nCompatibility\n\nIntercom for iOS is compatible with iOS 13 and up. We also have a plugin for Cordova and Phonegap.\n\nThe SDK is written using both Objective-C and Swift.\n\nSDK size\n\nThe size of Intercom for iOS once installed varies depending on your app’s configuration. For most installations, it’s around 3MB in size."
  },
  {
    "title": "What are Tickets?",
    "url": "https://developers.intercom.com/docs/guides/tickets/",
    "html": "What are Tickets?\n\nWhen working in Intercom, most of the time teammates will live in Conversations, which is the primary way to talk with customers. However, sometimes you need to work on a complex customer query that doesn't require a conversation. For example, you might need to track a bug, or you might need to follow up on a customer request. In these cases, you can use Tickets to manage these complex queries.\n\nHow can I interact with them via the API?\n\nTickets has first class support in our APIs, meaning you can\n\nCreate a ticket\nUpdate a ticket\nReceive webhooks when tickets are created, updated, assigned and more\n\nWith these APIs, you can seamlessly integrate Tickets into your existing workflows and tools.\n\nWhat's next?\nLearn about how to create Tickets via the API\nSee how to sync a Ticket with an external system like GitHub\nCreate tickets from a form on a webpage"
  },
  {
    "title": "Retrieve a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/getTicket/",
    "html": "You can fetch the details of a single ticket."
  },
  {
    "title": "Update a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/updateTicket/",
    "html": "You can update a ticket."
  },
  {
    "title": "Create a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/createTicket/",
    "html": "You can create a new ticket."
  },
  {
    "title": "Add tag to a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/attachTagToTicket/",
    "html": "You can tag a specific ticket. This will return a tag object for the tag that was added to the ticket."
  },
  {
    "title": "Contact",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Contacts/contact/",
    "html": "Contact are the objects that represent your leads and users in Intercom."
  },
  {
    "title": "Ticket Type",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/ticket_type/",
    "html": "A ticket type, used to define the data fields to be captured in a ticket."
  },
  {
    "title": "Reply to a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/replyTicket/",
    "html": "You can reply to a ticket with a message from an admin or on behalf of a contact, or with a note for admins."
  },
  {
    "title": "Remove tag from a ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/detachTagFromTicket/",
    "html": "You can remove tag from a specific ticket. This will return a tag object for the tag that was removed from the ticket."
  },
  {
    "title": "Stored Data",
    "url": "https://developers.intercom.com/docs/references/canvas-kit/responseobjects/stored-data/",
    "html": "Stored Data\nDescription\n\nA canvas object may optionally contain a stored_data object. This is where you can add key-value pairs of data that you want to be sent in whatever the next request is.\n\nFor example, the flow of your app might have multiple canvases with data being inputted on each one. You may want to have all this data available to use at the end of the flow for the final canvas. You can therefore put all this data in the stored_data object so it's sent in subsequent requests and is available at the end.\n\nExample Object\nstored_data: {\"key\": \"value\"} //Can be more than one pair\n"
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/ticket_contacts/",
    "html": "The list of contacts affected by a ticket."
  },
  {
    "title": "Data Export",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Export/data_export/",
    "html": "The data export api is used to view all message sent & viewed in a given timeframe."
  },
  {
    "title": "Intercom Developer Terms",
    "url": "https://developers.intercom.com/docs/publish-to-the-app-store/intercom-developer-terms/",
    "html": "Intercom Developer Terms\nDEVELOPER TERMS\n\nThese Intercom Developer Terms (\"Agreement\") are between Intercom, Inc. (\"Intercom\" or \"we\") and you, the developer entering into this Agreement (\"Developer\" or \"you\"). If you are agreeing to this Agreement on behalf of your company, you represent that you are authorized to accept this Agreement on behalf of your company, and all references to \"you\" or \"Developer\" reference your company. This Agreement governs your access to and use of the Intercom Developer Platform.\n\nBY INDICATING YOUR ACCEPTANCE OF THIS AGREEMENT OR ACCESSING OR USING THE INTERCOM DEVELOPER PLATFORM, YOU ARE AGREEING TO BE BOUND BY ALL TERMS, CONDITIONS, AND NOTICES CONTAINED OR REFERENCED IN THIS AGREEMENT. IF YOU DO NOT AGREE TO THIS AGREEMENT, YOU MAY NOT USE THE INTERCOM DEVELOPER PLATFORM. FOR CLARITY, EACH PARTY EXPRESSLY AGREES THAT THIS AGREEMENT IS LEGALLY BINDING UPON IT.\n\n1. Participation as a Developer\n\n1.1. Overview. Intercom makes available the Intercom Developer Platform to developers to build Developer Apps that interoperate with and enable End Users to access the Intercom Service.\n\n1.2. Creation of Developer Account. Developer agrees to follow the registration requirements established by Intercom for creating a developer account and accessing the Intercom Developer Platform.\n\n1.3. Developer Use of the Intercom Service. This Agreement does not grant Developer the right to use the Intercom Service directly. Any use of the Intercom Service by Developer (including access through any free platform account) is subject to Developer entering into Intercom's separate Subscription Terms of Service (the \"Intercom Customer Agreement\").\n\n1.4. Intercom Policies. Developer's use of the Intercom Developer Platform is subject to Developer's compliance with the Intercom Policies, which are incorporated herein by reference. In the event of any conflict between the Intercom Policies and this Agreement, this Agreement will control.\n\n1.5. Use of Data 1.5.1. Developer Data. Intercom will use all Developer Data (as defined below) You or anyone acting on Your behalf provides or transfers to Intercom in accordance with these Intercom Developer Terms and the Intercom online privacy notice located at https://www.intercom.com/legal/privacy. Developer Data may be used to analyze and understand how You are using the Intercom Service and usage statistics from the Intercom App Store about Developer Apps.\n\n1.5.2. Developer shall not collect or store any Developer Data without end-user's authorization. You acknowledge that Intercom may collect, and process Developer Data as set forth in Intercom's online terms of service located at:https://www.intercom.com/legal/terms-and-policies or online privacy notice. Intercom shall not be liable for any Developer Data retained, or otherwise processed by You or Your Developer App.\n\n1.5.3. Intercom is not responsible for anything submitted by You or other users to the Developer Platform, Developer Service, and Intercom App Store or for modifying or removing Your Data or Others' Data from the Developer Platform, Developer Service, and Intercom App Store.\n\n1.6. You shall at all times comply with under the Applicable Data Protection Legislation and obligations in respect of personal data under these Intercom Developer Terms, and you will not do, or permit anything to be done, which might cause Intercom to be in breach of the Applicable Data Protection Legislation.\n\n1.7. Developer has implemented technical and organisational measures to ensure an appropriate level of security, taking into account the nature, scope, context and purpose of the processing of personal data, and the risks for the rights and freedoms of natural persons.\n\n2. Definitions\n\n\"Acceptable Use Policy\" means the then-current version of Intercom's Acceptable Use Policy available at https://www.intercom.com/terms-and-policies#aup or any successor URL.\n\n\"Access Credentials\" means any Developer Credentials or Access Tokens.\n\n\"Access Token\" means an authentication token or other technological credential issued by Intercom that enables a Developer App to access a specific End User's account and End User Data on the Intercom Service.\n\n\"App Guidelines\" means the then-current version of Intercom's App Guidelines available at https://developers.intercom.com/build-an-integration/docs/intercom-developer-guidelines or any successor URL.\n\n\"Applicable Data Protection Legislation\" refers to laws and regulations applicable the processing of personal data, including but not limited to (a) the GDPR, (b) in respect of the UK, the GDPR as saved into United Kingdom law by virtue of section 3 of the United Kingdom's European Union (Withdrawal) Act 2018 and the Data Protection Act 2018 (together, \"UK Data Protection Laws\"), (c) the Swiss Federal Data Protection Act and its implementing regulations (\"Swiss DPA\"), and (d) the California Consumer Privacy Act (\"CCPA\"), in each case, as may be amended, superseded or replaced.\n\n\"Approval\" has the meaning set forth in Section 4.2 (Approvals).\n\n\"Brand Guidelines\" means the then-current version of Intercom's trademark usage guidelines available at https://www.intercom.com/press#brand_assets or any successor URL.\n\n\"Developer Apps\" means any integration, interoperability or compatibility between the Intercom Service and Developer Service built by Developer. Messenger Apps are a type of Developer App.\n\n\"Developer Credential\" means an authentication token or other technological credential issued by Intercom that enables a Developer App to interoperate with the Intercom Service via Intercom APIs.\n\n\"Developer Data\" means any data provided or generated by You when using the Developer Platform, Developer Service, and Intercom App Store and Intercom Service and usage statistics from the Developer Platform, Developer Service, and Intercom App Store about Developer Apps.\n\n\"Developer End User Agreements\" means Developer's agreements with the End User governing the Developer Service, a legally adequate privacy policy, and appropriate contextual notices to and consents from End Users.\n\n\"Developer Guidelines\" means the then-current version of Intercom's Developer Guidelines available at https://developers.intercom.com/build-an-integration/docs/intercom-developer-guidelines or any successor URL.\n\n\"Developer Marks\" means all trademarks, service marks, logos or trade names used to identify Developer or its products or services.\n\n\"Developer Service\" means Developer's own products or services.\n\n\"End User\" means an end user of the Intercom Service.\n\n\"End User Data\" means any data of any type that is accessible through the Intercom Developer Platform, including any data (a) submitted to the Intercom Service by or on behalf of an End User (including via a Developer App) or (b) stored within an End User's account on the Intercom Service.\n\n\"Harmful Code\" means viruses, worms, time bombs, Trojan horses or other harmful, malicious or destructive code.\n\n\"Intercom App Store\" means Intercom's website(s) for promoting and making available Developer Apps for use by End Users currently located at www.intercom.com/app-store or any successor URL.\n\n\"Intercom Developer Hub\" means Intercom's portal for developers currently located at https://developers.intercom.com/ or any successor URL.\n\n\"Intercom Developer Platform\" means the services and tools that Intercom makes available to third-party developers via the Intercom Developer Hub, such as application programming interfaces (APIs), software development kits (SDKs), design frameworks, scripts, plug-ins, webhooks, Access Credentials and documentation.\n\n\"Intercom Marks\" means all trademarks, service marks, logos or trade names used to identify Intercom or its products or services that Intercom makes available to Developer under this Agreement.\n\n\"Intercom Messenger\" means Intercom's product currently-branded as \"Messenger\".\n\n\"Intercom Policies\" means the then-current versions of Intercom's Acceptable Use Policy, App Guidelines, Brand Guidelines, Developer Guidelines and any other Intercom developer policies, requirements, documentation or guidelines that Intercom posts on the Intercom Developer Hub from time-to-time or otherwise provides to developers.\n\n\"Intercom Service\" means Intercom's proprietary messaging or other software-as-a-service solutions offered by Intercom. Intercom Service includes Intercom Messenger.\n\n\"Intercom User Connect Flow\" means Intercom's End User permissions flow for accessing End User Data.\n\n\"Laws\" means all laws, rules, regulations or orders, including those relating to data privacy, data transfer, international communications or the export of technical or personal data, including the EU General Data Protection Regulation (\"GDPR\").\n\n\"Make Available\" means to publicly promote and list.\n\n\"Messenger Apps\" means any Developer App that End Users can access within Intercom Messenger.\n\n3. Intercom Developer Platform\n\n3.1. Use of Intercom Developer Platform. Subject to this Agreement, Intercom grants Developer a limited, non-exclusive, non-sublicensable and non-transferable right to (a) use the Intercom Developer Platform to develop and test Developer Apps and (b) upon Approval, Make Available and support Developer Apps and allow End Users to access the Intercom Service through Developer Apps, in each case, only as permitted by and in accordance with the terms of this Agreement and the Intercom Policies.\n\n3.2. Conditions on Use. As conditions on the rights granted to Developer herein, Developer agrees not to (and will not permit any third party to): (a) use the Intercom Developer Platform or enable access to the Intercom Service in violation of this Agreement or any Intercom Policies; (b) modify (except as expressly permitted in the applicable Intercom Policies), or create any derivative works of (except to the extent Developer Apps are deemed derivative works under applicable law), the Intercom Developer Platform; (c) copy, distribute, sell, sublicense, rent or lease the Intercom Developer Platform or use the Intercom Developer Platform for hosting, service provider or like purposes; (d) publicly disseminate performance information (including uptime, response time and/or benchmarks) relating to the Intercom Developer Platform; (e) use the Intercom Developer Platform to develop any products or services similar to or competing with the Intercom Service; (f) circumvent any limitations on access to the Intercom Developer Platform specified by Intercom; (g) introduce into the Intercom Service any Harmful Code; (h) interfere with or disrupt the Intercom Service or the Intercom Developer Platform, or Intercom's monitoring thereof; (i) directly or indirectly enable any party other than the applicable individual End User for whom an Access Token was issued to use Developer Apps to access such End User's account or End User Data on the Intercom Service; (j) interfere with other Intercom end-user access to, or use of, the Intercom Service, or with its security; (k) facilitate the attack or disruption of the Intercom Service, including a denial of service attack, unauthorized access, penetration testing, crawling, or distribution of malware; (l) cause an unusual spike or increase in Your use of the Intercom Service; (m) will not sell, resell, distribute, rent or lease the Intercom Service, include the Intercom Service, or otherwise commercialize the Intercom Service except as integrated within your Developer App; (n) use any Developer Data or End User Data from the Developer Platform, Developer Service, Intercom App Store, or Intercom Service in any advertisements or for purposes of targeting advertisements; or (o) use contact information of other users of the Developer Platform, Developer Service, Intercom App Store, or Intercom Service without their consent.\n\n3.2.1. (a) You shall present a privacy policy to Your Developer App's end-users. (b) Your privacy policy must meet applicable legal standards and accurately describe Your collection, use, storage and sharing of any personal data. (c) You are solely responsible for the development, maintenance, and support of Your Developer App. (d) You will design, develop and operate Your Developer App in a way that does not contain any security vulnerabilities. (e) If Your Developer App stores personal or sensitive information provided by end-users, it must do so securely. (f) You are responsible for maintaining the confidentiality of Your Developer Platform and Developer Service credentials and You are solely responsible for all Developer Apps that are developed under Your credentials. (g) You will not scrape, or otherwise create copies of any data obtained using the Intercom Service except as necessary to enable the intended feature of your Developer App and with express consent of Intercom's end-users.\n\n3.3. Open Source Software. If any open source license is designated by Intercom for any separately installable software code provided as part of the Intercom Developer Platform, the terms of such open source license will apply in lieu of the terms of this Agreement with respect to use of such code, including, without limitation, any provisions governing access to source code, modification or reverse engineering.\n\n3.4. Changes to Intercom Developer Platform. From time-to-time, Intercom may change the Intercom Developer Platform. Future versions of the Intercom Developer Platform may not be compatible with Developer Apps developed using previous versions. Intercom will have no liability resulting from changes to the Intercom Developer Platform or any effect such changes may have on Developer Apps. Intercom will make reasonable efforts to provide notice in accordance with Section 18 (Notices) if such changes will materially affect the features or functionality of the Intercom Developer Platform.\n\n3.5. Suspension. Without limiting Intercom's termination or other rights hereunder, Intercom reserves the right to suspend, throttle or limit Developer's access to the Intercom Developer Platform (and any related services) in whole or in part, without liability to Developer for any or no reason, including for (i) load-balancing purposes, (ii) if Intercom reasonably believes Developer's continued access could adversely impact the performance or operation of the Intercom Developer Platform or Intercom Service, or (iii) violations of this Agreement or any Intercom Policies. Intercom will use reasonable efforts to notify Developer, in accordance with Section 18 (Notices) below, prior to suspending Developer's access unless Intercom believes suspension is necessary to prevent or avoid imminent harm.\n\n4. Developer Apps\n\n4.1. Developer Apps and End Users. Developer is solely responsible, at Developer's own expense, for (a) Developer Apps and their operation and support (including any integration issues) and (b) Developer End User Agreements.\n\n4.2. Approvals. Prior to Making Available a Developer App or enabling a Developer App to access any End User Data, Developer must submit the Developer App to Intercom for approval, which Intercom may withhold in its sole discretion. Developer must provide all information requested by Intercom, including, but not limited to, the permissions for End User Data that Developer is requesting for the Developer App and the reasons such permissions are necessary. Intercom's approval of a Developer App may be indicated by Intercom's issuing Developer Credentials for the Developer App or through other Intercom communications (\"Approval\"). Developer acknowledges and agrees that Intercom's Approval may be for fewer End User Data permissions than Developer requested and Developer Credentials will be specifically limited to the End User Data permissions granted by Intercom.\n\n4.3. Access Credentials.\n\n4.3.1. Developer Credentials. If Intercom Approves a Developer App, Intercom will provide Developer Credentials to Developer to enable the Developer App to interoperate with the Intercom Service.\n\n4.3.2. Access Tokens. Developer must obtain an Access Token for each End User before the Developer App accesses any of that End User's End User Data. Intercom will provide an Access Token to Developer upon an End User's authorization of a Developer App to access End User Data via the Intercom User Connect Flow. Except for such Access Tokens, Developer will not collect, request or require that End Users provide any login credentials for the Intercom Service (including name, email address or password) or copy, use or store any Intercom login credentials.\n\n4.3.3. Access Credential Restrictions. Developer must keep all Access Credentials confidential. Developer must not: (a) sell, share, disclose, transfer, or sublicense Access Credentials to any third party; (b) attempt to circumvent any limitations associated with Access Credentials (e.g., call limits or limits on End User Data permissions); or (c) use Developer Credentials with any Developer App other than the Developer App for which Intercom issued such Developer Credentials. Developer is responsible for all activities that occur using its Developer Credentials and for any unauthorized use or disclosure of Access Tokens stored by Developer or a Developer App.\n\n4.4. Security. Developer will: (a) use industry best-practice information security policies and processes (including technical, administrative and physical safeguards) that prevent loss, theft, damage or unauthorized access to or disclosure of the any End User Data, Access Credentials, the Intercom Developer Platform or Developer Apps; (b) promptly report to Intercom any known or suspected security breach involving any of the foregoing (but in any event within seventy-two (72) hours of becoming aware of such occurrence), remediate such breach and provide such other assistance reasonably requested by Intercom to minimize the impact of such breach on End Users and Intercom; and (c) prior to issuing any public statements or responding to third-party inquiries regarding such breach, coordinate a response with Intercom in good faith, unless prohibited by Laws.\n\n4.5. Ongoing Review by Intercom. Notwithstanding Intercom's prior Approval of a Developer App, Intercom reserves the right to review Developer Apps and Developer's security policies and processes for compliance with this Agreement at any time. In connection with such review, Developer agrees to provide free access to Developer Apps, copies of such policies and any additional information relating to Developer Apps upon Intercom's reasonable request. Upon such review, if Intercom determines that Developer Apps or such policies are not compliant with this Agreement, Intercom may revoke Developer's Access Credentials in Intercom's sole discretion and Developer agrees to immediately cease providing the Developer App and enabling access to the Intercom Service until otherwise notified by Intercom.\n\n4.6. Private Developer Apps. If Developer wishes to create a Developer App for its own internal use that only connects to Developer's account on the Intercom Service and not to the account of any other End User (\"Private Developer App\"), Developer may do so without Approval, subject to its compliance with this Agreement and its Intercom Customer Agreement. Developer may generate its own Access Token for a Private Developer App using the Intercom Service dashboard.\n\n5. Making Available Developer Apps; Private Developer Apps\n\n5.1. Intercom App Store.\n\n5.1.1. Listing. Intercom may, in its discretion, Make Available Approved Developer Apps in the Intercom App Store in accordance with Section 9.2 (Developer) below. Intercom's right to Make Available such Developer Apps includes the right to provide demonstrations of such Developer Apps to End Users and to use and reference such Developer Apps in connection with Intercom's marketing and promotion of the Intercom Service, Intercom Developer Platform, and Intercom App Store. Upon Intercom's request, Developer will provide Intercom with free access to an account for Developer Apps in connection with the foregoing. Intercom is free to use any descriptions of Developer Apps (including links to the applicable Developer End User Agreements and Developer's website pages where it describes Developer Apps) and Developer Marks provided to Intercom in connection with Making Available such Developer Apps. Developer may also apply to have Intercom Make Available Developer's Approved Developer Apps in the Intercom App Store, which application Intercom may accept or reject in its sole discretion.\n\n5.1.2. No Expectation. For avoidance of doubt, Intercom does not have any duty or obligation, express or implied, to Make Available any Developer Apps and Developer has no expectation of any minimum distribution or usage.\n\n5.1.3. Editorial Control. Notwithstanding anything to the contrary herein, Developer acknowledges and agrees that Intercom has sole editorial control of the Intercom App Store and may choose the placement and location of Developer Apps and size and prominence of Developer Marks. Intercom will also have final approval of any description of the Developer Apps appearing on the Intercom App Store. Intercom reserves the right to remove the Developer Apps, Developer Marks and Developer Apps descriptions from the Intercom App Store at any time in its sole discretion without notice to Developer.\n\n5.1.4. Fees. Intercom reserves the right to charge fees for Making Available Developer Apps in the Intercom App Store, subject to Section 17 (Changes to this Agreement).\n\n5.1.5. Additional Terms for Messenger Apps. The Additional Terms for Messenger Apps apply to all Messenger Apps and are hereby incorporated in the Agreement by reference.\n\n5.2. By Developer. During the term of this Agreement, Developer may Make Available its own Approved Developer Apps on its own website (and provide links to the Intercom App Store entries for such Developer Apps (if any)). Any use by Developer of Intercom Marks in connection with the foregoing must be in accordance with Section 8.1 (Use of Intercom Marks) below.\n\n6. Data\n\n6.1. End User Data.\n\n6.1.1. In General. Developer agrees to access End User Data only if Developer has received Access Credentials as set forth in Section 4.3 (Access Credentials) above. Developer will ensure that all End User Data is collected, processed, transmitted, maintained and used (collectively, \"Processed\") in accordance with: (a) the Developer End User Agreements; and (b) all Laws. The Developer End User Agreements must clearly describe what End User Data Developer is Processing, how Developer Processes such End User Data and how Developer shares End User Data. The Developer End User Agreements must also indicate that Developer, not Intercom, is responsible and liable for the privacy, security and integrity of any End User Data Processed by Developer.\n\n6.1.2. Termination of Access. Developer agrees that it will permit an End User to terminate the Processing of its End User Data by Developer Apps at any time upon such End User's request. Developer acknowledges and agrees that an End User may revoke an Access Token at any time via its Intercom account.\n\n6.2. Usage Data. Intercom may monitor and collect certain aggregate data and information regarding Developer's use of the Intercom Developer Platform that is non-personally identifiable with respect to Developer, including data about Developer's API requests, Developer Apps (including information identifying Developer Apps or their source) or actions taken within the Intercom Service and the Intercom End User accounts that are accessed by Developer Apps (\"Usage Data\"). Intercom may use Usage Data in connection with operating, improving and supporting the Intercom Developer Platform, Intercom Service and Intercom App Store. Intercom may also disclose Usage Data to third parties in reports or other publications, provided that Intercom does not identify Developer as the source of any Usage Data.\n\n7. Developer Obligations\n\n7.1. No Representations. Developer shall not: (a) hold itself out as a reseller of the Intercom Service; (b) make any representations, guarantees or warranties of any type on behalf of Intercom or with respect to the specifications, features, capabilities or otherwise concerning the Intercom Service, or describe the Intercom Service in a manner inconsistent with the product descriptions or promotional materials made publicly available by Intercom; or (c) engage in any deceptive, misleading illegal or unethical practices under this Agreement. Developer will not suggest or imply that Intercom sponsors, endorses or guarantees the Developer Apps except for describing the interoperability of the Intercom Service and Developer Apps as expressly permitted hereunder.\n\n7.2. Developer Representations and Warranties. Developer represents and warrants that: (a) Developer will have full power and authority to enter into and perform its obligations under this Agreement and to exploit the Developer Apps without violating any other agreement; (b) the Developer Apps and their use or Intercom's exercise of any of the licenses granted hereunder will not violate any third-party rights (including intellectual property rights and rights of privacy or publicity) or any Laws; (c) the Developer Apps will comply with all applicable Intercom Policies; (d) all information Developer provides to Intercom (including any descriptions of the Developer Apps) will be true, accurate and complete; and (e) Developer will not interfere with Intercom's business practices or the way in which it offers or provides the Intercom Service.\n\n7.3. Indemnification. Developer will indemnify, defend (at Intercom's request) and hold harmless Intercom and its affiliates and their respective directors, officers, employees, agents, contractors and licensees from and against any claims, losses, costs, expenses (including reasonable attorneys' fees), damages or liabilities arising from or relating to: (a) Developer Apps; (b) Developer's relationships or interactions with End Users, including Developer End User Agreements and provision of the Developer Service; (c) Developer's breach or alleged breach of this Agreement (including, but not limited to, breach of Sections 4.4 (Security) or 6.1 (End User Data)); or (d) Developer Marks. Intercom may at its own expense participate in the defense and settlement of any claim with its own counsel, and Developer may not settle a claim without Intercom's prior written consent (not to be unreasonably withheld).\n\n8. Use of Marks\n\n8.1. Use of Intercom Marks. Subject to this Agreement, Intercom grants Developer a non-exclusive, non-transferable, non-sublicensable, revocable license to use the Intercom Marks solely for the purposes of Making Available its own Approved Developer Apps, in compliance with the Brand Guidelines. All goodwill arising out of use of the Intercom Marks will inure to the benefit of Intercom. Except as expressly licensed under this Agreement, Intercom retains all right, title and interest in and to the Intercom Marks, including all intellectual property rights. Intercom reserves the right to review Developer's use of Intercom Marks and Developer agrees to cease use of Intercom Marks upon Intercom's request (in Intercom's sole discretion).\n\n8.2. Use of Developer Marks. Intercom may (but is not obligated to) use Developer Marks to identify Developer as a developer and to promote Developer Apps. Subject to this Agreement, Developer grants to Intercom a non-exclusive, non-transferable right to use the Developer Marks and any descriptions that Developer publishes about the Developer Apps for the purposes described above (including in Section 5.1.1 (Listing)) and any additional purposes approved by Developer, in compliance with any Developer trademark usage guidelines provided by Developer to Intercom. All goodwill arising out of use of the Developer Marks will inure to the benefit of Developer. Except as expressly licensed under this Agreement, Developer retains all right, title and interest in and to the Developer Marks, including all intellectual property rights.\n\n9. Intellectual Property Rights\n\n9.1. Intercom. Developer agrees that Intercom or its suppliers retain all right, title and interest (including all patent, copyright, trademark, trade secret and other intellectual property rights) in and to the Intercom Developer Platform, Intercom Service and any and all related and underlying technology and documentation; and any derivative works, modifications or improvements of any of the foregoing, including as may incorporate Feedback (collectively, \"Intercom Technology\"). Except for the express license rights set forth in this Agreement, no right, title or interest in any Intercom Technology is granted to Developer. Developer, from time-to-time, may submit comments, questions, suggestions or other feedback relating to Intercom's products and services to Intercom (\"Feedback\"). Intercom may freely use or exploit Feedback in connection with any of its products or services.\n\n9.2. Developer. Developer retains all of its right, title and interest (including all patent, copyright, trademark, trade secret and other intellectual property rights) in and to the Developer Service and Developer Apps (excluding to the extent incorporating or reflecting any Intercom Technology). Developer hereby grants Intercom a non-exclusive, royalty-free, worldwide right and license to Make Available Developer Apps on the Intercom App Store, including the right to copy, host, distribute, publicly perform and display and sublicense any software code of Developer incorporated therein, under all applicable intellectual property rights of Developer. Except for the express license rights set forth in this Agreement, no right, title or interest in any Developer Apps are granted to Intercom.\n\n10. Confidential Information\n\nIntercom may disclose to Developer information relating to Intercom's business and technology, including, without limitation, the Intercom Technology, Intercom Policies, information relating to business opportunities, marketing plans or product plans or any other information marked as confidential or proprietary or that Developer should reasonably understand to be confidential or proprietary under the circumstances (\"Confidential Information\"). Confidential Information also includes the terms of this Agreement. Except as authorized herein, Developer will (i) hold in confidence and not disclose any Confidential Information to third parties and (ii) not use Confidential Information for any purpose other than fulfilling its obligations and exercising its rights under this Agreement. Developer may disclose Confidential Information to its employees, agents, contractors and other representatives having a need to know, provided that such representatives are bound to confidentiality obligations no less protective of Intercom than this Section and that Developer remains responsible for compliance by any such representative with the terms of this Section. Developer acknowledges that disclosure of Confidential Information would cause substantial harm for which damages alone would not be a sufficient remedy, and therefore that upon any such disclosure by Developer, Intercom will be entitled to seek appropriate equitable relief in addition to whatever other remedies it might have at law.\n\n11. Independent Development\n\nIntercom works with many developers and nothing in this Agreement limits Intercom's right to develop or acquire, or to permit others to develop or acquire, any products, technology or services, even if they are similar to or compete with the Developer Apps.\n\n12. Term and Termination; Suspension\n\n12.1. Term. This Agreement will remain in effect until terminated as set forth herein.\n\n12.2. Termination by Intercom. Intercom may terminate this Agreement: (a) for no or any reason upon thirty (30) days' notice to Developer; (b) immediately upon notice if Developer breaches any provisions of this Agreement and does not cure such breach within fifteen (15) days after written notice of the breach; or (c) immediately upon notice if (i) required by Laws, (ii) Intercom determines or reasonably believes that Developer or the Developer Apps may cause harm or loss to Intercom, the Intercom Service or its End Users or (iii) in order to address any security threat or breach.\n\n12.3. Termination by Developer. Developer may terminate this Agreement at any time by ceasing all use of the Intercom Developer Platform (including use by Developer Apps) and any relevant developer account with Intercom.\n\n12.4. Effect of Termination. Upon any termination of this Agreement: (a) Developer's rights to use the Intercom Developer Platform will expire; (b) Developer will cease use of the Intercom Developer Platform and all Access Credentials; (c) Developer will disable any access by Developer Apps to the Intercom Service (and in any event Intercom reserves the right to disable such access itself by revoking applicable Access Credentials); (d) Developer will return or destroy Confidential Information; and (e) all licenses to the other party's marks will terminate, and each party (as licensed party) will cease use of such marks and related promotional activities, subject to a reasonable period, not to exceed thirty (30) days, to take down marks from properties in such party's control; provided, however, that in no event will either party be obligated to remove the other party's marks from any physical copies of promotional materials that were distributed prior to the effective date of termination. Developer acknowledges and agrees that upon termination of this Agreement, End Users' ability to access the Intercom Service through Developer Apps will terminate.\n\n12.5. Survival. This Section 12 and Sections 3.2 (Conditions on Use), 7.3 (Indemnification), 9 (Intellectual Property Rights), 10 (Confidential Information), 11 (Independent Development), 13 (No Warranty), 14 (Limitation of Liability), and 19 (General) will survive any expiration or termination of this Agreement.\n\n13. No Warranty\n\nTHE INTERCOM DEVELOPER PLATFORM, INTERCOM APP STORE AND INTERCOM MARKS ARE PROVIDED \"AS IS\". NEITHER INTERCOM NOR ITS SUPPLIERS MAKES ANY OTHER WARRANTIES, EXPRESS OR IMPLIED, STATUTORY OR OTHERWISE, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, TITLE, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT. INTERCOM DOES NOT WARRANT THAT INTERCOM WILL CONTINUE TO OFFER THE INTERCOM DEVELOPER PLATFORM OR THAT DEVELOPER'S USE OF THE INTERCOM DEVELOPER PLATFORM WILL BE UNINTERRUPTED OR ERROR-FREE. INTERCOM SHALL NOT BE LIABLE FOR DELAYS, INTERRUPTIONS, SERVICE FAILURES OR OTHER PROBLEMS INHERENT IN USE OF THE INTERNET AND ELECTRONIC COMMUNICATIONS OR OTHER SYSTEMS OUTSIDE THE REASONABLE CONTROL OF INTERCOM, INCLUDING ANY HARM OR DAMAGES CAUSED BY ANY THIRD-PARTY HOSTING PROVIDERS. DEVELOPER MAY HAVE OTHER STATUTORY RIGHTS, BUT THE DURATION OF STATUTORILY REQUIRED WARRANTIES, IF ANY, SHALL BE LIMITED TO THE SHORTEST PERIOD PERMITTED BY LAW.\n\n14. Limitation of Liability\n\nIN NO EVENT SHALL INTERCOM OR ITS SUPPLIERS BE LIABLE FOR ANY LOSS OF USE, LOST OR INACCURATE DATA, FAILURE OF SECURITY MECHANISMS, INTERRUPTION OF BUSINESS, COSTS OF DELAY, OR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY KIND (INCLUDING LOST PROFITS), REGARDLESS OF THE FORM OF ACTION, WHETHER IN CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF INFORMED OF THE POSSIBILITY OF SUCH DAMAGES IN ADVANCE. NOTWITHSTANDING ANY OTHER PROVISION OF THIS AGREEMENT, INTERCOM AND ITS SUPPLIERS' ENTIRE LIABILITY TO DEVELOPER UNDER THIS AGREEMENT (FOR DAMAGES OR LIABILITY OF ANY TYPE) SHALL NOT EXCEED THE GREATER OF (I) ANY FEES ACTUALLY PAID BY DEVELOPER TO INTERCOM UNDER THIS AGREEMENT OR (II) ONE THOUSAND DOLLARS (USD $1,000).\n\n15. Support\n\nIntercom will use reasonable efforts to answer Developer's questions regarding use of the Intercom Developer Platform, but is not obligated to provide any updates or other support for the Intercom Developer Platform.\n\n16. Export Control\n\nDeveloper acknowledges that the Intercom Developer Platform is subject to export restrictions by the United States government and import restrictions by certain foreign governments. Developer shall not and shall not allow any third party to remove or export from the United States or allow the export or re-export of any part of the Intercom Developer Platform or any direct product thereof: (a) into (or to a national or resident of) any embargoed or terrorist-supporting country; (b) to anyone on the U.S. Commerce Department's Table of Denial Orders or U.S. Treasury Department's list of Specially Designated Nationals; (c) to any country to which such export or re-export is restricted or prohibited, or as to which the United States government or any agency thereof requires an export license or other governmental approval at the time of export or re-export without first obtaining such license or approval; or (d) otherwise in violation of any export or import restrictions, laws or regulations of any United States or foreign agency or authority. Developer agrees to the foregoing and warrants that it is not located in, under the control of, or a national or resident of any such prohibited country or on any such prohibited party list. The Intercom Developer Platform is further restricted from being used for the design or development of nuclear, chemical, or biological weapons or missile technology, or for terrorist activity, without the prior permission of the United States government.\n\n17. Changes to this Agreement\n\nIntercom may modify this Agreement from time-to-time, including the Intercom Policies and Additional Terms for Messenger Apps. Intercom will use reasonable efforts to notify you of any modifications as provided in Section 18 (Notices). The modified Agreement will be effective on the date specified by Intercom. If Developer does not agree to the revised Agreement, Developer's sole remedy is to terminate this Agreement in accordance with Section 12.3 (Termination by Developer). By continuing to access or use the Intercom Developer Platform after the revised Agreement becomes effective, Developer agrees to be bound by the revised Agreement.\n\n18. Notices\n\nAll notices, requests and other communications under this Agreement must be in writing, and must be mailed by registered or certified mail, postage prepaid and return receipt requested, or delivered by hand to the party to whom such notice is required or permitted to be given. Intercom may also provide notice to the email provided by Developer or by posting a notice on the Intercom Developer Hub. Notices to Intercom must be delivered in writing to:\n\nIntercom 55 2nd Street, 4th Floor San Francisco, CA 94105 Attn: Legal\n\n19. General\n\nThis Agreement will be governed by and construed under the laws of the State of California. Any suit or proceeding arising out of or relating to this Agreement will be commenced exclusively in the state or federal courts in San Francisco, California, and each party irrevocably submits to the exclusive jurisdiction and venue of such courts. The United Nations Convention on Contracts for the International Sale of Goods is specifically disclaimed. The parties are independent contractors and no employment, agency, or joint venture is created hereunder. Except as set forth in Section 17 (Changes to this Agreement), all amendments must be in writing and signed by both parties. Waivers must be in writing and no waivers will be implied. This Agreement may not be assigned by Developer, and any purported assignment or amendment in violation of the foregoing will be void. Intercom may assign this Agreement to any affiliate or in connection with a merger, reorganization, acquisition or other transfer of all or substantially all of Intercom's assets or voting securities. If any provision of this Agreement is held by a court of competent jurisdiction to be unenforceable for any reason, the remaining provisions hereof will be unaffected and remain in full force and effect. This Agreement is the final, complete and exclusive agreement between the parties relating to the subject matter hereof and supersedes all prior or contemporaneous understandings and agreements relating to such subject matter, whether oral or written. Elements of the Intercom Developer Platform are commercial computer software. If the user or licensee of the Intercom Developer Platform is an agency, department, or other entity of the United States Government, the use, duplication, reproduction, release, modification, disclosure, or transfer of the Intercom Developer Platform, or any related documentation of any kind, including technical data and manuals, is restricted by a license agreement or by the terms of this Agreement in accordance with Federal Acquisition Regulation 12.212 for civilian purposes and Defense Federal Acquisition Regulation Supplement 227.7202 for military purposes. The Intercom Developer Platform was developed fully at private expense. All other use is prohibited.\n\nADDITIONAL TERMS FOR MESSENGER APPS\n\nThese Additional Terms for Messenger Apps (the \"Addendum\") supplement and are incorporated by reference into the Intercom Developer Terms (the \"Agreement\"). All capitalized terms not defined herein shall have the meaning given to them in the Agreement. Except as expressly set forth herein, all of the terms and conditions of the Agreement shall remain in full force and effect. In the event of any conflict between this Addendum and the Agreement, this Addendum will control.\n\n1. Definitions\n\n\"Copyleft License\" means any Open Source Software license which seeks to require any party which uses, modifies or distributes the licensed code to make such code (or modification or derivative work thereof) or any other code which may be combined with or linked to such code available in source code form or which may impose any other obligation or restriction with respect to such party's patent or other intellectual property rights (such as, for example purposes only, any version of the GPL or LGPL, Affero, CPL, CDDL, Eclipse or Mozilla licenses). \"Open Source Software\" means any open source, community or other free code or libraries of any type, including, without limitation, any code which is made generally available on the Internet without charge (such as, for example purposes only, any code licensed under any version of the Apache, BSD, GNU GPL or LGPL, Mozilla or MIT licenses).\n\n2. Submission\n\nDeveloper must upload its Messenger Apps through the Intercom Developer Hub for review and listing in the Intercom App Store.\n\n3. Representations and Warranties\n\nIn addition to Developer's representations and warranties set forth in Section 7.2 (Developer Representations and Warranties) of the Agreement, Developer represents and warrants to Intercom that: (a) Developer has procured all rights necessary to grant the licenses granted under this Addendum; (b) the Messenger Apps shall be free of any: (i) Harmful Code and (ii) except as expressly disclosed in the Developer End User Agreements, software disabling devices, time-out devices, counter devices and devices intended to collect data regarding usage of the Messenger Apps or to track users; (c) Developer will comply with the terms governing any Open Source Software used in any Messenger Apps, including by providing all required attributions and notices to Intercom (prior to Intercom Making Available the Messenger App) and to End Users; (d) the Messenger Apps do not and will not contain any code licensed under a Copyleft License; (e) Intercom's exercise of its rights with respect to the Messenger Apps hereunder will not subject Intercom to any third-party terms or conditions nor require Intercom to provide attribution to any third-party source; (f) Developer is not aware of any pending or threatened claims pertaining to the Messenger Apps, including without limitation any claims or allegations that any Messenger App infringes, violates, or misappropriates the intellectual property rights of any third party. Developer agrees that it will notify Intercom immediately if Developer becomes aware of any such claims; and (g) Developer is not subject to sanctions or otherwise designated on any list of prohibited or restricted parties maintained by the United States government or other applicable government authority nor are the Messenger Apps subject to any restrictions on export by the United States government or import by any foreign governments that would require obtaining government licenses or approvals for export or import."
  },
  {
    "title": "Data Attribute",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Attributes/data_attribute/",
    "html": "Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes."
  },
  {
    "title": "Message",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Messages/message/",
    "html": "Message are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact."
  },
  {
    "title": "Create Or Update Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_or_update_company_request/",
    "html": "You can create or update a Company"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Create Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_data_attribute_request/",
    "html": "The name of the data attribute."
  },
  {
    "title": "Ticket List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_list/",
    "html": "Tickets are how you track requests from your users."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Translation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/translation/",
    "html": "A translation object contains the localised details of a subscription type."
  },
  {
    "title": "Ticket Parts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_parts/",
    "html": "A list of Ticket Part objects for each note and event in the ticket. There is a limit of 500 parts."
  },
  {
    "title": "Ticket Attributes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_request_custom_attributes/",
    "html": "The attributes set on the ticket. When setting the default title and description attributes, the attribute keys that should be used are _default_title_ and _default_description_. When setting ticket type attributes of the list attribute type, the key should be the attribute name and the value of the attribute should be the list item id, obtainable by listing the ticket type. For example, if the ticket type has an attribute called priority of type list, the key should be priority and the value of the attribute should be the guid of the list item (e.g. de1825a0-0164-4070-8ca6-13e22462fa7e)."
  },
  {
    "title": "Migrating to v14.0.0",
    "url": "https://developers.intercom.com/installing-intercom/ios/migration-guide-v14/",
    "html": "Migrating to v14.0.0\n\nVersion 14.0.0 of the Intercom iOS SDK adds support for the 5th version of the messenger.\n\nIn this version, we have deprecated a number of methods in our API. 2 new enums, Space and ContentType have been introduced.\nSpace can either be home, helpCenter, or messages.\nContentType can either be article, survey, carousel or helpCenterCollections.\n\nThese will replace the older methods. For instance,\n\nobjectivecswift\n[Intercom presentArticle:@\"12345\"];\n\n\nwill now be\n\nobjectivecswift\n[Intercom presentContent:[IntercomContent articleWithId:@\"12345\"]];\n\nObjective-C API\nDeprecated API\tNew API\n+ (void)presentMessenger\t+ (void)presentIntercom\n+ (void)presentHelpCenter\t+ (void)presentIntercom:(Space)space\n+ (void)presentHelpCenterCollections:(nonnull NSArray<NSString *> *)collectionIds\t+ (void)presentContent:(IntercomContent *)content\n+ (void)presentArticle:(nonnull NSString *)articleId\t+ (void)presentContent:(IntercomContent *)content\n+ (void)presentCarousel:(nonnull NSString *)carouselId\t+ (void)presentContent:(IntercomContent *)content\n+ (void)presentSurvey:(nonnull NSString *)surveyId\t+ (void)presentContent:(IntercomContent *)content\nSwift API\nDeprecated API\tNew API\nfunc presentMessenger()\tfunc present()\nfunc presentHelpCenter\tfunc present(_ space: Space)\nfunc presentHelpCenterCollections(_ collectionIds: [String]>)\tfunc presentContent(_ content: Intercom.Content)\nfunc presentArticle(_ articleId: String)\tfunc presentContent(_ content: Intercom.Content)\nfunc presentCarousel(_ carouselId: String)\tfunc presentContent(_ content: Intercom.Content)\nfunc presentSurvey(_ surveyId: String)\tfunc presentContent(_ content: Intercom.Content)\n\nThe Help Center Notifications have been deprecated.\n\nDeprecated API\tNew API\nIntercomHelpCenterWillShowNotification\tIntercomWindowWillShowNotification\nIntercomHelpCenterDidShowNotification\tIntercomWindowDidShowNotification\nIntercomHelpCenterWillHideNotification\tIntercomWindowWillHideNotification\nIntercomHelpCenterDidHideNotification\tIntercomWindowDidHideNotification\nMigrating from a version less than 13.0.0\n\nIf you're migrating from a version less than 13.0.0, please refer Migrating to v13.0.0 as well."
  },
  {
    "title": "Update Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_visitor_request/",
    "html": "Update an existing visitor."
  },
  {
    "title": "Update Ticket Type Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_ticket_type_request/",
    "html": "The request payload for updating a ticket type. You can copy the icon property for your ticket type from Twemoji Cheatsheet"
  },
  {
    "title": "Update Ticket Type Attribute Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_ticket_type_attribute_request/",
    "html": "You can update a Ticket Type Attribute"
  },
  {
    "title": "Update Data Attribute Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_data_attribute_request/",
    "html": "Whether the attribute is to be archived or not."
  },
  {
    "title": "Update Ticket Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_ticket_request/",
    "html": "You can update a Ticket"
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/react-native/push-notifications/",
    "html": "Push Notifications\n\nThis article explains how to enable push notifications in the Intercom React Native wrapper. If you are new to push notifications, check out this page first.\n\nEnable Android push notifications\nStep 1. Enable Google services for your app\n\nIf you already have a Firebase project with notifications enabled you can skip to the next step. Otherwise go to the FCM Console page and create a new project following these steps:\n\nGive the project a name and click ‘Create Project’.\n\nOnce your project is set up, scroll down and select the ‘Cloud Messaging’’ card.\n\nClick on the Android icon to continue setup.\n\nEnter your app’s package name and click ‘Register App’.\n\nStep 2. Setup client to receive push\n\nClick the button \"Download google-services.json\" to download the config file. You’ll need to move the google-services.json file into the android/app directory.\n\nClick \"next\" and then in android/build.gradle you'll need to add the following lines to your dependencies:\n\nbuildscript {\n    // ...\n    dependencies {\n        // ...\n        classpath 'com.google.gms:google-services:4.2.0' // <-- Add this\n    }\n}\n\n\nNext in android/app/build.gradle, in the dependencies block add firebase-messaging and at the bottom of the build.gradle add: apply plugin: 'com.google.gms.google-services'\n\nIt is important that this is at the very end of the file.\n\n// ...\n\ndependencies{\n    implementation \"com.facebook.react:react-native:+\"\n\n    implementation 'com.google.firebase:firebase-messaging:20.2.+' // <-- Add this\n    // ...\n}\n// ...\n\napply plugin: 'com.google.gms.google-services' // <-- Add this\n\napply from: file(\"../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle\"); applyNativeModulesAppBuildGradle(project)\n\n\nYou'll need to create a new class MainNotificationService.java inside your app directory(/app/src/main/java/<package-name>) with the following code:\n\npackage com.example; // <-- Replace with your package\n\nimport com.google.firebase.messaging.FirebaseMessagingService;\nimport com.google.firebase.messaging.RemoteMessage;\nimport com.intercom.reactnative.IntercomModule;\n\n class MainNotificationService: FirebaseMessagingService {\n\n\toverride fun onNewToken(refreshedToken: String) {\n\t    IntercomModule.sendTokenToIntercom(application, refreshedToken)\n\t    // DO HOST LOGIC HERE\n\t}\n\n\toverride fun onMessageReceived(remoteMessage: RemoteMessage) {\n\t    if (IntercomModule.isIntercomPush(remoteMessage)) {\n\t     \tIntercomModule.handlePush(application, message)\n\t    } else {\n\t        // DO HOST LOGIC HERE\n\t    }\n\t}\n}\n\npackage com.example; // <-- Replace with your package\n\nimport com.google.firebase.messaging.FirebaseMessagingService;\nimport com.google.firebase.messaging.RemoteMessage;\nimport com.intercom.reactnative.IntercomModule;\n\npublic class MainNotificationService extends FirebaseMessagingService {\n  \n  @Override public void onNewToken(String refreshedToken) {\n    IntercomModule.sendTokenToIntercom(getApplication(), refreshedToken);\n    //DO HOST LOGIC HERE\n\t}\n\n  public void onMessageReceived(RemoteMessage remoteMessage) {\n    if (IntercomModule.isIntercomPush(remoteMessage)) {\n      IntercomModule.handleRemotePushMessage(getApplication(), remoteMessage);\n    } else {\n      // HANDLE NON-INTERCOM MESSAGE\n    }\n  }\n}\n\n\nThen edit the AndroidManifest.xml with the following snippet:\n\n<!-- Add xmlns:tools to manifest. See example below-->\n<manifest\n  xmlns:tools=\"http://schemas.android.com/tools\"\n>\n  <application>\n    <activity>\n      ...\n    </activity>\n    ...\n\n    <!-- START: Add this-->\n    <service\n      android:name=\".MainNotificationService\">\n      <intent-filter>\n        <action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n      </intent-filter>\n    </service>\n\n    <receiver\n      android:name=\"com.intercom.reactnative.RNIntercomPushBroadcastReceiver\"\n      tools:replace=\"android:exported\"\n      android:exported=\"true\"/>\n    <!-- END: Add this-->\n\n  </application>\n</manifest>\n\n\nFinally you'll need to update your React Native app to handle push messages being tapped:\n\nuseEffect(() => {\n    /**\n     * Handle PushNotification\n     */\n    AppState.addEventListener(\n      'change',\n      (nextAppState) =>\n        nextAppState === 'active' && Intercom.handlePushMessage()\n    );\n    return () => AppState.removeEventListener('change', () => true);\n  }\n  , [])\n\n\nOnce that's all done, click the Next button in Firebase and then skip the verification step.\n\nStep 3. Add your Server key to Intercom for Android settings\n\nFinally, click the settings cog and select ‘Project settings’, then ‘Cloud Messaging tab’ and copy your Server key.\n\nOpen your Intercom app’s settings and select ‘Installation -> Android’. Then find the ‘Enable Push Notifications’ section. Here you'll be able to paste and save your Server API key.\n\nThat's all the setup for Android, if your React Native app also supports iOS continue to the next step.\n\nEnable iOS push notifications\n\nTo enable Intercom push notifications for iOS, you first need to create a private key, upload it to Intercom, and enter details about your app.\n\nStep 1: Create a Private Key\n\nUsing these instructions, create and download a private key with APNs enabled. Note the Key ID for the next step.\n\nAlternatively, use an existing private key with APNs enabled.\n\nNext add Push Notifications and Background Modes > Remote Notifications to your target as explained here\n\nStep 2: Enable in Intercom\n\nGo to your workspace settings and select Installation > iOS. In the \"Enable Push Notifications\" section:\n\nUpload the .p8 file you just created\nEnter the Key ID from Step 1\nEnter the Bundle ID for the app you want to send notifications to\nEnter the Apple team ID\nClick Save\n\nStep 3: Register Device Tokens\n\nTo enable your users to receive push notifications from Intercom, you must request permission. There are 2 options you can choose.\n\nOption 1: In your JavaScript code\n\nUsing react-native-notifications:\n\n// Request notification permissions\nNotifications.registerRemoteNotifications();\n\n// When permission is granted, send the device token to Intercom using [Intercom.sendTokenToIntercom(token)](#intercomsendtokentointercomtoken)\nNotifications.events().registerRemoteNotificationsRegistered(({ deviceToken }: Registered) => {\n  Intercom.sendTokenToIntercom(deviceToken);\n});\n\nOption 2: In your native code\n\nIn your AppDelegate.m at the top add the following import:\n\n#import <UserNotifications/UserNotifications.h>\n\n\nRequest notification permissions when app launches by adding the following to didFinishLaunchingWithOptions:\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    // ...\n\n    // START: Code to add\n    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n    [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionSound)\n                          completionHandler:^(BOOL granted, NSError *_Nullable error) {\n                          }];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n    // END: Code to add\n\n    return YES;\n}\n\n\nIn same file, above @end add the following snippet to send the device token to Intercom when permission is granted:\n\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [IntercomModule setDeviceToken:deviceToken];\n}\n\n@end\n\n\nAt this stage you should also make sure that you have enabled the Push Notifications capability in Xcode.\n\nStep 4: Handling Intercom Push Notifications\n\nWhen your app receives a push notification, the React Native wrapper checks if it is an Intercom push notification and opens the message if required. To do this we safely swizzle the public methods in UIApplicationDelegate that handle receiving push notifications. We do not use any private APIs to do this.\n\nTesting Intercom Push Notifications\n\nYou can easily test if push notifications are working properly in your app. Just send a manual message to the app user via Intercom.\n\nTroubleshooting\n\nIf you are having trouble getting push notifications to work in your app, here's a list of things you should check:\n\nEnsure you ticked the box 'Send a push notification' when you send a manual message.\niOS\nEnsure you are requesting permission from your users to send push notifications.\nDo you get a device token from APNS? If you put a breakpoint into the application:didregisterforremotenotificationswithdevicetoken: delegate call, you should get a token shortly after your app launches.\nHave you set the correct Bundle ID in Settings > Installation > iOS? Make sure it matches the app that you want push notifications sent to.\nIs your private key still active? Check your keys to make sure it has not been revoked.\nYou can find more technical information and troubleshooting steps in the Apple iOS Developer Library.\nAndroid\nCheck that the notifications are not disabled for your app on your test device. Settings > Sound & Notification > App notifications. This may differ depending on the Android version.\nDid you specify the correct Push Server API key?\nMake sure you added your google-services.json file in the correct directory.*\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀"
  },
  {
    "title": "Deep Linking",
    "url": "https://developers.intercom.com/installing-intercom/ios/deep-linking/",
    "html": "Deep Linking\n\nUsing Intercom you can embed a deep link in your in-app messages, Help Centre articles or as the URI for your push messages. Intercom supports both Universal Links and Custom URL Schemes as a deep link.\n\nUniversal Link\n\nUniversal Links support is available from iOS SDK v9.3.0\n\nIn order for Intercom to be able to correctly handle a Universal Link from within an in-app message, Help Center article or a push notification, you will first need to specify the domains that these universal links belong to.\n\nIn your Info.plist add a new entry named IntercomUniversalLinkDomains . Then add an array of one or more domains.\n\nWhen a user taps on a Universal Link within Intercom, the domain of this link is compared against the list of domains specified in your Info.plist. If the domain matches one of these, Intercom then proceeds to call your application:continueUserActivity:restorationHandler: method in your AppDelegate, passing the URL as the webpageURL property on the NSUserActivity. This will allow your app to handle this universal link in the same manner as it would handle the link if it is opened outside of your app.\n\nThe code sample below shows how you would handle the UTL https://www.mywebsite.com/profile\nIf your app cannot handle a Universal Link, please ensure you return NO/false from this method. This will allow Intercom to open the URL as a regular link in Safari.\n\nobjectivecswift\n- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n    NSURLComponents *urlComponents = [NSURLComponents componentsWithURL:userActivity.webpageURL resolvingAgainstBaseURL:YES];\n    if ([urlComponents.path isEqualToString:@\"/profile\"]) {\n        [self.mainController pushViewController:[ProfileViewController new] animated:YES];\n    } else {\n        // Ensure that you return NO if your app cannot handle this Universal Link.\n        return NO;\n    }\n    return YES;\n}\n\nCustom URL Scheme\n\nYou will need to set up a deep link in your apps Info.plist. iOS supports schemes like app://page. Below is an example to that will respond to app://\n\nYou will then need to implement, application:openURL:sourceApplication:annotation: in your app delegate. This is where you can respond to specific schemes. In this case we will push the SettingsViewController for the scheme app://settings\n\nobjectivecswift\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if([[url scheme] isEqualToString:@\"app\"]){\n        if([[url host] isEqualToString:@\"settings\"]){\n            [self.mainController pushViewController:[[SettingsViewController alloc] init] animated:YES];\n        }\n        return YES;\n    }\n}\n\nLINKING TO OTHER APPS\n\nLinking to other apps is not supported with the iOS messenger. Your deep links must be for a scheme belonging to your app.\n\nLinking to your app\n\nOnce you have set up your app to respond to a URI, you can send a push message with that as the URI. Tapping the push message will open your app to the specified page.\n\nYou can also add a link to your in-app messages and replies as follows:"
  },
  {
    "title": "Installation",
    "url": "https://developers.intercom.com/installing-intercom/react-native/installation/#section-step-3-ios-setup",
    "html": "Installation\n\nThe Intercom React Native wrapper allows you to use Intercom for iOS and Intercom for Android in your React Native apps.\n\nIf you’re new to Intercom, you’ll need to create an account and start your free trial.\n\nSupported versions\nThe Intercom React Native wrapper supports version 0.59 of React Native and above.\nIntercom for iOS supports iOS 13 and above.\nIntercom for Android supports API 21 and above.\n\nEnable the Android and iOS Messengers from the toggles in the Intercom settings panel. When either of these platforms are disabled, requests from that platform to Intercom will fail.\n\nStep 1 - Adding the wrapper\n\nTo install Intercom you'll need to add the wrapper to your React Native project using the following snippet:\n\nyarn add @intercom/intercom-react-native\n\nnpm install @intercom/intercom-react-native\n\n\nThere are separate steps for setting up Android and iOS. If your React Native app does not support Android skip to Step 3.\n\nStep 2 - Android Setup\n\nYou'll need to take steps to link the wrapper in your project. These vary based on your apps React Native version.\n\nUsing React Native v0.60 and above\n\nIf you're using React Native v0.60 or above, the library will be linked automatically\n\nAutomatic linking with React Native v0.59\n\nTo automatically link the Intercom React Native wrapper in v0.59 of React Native run the following command:\n\nreact-native link @intercom/intercom-react-native\n\nManual linking with React Native v0.59\n\nIf you prefer to manually link libraries, add the following snippet to android/settings.gradle:\n\ninclude ':intercom-react-native'\nproject(':intercom-react-native').projectDir = new File(rootProject.projectDir, '../node_modules/@intercom/intercom-react-native/android')\n\n\nInside the dependancies block of android/app/build.gradle add the following line:\n\ndependencies {\n  implementation project(':intercom-react-native')\n}\n\n\n🚧 Apps using a React Native version below 0.65\n\nReact Native versions below 0.65 use OkHttp 3. The Intercom SDK currently uses OkHttp 4.\nThere is a problem with compatibility between those two versions which may result in crashes.\n\nYou can fix this by adding an explicit dependency on okhttp-urlconnection to dependencies in app/build.gradle:\n\ndependencies {\n\timplementation(\"com.squareup.okhttp3:okhttp-urlconnection:4.9.1\")\n\t[...]\n}\n\nInitialize Intercom\n\n🚧 Minimum Android SDK and build tools versions\n\nThe minSdkVersion in build.gradle needs to be to 21 or greater\n\nIn the dependencies block of the build.gradle make sure that\ncom.android.tools.build:gradle is at version 4.0.1\n\nYou'll need to update the MainApplication.java class. First add the import com.intercom.reactnative.IntercomModule at the top of the class.\n\nThen in the onCreate method, add the snippet below using the apiKey and appId found in your workspace settings.\n\nimport com.intercom.reactnative.IntercomModule; //  <-- Add this line\n\n// ...\n\n@Override\npublic void onCreate() {\n  super.onCreate();\n  SoLoader.init(this, /* native exopackage */ false);\n\n  // ...\n\n  IntercomModule.initialize(this, \"apiKey\", \"appId\"); // <-- Add this line\n\n  // ...\n}\n\nAndroid Permissions\n\nAdd below permissions to AndroidManifest.xml\n\nYou'll need to include the READ_EXTERNAL_STORAGE permission if you have enabled attachments:\n\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n\n\nYou can also include VIBRATE to enable vibration in push notifications:\n\n<uses-permission android:name=\"android.permission.VIBRATE\"/>\n\nStep 3 - iOS Setup\n\nIf you don't support iOS in your React Native app, you can skip to the configuration step.\n\nUsing React Native v0.60 and above\n\nIf you're using React Native v0.60 or above, the library will be linked automatically after running the pod install command.\n\nManual linking with React Native v0.59\n\nFirstly open your apps .xcworkspace. If you don't have a .workspace file open the .xcodeproj.\nDownload intercom for iOS and extract the zip\nDrag Intercom.xcframework into your project. Make sure \"Copy items if needed\" is selected and click Finish.\n\nFor additional information on iOS manual linking please refer to the React Native developer docs.\n\nInitialize Intercom\n\nOpen iOS/AppDelegate.m and import <IntercomModule.h>\n\n#import \"AppDelegate.h\"\n#import <React/RCTBridge.h>\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n// ...\n#import <IntercomModule.h> // <-- Add This\n\n\nNext, in the method didFinishLaunchingWithOptions you'll need to initialize Intercom. Add the snippet below using the apiKey and appId found in your workspace settings.\n\n// ...\n  self.window.rootViewController = rootViewController;\n\n  [IntercomModule initialize:@\"apiKey\" withAppId:@\"appId\"]; // <-- Add this (Remember to replace strings with your api keys)\n\n  return YES;\n  }\n\nIOS Permissions\n\nWith the exception of apps that only support iOS 14+, when installing Intercom, you'll need to make sure that you have an NSPhotoLibraryUsageDescription entry in your Info.plist.\n\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Send photos to support center</string>\n\n\nFor apps that support iOS 13 or lower, this is required by Apple to access the photo library. It is necessary when installing Intercom due to the image upload functionality. Users will be prompted for the photo library permission only when they tap the image upload button.\n\nOn iOS 14+, Intercom uses the new PHPickerViewController API which does not require requesting users for photo library permission.\n\nStep 4 - Register your users\n\nYou’ll need to register your users with Intercom before you can talk to them or see what they do in your app. If a person visits your mobile app they will be a user - the Intercom SDKs do not create leads or visitors. There are three way to register people who visit your app: (1) register only unidentified users (2) register only identified users (3) register both identified and unidentified users. The option you choose should be informed by the design of your app, namely whether you have a login option.\n\nRegister only your unidentified users\n\nIf you have an app with no login option (like Angry Birds or a flashlight app), you should register unidentified users only.\n\nJust register an unidentified user in your application like so:\n\nIntercom.loginUnidentifiedUser()\n\nRegister only your identified (logged in) users\n\nIf people must log in to access your app (as with Facebook, Instagram or Slack) you should follow these instructions to register identified users only.\n\nBest practices for registering users\nIt is important to only register identified users after verification of a login.\nYou can provide a userId and/or email when registering an identified user. We recommend giving all your users unique userIds, but if you haven't implemented this, you should provide an email.\nDon’t use an email address as a userId as this field cannot be changed later. If you choose provide only an email address, the email address must not be associated with any other users on your workspace.\nIntercom.loginUserWithUserAttributes({email:'bob@example.com',userId:'bob-123'})\n\nRegister both unidentified (non-logged in) and identified (logged in) users\n\nIf you have an app with both unidentified and identified users (like Google Maps or YouTube), you will need to either conditionally choose which registration to call:\n\nif (loggedIn) {\n  Intercom.loginUserWithUserAttributes({email:'bob@example.com',userId:'bob-123'})\n}else {\n  Intercom.loginUnidentifiedUser()\n}\n\n\nOr you can register with Intercom.loginUnidentifiedUser() and if a user signs up/logs in later in your app call Intercom.loginUserWithUserAttributes. We will automatically transfer over any attributes or conversations from the unidentified user to the identified user, so you won't lose anything.\n\nHow to unregister an identified user\n\nYou should only unregister an identified user. Unregistering an unidentified user will result in orphan records that cannot be merged in future.\n\nWhen users want to log out of your app, simply call:\n\nIntercom.logout()\n\n\n👍\n\nIntercom knows when your app is backgrounded and comes alive again, so you won’t need to re-register your users.\n\nWhat next?\nConfigure your React Native app for Intercom and create customizations.\nEnable push notifications so you can send push messages.\nEnable Identity Verification for your React Native app.\nIf Data Hosting in Europe, modify your app's region configuration"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/1.2/introduction/",
    "html": "Introduction\n\nThis is documentation for version 1.2 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Delivering Webhook Notifications",
    "url": "https://developers.intercom.com/docs/webhooks/webhook-notifications/",
    "html": "Delivering Webhook Notifications\n\nA Webhook notification is the object delivered when an event is triggered, and notifications have data payloads that contain references to the Intercom objects associated with the event.\n\nEvery webhook payload is slightly different, but they do share a number of common fields which will help you identify the type of notification you have received, when the event took place and more. You can find a more detailed description here\n\nThere may be instances when we pause, suspend or delay delivery of notifications, so let's take a look at how we handle these scenarios.\n\nPaused subscription notifications\n\nIf your endpoint URL responds with more than 1000 consecutive HTTP error codes in a 15-minute window, we pause your Webhook topic notifications for 15 minutes after which we start sending as normal again.\n\nSuspended subscriptions\n\nIf your endpoint URL responds with HTTP error codes for more than seven days, we suspend your Webhook subscription, and you will stop receiving any further notifications.\n\nIf we suspend your subscription, we display an error banner on the Webhooks page under the Configure menu of the relevant App in your Developer Hub.\n\nAfter resolving any issues with your server, you can resume suspended subscriptions by pressing Set live from the top right of the page.\n\nWe only suspend Webhook subscriptions for Private apps. Webhook subscriptions used in Public apps are never suspended.\n\nRate limiting\n\nWe will prioritise the first 150,000 events per minute of your Webhook topic notifications and then rate limit all further notifications with a lower priority.\n\nSlow topic notifications\n\nWe prioritise Webhook topic notifications for endpoint URLs that successfully respond within 500ms. If response times exceed 500ms, we deliver topic notifications with a lower priority.\n\nThrottling\n\nIf we receive an HTTP 429 (Too Many Requests) response from your endpoint URL, we throttle further notifications with a delay that starts at 1 minute and extends to 2 hours. We drop any throttled notifications if we do not receive a successful response within 2 hours.\n\nDelivery order\n\nWhen you receive a notification, you should check the timestamp in the created_at field to confirm when the action took place. This will allow you to determine the right action to take in your App, as we do not offer any guarantee on the order of Webhook topic notifications.\n\nDuplicate notifications\n\nBecause we want to be sure your app has received a notification, we will resend it if we do not receive a HTTP 200 (OK) response from your endpoint URL within 5000ms. This means you may receive duplicate notifications if your response takes longer than 5000ms to reach our servers.\n\nTo avoid this, we recommend responding with HTTP 200 (OK) immediately upon receipt and before you trigger any long-running tasks.\n\nQueued notifications\n\nIf Intercom's System Status interrupts notification delivery, we will store them and resume sending once we restore the service. We will always prioritise the most recent notifications and process older delayed notifications with a lower priority.\n\nEnsuring delivery behind a firewall\n\nIf the endpoint you configure is behind a firewall, you must add the IP addresses Intercom sends Webhook Notifications from to your allow list. If you do not, you will not receive any notifications.\n\nThe IP addresses Intercom sends Webhook Notifications from are:\n\nUSA 34.231.68.152 34.197.76.213 35.171.78.91 35.169.138.21 52.70.27.159 52.44.63.161\n\nEurope 54.217.125.63 54.246.173.113 54.216.9.3\n\nAustralia 52.63.36.185 3.104.68.152 52.64.2.165"
  },
  {
    "title": "Changelog (v1.3)",
    "url": "https://developers.intercom.com/docs/references/1.3/changelog/",
    "html": "Changelog (v1.3)\nIntroducing Canvas Kit\n\nSay hello to a quicker and easier way to build contextual and action-oriented apps embedded into Intercom's UI. With the launch of Canvas Kit, you keep all the capabilities of embedding apps in the Messenger, and gain:\n\nCapabilities for embedding apps in Inbox - you can now build apps for the conversation details within Intercom's Inbox product. Take a look at our revamped Canvas Kit guides to understand just how easy it is.\nNew Components - to make it easy to display data and input larger voucher, we've launched Data Table and Text Area components.\nCanvas Kit Builder - preview the JSON of your app to see what it will look like and how people can interact with it. The Builder is embedded throughout the docs but can also be accessed here.\nRemoving the users object from Canvas Kit request payloads\n\nInstead of sending a users object within Canvas Kit requests, we now send a customer object instead. This returns exactly the same payload but also includes leads.\n\nRemoving the app_id key from Canvas Kit request payloads\n\nInstead of sending an app_id key within Canvas Kit requests, we now send a workspace key instead. This returns exactly the same information as the value.\n\nAdding an author object to Conversation payloads\n\nWe now return an author object within Conversation and Conversation Part objects sent throughout our REST API responses and Canvas Kit requests. This will contain the name and email of the message's author.\n\nPreventing null for unsubscribed_from_emails\n\nThe API will now return an error if unsubscribed_from_emails is set to null for User requests."
  },
  {
    "title": "Changelog (v1.4)",
    "url": "https://developers.intercom.com/docs/references/1.4/changelog/",
    "html": "Changelog (v1.4)\n\n❗️ Breaking change Note that this version includes breaking changes to the API and may require a code change. See below for more details.\n\nListing Data Attributes\n\nWe've modified the way data attributes are retrieved via our Data Attributes API. You can now retrieve a list of all data attributes by sending a GET request to the data_attributes endpoint.\n\nListing customer data attributes - you can list customer data attributes by specifying a model parameter in the request URL with the value customer.\nListing company data attributes - you can list company data attributes by specifying a model parameter in the request URL with the value company.\n\nWith the introduction of this change, customer and company data attributes can no longer be listed by using the old endpoints. For example, sending a request to the data_attributes/customer endpoint and sending a request to the data_attributes/company will no longer work.\n\nValidating Custom Data Attributes\n\nCustom Data Attributes created via the API must now use the same naming rules as the ones created via the UI. Names can therefore only contain alphanumeric characters, currency symbols, and hyphens.\n\nAdding owner_id to User & Lead objects\n\nWe now expose a user or lead's account owner through the owner_id attribute. This will be the integer for an admin's id, meaning you can use this to make a call to our Admin API and get more details on the given owner.\n\nRemoving archived Custom Data Attributes from User responses\n\nArchived Custom Data Attributes will no longer be present on the User model in API responses.\n\nRemoving Teams from Admin responses\n\nThe Admins endpoint will no longer return Teams in its responses. The Teams endpoint should be used instead."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/1.0/introduction/",
    "html": "Introduction\n\nThis is documentation for version 1.0 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.4/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.4 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link.\n\nAdmins\nArticles\nCommon Structures\nCompanies\nContacts\nConversations\nCounts\nData Attributes\nExports Content Stats\nData Events\nHelp Center\nMessages\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nVisitors\nWebhooks\nErrors"
  },
  {
    "title": "What are Webhooks?",
    "url": "https://developers.intercom.com/docs/webhooks/",
    "html": "What are Webhooks?\n\nWebhooks are a streamlined way for your Intercom App to respond to events happening in Intercom. To get started, you'll need to create an Intercom App and provide us with a URL to send notifications to. When an event occurs, Intercom will send a notification to the URL you have configured for your Webhook. You can then use this notification to trigger actions in your App.\n\nIf you're new to Webhooks more generally, head to pipedream's RequestBin blog to learn more.\n\nThe main concepts of Intercom Webhooks are subscriptions, topics and notifications.\n\nSubscriptions\n\nA Webhook Subscription is created within an App and is where you define the Topics you want to receive event Notifications on. A subscription can contain one or more topics. You will need to provide a URL where Intercom will send all notifications for your subscription.\n\nTopics\n\nA topic contains the events you will receive notifications on; for example, Conversation created or Contact deleted.\n\nA subscription will contain one or more topics. Topics are types of notifications that you want to be informed about.\n\nNotifications\n\nA notification is the event object delivered when an event is triggered, and notifications have data payloads that contain references to the Intercom objects associated with the event. Notifications for all topics will be sent to the URL you provided for your subscription.\n\nIf more of a visual person, here's a diagram of the Webhook system:\n\nWhat's next?\n\nNow that you've learned the basics of webhooks, you could:\n\nSetup your first webhook\nLearn about the topics you can subscribe to\nLearn more about how we deliver notifications"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.1/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.1 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link."
  },
  {
    "title": "Pagination (Cursor)",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination-cursor/",
    "html": "Pagination (Cursor)\n\nWe're starting to adopt a cursor-based approach to pagination for certain list resources.\n\nExample Initial Request\n$ curl https://api.intercom.io/contacts?per_page=5 \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n\nInitial Request\n\nYou can initially specify how many items per_page you want to fetch.\n\nParameter\tType\tDescription\nper_page\tInteger\tThe number of items returned in a single response.\nDefault is 50.\nMax is 150.\nExample Initial Pages Object\n{\n  \"pages\": {\n    \"type\": \"pages\",\n    \"next\": {\n      \"page\": 4,\n      \"starting_after\": \"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\nIncfQLD3ouPkZlCwJ86F\\n\"\n    },\n    \"page\": 3,\n    \"per_page\": 5,\n    \"total_pages\": 10\n   }\n}\n\nResponse\n\nIn order to iterate through pages, you must parse the query response. A query with multiple response pages will include a next key in the pages object. When a next value is provided, the starting_after value must be sent back in a new request in order to iterate to the next page.\n\nParameter\tType\tDescription\nstarting_after\tString\tThe cursor used for pagination in order to fetch the next page of results.\n\n🚧 Paginating through all results\n\nThis method of pagination is used to iterate through a result set until all results have been fetched, not to directly go to page X of the results. This is not possible.\n\nExample Subsequent Requests\n$ curl https://api.intercom.io/contacts?starting_after=\"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\nIncfQLD3ouPkZlCwJ86F\\n\" \\\n-H 'Authorization:Bearer <Your access token>' \\\n-H 'Accept:application/json'\n"
  },
  {
    "title": "Changelog (v2.2)",
    "url": "https://developers.intercom.com/docs/references/2.2/changelog/",
    "html": "Changelog (v2.2)\nMaintain conversation context with both team and admin assignee's\n\n❗️ Breaking change\n\nWe found that it was increasingly important for you to keep persistent context of where a conversation originated from - no matter how many people handled it previously. We also wanted to reduce compexity of identifying which conversations are owned by who, particularly when using the Conversation Search endpoint.\n\nAs a result, you can now specify both a team and an admin as assignee's of a conversation. We show both an admin_assignee_id and a team_assignee_id in the conversation object. This replaces the assignee object and is therefore a breaking change. See more on the feature in our Help Center and take a look at our Conversation API reference for example objects.\n\nView the title of a conversation\n\nYou can now see the added title of a conversation within all returned Conversation objects. This can only be added through the UI, or if a conversation was started via email whereby the subject will be the title. See our Conversation API reference for the updated model.\n\nRedact a conversation part\n\nYou can now redact a conversation part or the source message of a conversation. See our Conversation API reference for further detail.\n\nList attached segments for contacts and companies\n\nYou can now fetch a list of segments associated to a contact or a company. See our Contacts reference and Companies reference respectitvely to understand more.\n\nInstallation Health Check Endpoint\n\nThere may be issues that result in your app running into a state where it no longer functions after (or during) installation. In order to alert users and encourage them to solve this, we provide a Health Check which is designed to increase re-activation of your app and decrease any loss in retention.\n\nOur Health Check webhook system sends a request every 24 hours to check on the health of your app. Instead of waiting these 24 hours, we now offer you the possibility to proactively notify us of when an app's state (for a given workspace) might have changed. See our Health Check guide for more on how to make this call."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.3/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.3 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link.\n\nAdmins\nArticles\nCommon Structures\nCompanies\nContacts\nConversations\nCounts\nData Attributes\nExports Content Stats\nData Events\nHelp Center\nMessages\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nVisitors\nWebhooks\nErrors"
  },
  {
    "title": "Canvas",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/responseobjects/canvas/",
    "html": "Canvas\nDescription\n\nYou have to respond to the majority of request with a canvas object. This will tell us what UI to show for your app.\n\nA canvas can either be static (meaning we send you the next request only when an action takes place) or live (meaning we send you the next request when someone views the app).\n\nA static canvas needs a Content Object which will contain the components to show.\nA live canvas needs a content_url which we we will make the Live Canvas requests to when the app is viewed. This is only possible for apps viewed or used in the Messenger.\nAttributes\nKey\tType\tCanvas Type\tDescription\ncontent\tobject\tStatic\tThe Content that will be shown as the UI of the app. Max Size is 64KB.\ncontent_url\tstring\tLive\tThe URL which we make Live Canvas requests to. You must respond to these with a Content Object. Max size is 64KB.\nstored_data\tobject\tStatic, Live\tOptional Stored Data that you want to be returned in the next sent request. Max Size is 64KB.\nExample Objects\n{\n  canvas: {\n    content: {\n      components: [\n        {\n          \"type\": \"text\",\n          \"text\": \"This is a text component.\"\n        }\n      ]\n    },\n    stored_data: { \"key\": \"value\" } //Can be more than one pair \n  }\n}\n\n{\n  canvas: {\n    content_url: \"https://messengerapp.com/get-content-here\",\n    stored_data: { \"key\": \"value\" } //Can be more than one pair \n  }\n}\n"
  },
  {
    "title": "Changelog (v2.4)",
    "url": "https://developers.intercom.com/docs/references/2.4/changelog/",
    "html": "Changelog (v2.4)\nFix for source.author.type field in case of auto message from a team\n\nThe source.author.type field in the Conversation Model has been updated to have the value of \"team\" for cases where a conversation is started with an auto message from a team. Previously the value would be \"admin\" for this case.\n\nAdd fields to the contact model\n\nAdd location.country_code, location.continent_code, referrer, utm_campaign, utm_content, utm_medium, utm_source, and utm_term to the Contact Model\n\nUpdate companies\n\nUpdate companies using Update a Company\n\nFix conversation search using author name and email\n\nSearching for conversation using the author's name or email with exact matches and special characters now returns the expected results."
  },
  {
    "title": "Changelog (v2.5)",
    "url": "https://developers.intercom.com/docs/references/2.5/changelog/",
    "html": "Changelog (v2.5)\nExport Message data through our API\n\nYou can use the API to export data for all messages sent in a given timeframe. This data will be valuable in analysing the performance of your messages or joining message engagement data with user data external to Intercom to attribute performance. You can see the three operations you'll have to perform to retrieve this in our reference.\n\nList Tag dependencies on deletion\n\nIf a tag has dependencies and cannot be deleted, we will now return an error message listing those dependent objects. Previously, we would have failed without listing dependencies. See the Delete a tag section in our reference for a sample response.\n\nSwitch API\n\nYou can use the Switch API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\n\nConversation Webhook Refactor\n\nWith this change, we've updated the webhooks Conversation payloads to match the latest version of the conversation API model.\n\nWebhook payload & topics versioning\n\nWe have introduced versioning to webhook payloads and webhook topics.\n\nNew Webhook Topics\nConversations Priority Updated: A webhook which fires when the prority of a conversation is updated\nGranular Unsubscribe: A webhook which fires when a user unsubscribes from message subscription type\nAdmin Added to Workspace: A webhook which fires when an admin being added to workspace\nAdmin Removed From Workspace: A webhook which fires when an admin being removed to workspace\nAdmin Away Mode Updated: A webhook which fires when an admins away mode updates\nNew Contact Topics\n\nRenamed all user/lead topics to start with a \"contact.\" prefix. We have Versioned User/Lead Topics and Payloads to allowed us to easily update the Contact topics and payloads to more closely align with our current Contact model without breaking any existing apps. Additionaly we have added a new topic \"contact.lead.updated\" to enable customers and partners to subscribe to changes on leads\n\nPrevious Topic Name\tTopic\tItem Type\tDescription\nuser.deleted\tcontact.deleted\tContact\tSubscribe to contact deletions\nuser.email.updated\tcontact.email.updated\tContact\tSubscribe to contact email address being updated\ncontact.added_email\tcontact.lead.added_email\tContact\tSubscribe to emails being added to leads\ncontact.created\tcontact.lead.created\tContact\tSubscribe to lead creations\ncontact.signed_up\tcontact.lead.signed_up\tContact\tSubscribe to leads converting to users\nuser.tag.created\tcontact.lead.tag.created\tContactTag\tSubscribe to leads being tagged\nuser.tag.deleted\tcontact.lead.tag.deleted\tContactTag\tSubscribe to leads being untagged\n✨!NEW!✨\tcontact.lead.updated\tContact\tSubscribe to lead updates\nuser.unsubscribed\tcontact.unsubscribed\tContact\tSubscribe to contact unsubscriptions from email\nuser.unsubscribed_from_sms\tcontact.unsubscribed_from_sms\tContact\tSubscribe to contact unsubscriptions from sms\nuser.created\tcontact.user.created\tContact\tSubscribe to user creations\nuser.tag.created\tcontact.user.tag.created\tContactTag\tSubscribe to users being tagged\nuser.tag.deleted\tcontact.user.tag.deleted\tContactTag\tSubscribe to users being untagged"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.5/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.5 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link.\n\nAdmins\nArticles\nCommon Structures\nCompanies\nContacts\nConversations\nCounts\nData Attributes\nExports Content Stats\nData Events\nHelp Center\nMessages\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nVisitors\nWebhooks\nErrors"
  },
  {
    "title": "single_filter_search_request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/single_filter_search_request/",
    "html": "The Intercom defined id representing the company."
  },
  {
    "title": "Segment List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/segment_list/",
    "html": "This will return a list of Segment Objects. The result may also have a pages object if the response is paginated."
  },
  {
    "title": "Phone Switch",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/phone_switch/",
    "html": "Phone Switch Response"
  },
  {
    "title": "reply_conversation_request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "File",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/file_attribute/",
    "html": "The value describing a file upload set for a custom attribute"
  },
  {
    "title": "Visitor Deleted Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/visitor_deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "intercom_version",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/intercom_version/",
    "html": "Intercom API version.\nBy default, it's equal to the version set in the app package."
  },
  {
    "title": "Linked Objects",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/linked_object_list/",
    "html": "An object containing metadata about linked conversations and linked tickets. Up to 1000 can be returned."
  },
  {
    "title": "Changelog (v2.6)",
    "url": "https://developers.intercom.com/docs/references/2.6/changelog/",
    "html": "Changelog (v2.6)\nContent Stat Webhook Topics\n\nWe introduced webhook topic support for all Outbound Message events across all content types in Intercom, such as Emails, Custom Bots, Surveys, and more.\n\nAdmin Logged In / Logged Out Webhook Topics\n\nWe added new webhooks that fire when an Admin logs into a workspace (through email/password, Google SSO, or SAML SSO) or logs out of a workspace (either through a manual logout or through session expiry if signed in with SAML SSO).\n\nNew Contact Webhook Topics\n\nWe added several new webhook topics for Contact events: updated (User), merged (User & Lead), deleted (User & Lead), archived (User & Lead), unarchived (User & Lead).\n\nNew Conversation Contact Topics\n\nWe added new webhooks that fire when a contact is attached to a conversation or detached from a conversation.\n\nGranular Subscribe Webhook Topic\n\nWe added a new webhook topic that fires when a user subscribes to a specific subscription type.\n\nCompany Contact Attached / Detached Webhook Topics\n\nWe added new webhooks that fire when a contact is attached to a company or detached from a company.\n\nCreate Conversation Payload Consistency\n\nThe Create Conversation endpoint now expects lead and user in request payload. Previously this endpoint accepted values of contact and user.\n\nImproved Conversation List Pagination\n\nThe list conversations endpoint now uses cursor based pagination instead of traditional pagination.\n\nMore Granular Conversation Part Types\n\nThe Conversation Part Type model now contains significantly more part types. Older API versions would log some part types simply as comment, now there is a lot more granularity.\n\nRefined Conversation delivered_as Attribute Field\n\nConversation Source object now differentiates admin-created tickets and conversations now appear as admin_initiated to distinguish them from automation. More details about the different possible values have been exposed.\n\nDeleting Archived Contacts\n\nThe Delete Contact endpoint now allows permanent deletion of archived contacts directly. Previously, when attempting to delete an archived contact via the API, the contact needed to be unarchived and then deleted. This is no longer necessary.\n\nOpted In Subscription Types on Contacts\n\nWe added a new field to the Contact model, that will show all the subscriptions that a contact has opted into."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.6/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.6 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nYou can view code examples in the area to the right, and you can switch the programming language of the examples with the tabs in the top right. We provide examples in Curl, Ruby, PHP, Java - and for Events, JavaScript.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nREST API OVERVIEW\n\nIf you need an overview of the different endpoints and common structures, follow this link.\n\nAdmins\nArticles\nCommon Structures\nCompanies\nContacts\nConversations\nCounts\nData Attributes\nExports Content Stats\nData Events\nHelp Center\nMessages\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nVisitors\nWebhooks\nErrors"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.7/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.7 of the REST API. For more information on versions check out our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community, our customer community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nVisitors\nModels\nErrors"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.9/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.9 of the REST API. For more information on versions check out our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Changelog (v2.8)",
    "url": "https://developers.intercom.com/docs/references/2.8/changelog/",
    "html": "Changelog (v2.8)\nOpen Conversation Assigned Webhook Topic\n\nWe added a new webhook topic that fires when an open conversation is assigned.\n\nAdmin priority levels in Teams\n\nWe added a hash of admin priority levels to Retrieve a Team and List all teams endpoints.\n\nTeam priority levels in Admins\n\nWe added a hash of team priority levels to Retrieve an Admin and List all admins endpoints."
  },
  {
    "title": "Changelog (v2.7)",
    "url": "https://developers.intercom.com/docs/references/2.7/changelog/",
    "html": "Changelog (v2.7)\n\n❗️ Breaking change Note that this version includes breaking changes to the API and may require a code change. See below for more details.\n\nIntroducing the News API\n\nYou can now share important product updates, announcements and more, directly in the Messenger through our API. Get started here.\n\nNew Company Webhook Topics\n\nWe added new webhook topics that fire when a company is deleted or updated.\n\nNew Contact Subscribed Webhook Topic\n\nWe added a new webhook topic that fires when a contact resubscribes to receive emails\n\nBreaking Changes\nConversation Search Associated Custom Object Data\n\nAssociated Custom Object data is included in conversation search responses\n\nChanged Contact Unsubscribed Webhook Topic Payload\n\nAdded the subscription_types object to the contact.unsubscribed webhook topic payload. Previously only the contact object was included."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/2.8/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.8 of the REST API. For more information on versions check out our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community, our customer community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nVisitors\nModels\nErrors"
  },
  {
    "title": "Set up request flows",
    "url": "https://developers.intercom.com/docs/build-an-integration/getting-started/build-an-app-for-your-messenger/request-flows/",
    "html": "Set up request flows\nConfigure Flow\n\nThis is an optional request flow that you can implement if your Messenger App requires configuration before displaying it to an end user. You can implement the configure-flow by specifying a configure_url when setting up your app within Developer Hub. Then, an HTTP POST will be made to that URL when a teammate selects your app.\n\nThis request allows you to respond with an updated canvas which the teammate can interact with to help construct the app. Or, you can return a result object containing card creation options which indicates the configuration is now complete.\n\nOnce a result object is sent, the collected information will be posted to the initialize-url URL.\n\nExample Configure Flow\n\n# This is the initial POST request which Intercom will send to your configure-card URL.\n\n{\n  \"workspace_id\": /* string id_code of the app using the card */,\n  \"admin\": /* Admin object of admin who is performing configuration */,\n  \"context\": /* Context object */\n}\n\n# You can then decide which of the two responses you would like to send; a canvas or results object.\n\n# This object will be used to render a configuration UI inside the inserter or home screen configuration.\n\n{\n  \"canvas\": /* Canvas object */\n}\n\n# Taking an action in this UI will result in a further request to the configure URL with the following payload.\n\n{\n  \"workspace_id\": /* string id_code of the app using the card */,\n  \"admin\": /* Admin object of admin who is performing configuration */,\n  \"current_canvas\": /* Canvas object */,\n  \"component_id\": /* component_id, component which triggered action */,\n  \"input_values\": {\n    \"<component_id>\" : /* value entered in component */,\n    ...\n  },\n  \"context\": /* Context object */\n}\n\n# As with the initial request, this may be responded to with either another canvas or a configuration result.\n\n# To finish configuration the developer responds with a results object indicating the computed configuration options.\n\n{\n  \"results\": {\n    /* set of key-value pairs */\n  }\n}\n\n# These results will then be posted to the initialize-url as card creation options.\n\nInitialize Flow\n\nTeammates can add a card instance of your Messenger App to conversations, to the homescreen, to a Message or to Workflows. When they do, the framework sends a HTTP POST to your webservice via the initialize_url you provided. This asks you what the initial canvas for your new card should look like.\n\nIf you have implemented the configure flow then a teammate will have entered some configuration options. These are known as card creation options.\n\nWe gather those card creation options from the teammate, and send them to you as part of the payload of the initialize-card request. You return back a canvas containing the initial UI for the new card.\n\nWHAT IF I HAVE NO CONFIGURE FLOW?\n\nRemember, the configure flow is optional, so if you haven't specified a configure_url then the framework will just start with the initialize flow when the teammate adds the app to the conversati.\n\nExample Initialize Flow\n\n# When a card is being added, Intercom POSTs a request to the Messenger app's initialize_url with the card creation parameters gathered from the teammate. The payload is in the following form:\n\n{\n  \"card_creation_options\": {\n    /* set of key-value pairs */\n  },\n  \"workspace_id\": /* string id_code of the app using the card */,\n  \"context\": /* Context object */\n}\n\n# The developer returns a response in the following format.\n\n{\n  \"canvas\": /* Canvas object */\n}\n\nSubmit Flow\n\nWhen an end user clicks a button or submits text to an input field on a card, the framework fires a HTTP POST to the submit_url you have provided. The purpose of this request is to tell you a user took an action on the card, and ask how it should be updated.\n\nThis request also gives you a chance to trigger any actions you want in your own code, like adding a user's email to your own database or scheduling a calendar event.\n\nThe payload contains information about the end user: the action they took, what values they had filled into each input field, and the card's current canvas. In the response, you return back a new canvas object, containing the updated UI for the card.\n\nApp Completion Tracking (optional)\n\nApp completion events will help you understand how your customers are using your app and will add more value to it, making it possible for bots to know when to continue with their flows.\n\nYou can optionally add an event object to your submit flow response to tell us if your Messenger app has completed its purpose. For example, an email collector app completes when the end-user submits their email address.\n\nExample Submit Flow\n\n# When an end-user triggers a submit action on a card, Intercom POSTs a request to the messenger-app's `submit_url` with the following payload.\n\n{\n  \"workspace_id\": /* string id_code of the app using the card */,\n  \"current_canvas\": /* Canvas object */,\n  \"component_id\": /* component_id */,\n  \"input_values\": {\n      \"<component_id>\" : /* value entered in component */,\n    ...\n  },\n  \"user\": /* User object of end-user who triggered action */,\n  \"context\": {\n    \"location\": /* \"conversation\"/\"home\" */,\n    \"conversation_id\": /* conversation_id */ //Only needed if location == conversation\n  }\n}\n\n# The developer returns a response in the following format.\n\n{\n  \"canvas\": /* Canvas object */,\n  \"event\": {\n    \"type\": \"completed\"\n  }, // App Completion Tracking (optional)\n}\n\n# The card which triggered the request is updated with the new canvas from the response.\n\n# The app completion event is recorded by Intercom.\n\nLive Canvas Flow\n\nThe live canvas is an optional extension of the canvas object which enables developers to provide up-to-date information in a card.\n\nIt can be implemented by simply returning a content_url in a canvas object.\n\nWhenever the card containing that canvas object is rendered in the Messenger, a POST request will be sent to that content URL.\n\nThis enables a developer to provide a live (rather than the regular static) version of a canvas.\n\nNO INTERACTION REQUIRED\n\nNote that no user interaction is required for the POST request to be triggered. It will occur whenever the card is viewed in a conversation. The live canvas can also be rendered in a teammate inbox.\n\nWhy would I need a live canvas?\n\nYou can usually realize similar functionality to a live canvas by requiring a user interaction.\n\nThink of a webinar booking app as an example scenario. You may have a button a user can click on to show them the availability and times for the next webinar.\n\nHowever, in some cases this is not ideal. If you had an app that showed the current health status of your product or platform for example.\n\nIdeally, you would like this to show the current state without requiring a user to manually trigger a status refresh. You would use a live canvas to do this.\n\nAs a result, whenever a user opens up their conversation with the health status card they will always get the latest state (which is hopefully green), and they will not need to instigate any action to do so.\n\nExample Live Canvas Flow\n\nObjects in the Live Canvas Flow\n\nPlease see the canvas object for more details on how to implement this flow and the expected response from your webservice."
  },
  {
    "title": "Text",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/presentationcomponents/text/",
    "html": "Text\n\nThe text component is used for rendering blocks of text. Links and bold font can be rendered through Markdown. There are different styles provided which edit the color, weight, and font size. These cannot be edited through Markdown.\n\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\ttext\tYes\tThe type of component you are rendering.\nid\tAny string\tNo\tA unique identifier for the component.\ntext\tAny stringMarkdown Links []()Markdown Bold **\tYes\tThe text that will be rendered.\nalign\tleft``center``right\tNo\tAligns the text. Default is left.\nstyle\theader``paragraph``muted``error\tNo\tStyles the text. Default is paragraph.\nbottom_margin\tnone\tNo\tDisables a component’s margin-bottom of 10px.\nPreview"
  },
  {
    "title": "Build your own reports with the API",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/build-your-own-reports/",
    "html": "Build your own reports with the API\n\nYou may want to use the API to access data to build your own reports. There are several metrics that we display in the Intercom reporting UI that are not available via the API because they are calculated metrics. In this document, we describe those metrics and how you can calculate them yourself.\n\nTeam Performance\nConversations assigned by team\n\nDefined as the number of unique conversations assigned to a team in the selected time period.\n\nSearch for conversations within the chosen date range and the team_assignee_id attribute.\n\n{\n\t\"query\": {\n\t\t\"operator\": \"AND\",\n\t\t\"value\": [{\n\t\t\t\t\"field\": \"created_at\",\n\t\t\t\t\"operator\": \">\",\n\t\t\t\t\"value\": \"1666414800\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"field\": \"created_at\",\n\t\t\t\t\"operator\": \"<\",\n\t\t\t\t\"value\": 1673589599\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"field\": \"team_assignee_id\",\n\t\t\t\t\"operator\": \"=\",\n\t\t\t\t\"value\": 12345\n\t\t\t}\n\t\t]\n\t}\n}\n\nMedian first response time by team assigned\n\nThe median time to reply to the first incoming message in a conversation.\n\nFilter conversations by team_assignee_id\nFind the total number of conversations using total_count\nRetrieve the statistics.first_admin_reply_at value for each conversation and calculate the median of this value.\nTeammate performance overview\nAssigned\nFilter conversations by the admin_assignee_id attribute for each teammate.\nSum the total_count of the conversations from step 1.\n{\n  \"query\": {\n    \"field\":\"admin_assignee_id\",\n    \"operator\": \"=\",\n    \"value\":\"5569718\"  \n    }\n}\n\nParticipated\n\nThe number of unique conversations an admin replied to.\n\nTHE PARTICIPATED FILTER\n\nThe participated filter only shows conversations where the selected teammate(s) sent user visible replies.\n\nCalculate this number using conversation parts:\n\nFilter all conversation parts where part_type.author = admin and created_at is within the given date range.\nCount the unique number of conversations in those parts.\n{\n\"query\":\n  {\n    \"field\":\"teammate_ids\",\n    \"operator\": \"=\",\n    \"value\":\"5618076\" \n    }\n}\n\nReplies sent\n\nTotal number of individual replies sent for all conversations within the given time period.\n\nCalculate this number using conversation parts:\n\nFilter all conversation parts where part_type.author = admin and created_at is within the given date range.\nCalculate total number of replies.\nClosed conversations\n\nThe number of unique conversations closed, filtered by the time they were closed.\n\nCLOSED CONVERSATIONS\n\nA single conversation can be closed multiple times.\n\nFilter all conversation parts where part_type = close and created_at is within the given date range.\nCount the unique number of conversations in those parts.\n{\n  \"query\": {\n        \"operator\": \"AND\",\n        \"value\": [\n        {\n                \"field\":\"state\",\n                \"operator\": \"=\",\n                \"value\":\"closed\" },\n        {\n            \"field\":\"admin_assignee_id\",\n        \"operator\":\"=\",\n        \"value\": \"5565920\"\n\n        }\n\n        ]\n    }\n}\n\nNotes\n\nNumber of notes created by admin, filtered by the time they were created at.\n\nFilter all conversation parts where part_type = note.\nAssigned\n\nNumber of unique conversations assigned to each teammate, filtered by the time they were assigned at.\n\nCalculate this number using conversation parts:\n\nFilter all conversation parts where part_type = assigned_to is present and created_at is within the given date range.\nCount the unique number of conversations in those parts.\nResponsiveness\nMedian response time\n\nThe median of the median_time_to_reply value for each conversation.\n\nMedian response time (MRT) is defined as the median time it took for an admin to respond to a customer's last reply, at any point during a conversation, including their first response and any subsequent response.\n\nEach individual response time for a conversation's MRT is calculated by comparing the last User response and the following admin response.\n\nMedian first response time\nFirst response time\n\ntime_to_admin_reply\n\nMedian first response time\n\nMedian value of time_to_admin_reply across all conversations.\n\nTime_to_admin_reply is the duration from first_contact_reply_at to first_admin_reply_at.\n\nMedian time to close\n\nThe median value of the time_to_last_close attribute for all conversations within the selected time period\n\nTIME TO CLOSE\n\nTo calculate the time to close, we take into account when the conversation was created and the last time it was closed (in case it has been reopened and closed at some point).\n\nConversational Support\nProactive Support Messages\nGeneral\n\nAny interaction a customer has with the Article Inserter or Article Search or Interacting with the Messenger or Viewing Your Help Center or Resolution Bot.\n\nResolved with self-serve content covers all of the above that were closed without starting a conversation with a human.\n\nServed by a teammate after self-serve\n\nAll of the customers who participated in a Self-Serve interaction and ended up starting a conversation with a teammate.\n\nTo calculate the most popular articles read by customers (by title) you should query all articles and sort by number of views To calculate the number of proactive messages sent you should use // TODO - Confirm this with CS // Messages (unstable API) to download CSV of all outbound sent\n\nEffectiveness\nConversations replied to\n\nThe number of unique conversations that a teammate replied to, filtered by the time the reply was sent.\n\nCalculate this number using conversation parts:\n\nFilter all conversation parts where part_type = comment and created_at is within the given date range.\nCount the unique number of conversations in those parts.\nConversations reassigned\n\nFilter conversations where statistics.first_contact_reply_at is in the time range and statistics.count_assignments > 1.\n\n{\n  \"query\":  {\n           \"operator\":\"AND\",\n           \"value\": [\n       {\n         \"field\": \"statistics.first_contact_reply_at\",\n         \"operator\": \">\",\n         \"value\": \"1666414800\"\n       },\n       {\n         \"field\": \"created_at\",\n         \"operator\": \"<\",\n         \"value\": \"1673589599\"\n       },\n       {\n     \"field\": \"statistics.count_assignments\",\n     \"operator\": \">\",\n     \"value\": \"1\"\n   }\n     ]\n   }\n  }\n\nMedian time to first assignment\n\nStatistics object → median of time_to_assignment value\n\nMedian time from first assignment to close\n\nThis is the duration from last_assignment_admin_reply_at to last_close_at.\n\nCustomer Satisfaction\nConversation ratings\n\nIn the Customer Satisfaction Report, conversation ratings are calculated by the date in which the conversation rating was given.\n\nIn the API, you should use created_at in the conversation_rating object of each conversation to view the date the conversation rating was given\n\nCREATED AT OBJECT\n\ncreated_at returns the timestamp when the first rating was given.\n\nConversation Ratings by Date\n\n{\n  \"query\": {\n  \"field\":\"conversation_rating.replied_at\",\n  \"operator\": \">\",\n  \"value\":\"1666414800\"  \n  }\n}\n\n\nConversation Ratings by Rating Value\n\n{\n  \"query\":\n   {\n  \"field\":\"conversation_rating.score\",\n  \"operator\": \"=\",\n  \"value\":\"5\"\n  }\n}\n\nRemarks from Customers\n\nTo access any remarks from customers, you should first retrieve the conversation, then the conversation_rating object, and finally the remark attribute for each conversation you are querying.\n\nConversations\nNew Conversations\n\nSearch for conversations with created_at within the given date range.\n\n  \"query\":  {\n           \"operator\":\"AND\",\n           \"value\": [\n       {\n         \"field\": \"created_at\",\n         \"operator\": \">\",\n         \"value\": \"1666414800\"\n       },\n       {\n         \"field\": \"created_at\",\n         \"operator\": \"<\",\n         \"value\": \"1673589599\"\n       }\n     ]\n   }\n\nNew inbound conversations\n\nSearch for conversations where source.delivered_at = customer_initiated\n\n{\n  \"query\":\n   {\n  \"field\":\"source.delivered_as\",\n  \"operator\": \"=\",\n  \"value\":\"customer_initiated\"  \n  }\n  }\n\nConversations replied to by teammates\n\nSearch for conversations where statistics.first_admin_reply_at is within the given date range.\n\nCONVERSATION DATE RANGE\n\nConversations returned from this query may have started before the given date range.\n\nClosed conversations\n\nThe number of unique conversations closed, filtered by the time they were closed.\n\nSearch for conversations where state = closed\n\n{\n  \"query\":\n   {\n  \"field\":\"state\",\n  \"operator\": \"=\",\n  \"value\":\"closed\"  \n  }\n}\n\nOpen conversations\n\nThe number of conversations with a status of Open at the end of the given time period.\n\nSearch for conversations where created_at is within the given date range and open = true\n\n{\n  \"query\":\n   {\n  \"field\":\"open\",\n  \"operator\": \"=\",\n  \"value\":\"true\"  \n  }\n}\n\nSnoozed conversations\n\nSearch for conversations where created_at is within the given date range and state = snoozed\n\n{\n  \"query\":\n   {\n  \"field\":\"state\",\n  \"operator\": \"=\",\n  \"value\":\"closed\"  \n  }\n}\n\nReopened conversations\n\nSearch for conversations where created_at is within the given date range and statistics.count_reopens > 0\n\n{\n  \"query\":\n   {\n  \"field\":\"statistics.count_reopens\",\n  \"operator\": \">\",\n  \"value\":\"0\"  \n  }\n  }\n\nAdditional metrics\nTagged conversations\n\nList all tags and filter conversations by the tag_id attribute.\n\nSingle Tag Report\n\n{\n  \"query\":\n   {\n  \"field\":\"tag_ids\",\n  \"operator\": \"=\",\n  \"value\":\"7020308\"\n  }\n}\n\n\nMultiple Tag Report\n\n{\n\"query\":\n{\n\"field\":\"tag_ids\",\n\"operator\": \"IN\",\n\"value\":[\"7020308\",\"7538295\",\"6927004\" ]\n}\n}\n\nResolution Bot Conversations Coverage\n\nTo get a total count of Resolution Bot conversations, search for all conversations where source.delivered_as = operator_initiated and a source.body that contains the content of the Resolution Bot message.\n\n{\n  \"query\": {\n        \"operator\": \"AND\",\n        \"value\": [\n        {\n                \"field\":\"source.delivered_as\",\n                \"operator\": \"=\",\n                \"value\":\"operator\" },\n        {\n            \"field\":\"source.body\",\n        \"operator\":\"~\",\n        \"value\": \"Body of first resolution bot response\"\n\n        }\n\n        ]\n    }\n}\n"
  },
  {
    "title": "Spacer",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/presentationcomponents/spacer/",
    "html": "Spacer\n\nA spacer component is used to create empty space between components.\n\nParameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tspacer\t\tThe type of component you are rendering.\nid\tAny string\tNo\tA unique identifier for the component.\nsize\txs``s``m``l``xl\tNo\tThe amount of space between components.Default is s.\nPreview"
  },
  {
    "title": "Messenger Best Practices",
    "url": "https://developers.intercom.com/docs/canvas-kit/canvas-kit-messenger-best-practices/",
    "html": "Messenger Best Practices\nDeciding where your app will be used\n\nYour app can be added by teammates in a number of places, in order to be used by their users, leads and visitors. In the App Framework settings of your app in the Developer Hub, you can choose for your app to be available in places like the Messenger Home, or sent within conversations via the Inbox, Messages and Workflows.\n\nFor apps on the Messenger Home\nFirst canvas\n\nFor apps placed in the Messenger Home, the first canvas is the most vital screen. Apps need to be conscious of what they're likely to be placed alongside, and you'll need to consider how to present initial actions and context when end users first view the card.\n\nKeep the height of your first canvas to no more than half the Messenger, so it doesn't take over too much of the end user's screen.\nYour app will appear alongside other apps in your users Messenger, so it's important that your app is considerate of its height and impact on the effectiveness of other apps.\nAfter a teammate interacts with your app's first canvas (with a button or list click, for example), the height of your app is up to your own discretion, but we caution overloading your app with too much.\nWe suggest showing the minimum amount of information in the first canvas for a teammate to know the purpose of your app and how they need to interact with it.\nEnd state\n\nOnce the flow of your app is finished, you should refer users back to the start of the app for potential re-use in the future. You can do this in one of two ways:\n\nUse a live canvas so that upon the next visit, the app's canvas updates to the start of the flow, or with freshly relevant information. For example, in the Article Search app, users can come back and search for another article as many times as they like.\nUse a confirmation or success state screen to show that the flow is complete and the actions were successful.\nConsider using a visual indicator, like a checkmark, that an action was successful.\nDon't leave a teammate in a dead-end. Provide a call to action for a teammate to return to a useful place in your app. For example, you can use a link style button with \"Done\" as the text.\nFor apps in conversations (incl. Messages & Operator)\nFlow & Space\n\nFor apps that are to be used in conversations, every canvas needs to be conscious of where it will be inserted in the conversation and how incoming messages can disrupt the flows.\n\nKeep the height of every canvas in the flow to no more than half the Messenger, so it doesn't take over too much of the end user's screen and displace messages.\nYour app will appear in between messages which will be related to the context of your app. Consider this when deciding upon the content within the first canvas. For example, do you need to reiterate the next step, or can you skip to the action directly?\nDon't cram everything into one canvas. For apps used in conversations, it's better to break these down into multiple canvases within the flow to keep things concise.\nFinal state\n\nOnce the flow of your app is finished, you should use a confirmation or success state screen to show that the flow is complete and the actions were successful.\n\nConsider using a visual indicator, like a checkmark, that an action was successful.\nProvide all context regarding what actions took place in the app and any additional, valuable information. This will also be visible to your user in the conversation thread.\nSheets\n\nSheets give you the ability to perform much more complicated workflows within the Messenger. In effect, a sheet is a full-bleed iframe takeover of the Messenger which gives developers the ability to inject a completely custom UI. Here's guidelines on when and how they should be used:\n\nWhen content can be created with framework components instead, use these instead of falling back to sheets.\nA sheet should only ever act as an extension of your app. Don't load your full website in a sheet. If a user needs to view a separate website as part of a longer workflow, link them to the site in a separate tab instead.\nNo content in a sheet should mimic the Messenger design, any existing component, or Intercom product's themselves. This goes against our Intercom Platform Guidelines.\nIf a list item leads to content that would be too long to fit on a new canvas, display this in a sheet instead. For example, when clicking on an articles within our Article Search app, we open a sheet as the content would be too lengthy.\nIf a user closes a sheet mid-flow the current content within the sheet will be lost. So, don't use a sheet if a user needs content to remain visible or updatable at that point.\nKeep your app's style consistent. For example either go with neutral branding (like the Article Search app) or full-bleed and branded, like the Aircall Now app.\nLists and search interactions\n\nMany developers choose to provide some sort of search functionality in combination with lists within their apps. We encourage you to use these guidelines to ensure that teammates have consistent experiences when performing searches and interacting with lists across all apps.\n\nUse the input button component with a meaningful label and placeholder text like \"Search for a widget…\"\n\nOn submit of a search query, display the query as the value in the input button component.\n\nUse the list component to display search results directly underneath the search input button component.\n\nAvoid showing more than 3-5 search results. Instead, use a button component to \"See more results\" or use a single select component with \"Next\" and \"Previous\" options to paginate through more results.\n\nClicking items in a list should open a sheet instead of a card if the target content is longer than 400px.\n\nForms and inputs\nWhere multiple fields exist, show them all and add a submit style button, instead of using multiple cards to reveal one field at a time.\nWhere you have only one field, consider using the inline submit button.\nUsers customizing text in components\n\nIn the majority of cases, you should be writing the text that your customers will be using, rather than allowing them to customize descriptions and actionable language. There's a good few reasons for this:\n\nThe system leaves room to be abused, and could inadvertently cause damage to your brand.\nOur tone, grammar, and voice guidelines should be followed to the best of your ability.\nYour apps have a purpose and the design should reflect this, including the text copy.\n\nHowever, there are good use cases to allow for this likewise, such as your app having multiple use cases. For example, surveys can often have different use cases when sent, so your users may want to change the explanatory text as to what they're about to be answering.\n\nContinue being opinionated on the text and set placeholders for default options.\nProvide clear titles and instructions for what the purpose of the field is and how to write best for it.\nInternationalization of your app\n\nApps should be considerate of other cultures and locales, ensuring that they're open, flexible and accessible across the world. The canvas you return should reflect this.\n\nUse the locale attribute provided in the context object to understand which default language the end user is using. Use this to understand which languages you should translate to.\nUse the location object provided in the user object to understand where the end user is based. Use this to ensure no images/information/actions would be offensive or inaccessible to certain countries and cultures.\nKeep app length in mind for the first canvas, as other languages or differing content could expand this past allowed dimensions."
  },
  {
    "title": "Activity Log",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Models/activity_log/",
    "html": "Activities performed by admins."
  },
  {
    "title": "Segment",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Segments/segment/",
    "html": "A segment is a group of your contacts defined by the rules that you set."
  },
  {
    "title": "Note",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Notes/note/",
    "html": "Notes allow you to annotate and comment on your contacts."
  },
  {
    "title": "News Item",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/News/news_item/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Update a visitor",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Visitors/updateVisitor/",
    "html": "Sending a PUT request to /visitors will result in an update of an existing Visitor.\n\nOption 1. You can update a visitor by passing in the user_id of the visitor in the Request body.\n\nOption 2. You can update a visitor by passing in the id of the visitor in the Request body."
  },
  {
    "title": "OAuth Scopes",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/authentication/oauth-scopes/",
    "html": "OAuth Scopes\n\nOAuth scopes, or permissions, let you specify exactly how your application needs to access an Intercom user's account.\n\nYou should only specify the scopes you need to satisfy your use case and no more. Scopes are the most common reason that apps aren't approved when it comes to reviews.\n\nSummary of all Oauth Scopes\n\nThe following scopes can be selected via checkboxes on your Authorization settings page in the developer hub:\n\nPeople & conversation data\nStandard scopes\tDescription\nRead and list users and companies\tList and view all segments, users and companies\nRead and write users\tList all users and execute bulk actions\nWrite users and companies\tCreate and update users and companies\nRead one user and one company\tList and view a single user and company\nRead tags\tList all tags\nWrite tags\tCreate, update, use and delete tags\nRead conversations\tView conversations\nWrite conversations\tReply to, mark as read and close conversations\nRead events\tList all events belonging to a user\nWrite events\tAbility to submit events (i.e. user activity)\nRead counts\tCount users and companies with specified criteria\nWrite data attributes\tCreate and update custom data attributes\nExport message data\tExport engagement data for messages\nExport content data\tExport engagement data for content\nRead content data\tCreate and update custom data attributes\nRead tickets\tView tickets\nWrite tickets\tCreate tickets\nWorkspace data\nExtended scopes\tDescription\nRead admins\tList and view all admins\nRead one admin\tView a single admin\nUpdate admins\tUpdate away mode for admins\nRead admin activity logs\tList and view all admins and their activity\nRead data when entered into the app\tGather data via Intercom Apps\nRead and List news items and newsfeeds\tList and view all News items and Newsfeeds\nRead and Write news items and newsfeeds\tRead, Update and Create news items and newsfeeds\nRead and List articles\tList and view all articles\nRead and Write Articles\tRead, Update and Create articles\nCreate phone call redirects\tCreate phone call redirects\n\n🚧 Canvas Kit required scopes\n\nIf your app utilizes Canvas Kit, certain permissions are required by default due to the data your app will have access to. The following scopes will be automatically selected and cannot be deselected:\n\nRead and list users and companies\nRead conversations\nRead admins\nGather App data\nSELECTING WEBHOOK TOPICS\n\nWebhook topics are related to corresponding permission scopes. For example, if you need to setup a webook to trigger when a user/lead is created then you will need to select the \"Read and write users\" permission scopes. You will then be able to setup the webhook topics for your app which will fire for each workspace it is installed on. Checkout our docs on setting up webhooks for more detailed information on how to enable webhooks for your app."
  },
  {
    "title": "Create a new attribute for a ticket type",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Ticket-Type-Attributes/createTicketTypeAttribute/",
    "html": "You can create a new attribute for a ticket type."
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Switch/createPhoneSwitch/",
    "html": "You can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\n\nIf custom attributes are specified, they will be added to the user or lead's custom data attributes."
  },
  {
    "title": "Article",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Articles/article/",
    "html": "The Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone."
  },
  {
    "title": "Data Event",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Data-Events/data_event/",
    "html": "Data events are used to notify Intercom of changes to your data."
  },
  {
    "title": "Conversation",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Conversations/conversation/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Company",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Companies/company/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Admins/admin/",
    "html": "Admins are teammate accounts that have access to a workspace."
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Help-Center/help_center/",
    "html": "Help Centers contain collections"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/createArticle/",
    "html": "You can create a new article by making a POST request to https://api.intercom.io/articles."
  },
  {
    "title": "Import Tickets with the Intercom API",
    "url": "https://developers.intercom.com/docs/guides/tickets/import-tickets/",
    "html": "Import Tickets with the Intercom API\n\nIf you’re switching to Intercom from a different provider, you’re probably thinking through steps you’d need to take in order to migrate your ticket data.\n\nTransferring your data from another system into Intercom can be done using a third party provider, but in some cases you might want to handle the migration yourself. Utilizing the Intercom APIs to import your data is an option if you:\n\nWant to save on costs\nRequire flexibility due to the customizations or complexity your previous setup\nHave a developer who can handle the migration\n\nIn this tutorial, you will import ticket types, and tickets data into your Intercom Workspace. When working successfully you should see the test ticket types and tickets in your Intercom app.\n\nABOUT THIS TUTORIAL\n\nThis tutorial is written in Node.js and is aimed toward developers familiar with making API requests. The code samples are a starting point, but very large migrations will require modifications. It will help to set up some contacts to use — do that using this guide.\n\nTicket Types and Tickets APIs\n\nYou will use three of the Intercom APIs to read and create data for this tutorial.\n\nPOST /tickettypes is used to create ticket types. You can create these with any names of your choosing. ticket_type_id is required to create a ticket using the API.\n\nPOST /contacts/search is used to find a contact within your Intercom app. An object containing an Intercom ID for a contact is required to create a ticket.\n\nPOST /tickets is used to create a new ticket.\n\nThis example assumes that you have exported your existing ticket data into a JSON file, but you can try adapting it to your own data. If your data is stored in an application with its own API, you can modify your code to transfer the data directly, or if you exported it to a spreadsheet you can try refactoring the code to handle spreadsheet imports.\n\nPrerequisites\nA free Intercom developer workspace and Intercom app. Create both by following this guide\nA list of contacts available in your workspace. Follow this guide to set up example contacts\nNode.js v16.0 or higher\nStep 1: Set up your project\n\nCreate and navigate to a new directory where you will save your data in the JSON file and the import script.\n\nmkdir import_tickets\ncd import_tickets\n\n\nCreate a new Node.js project and install the dependencies: dotenv for reading your Intercom Access Token and node-fetch for using the Fetch API for your calls to Intercom.\n\nnpm init\nnpm install dotenv node-fetch\n\n\nThe setup guide should have prompted you to create a project file called index.js. Create files for the tickets dummy data and the .env file. Make sure to also add \"type\": \"module\" to your package.json file.\n\ntouch contacts.json\ntouch .env\n\n\nFind your Intercom Access Token from the Developer Hub under the Authentication section and paste it in the .env file.\n\nINTERCOM_TOKEN=”XXXXX\"\n\nNext let’s take a look at the example tickets data.\n\nStep 2: The ticket data\n\nThis is a small data set to use for the tutorial. If you are migrating tickets using another platform’s API you will want to check the rate limits and pagination methods. Intercom’s rate limits are provided here: At present, the default rate limit is 10,000 API calls per minute per app.\n\nOpen up tickets.json and paste in the following data.\n\n{\n   \"tickets\": [\n       {\n           \"id\": 220,\n           \"created_at\": 1672831080,\n           \"type\": \"other\",\n           \"subject\": \"help\",\n           \"description\": \"please contact me\",\n           \"status\": \"pending\",\n           \"requester_id\": 14637613035935\n       },\n       {\n           \"id\": 221,\n           \"created_at\": 1677928680,\n           \"type\": \"account\",\n           \"subject\": \"I have a question about my account\",\n           \"description\": \"I can't login\",\n           \"status\": \"open\",\n           \"requester_id\": 14637613035934\n       },\n       {\n           \"id\": 222,\n           \"created_at\": 1678101480,\n           \"type\": \"bug\",\n           \"subject\": \"There is something broken on your website\",\n           \"description\": \"The submit button is broken on the page.\",\n           \"status\": \"open\",\n           \"requester_id\": 14637613035935\n       },\n       {\n           \"id\": 223,\n           \"created_at\": 1686046680,\n           \"type\": \"feature request\",\n           \"subject\": \"Please add this endpoint\",\n           \"description\": \"Can you add an endpoint to this API? It would help me a lot.\",\n           \"status\": \"pending\",\n           \"requester_id\": 14637613035936\n       },\n       {\n           \"id\": 224,\n           \"created_at\": 1701861488,\n           \"type\": \"bug\",\n           \"subject\": \"How do I create a new contact?\",\n           \"description\": \"I keep getting an error when I try.\",\n           \"status\": \"solved\",\n           \"requester_id\": 14637613035937\n       },\n       {\n           \"id\": 225,\n           \"created_at\": 1696587480,\n           \"type\": \"bug\",\n           \"subject\": \"Can't delete a conversation\",\n           \"description\": \"Can't figure out how to delete a conversation\",\n           \"status\": \"open\",\n           \"requester_id\": 14637613035936\n       }\n   ]\n}\n\n\nWhile your data structure and field names may differ, the key fields you will need for the import are:\n\nsubject: The value of the subject field, which maps to _default_title in Intercom.\ndescription: The description of the issue, which maps to _default_description in Intercom.\nrequester_id: The ID from your previous system that is assigned to the contact who made the request as external_id in Intercom. This may be useful to you in looking up the contact within Intercom if you do not have the Intercom assigned contact ID available in your data.\ntype: The category the ticket falls under, Which you will define in the next step using the Ticket Types API with values of bug, feature request, account, and other.\n\nThis example includes created_at since you may want a record of when the ticket was first created in another system; if you do not provide one, the value will default to a timestamp of the time of import into Intercom.\n\nYou may want to show the current status, or state of the ticket. In the Intercom API, ticket_state refers to the state the ticket is currently in, with the options of \"submitted\" \"in_progress\" \"waiting_on_customer\" \"on_hold\" and \"resolved\". Since the options in the dummy data are slightly different, you will need to map them to the Intercom options.\n\nWhen you import a ticket with an assigned contact, by default that contact will receive an email notification even if the ticket is resolved or inactive. The import a contact guide shows how to set unsubscribed_from_emails parameter to true so contacts will not receive email notifications for imported tickets. If you have already added contacts, you can update unsubscribed_from_emails on a contact using the update a contact API, and can revert the change once your import is complete.\n\nStep 3: Create the ticket types\n\nIf you’ve followed the create a ticket tutorial you may already be familiar with the ticket type API — you’ll use it in this step to create the ticket types.\n\nOpen up index.js and paste in the following code\n\nimport fetch from 'node-fetch';\nimport dotenv from 'dotenv';\nimport ticketsData from './tickets.json' assert { type: 'json' };\ndotenv.config();\n\nconst intercomHeaders = {\n  'Content-Type': 'application/json',\n  'Intercom-Version': 'Unstable',\n  Authorization: `Bearer ${process.env.INTERCOM_TOKEN}`\n}\n\n// Create the empty object to hold the ticket type IDs\nlet TICKET_TYPES = {}\n\nasync function createTicketTypes() {\n  // Create an array of the ticket types you want to create\n  let ticketTypesList = ['bug', 'feature request', 'account', 'other']\n\n  // Loop over the list of ticket types\n  for (let i = 0; i < ticketTypesList.length; i++) {\n    // Make a HTTP POST request to Intercom to create the ticket type\n    try {\n      let ticketTypeName = ticketTypesList[i];\n      const response = await fetch(\n        `https://api.intercom.io/ticket_types`,\n        {\n          method: 'POST',\n          headers: intercomHeaders,\n          body: JSON.stringify({\n            name: ticketTypeName,\n            category: 'Customer'\n          })\n        }\n      );\n      \n      // Get the response data as a JSON object\n      const data = await response.json();\n      // From the JSON object get the ID of the ticket type\n      // add it to the ticket types object\n      TICKET_TYPES[ticketTypeName] = data.id;\n    \n    } catch (error) {       \n      console.log(error);\n    }\n  }\n  // If the request succeeds log that the ticket type has been created\n  console.log('Ticket types created.');\n}\n\n\nFirst you are importing the tickets.json file as an object called ticketsData, and then set the headers you will use for the API calls with the Intercom Access Token as the bearer token. We’re using the unstable version of the API so we have features available such as setting the created_at parameter on the tickets.\n\nYou will declare an empty object to map the IDs of the ticket types after you create them; this is because the data you are ingesting has the type as a string and does not have the ID. You could use the list all ticket types API to look up the ID that way, but for the sake of this tutorial you may use an object to store them upon creation.\n\nNext you create a function to create the ticket types and define a list of the types to create. You will iterate through that list and make a POST request to the API with the name of the ticket type. You will define the category as “Customer” since we will assume that all of these are customer-created tickets. The other options available are \"Back-office\" and \"Tracker\".\n\nStep 4: Create the function to import tickets\n\nBelow the code you added in the previous step, paste in the following function.\n\nasync function importTickets() {\n\n  // Create an array for the tickets objects from the JSON file\n  let tickets = ticketsData.tickets\n\n  // Loop over the array of tickets objects\n  for (let i = 0; i < tickets.length; i++) {\n    try {\n      // Get the stored ticket type ID\n      let ticketType = tickets[i].type\n      // Get the mapped ticket status\n      let ticketStatus = tickets[i].status\n      // Create a HTTP POST request to the Intercom API to create a ticket\n      // Required fields are ticket_type_id and contacts\n      const response = await fetch(\n        `https://api.intercom.io/tickets`,\n        {\n          method: 'POST',\n          headers: intercomHeaders,\n          body: JSON.stringify({\n            ticket_type_id: ticketType,\n            contacts: [{id: tickets[i].requester_id}],\n            ticket_attributes: {\n              _default_title_: tickets[i].subject,\n              _default_description_: tickets[i].description\n            },\n            ticket_state: ticketStatus,\n            created_at: tickets[i].created_at\n          })\n        })\n        // If the response is not a 200 OK log the response\n        if (!response.ok) {\n          throw new Error(`${response.status} ${response.statusText}`);\n        }\n        // If the response is 200 OK log that the ticket has been created\n        console.log('Ticket created.');\n    } catch (error) {\n      console.log(error)\n    }\n  };\n}\n\n\nIn this code you are first getting the array of individual ticket objects from tickets.json and setting them as a variable called tickets. You then use this variable to loop through the array and make a POST request to the Tickets API to create a new Intercom ticket using the data. If you refer back to step 2, you’ll recall there are few mappings that we need to handle between the example data and the parameters of the Intercom API.\n\nFirst let’s look at ticket_type_id. When pulling from the data, the name of the ticket type is provided as a string, but the API needs the ID value as a string. Since you stored the ID values in the TICKET_TYPES object, you can use that to get the related ID. Change this line in the request body to\n\nticket_type_id: TICKET_TYPES[ticketType]\n\n\nWe will assume the requester_id pulled from the previous system has been saved as external_id in the Intercom contact object, however you cannot use the external_id to create the ticket — you must use the Intercom provisioned ID that was assigned when the contact was created in Intercom. You can get this using the search contacts API.\n\nCreate a new function in the file called getContactsByExternalId(). This function will take the external_id and will return the Intercom contact ID as a variable called contactId.\n\nasync function getContactByExternalId(external_id) {\n  try {\n    // Make a HTTP POST request to Intercom to find a contact by external_id\n    const response = await fetch(\n      `https://api.intercom.io/contacts/search`,\n      {\n        method: 'POST',\n        headers: intercomHeaders,\n        body: JSON.stringify({\n          query: {\n          operator: 'AND',\n          value: [{\n            field: 'external_id',\n            operator: '=',\n            value: external_id.toString()\n          }]\n        }\n      })\n    })\n    // Get the response as a JSON object\n    const contact = await response.json();\n    // Create the contactId with the ID returned in the response\n    const contactId = contact.data[0].id\n    // If the response is sucessful return the contactId\n    if (response.ok) {\n      return contactId\n    }\n  }\n  catch (error) {\n    console.log(error)\n  }\n}\n\n\nNow, back in importTickets() below the try statement, paste the below line to call the getContactByExternalId() function as pass in the requester_id and set the value to contactId.\n\nlet contactId = await getContactByExternalId(tickets[i].requester_id)\n\n\nThen you can change the id value in the contacts object of the request body to be contactId\n\nid: contactId\n\n\nThe final mapping required before you may run the migration is to update the ticket states to be compatible with the Intercom options. At the top of the file, create a global variable with the mappings. This is an example of what it could look like, but you may change it depending on what your data looks like.\n\nconst TICKET_STATES = {\"pending\": \"in_progress\",\n                      \"open\": \"submitted\",\n                      \"solved\": \"resolved\"}\n\n\n\nGet and set the Intercom state by changing ticket_state parameter in the body to the below.\n\nticket_state: TICKET_STATES[ticketStatus]\n\nStep 5: Run the migration\n\nFor many tickets you may want to run the imports in batches if you are concerned about rate limiting. Batch sizes will depend on the size of your list and other API calls you are making within your Intercom app. If you hit the limit, you will see a 429 Error in the response status in your terminal Read more about how you can handle rate limits here.\n\nFinally, add in a main() function to call the createTicketTypes() function first, and the importTickets() function second. Your completed file should look like this:\n\nimport fetch from 'node-fetch';\nimport dotenv from 'dotenv';\nimport ticketsData from './tickets.json' assert { type: 'json' };\ndotenv.config();\n\nconst intercomHeaders = {\n   'Content-Type': 'application/json',\n   'Intercom-Version': 'Unstable',\n   Authorization: `Bearer ${process.env.INTERCOM_TOKEN}`\n}\n\nlet TICKET_TYPES = {}\n\nconst TICKET_STATES = {\"pending\": \"in_progress\",\n                      \"open\": \"submitted\",\n                      \"solved\": \"resolved\"}\n                     \n// Run the two functions sequentially\nasync function main() {\n   const dataAttributes = await createTicketTypes();\n   const tickets = await importTickets();\n}\n\nasync function createTicketTypes() {\n  // Create an array of the ticket types you want to create\n  let ticketTypesList = ['bug', 'feature request', 'account', 'other']\n\n  // Loop over the list of ticket types\n  for (let i = 0; i < ticketTypesList.length; i++) {\n    // Make a HTTP POST request to Intercom to create the ticket type\n    try {\n      let ticketTypeName = ticketTypesList[i];\n      const response = await fetch(\n        `https://api.intercom.io/ticket_types`,\n        {\n          method: 'POST',\n          headers: intercomHeaders,\n          body: JSON.stringify({\n            name: ticketTypeName,\n            category: 'Customer'\n          })\n        }\n      );\n      \n      // Get the response data as a JSON object\n      const data = await response.json();\n      // From the JSON object get the ID of the ticket type\n      // add it to the ticket types object\n      TICKET_TYPES[ticketTypeName] = data.id;\n    \n    } catch (error) {       \n      console.log(error);\n    }\n  }\n  // If the request succeeds log that the ticket type has been created\n  console.log('Ticket types created.');\n}\n\n\nasync function getContactByExternalId(external_id) {\n  try {\n    // Make a HTTP POST request to Intercom to find a contact by external_id\n    const response = await fetch(\n      `https://api.intercom.io/contacts/search`,\n      {\n        method: 'POST',\n        headers: intercomHeaders,\n        body: JSON.stringify({\n          query: {\n          operator: 'AND',\n          value: [{\n            field: 'external_id',\n            operator: '=',\n            value: external_id.toString()\n          }]\n        }\n      })\n    })\n    // Get the response as a JSON object\n    const contact = await response.json();\n    // Create the contactId with the ID returned in the response\n    const contactId = contact.data[0].id\n    // If the response is sucessful return the contactId\n    if (response.ok) {\n      return contactId\n    }\n  }\n  catch (error) {\n    console.log(error)\n  }\n}\n\nasync function importTickets() {\n\n  // Create an array for the tickets objects from the JSON file\n  let tickets = ticketsData.tickets\n\n  // Loop over the array of tickets objects\n  for (let i = 0; i < tickets.length; i++) {\n    try {\n      // Get the stored ticket type ID\n      let ticketType = tickets[i].type\n      // Get the mapped ticket status\n      let ticketStatus = tickets[i].status\n      // Get the Intercom contact ID\n      let contactId = await getContactByExternalId(tickets[i].requester_id)\n      // Create a HTTP POST request to the Intercom API to create a ticket\n      // Required fields are ticket_type_id and contacts\n      const response = await fetch(\n        `https://api.intercom.io/tickets`,\n        {\n          method: 'POST',\n          headers: intercomHeaders,\n          body: JSON.stringify({\n            ticket_type_id: ticketType,\n            contacts: [{id: contactId}],\n            ticket_attributes: {\n              _default_title_: tickets[i].subject,\n              _default_description_: tickets[i].description\n            },\n            ticket_state: TICKET_STATES[ticketStatus],\n            created_at: tickets[i].created_at\n          })\n        })\n        // If the response is not a 200 OK log the response\n        if (!response.ok) {\n          throw new Error(`${response.status} ${response.statusText}`);\n        }\n        // If the response is 200 OK log that the ticket has been created\n        console.log('Ticket created.');\n    } catch (error) {\n      console.log(error)\n    }\n  };\n}\n\n// Call the main function to run the script\nmain();\n\n\nWhen you’re ready you can run the migration in your terminal using the command node index.js\n\nYou should see notifications in your terminal as the tickets are created. You can always remove the print statement if you’d rather not receive these. Once you go to your Intercom Inbox, you should see the tickets populated — they may take a few minutes to appear. You can also find your newly created ticket types under Settings > ticket data.\n\nConclusion\n\nIn this tutorial you created ticket types and imported ticket data using the Intercom APIs.\n\nThis guide covers the basics of how you might migrate your tickets into Intercom, but it doesn’t address more complex cases. Refer to the documentation from your previous provider and Intercom documentation for details about additional parameters and mappings.\n\nFeel free to contact us using the messenger in the bottom right to let us know what solutions you come up with and leave us some feedback at the bottom of this page.\n\nNext steps\nSet up a ticket webhook\nBuild a custom ticket web form\nBuild an integration with GitHub issues"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Changelog (Unstable)",
    "url": "https://developers.intercom.com/docs/references/unstable/changelog/",
    "html": "Changelog (Unstable)\nUNSTABLE API\n\nThis version is not stable and everything within is subject to change. We recommend using this for test and staging environments, as opposed to within production.\n\nNew AI Content APIs\n\nThe AI Content APIs are a new addition to allow you to get content into Fin from private help centers that Fin wouldn't otherwise be able to access and learn from the content of. With the APIs, you can create and manage External Pages and Content Import Sources for your Fin Content Library.\n\nFeel free to submit your feedback on the AI Content APIs via Messenger, we’d love to hear from you!\n\nReply to conversations with Quick Replies\n\nWe added the ability to reply to conversations with Quick Replies. The Reply to a conversation endpoint now allows admins to reply to conversations with quick replies. When a user clicks on one of the given options, a comment conversation part will be created that includes metadata linking back to the quick reply option chosen.\n\nNew Searchable Contact Attribute\n\nWe added formatted_phone as a searchable attribute for contacts."
  },
  {
    "title": "customer_request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/customer_request/",
    "html": "The identifier for the contact as given by Intercom."
  },
  {
    "title": "Create Phone Switch Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_phone_switch_request/",
    "html": "You can create an phone switch"
  },
  {
    "title": "Deleted Article Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/deleted_article_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Contact Reply",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Contact Reply on ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_reply_ticket_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Contact notes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_notes/",
    "html": "An object containing notes meta data about the notes that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_social_profiles/",
    "html": "An object containing social profiles that a contact has."
  },
  {
    "title": "Companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/company_list/",
    "html": "This will return a list of companies for the App."
  },
  {
    "title": "List all news items",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/listNewsItems/",
    "html": "You can fetch a list of all news items"
  },
  {
    "title": "Ticket Type Attributes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_type_attribute_list/",
    "html": "A list of attributes associated with a given ticket type."
  },
  {
    "title": "Ticket part author",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_part_author/",
    "html": "The author that wrote or triggered the part. Can be a bot, admin, team or user."
  },
  {
    "title": "Ticket Type Attribute",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_type_attribute/",
    "html": "Ticket type attribute, used to define each data field to be captured in a ticket."
  },
  {
    "title": "Untag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/untag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "Update Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_article_request/",
    "html": "You can Update an Article"
  },
  {
    "title": "Update Conversation Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_conversation_request/",
    "html": "Payload of the request to update a conversation"
  },
  {
    "title": "Update Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_contact_request/",
    "html": "You can update a contact"
  },
  {
    "title": "Ticket Types",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_type_list/",
    "html": "A list of ticket types associated with a given workspace."
  },
  {
    "title": "Update Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/update_collection_request/",
    "html": "You can update a collection"
  },
  {
    "title": "A Ticket Part representing a note, comment, or quick_reply on a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_reply/",
    "html": "A Ticket Part representing a note, comment, or quick_reply on a ticket"
  },
  {
    "title": "Migrating to v13.0.0",
    "url": "https://developers.intercom.com/installing-intercom/ios/migration-guide-v13/",
    "html": "Migrating to v13.0.0\n\nVersion 13.0.0 of the Intercom iOS SDK adds support for iOS 16. Xcode 14 is required to build v13.0.0.\n\nIn v12.1.0 we deprecated a number of methods in our API. These deprecated methods have now been removed. Developers who are still using the deprecated APIs will need to migrate their code to use the new API methods.\nFor more information and code samples, please visit our configuration guide.\n\nObjective-C API\nDeprecated API\tNew API\n+ (void)presentMessageComposer\t+ (void)presentMessageComposer:(nullable NSString *)initialMessage\n+ (void)presentMessageComposerWithInitialMessage:(NSString *)message\t+ (void)presentMessageComposer:(nullable NSString *)initialMessage\n+ (void)presentConversationList\tNo replacement\n+ (void)reset\t+ (void)logout\n+ (void)registerUnidentifiedUser\t+ (void)loginUnidentifiedUserWithSuccess:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure\n+ (void)registerUserWithUserId:(NSString *)userId email:(NSString *)email\t+ (void)loginUserWithUserAttributes:(ICMUserAttributes *)userAttributes success:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure\n+ (void)registerUserWithUserId:(NSString *)userId\t+ (void)loginUserWithUserAttributes:(ICMUserAttributes *)userAttributes success:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure\n+ (void)registerUserWithEmail:(NSString *)email\t+ (void)loginUserWithUserAttributes:(ICMUserAttributes *)userAttributes success:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure\n+ (void)updateUser:(ICMUserAttributes *)userAttributes\t+ (void)updateUser:(ICMUserAttributes *)userAttributes success:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure\n+ (void)setDeviceToken:(NSData *)deviceToken\t+ (void)setDeviceToken:(NSData *)deviceToken failure:(void(^ __nullable)(NSError * _Nullable error))failure\nSwift API\nDeprecated API\tNew API\nfunc presentMessageComposer()\tfunc presentMessageComposer(_ initialMessage: String?)\nfunc presentMessageComposer(withInitialMessage message: String)\tfunc presentMessageComposer(_ initialMessage: String?)\nfunc presentConversationList()\tNo replacement\nfunc reset()\tfunc logout()\nfunc registerUnidentifiedUser()\tfunc loginUnidentifiedUser(completion: ((Result<Void, Error>) -> Void)? = nil)\nfunc registerUser(withUserId userId: String, email: String)\tfunc loginUser(with attributes: ICMUserAttributes, completion: ((Result<Void, Error>) -> Void)? = nil)\nfunc registerUser(withUserId userId: String)\tfunc loginUser(with attributes: ICMUserAttributes, completion: ((Result<Void, Error>) -> Void)? = nil)\nfunc registerUser(withEmail email: String)\tfunc loginUser(with attributes: ICMUserAttributes, completion: ((Result<Void, Error>) -> Void)? = nil)\nfunc updateUser(_ userAttributes: ICMUserAttributes)\tfunc updateUser(with attributes: ICMUserAttributes, completion: ((Result<Void, Error>) -> Void)? = nil)\nfunc setDeviceToken(_ deviceToken: Data)\tfunc setDeviceToken(_ deviceToken: Data, failure: ((Error?) -> Void)? = nil)"
  },
  {
    "title": "Visitor",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/visitor/",
    "html": "Visitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform. The Visitors resource provides methods to fetch, update, convert and delete."
  },
  {
    "title": "Ticket Attributes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/ticket_custom_attributes/",
    "html": "An object containing the different attributes associated to the ticket as key-value pairs. For the default title and description attributes, the keys are _default_title_ and _default_description_."
  },
  {
    "title": "Team List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/team_list/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Team Priority Level",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/team_priority_level/",
    "html": "Admin priority levels for teams"
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/tag_list/",
    "html": "A list of tags objects in the workspace."
  },
  {
    "title": "Tags",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/tags/",
    "html": "A list of tags objects associated with a conversation"
  },
  {
    "title": "Tag Users Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/tag_multiple_users_request/",
    "html": "You can tag a list of users."
  },
  {
    "title": "Tag Company Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/tag_company_request/",
    "html": "You can tag a single company or a list of companies."
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/subscription_type_list/",
    "html": "A list of subscription type objects."
  },
  {
    "title": "Snooze Conversation Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/snooze_conversation_request/",
    "html": "Payload of the request to snooze a conversation"
  },
  {
    "title": "Social Profile",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/social_profile/",
    "html": "A Social Profile allows you to label your contacts, companies, and conversations and list them using that Social Profile."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/paginated_response/",
    "html": "Paginated Response"
  },
  {
    "title": "Applied SLA",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/sla_applied/",
    "html": "The SLA Applied object contains the details for which SLA has been applied to this conversation. Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/note_list/",
    "html": "A paginated list of notes associated with a contact."
  },
  {
    "title": "Pagination Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/pages_link/",
    "html": "The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows."
  },
  {
    "title": "redact_conversation_request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/redact_conversation_request/",
    "html": "Payload of the request to redact a conversation part"
  },
  {
    "title": "Reference",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/reference/",
    "html": "reference to another object"
  },
  {
    "title": "Open Conversation Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/open_conversation_request/",
    "html": "Payload of the request to open a conversation"
  },
  {
    "title": "Part attachment",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/part_attachment/",
    "html": "The file attached to a part"
  },
  {
    "title": "Update a ticket type",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Ticket-Types/updateTicketType/",
    "html": "You can update a ticket type.\n\n📘 Updating a ticket type.\n\nFor the icon propery, use an emoji from Twemoji Cheatsheet"
  },
  {
    "title": "Retrieve a ticket type",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Ticket-Types/getTicketType/",
    "html": "You can fetch the details of a single ticket type."
  },
  {
    "title": "multiple_filter_search_request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/multiple_filter_search_request/",
    "html": "An operator to allow boolean inspection between multiple fields."
  },
  {
    "title": "Create News Item Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/news_item_request/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Merge contact data",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/merge_contacts_request/",
    "html": "Merge contact data."
  },
  {
    "title": "Linked Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/linked_object/",
    "html": "A linked conversation or ticket."
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/ios/push-notifications/",
    "html": "Push Notifications\n\nThis article explains how to enable push notifications in Intercom for iOS. If you are new to push notifications in iOS, check out this page first.\n\nTo enable Intercom push notifications, you first need to create a private key, upload it to Intercom, and enter details about your app.\n\nStep 1: Create a Private Key\n\nUsing these instructions, create and download a private key with APNs enabled. Note the Key ID for the next step.\n\nAlternatively, use an existing private key with APNs enabled.\n\nStep 2: Enable in Intercom\n\nGo to your workspace settings and select Installation > iOS. In the \"Enable Push Notifications\" section:\n\nUpload the .p8 file you just created\nEnter the Key ID from Step 1\nEnter the Bundle ID for the app you want to send notifications to\nEnter the Apple team ID\nClick Save\nStep 3: Register Device Tokens\n\nTo enable your users to receive push notifications from Intercom via Intercom for iOS, you must request permission to send push notifications and register the device token of your user in your AppDelegate.\n\nobjectivecswift\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [Intercom setDeviceToken:deviceToken failure:^(NSError * _Nullable error) {\n        // Handle error\n    }];\n}\n\n\nIf the failure block of the above call is executed, you can check against our list of error codes to help debug the issue.\n\nAt this stage you should also make sure that you have enabled the Push Notifications capability in Xcode.\n\nStep 4: Handling Intercom Push Notifications\nAutomatically (Default)\n\nWhen your app receives a push notification, Intercom for iOS checks if it is an Intercom push notification and opens the message if required. To do this we safely swizzle the public methods in UIApplicationDelegate that handle receiving push notifications. We do not use any private APIs to do this.\n\nManually\n\nIn certain circumstances you may want more control of your push notifications. You can disable automatic handling of Intercom push notifications by doing the following:\n\nAdd the following to your Info.plist:\nIntercomAutoIntegratePushNotifications with a value of NO\n\nHandle Intercom push notifications manually in didReceiveNotificationResponse in your UNUserNotificationCenterDelegate:\nobjectivecswift\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler {\n    //Add any custom push handling for your own app here\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    if ([Intercom isIntercomPushNotification:userInfo]) {\n        [Intercom handleIntercomPushNotification:userInfo];\n    }\n    completionHandler(UIBackgroundFetchResultNoData);\n}\n\nStep 5: Testing Intercom Push Notifications\n\nYou can test if push notifications are working properly in your app by sending a manual message to the app user via Intercom.\n\nBadge Values\n\nIntercom never changes the badge value of your app. Thus we can ensure that whatever badge value you're managing in your app, we don't alter in any way.\n\nTroubleshooting\n\nIf you are having trouble getting push notifications to work in your app, here's a list of things you should check:\n\nEnsure you ticked the box 'Send a push notification' when you send a manual message.\nEnsure you are requesting permission from your users to send push notifications.\nDo you get a device token from APNS? If you put a breakpoint into the application:didregisterforremotenotificationswithdevicetoken: delegate call, you should get a token shortly after your app launches.\nHave you set the correct Bundle ID in Settings > Installation > iOS? Make sure it matches the app that you want push notifications sent to.\nIs your private key still active? Check your keys to make sure it has not been revoked.\nYou can find more technical information and troubleshooting steps in the Apple iOS Developer Library.\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀"
  },
  {
    "title": "Group Content",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/group_content/",
    "html": "The Content of a Group."
  },
  {
    "title": "Group Translated Content",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/group_translated_content/",
    "html": "The Translated Content of an Group. The keys are the locale codes and the values are the translated content of the Group."
  },
  {
    "title": "Create a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/createTicket/",
    "html": "You can create a new ticket."
  },
  {
    "title": "Rate Limiting",
    "url": "https://developers.intercom.com/docs/references/rest-api/errors/rate-limiting/",
    "html": "Rate Limiting\n# Example with the default rate limit of 1000\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332510\n\n# After another request:\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1487332510\n\n# After window resets\nHTTP/1.1 200 OK\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 100\nX-RateLimit-Reset: 1487332520\n\n# If you make more than the allowed requests\nHTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1487332520\n\nintercom.rate_limit_details\n#=> {:limit=>1000, :remaining=>999, :reset_at=>2019-08-05 14:59:00 +0100}\n\n\nAPI Rate Limits are in place to protect Intercom from API traffic spikes that could put our databases at risk. We therefore measure the amount of requests sent to the API in order to throttle these when they surpass the amount allowed. We will respond with '429 Too Many Requests' and the following headers:\n\nHeader Name\tHeader Description\nX-RateLimit-Limit\tMaximum number of requests allowed for the app.\nX-RateLimit-Remaining\tNumber of requests left in the current time.\nX-RateLimit-Reset\tTime when the number of requests will be reset to the maximum limit.\nShown as UNIX timestamp.\nWHAT ABOUT CANVAS KIT REQUESTS?\n\nRate Limits only apply to calls to the REST API, not to any webhook requests that are sent as part of the Canvas Kit capabilities.\n\nWhat is the default amount of requests?\n\nEvery app will have default rate limits. The amount we rate limit them by is different for apps which are privately built for your own usage, or for apps that are publicly installed by third-parties.\n\nPrivate\n\nPrivate apps have a default rate limit of 10,000 API calls per minute per app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple private apps installed, every one contributes towards total number of requests.\n\nPublic\n\nPublic apps have a default rate limit of 10,000 API calls per minute for each app and 25,000 API calls per minute per workspace. This means that if a workspace has multiple public apps installed, each one has its own separate request limit without contributing to the others.\n\nHIGHER RATE LIMITS\n\nIf you require higher rate limits than the defaults, you can contact us using the messenger in the bottom right.\n\nWhen does the amount of requests reset?\n\nAlthough the permitted limit of requests lasts for 1 minute, we evenly distribute this into 10 second windows. This means that every 10 seconds, the amount of permitted requests resets. For example, a default rate limit of 1000 per minute means that you can send a maximum of 166 operations per 10 second period (1000/6).\n\nHow can I handle rate limits?\n\nTo prevent hitting the rate limits, here are a few options for handling within your code.\n\nUse the header information\n\nYou can find the number of requests allowed in your current window in the Intercom headers, or if you are using the Intercom Ruby SDK you can call your client's rate_limit_details which returns a Hash with information about your app's rate limit.\n\nYou can use the remaining number of requests allowed in your current window and when this is below a certain value you can rest until your rate limit is reset.\n\nIn the example below the app is restricted to a rate limit of 5 just to show the output returned — note that we’ve also shown what information is available in the Intercom client and the response for your current rate limits using the Ruby SDK.\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n    # These are the headers we have access to when making requests\n    puts(\"Rate Limit: #{intercom.rate_limit_details[:limit]} \\n\")\n    puts(\"Remaining: #{intercom.rate_limit_details[:remaining]} \\n\")\n    puts(\"Reset Time: #{intercom.rate_limit_details[:reset_at]} \\n\")\n\n    # Check when request limit is under a certain number\n    if not intercom.rate_limit_details[:remaining].nil? and intercom.rate_limit_details[:remaining] < 2\n      sleep_time = intercom.rate_limit_details[:reset_at].to_i - Time.now.to_i\n      puts(\"Waiting for #{sleep_time} seconds to allow for rate limit to be reset\")\n      sleep sleep_time\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nThe output from the above code is below. You would not need to output all of this data, but this should offer an example of what to expect and how you might approach implementing a rest until the limit is reset.\n\nRequest Number 1\nRate Limit:\nRemaining:\nReset Time:\nRequest Number 2\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 3\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 4\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 5\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 6\nRate Limit: 5\nRemaining: 1\nReset Time: 2023-12-08 15:19:51 +0000 \nWaiting for 38 seconds to allow for rate limit to be reset\nRequest Number 7\nRate Limit: 5\nRemaining: 5\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 8\nRate Limit: 5\nRemaining: 4\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 9\nRate Limit: 5\nRemaining: 3\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 10\nRate Limit: 5\nRemaining: 2\nReset Time: 2023-12-08 15:19:51 +0000 \nRequest Number 11\nRate Limit: 5\nRemaining: 1\nReset Time: 2016-11-16 16:15:00 +0000\nWaiting for 58 seconds to allow for rate limit to be reset\n\nUse randomization\n\nWhile the reset option is one way to deal with rate limiting, you may want more granular control over your rate limit handling. For example, you might have a specific retry timeframe that you want to follow and not wait for the minute window to pass for your entire rate limit to be reset.\n\nIf you want more control over your rate limiting handling then you can check for the specific rate limit error returned and use some form of randomization in the backoff calculation.\n\nYou could change the retry code above to look like this to achieve some randomization:\n\nrequire 'intercom'\nrequire 'stringio'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nretries = 0\nmax_retries = 3\nbackoff_factor = 2\n\nfor num in 0..20\n  begin\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  rescue Intercom::RateLimitExceeded => error\n    #At this point we know we have encountered a limit\n    #So lets try for a few times and backoff a little in each case\n    puts(\"Error Msg: #{error.inspect} \\n\")\n    puts(\"http_code: #{error.http_code[:http_code]}\\n\" )\n    puts(\"http_code: #{error.http_code[:application_error_code]}\\n\" )\n    if retries <= max_retries\n      # Lets try it a few more times\n      retries += 1\n      # Set a range from num of retries to backoff and randomly sample from that\n      # You can pick any range you like here, this is just an example\n      backoff = rand(retries..(backoff_factor * retries))\n      puts(\"Backoff for #{backoff} seconds\")\n      sleep backoff\n    else\n      # Rasing error here so you can perform some action based on this event\n      raise(\"No longer retrying since we have retried #{retries} times.\\n\"\\\n              \"The error returned was: '#{error.message}'\")\n    end\n  rescue => error\n    raise(\"Received a general error so exiting: #{error}\")\n  end\nend\n\n\nAfter running this code, your output would look like this:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nRequest Number 7\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 2 seconds\nRequest Number 8\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 9\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 3 seconds\nRequest Number 10\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nBackoff for 6 seconds\nRequest Number 11\nError Msg: #<Intercom::RateLimitExceeded: More than 5 requests received in 1 minute>\nhttp_code: 429\nhttp_code: rate_limit_exceeded\nadvanced_throttle.rb:32:in `rescue in block in <main>': No longer retrying since we have retried 4 times. (RuntimeError)\nThe error returned was: 'More than 5 requests received in 1 minute'\n\tfrom advanced_throttle.rb:9:in `block in <main>'\n\tfrom advanced_throttle.rb:8:in `each'\n\tfrom advanced_throttle.rb:8:in `<main>'\n\nUse a library for exponential backoff\n\nTo prevent having to implement your own backoff forumlas, you can use a library that will handle this for you. Some examples include:\n\nretry for Node.js\nbackoff for Python\nretries, a RubyGem which will be used for the below example\n\nWith retries, all you specify the number of retries you want and it will handle the rest.\n\nrequire 'intercom'\nrequire 'stringio'\nrequire 'retries'\n\nintercom = Intercom::Client.new(token: ENV['YOUR_TOKEN'])\n\nmax_retries = 3\n\nfor num in 0..20\n  handler = Proc.new do |exception, attempt_number, total_delay|\n    puts \"Handler saw a #{exception.class}; retry attempt #{attempt_number}; #{total_delay} seconds have passed.\"\n  end\n  with_retries(:max_tries => max_retries, :handler => handler, :rescue => [Intercom::RateLimitExceeded]) do |attempt|\n    puts(\"Request Number #{num+1}\")\n    # You can check for the max retry number and raise an error so you can take some action based on this event\n    if attempt >= max_retries\n      raise(\"No longer retrying since we have retried #{attempt} time.\\n\"\\\n    \"The error returned was: '#{Intercom::RateLimitExceeded}'\")\n    end\n    puts(\"Request Number #{num+1}\")\n    email = 'contact' + num.to_s + '@example.com'\n    name = 'Mrs ' + num.to_s + \"Example\"\n    # Make a HTTP POST request to Intercom to create/update a user\n    response = intercom.contacts.create(:email => email, :name => name, :signed_up_at => Time.now.to_i)\n  end\nend\n\n\nThe is what the output of the above example looks like using retries:\n\nRequest Number 1\nRequest Number 2\nRequest Number 3\nRequest Number 4\nRequest Number 5\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 1; 0.328696139 seconds have passed.\nRequest Number 6\nHandler saw a Intercom::RateLimitExceeded; retry attempt 2; 1.194656588 seconds have passed.\nRequest Number 6\nthrottle_retries.rb:14:in `block (2 levels) in <main>': No longer retrying since we have retried 3 times. (RuntimeError)\nThe error returned was: 'Intercom::RateLimitExceeded'\n\tfrom /home/ec2-user/.rvm/gems/ruby-2.3.0/gems/retries-0.0.5/lib/retries.rb:46:in `with_retries'\n\tfrom throttle_retries.rb:11:in `block in <main>'\n\tfrom throttle_retries.rb:7:in `each'\n\tfrom throttle_retries.rb:7:in `<main>'\n[ec2-user@ip-10-0-2-162 ~]$\n"
  },
  {
    "title": "Error Objects",
    "url": "https://developers.intercom.com/docs/references/rest-api/errors/error-objects/",
    "html": "Error Objects\nError List Object\n{\n  \"type\": \"error.list\",\n  \"errors\": [\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such user_id[314159]\",\n      \"field\": \"user_id\"\n    },\n    {\n      \"code\": \"not_found\",\n      \"message\": \"No such email[pi@example.org]\",\n      \"field\": \"email\"\n    }\n  ]\n}\n\n// the JavaScript client doesn't directly expose error data\n\n# the Ruby client doesn't directly expose error data\n\n<?php\n// the PHP client doesn't directly expose error data\n?>\n\ntry {\n  UserCollection uc = User.list();\n} catch(IntercomException  ie) {\n  Error e = ie.getFirstError();\n  log.error(\"{}:{}\", e.getCode(), e.getMessage());\n}\n\n\nThe API will return an Error List for a failed request, which will contain one or more Error objects.\n\nError List Attributes\n\nEach error has the following attributes\n\nField\tDescription\ntype\tThe type is error.list\nerrors\tAn array of one or more error objects\nError Object Attributes\n\nEach Error Object has the following attributes\n\nField\tDescription\ncode\tA string indicating the kind of error, used to further qualify the HTTP response code\nmessage\tOptional. Human readable description of the error\nfield\tOptional. Used to identify a particular field or query parameter that was in error."
  },
  {
    "title": "detach_contact_from_conversation_request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/detach_contact_from_conversation_request/",
    "html": "The id of the admin who is performing the action."
  },
  {
    "title": "Data Export CSV",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/data_export_csv/",
    "html": "A CSV output file"
  },
  {
    "title": "Deleted Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/deleted_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Deleted Company Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/deleted_company_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Error",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/error/",
    "html": "The API will return an Error List for a failed request, which will contain one or more Error objects."
  },
  {
    "title": "Deleted Collection Object",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/deleted_collection_object/",
    "html": "Response returned when an object is deleted"
  },
  {
    "title": "Data Event Summary Item",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/data_event_summary_item/",
    "html": "This will return a summary of a data event for the App."
  },
  {
    "title": "Data Event Summary",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/data_event_summary/",
    "html": "This will return a summary of data events for the App."
  },
  {
    "title": "Data Event List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/data_event_list/",
    "html": "This will return a list of data events for the App."
  },
  {
    "title": "Data Attribute List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/data_attribute_list/",
    "html": "A list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Custom Object Instance",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/custom_object_instance/",
    "html": "An instance of a Custom Object Type."
  },
  {
    "title": "Custom Attributes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/custom_attributes/",
    "html": "An object containing the different custom attributes associated to the conversation as key-value pairs. For relationship attributes the value will be a list of custom object instance models."
  },
  {
    "title": "Cursor based pages",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/cursor_pages/",
    "html": "Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data. A \"cursor\" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or \"pages\" as needed."
  },
  {
    "title": "Create Ticket Type Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_ticket_type_request/",
    "html": "The request payload for creating a ticket type. You can copy the icon property for your ticket type from Twemoji Cheatsheet"
  },
  {
    "title": "Create Ticket Type Attribute Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_ticket_type_attribute_request/",
    "html": "You can create a Ticket Type Attribute"
  },
  {
    "title": "Create Ticket Reply Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_ticket_reply_with_comment_request/",
    "html": "You can create a reply on a ticket."
  },
  {
    "title": "Create Ticket Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_ticket_request/",
    "html": "You can create a Ticket"
  },
  {
    "title": "Create or Update Tag Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_or_update_tag_request/",
    "html": "You can create or update an existing tag."
  },
  {
    "title": "Create Message Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_message_request/",
    "html": "You can create a message"
  },
  {
    "title": "Create Data Export Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_data_exports_request/",
    "html": "Request for creating a data export"
  },
  {
    "title": "Create Data Event Summaries Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_data_event_summaries_request/",
    "html": "You can send a list of event summaries for a user. Each event summary should contain the event name, the time the event occurred, and the number of times the event occurred. The event name should be a past tense \"verb-noun\" combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction#section-avatar-object",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Create Data Event Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_data_event_request/",
    "html": "The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example updated-plan."
  },
  {
    "title": "Create Contact Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_contact_request/",
    "html": "Payload to create a contact"
  },
  {
    "title": "Create Conversation Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_conversation_request/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Create Article Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_article_request/",
    "html": "You can create an Article"
  },
  {
    "title": "Convert Visitor Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/convert_visitor_request/",
    "html": "You can merge a Visitor to a Contact of role type lead or user."
  },
  {
    "title": "Convert Ticket Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/convert_conversation_to_ticket_request/",
    "html": "You can convert a Conversation to a Ticket"
  },
  {
    "title": "Create Collection Request Payload",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/create_collection_request/",
    "html": "You can create a collection"
  },
  {
    "title": "Conversation source",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_source/",
    "html": "The Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated."
  },
  {
    "title": "Conversation Rating",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_rating/",
    "html": "The Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation."
  },
  {
    "title": "Conversation statistics",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_statistics/",
    "html": "A Statistics object containing all information required for reporting, with timestamps and calculated metrics."
  },
  {
    "title": "Conversation teammates",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_teammates/",
    "html": "The list of teammates who participated in the conversation (wrote at least one conversation part)."
  },
  {
    "title": "Conversation Part",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_part/",
    "html": "A Conversation Part represents a message in the conversation."
  },
  {
    "title": "Conversation part author",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_part_author/",
    "html": "The object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams. For Twitter, this will be blank."
  },
  {
    "title": "Conversation Parts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_parts/",
    "html": "A list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts."
  },
  {
    "title": "Contact Unarchived",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_unarchived/",
    "html": "unarchived contact object"
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_contacts/",
    "html": "The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature."
  },
  {
    "title": "Conversation List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_list/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "First contact reply",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/conversation_first_contact_reply/",
    "html": "An object containing information on the first users message. For a contact initiated message this will represent the users original message."
  },
  {
    "title": "Contact Subscription Types",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_subscription_types/",
    "html": "An object containing Subscription Types meta data about the SubscriptionTypes that a contact has."
  },
  {
    "title": "Contact Tags",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_tags/",
    "html": "An object containing tags meta data about the tags that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Segments",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_segments/",
    "html": "A list of segments objects attached to a specific contact."
  },
  {
    "title": "User ID",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_reply_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their user_id"
  },
  {
    "title": "Intercom User ID",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_reply_intercom_user_id_request/",
    "html": "Payload of the request to reply on behalf of a contact using their intercom_user_id"
  },
  {
    "title": "Email",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_reply_email_request/",
    "html": "Payload of the request to reply on behalf of a contact using their email"
  },
  {
    "title": "Contact Reference",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_reference/",
    "html": "reference to contact object"
  },
  {
    "title": "Contact Location",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_location/",
    "html": "An object containing location meta data about a Intercom contact."
  },
  {
    "title": "Contact List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_list/",
    "html": "Contacts are your users in Intercom."
  },
  {
    "title": "Contact Deleted",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_deleted/",
    "html": "deleted contact object"
  },
  {
    "title": "Contact Attached Companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_attached_companies/",
    "html": "A list of Company Objects"
  },
  {
    "title": "Contact companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_companies/",
    "html": "An object containing companies meta data about the companies that a contact has. Up to 10 will be displayed here. Use the url to get more."
  },
  {
    "title": "Contact Archived",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/contact_archived/",
    "html": "archived contact object"
  },
  {
    "title": "Close Conversation Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/close_conversation_request/",
    "html": "Payload of the request to close a conversation"
  },
  {
    "title": "Company Scroll",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/company_scroll/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "App",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/app/",
    "html": "App is a workspace on Intercom"
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/assign_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "Article Statistics",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/article_statistics/",
    "html": "The statistics of an article."
  },
  {
    "title": "Company Attached Contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/company_attached_contacts/",
    "html": "A list of Contact Objects"
  },
  {
    "title": "Article Translated Content",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/article_translated_content/",
    "html": "The Translated Content of an Article. The keys are the locale codes and the values are the translated content of the article."
  },
  {
    "title": "Articles",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/article_list/",
    "html": "This will return a list of articles for the App."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/admin_with_app/",
    "html": "Admins are the teammate accounts that have access to a workspace"
  },
  {
    "title": "Collections",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/collection_list/",
    "html": "This will return a list of Collections for the App."
  },
  {
    "title": "Assign Conversation Request",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/attach_contact_to_conversation_request/",
    "html": "Payload of the request to assign a conversation"
  },
  {
    "title": "Company Attached Segments",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/company_attached_segments/",
    "html": "A list of Segment Objects"
  },
  {
    "title": "Article Content",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/article_content/",
    "html": "The Content of an Article."
  },
  {
    "title": "Admin Reply",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/admin_reply_conversation_request/",
    "html": "Payload of the request to reply on behalf of an admin"
  },
  {
    "title": "Admin Reply on ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/admin_reply_ticket_request/",
    "html": "Payload of the request to reply on behalf of an admin"
  },
  {
    "title": "Admin Priority Level",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/admin_priority_level/",
    "html": "Admin priority levels for the team"
  },
  {
    "title": "Admins",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/admin_list/",
    "html": "A list of admins associated with a given workspace."
  },
  {
    "title": "Convert a visitor",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Visitors/convertVisitor/",
    "html": "You can merge a Visitor to a Contact of role type lead or user.\n\n📘 What happens upon a visitor being converted?\n\nIf the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers."
  },
  {
    "title": "Addressable List",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/addressable_list/",
    "html": "A list used to access other resources from a parent model."
  },
  {
    "title": "Delete a visitor",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Visitors/deleteVisitor/",
    "html": "You can delete a single visitor."
  },
  {
    "title": "Retrieve a visitor with User ID",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Visitors/retrieveVisitorWithUserId/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Paginated Response",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/activity_log_list/",
    "html": "A paginated list of activity logs."
  },
  {
    "title": "Retrieve a visitor with ID",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Visitors/retrieveVisitor/",
    "html": "You can fetch the details of a single visitor."
  },
  {
    "title": "Create a ticket type",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Ticket-Types/createTicketType/",
    "html": "You can create a new ticket type.\n\n📘 Creating ticket types.\n\nEvery ticket type will be created with two default attributes: default_title and default_description. For the icon propery, use an emoji from Twemoji Cheatsheet"
  },
  {
    "title": "HTTP Responses",
    "url": "https://developers.intercom.com/docs/references/rest-api/errors/http-responses/",
    "html": "HTTP Responses\n\nThe API returns HTTP responses on each request to indicate the success or otherwise of API requests. The codes listed below are often used, and the API may use others. Note that 4xx and 5xx responses may be returned for any request and clients should cater for them.\n\nResponse Code\tDescription\n400\tBad Request -- General client error, possibly malformed data.\n401\tUnauthorized -- The API Key was not authorised (or no API Key was found).\n402\tPayment Required -- The API is not available on your current plan.\n403\tForbidden -- The request is not allowed.\n404\tNot Found -- The resource was not found.\n405\tMethod Not Allowed -- The resource does not accept the HTTP method.\n406\tNot Acceptable -- The resource cannot return the client's required content type.\n408\tRequest Timeout -- The server would not wait any longer for the client.\n409\tConflict - Multiple existing users match this email address - must be more specific using user_id\n415\tUnsupported Media Type - The server doesn't accept the submitted content-type.\n422\tUnprocessable Entity -- The data was well-formed but invalid.\n429\tToo Many Requests -- The client has reached or exceeded a rate limit, or the server is overloaded.\n500, 502, 503, 504\tServer errors - something went wrong with Intercom's servers.\n\nThese responses are most likely momentary operational errors (e.g. temporary unavailability), and, as a result, requests should be retried once."
  },
  {
    "title": "Remove tag from a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/detachTagFromTicket/",
    "html": "You can remove tag from a specific ticket. This will return a tag object for the tag that was removed from the ticket."
  },
  {
    "title": "Retrieve a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/getTicket/",
    "html": "You can fetch the details of a single ticket."
  },
  {
    "title": "Update an existing attribute for a ticket type",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Ticket-Type-Attributes/updateTicketTypeAttribute/",
    "html": "You can update an existing attribute for a ticket type."
  },
  {
    "title": "Ticket Part",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/ticket_part/",
    "html": "A Ticket Part represents a message in the ticket."
  },
  {
    "title": "Ticket Type",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/ticket_type/",
    "html": "A ticket type, used to define the data fields to be captured in a ticket."
  },
  {
    "title": "Retrieve a team",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Teams/retrieveTeam/",
    "html": "You can fetch the details of a single team, containing an array of admins that belong to this team."
  },
  {
    "title": "Contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/ticket_contacts/",
    "html": "The list of contacts affected by a ticket."
  },
  {
    "title": "List all teams",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Teams/listTeams/",
    "html": "This will return a list of team objects for the App."
  },
  {
    "title": "Add tag to a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/attachTagToTicket/",
    "html": "You can tag a specific ticket. This will return a tag object for the tag that was added to the ticket."
  },
  {
    "title": "Remove tag from a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/detachTagFromTicket/",
    "html": "You can remove tag from a specific ticket. This will return a tag object for the tag that was removed from the ticket."
  },
  {
    "title": "Delete tag",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/deleteTag/",
    "html": "You can delete the details of tags that are on the workspace by passing in the id."
  },
  {
    "title": "Create or update a tag, Tag or untag companies, Tag contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/createTag/",
    "html": "You can use this endpoint to perform the following operations:\n\n1. Create a new tag: You can create a new tag by passing in the tag name as specified in \"Create or Update Tag Request Payload\" described below.\n\n2. Update an existing tag: You can update an existing tag by passing the id of the tag as specified in \"Create or Update Tag Request Payload\" described below.\n\n3. Tag Companies: You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in \"Tag Company Request Payload\" described below. Also, if the tag doesn't exist then a new one will be created automatically.\n\n4. Untag Companies: You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in \"Untag Company Request Payload\" described below.\n\n5. Tag Multiple Users: You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in \"Tag Users Request Payload\" described below.\n\nEach operation will return a tag object."
  },
  {
    "title": "Find a specific tag",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/findTag/",
    "html": "You can fetch the details of tags that are on the workspace by their id. This will return a tag object."
  },
  {
    "title": "List subscription types",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Subscription-Types/listSubscriptionTypes/",
    "html": "You can list all subscription types. A list of subscription type objects will be returned."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Subscription-Types/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Subscription-Types/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "List all tags",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/listTags/",
    "html": "You can fetch a list of all tags for a given workspace."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Subscription-Types/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Retrieve a note",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Notes/retrieveNote/",
    "html": "You can fetch the details of a single note."
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Segments/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "List all segments",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Segments/listSegments/",
    "html": "You can fetch a list of all segments."
  },
  {
    "title": "Retrieve a segment",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Segments/retrieveSegment/",
    "html": "You can fetch the details of a single segment."
  },
  {
    "title": "List tags attached to a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/listTagsForAContact/",
    "html": "You can fetch a list of all tags that are attached to a specific contact."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Notes/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Notes/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "Retrieve a newsfeed",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/retrieveNewsfeed/",
    "html": "You can fetch the details of a single newsfeed"
  },
  {
    "title": "Make an API call",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/make-an-api-call/",
    "html": "Make an API call\n\nYou can use your Access Token to make your first call to our REST API. Here's a sample code snippet that you can run in your terminal to fetch a list of all the admins in your workspace:\n\n# Copy the cURL request below into your Terminal.\n# Replace **<INSERT_ACCESS_TOKEN_HERE>** with your Access Token.\n\n$ curl https://api.intercom.io/admins \\\n-H 'Authorization:Bearer <INSERT_ACCESS_TOKEN_HERE>' \\\n-H 'Accept: application/json'\n\n\nAlternatively, you can make the same API call directly from our API reference documentation.\n\nWe also have Postman collections that are auto generated from our Open API specification for the following Intercom API versions: 2.7, 2.8 and Unstable."
  },
  {
    "title": "Add tag to a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/attachTagToTicket/",
    "html": "You can tag a specific ticket. This will return a tag object for the tag that was added to the ticket."
  },
  {
    "title": "Create event summaries",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Events/dataEventSummaries/",
    "html": "Create event summaries for a user. Event summaries are used to track the number of times an event has occurred, the first time it occurred and the last time it occurred."
  },
  {
    "title": "Localize your Help Center",
    "url": "https://developers.intercom.com/docs/guides/help-center/localize-your-help-center/",
    "html": "Localize your Help Center\n\nThis tutorial will walk you through adding content in multiple languages to your Help Center. It assumes you already have at least one article that you wish to present in other languages, to serve your customers better. If you don't, follow this tutorial to create an article in English.\n\nWhat you'll need:\n\narticle_id for the article you'd like to localize\nHelp Center content written in an additional language (German in this tutorial)\nHelp Center that is set up to support multiple locales\n\nOnce you have that, adding a locale support takes one API call:\n\ncurl --request PUT \\\n     --url https://api.intercom.io/articles/<article_id> \\\n     --header 'Intercom-Version: 2.9' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"translated_content\": {\n    \"de\": {\n      \"type\": \"article_content\",\n      \"title\": \"So erstellen Sie einen Hilfeartikel\",\n      \"body\": \"Eine einfache Möglichkeit, einen Artikel zu erstellen, ist die Intercom API.\",\n      \"state\": \"published\"\n    },\n    \"type\": \"article_translated_content\"\n  }\n}\n'\n\n\nYou should now see the German article in your Help Center:\n\nIn case you decide to hide this translation from your Help Center at a later stage, update the state of the German locale from published to draft:\n\ncurl --request PUT \\\n     --url https://api.intercom.io/articles/<article_id> \\\n     --header 'Intercom-Version: 2.9' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"translated_content\": {\n    \"de\": {\n      \"type\": \"article_content\",\n      \"state\": \"draft\"\n    },\n    \"type\": \"article_translated_content\"\n  }\n}\n'\n\n\nThe German version of the article will be hidden from your Help Center, while the original will remain active. Both versions will still be available for editing from inside Intercom.\n\nNext steps\nLearn more about Articles as a product.\nExplore Articles API.\nExplore Collections and Sections API."
  },
  {
    "title": "What are News Items and Newsfeeds?",
    "url": "https://developers.intercom.com/docs/guides/news-center/",
    "html": "What are News Items and Newsfeeds?\n\nA News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers.\n\nA Newsfeed is a collection of news items, targeted to a specific audience. Newsfeeds currently cannot be edited through the API, please refer to this article to set up your newsfeeds in Intercom.\n\nHow can I interact with my News via the API?\n\nYou can create new News Items, as well as list and retrieve existing News Items and Newsfeeds.\n\nWhat's next?\nLearn more about how to set a Custom Domain for your Newsfeed."
  },
  {
    "title": "List all newsfeeds",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/listNewsfeeds/",
    "html": "You can fetch a list of all newsfeeds"
  },
  {
    "title": "List all data events",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Events/lisDataEvents/",
    "html": "🚧\n\nPlease note that you can only 'list' events that are less than 90 days old. Event counts and summaries will still include your events older than 90 days but you cannot 'list' these events individually if they are older than 90 days\n\nThe events belonging to a customer can be listed by sending a GET request to https://api.intercom.io/events with a user or lead identifier along with a type parameter. The identifier parameter can be one of user_id, email or intercom_user_id. The type parameter value must be user.\n\nhttps://api.intercom.io/events?type=user&user_id={user_id}\nhttps://api.intercom.io/events?type=user&email={email}\nhttps://api.intercom.io/events?type=user&intercom_user_id={id} (this call can be used to list leads)\n\nThe email parameter value should be url encoded when sending.\n\nYou can optionally define the result page size as well with the per_page parameter."
  },
  {
    "title": "List all live newsfeed items",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/listLiveNewsfeedItems/",
    "html": "You can fetch a list of all news items that are live on a given newsfeed"
  },
  {
    "title": "Delete a news item",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/deleteNewsItem/",
    "html": "You can delete a single news item."
  },
  {
    "title": "Submit a data event",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Events/createDataEvent/",
    "html": "You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a Content-Type of application/json.\n\nWhen using the JavaScript API, adding the code to your app makes the Events API available. Once added, you can submit an event using the trackEvent method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nWith the Ruby client you pass a hash describing the event to Intercom::Event.create, or call the track_user method directly on the current user object (e.g. user.track_event).\n\nType\tDescription\tExample\nString\tThe value is a JSON String\t\"source\":\"desktop\"\nNumber\tThe value is a JSON Number\t\"load\": 3.67\nDate\tThe key ends with the String _date and the value is a Unix timestamp, assumed to be in the UTC timezone.\t\"contact_date\": 1392036272\nLink\tThe value is a HTTP or HTTPS URI.\t\"article\": \"https://example.org/ab1de.html\"\nRich Link\tThe value is a JSON object that contains url and value keys.\t\"article\": {\"url\": \"https://example.org/ab1de.html\", \"value\":\"the dude abides\"}\nMonetary Amount\tThe value is a JSON object that contains amount and currency keys. The amount key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.\t\"price\": {\"amount\": 34999, \"currency\": \"eur\"}\n\nNB: For the JSON object types, please note that we do not currently support nested JSON structure.\n\n🚧 Lead Events\n\nWhen submitting events for Leads, you will need to specify the Lead's id.\n\n📘 Metadata behaviour\n\nWe currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.\nIt is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.\nThere might be up to 24 hrs delay when you send a new metadata for an existing event.\n\n📘 Event de-duplication\n\nThe API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is strongly recommended to send a second granularity Unix timestamp in the created_at field.\n\nDuplicated events are responded to using the normal 202 Accepted code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.\n\nHTTP API Responses\nSuccessful responses to submitted events return 202 Accepted with an empty body.\nUnauthorised access will be rejected with a 401 Unauthorized or 403 Forbidden response code.\nEvents sent about users that cannot be found will return a 404 Not Found.\nEvent lists containing duplicate events will have those duplicates ignored.\nServer errors will return a 500 response code and may contain an error message in the body."
  },
  {
    "title": "Retrieve a news item",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/retrieveNewsItem/",
    "html": "You can fetch the details of a single news item."
  },
  {
    "title": "Create a news item",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/createNewsItem/",
    "html": "You can create a news item"
  },
  {
    "title": "Update a news item",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/updateNewsItem/",
    "html": "The unique identifier for the news item which is given by Intercom."
  },
  {
    "title": "List all Help Centers",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/listHelpCenters/",
    "html": "You can list all Help Centers by making a GET request to https://api.intercom.io/help_center/help_centers."
  },
  {
    "title": "Newsfeed",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/newsfeed/",
    "html": "A newsfeed is a collection of news items, targeted to a specific audience.\n\nNewsfeeds currently cannot be edited through the API, please refer to this article to set up your newsfeeds in Intercom."
  },
  {
    "title": "Update a collection",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/updateCollection/",
    "html": "You can update the details of a single collection by making a PUT request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Newsfeed Assignment",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/newsfeed_assignment/",
    "html": "Assigns a news item to a newsfeed."
  },
  {
    "title": "Retrieve a collection",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/retrieveCollection/",
    "html": "You can fetch the details of a single collection by making a GET request to https://api.intercom.io/help_center/collections/<id>."
  },
  {
    "title": "List all collections",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/listAllCollections/",
    "html": "You can fetch a list of all collections by making a GET request to https://api.intercom.io/help_center/collections.\n\n📘 How are the collections sorted and ordered?\n\nCollections will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated collections first."
  },
  {
    "title": "Create a message",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Messages/createMessage/",
    "html": "You can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.\n\n🚧 Sending for visitors\n\nThere can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.\n\nThis will return the Message model that has been created.\n\n🚧 Retrieving Associated Conversations\n\nAs this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message."
  },
  {
    "title": "Delete a collection",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/deleteCollection/",
    "html": "You can delete a single collection by making a DELETE request to https://api.intercom.io/collections/<id>."
  },
  {
    "title": "Retrieve a Help Center",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/retrieveHelpCenter/",
    "html": "You can fetch the details of a single Help Center by making a GET request to https://api.intercom.io/help_center/help_center/<id>."
  },
  {
    "title": "Create a collection",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/createCollection/",
    "html": "You can create a new collection by making a POST request to https://api.intercom.io/help_center/collections."
  },
  {
    "title": "Collection",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/collection/",
    "html": "Collections are top level containers for Articles within the Help Center."
  },
  {
    "title": "Help Centers",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/help_center_list/",
    "html": "A list of Help Centers belonging to the App"
  },
  {
    "title": "Download content data export",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Export/downloadDataExport/",
    "html": "When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message data will be streamed continuously back down to you in a gzipped CSV format.\n\n📘 Octet header required\n\nYou will have to specify the header Accept: application/octet-stream when hitting this endpoint."
  },
  {
    "title": "Cancel content data export",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Export/cancelDataExport/",
    "html": "You can cancel your job"
  },
  {
    "title": "Show content data export",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Export/getDataExport/",
    "html": "You can view the status of your job by sending a GET request to the URL https://api.intercom.io/export/content/data/{job_identifier} - the {job_identifier} is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.\n\n🚧 Jobs expire after two days All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available."
  },
  {
    "title": "Create contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/CreateContact/",
    "html": "You can create a new contact (ie. user or lead)."
  },
  {
    "title": "Search contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/SearchContacts/",
    "html": "You can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.\n\nTo search for contacts, you need to send a POST request to https://api.intercom.io/contacts/search. This will accept a query object in the body which will define your filters in order to search for contacts.\n\n🚧 Why is there a delay when creating contacts and searching for them?\n\nIf a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\n\n🚧 Searching for Timestamp Fields\n\nAll timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second. For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards. If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM). This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.\n\nAccepted Fields\n\nMost key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\nrole\tString\nAccepts user or lead\nname\tString\navatar\tString\nowner_id\tInteger\nemail\tString\nphone\tString\nformatted_phone\tString\nexternal_id\tString\ncreated_at\tDate (UNIX Timestamp)\nsigned_up_at\tDate (UNIX Timestamp)\nupdated_at\tDate (UNIX Timestamp)\nlast_seen_at\tDate (UNIX Timestamp)\nlast_contacted_at\tDate (UNIX Timestamp)\nlast_replied_at\tDate (UNIX Timestamp)\nlast_email_opened_at\tDate (UNIX Timestamp)\nlast_email_clicked_at\tDate (UNIX Timestamp)\nlanguage_override\tString\nbrowser\tString\nbrowser_language\tString\nos\tString\nlocation.country\tString\nlocation.region\tString\nlocation.city\tString\nunsubscribed_from_emails\tBoolean\nmarked_email_as_spam\tBoolean\nhas_hard_bounced\tBoolean\nios_last_seen_at\tDate (UNIX Timestamp)\nios_app_version\tString\nios_device\tString\nios_app_device\tString\nios_os_version\tString\nios_app_name\tString\nios_sdk_version\tString\nandroid_last_seen_at\tDate (UNIX Timestamp)\nandroid_app_version\tString\nandroid_device\tString\nandroid_app_name\tString\nandoid_sdk_version\tString\nsegment_id\tString\ntag_id\tString\ncustom_attributes.{attribute_name}\tString"
  },
  {
    "title": "Create content data export",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Export/createDataExport/",
    "html": "To create your export job, you need to send a POST request to the export endpoint https://api.intercom.io/export/content/data.\n\nThe only parameters you need to provide are the range of dates that you want exported.\n\n🚧 Limit of one active job\n\nYou can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.\n\n❗️ Updated_at not included\n\nIt should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.\n\n📘 Date ranges are inclusive\n\nRequesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99."
  },
  {
    "title": "Merge a lead and a user",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/MergeContact/",
    "html": "You can merge a contact with a role of lead into a contact with a role of user."
  },
  {
    "title": "Unarchive contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/UnarchiveContact/",
    "html": "You can unarchive a single contact."
  },
  {
    "title": "List all contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/ListContacts/",
    "html": "You can fetch a list of all contacts."
  },
  {
    "title": "Archive contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/ArchiveContact/",
    "html": "You can archive a single contact."
  },
  {
    "title": "Delete a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/DeleteContact/",
    "html": "You can delete a single contact."
  },
  {
    "title": "Update a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/UpdateContact/",
    "html": "You can update an existing contact (ie. user or lead)."
  },
  {
    "title": "Remove tag from a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/detachTagFromContact/",
    "html": "You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact."
  },
  {
    "title": "Get a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/ShowContact/",
    "html": "You can fetch the details of a single contact."
  },
  {
    "title": "Add tag to a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/attachTagToContact/",
    "html": "You can tag a specific contact. This will return a tag object for the tag that was added to the contact."
  },
  {
    "title": "List tags attached to a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/listTagsForAContact/",
    "html": "You can fetch a list of all tags that are attached to a specific contact."
  },
  {
    "title": "Remove subscription from a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/detachSubscriptionTypeToContact/",
    "html": "You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact."
  },
  {
    "title": "Add subscription to a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/attachSubscriptionTypeToContact/",
    "html": "You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:\n\n1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.\n\n2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.\n\nThis will return a subscription type model for the subscription type that was added to the contact."
  },
  {
    "title": "List attached segments for contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/listSegmentsForAContact/",
    "html": "You can fetch a list of segments that are associated to a contact."
  },
  {
    "title": "List subscriptions for a contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/listSubscriptionsForAContact/",
    "html": "You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.\n\nThe data property will show a combined list of:\n\n1.Opt-out subscription types that the user has opted-out from. 2.Opt-in subscription types that the user has opted-in to receiving."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Redact a conversation part",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/redactConversation/",
    "html": "You can redact a conversation part or the source message of a conversation (as seen in the source object).\n\n📘 Which parts and source messages can I redact?\n\nIf you are redacting a conversation part, it must have a body. If you are redacting a source message, it must have been created by a contact. We will return a conversation_part_not_redactable error if these criteria are not met."
  },
  {
    "title": "Create a note",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/createNote/",
    "html": "You can add a note to a single contact."
  },
  {
    "title": "List all notes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/listNotes/",
    "html": "You can fetch a list of notes that are associated to a contact."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Update a data attribute",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Attributes/updateDataAttribute/",
    "html": "You can update a data attribute.\n\n🚧 Updating the data type is not possible\n\nIt is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead."
  },
  {
    "title": "Detach a contact from a group conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/detachContactFromConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "Create a data attribute",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Attributes/createDataAttribute/",
    "html": "You can create a data attributes for a contact or a company."
  },
  {
    "title": "List all data attributes",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Attributes/lisDataAttributes/",
    "html": "You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations."
  },
  {
    "title": "Attach a contact to a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/attachContactToConversation/",
    "html": "You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.\n\n🚧 Note about contacts without an email\n\nIf you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with role set to lead."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Run Assignment Rules on a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/autoAssignConversation/",
    "html": "You can let a conversation be automatically assigned following assignment rules."
  },
  {
    "title": "Manage a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/manageConversation/",
    "html": "You can close a conversation. You can snooze a conversation to reopen on a future date. You can open a conversation which is snoozed or closed. You can assign a conversation to an admin and/or team."
  },
  {
    "title": "Reply to a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/replyConversation/",
    "html": "You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins."
  },
  {
    "title": "Search conversations",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/searchConversations/",
    "html": "You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiple's there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foorbar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\nsource.type\tString\nsource.id\tString\nsource.delivered_as\tString\nsource.subject\tString\nsource.body\tString\nsource.author.id\tString\nsource.author.type\tString\nsource.author.name\tString\nsource.author.email\tString\nsource.url\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nchannel_initiated\tString\nAccepted fields are conversation, push, facebook, twitter and email.\nopen\tBoolean\nread\tBoolean\nstate\tString\nwaiting_since\tDate (UNIX timestamp)\nsnoozed_until\tDate (UNIX timestamp)\ntag_ids\tString\npriority\tString\nstatistics.time_to_assignment\tInteger\nstatistics.time_to_admin_reply\tInteger\nstatistics.time_to_first_close\tInteger\nstatistics.time_to_last_close\tInteger\nstatistics.median_time_to_reply\tInteger\nstatistics.first_contact_reply_at\tDate (UNIX timestamp)\nstatistics.first_assignment_at\tDate (UNIX timestamp)\nstatistics.first_admin_reply_at\tDate (UNIX timestamp)\nstatistics.first_close_at\tDate (UNIX timestamp)\nstatistics.last_assignment_at\tDate (UNIX timestamp)\nstatistics.last_assignment_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_contact_reply_at\tDate (UNIX timestamp)\nstatistics.last_admin_reply_at\tDate (UNIX timestamp)\nstatistics.last_close_at\tDate (UNIX timestamp)\nstatistics.last_closed_by_id\tString\nstatistics.count_reopens\tInteger\nstatistics.count_assignments\tInteger\nstatistics.count_conversation_parts\tInteger\nconversation_rating.requested_at\tDate (UNIX timestamp)\nconversation_rating.replied_at\tDate (UNIX timestamp)\nconversation_rating.score\tInteger\nconversation_rating.remark\tString\nconversation_rating.contact_id\tString\nconversation_rating.admin_d\tString"
  },
  {
    "title": "Update a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/updateConversation/",
    "html": "You can update an existing conversation.\n\n📘\n\nIf you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters."
  },
  {
    "title": "Add tag to a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/attachTagToConversation/",
    "html": "You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation."
  },
  {
    "title": "Creates a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/createConversation/",
    "html": "You can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.\n\n📘 Sending for visitors\n\nYou can also send a message from a visitor by specifying their user_id or id value in the from field, along with a type field value of contact. This visitor will be automatically converted to a contact with a lead role once the conversation is created.\n\nThis will return the Message model that has been created."
  },
  {
    "title": "Retrieve a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/retrieveConversation/",
    "html": "You can fetch the details of a single conversation.\n\nThis will return a single Conversation model with all its conversation parts.\n\n🚧 Hard limit of 500 parts\n\nThe maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.\n\n📘 Bot name in conversation parts\n\nFor conversation parts generated by a bot, bot name will depend on the following:\n\nCustomers that never turned on AI answers will have operator as the bot name\nCustomers that have turned on AI answers at some point will have fin as the bot name"
  },
  {
    "title": "Retrieve an article",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/retrieveArticle/",
    "html": "You can fetch the details of a single article by making a GET request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "List all conversations",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/listConversations/",
    "html": "You can fetch a list of all conversations.\n\nYou can optionally request the result page size and the cursor to start after to fetch the result"
  },
  {
    "title": "Remove tag from a conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/detachTagFromConversation/",
    "html": "You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation."
  },
  {
    "title": "Update an article",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/updateArticle/",
    "html": "You can update the details of a single article by making a PUT request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Delete an article",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/deleteArticle/",
    "html": "You can delete a single article by making a DELETE request to https://api.intercom.io/articles/<id>."
  },
  {
    "title": "Create an article",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/createArticle/",
    "html": "You can create a new article by making a POST request to https://api.intercom.io/articles."
  },
  {
    "title": "Article Search Response",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/article_search_response/",
    "html": "The results of an Article search"
  },
  {
    "title": "List all articles",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/listArticles/",
    "html": "You can fetch a list of all articles by making a GET request to https://api.intercom.io/articles.\n\n📘 How are the articles sorted and ordered?\n\nArticles will be returned in descending order on the updated_at attribute. This means if you need to iterate through results then we'll show the most recently updated articles first."
  },
  {
    "title": "List attached companies for contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/listCompaniesForAContact/",
    "html": "You can fetch a list of companies that are associated to a contact."
  },
  {
    "title": "Detach a contact from a company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/detachContactFromACompany/",
    "html": "You can detach a company from a single contact."
  },
  {
    "title": "Article Search Highlights",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/article_search_highlights/",
    "html": "The highlighted results of an Article search. In the examples provided my search query is always \"my query\"."
  },
  {
    "title": "List all companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/listAllCompanies/",
    "html": "You can list companies. The company list is sorted by the last_request_at field and by default is ordered descending, most recently requested first.\n\nNote that the API does not include companies who have no associated users in list responses.\n\nWhen using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the Scroll API."
  },
  {
    "title": "Attach a Contact to a Company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/attachContactToACompany/",
    "html": "You can attach a company to a single contact."
  },
  {
    "title": "Scroll over all companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/scrollOverAllCompanies/",
    "html": "The list all companies functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.\n\nEach app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.\nIf the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail\nIf the end of the scroll is reached, \"companies\" will be empty and the scroll parameter will expire\n\n📘 Scroll Parameter\n\nYou can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.\n\n❗️ Scroll network timeouts\n\nSince scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.\n\nWhen this occurs you will see a HTTP 500 error with the following message: \"Request failed due to an internal network error. Please restart the scroll operation.\""
  },
  {
    "title": "List attached segments for companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/ListAttachedSegmentsForCompanies/",
    "html": "You can fetch a list of all segments that belong to a company."
  },
  {
    "title": "List attached contacts",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/ListAttachedContacts/",
    "html": "You can fetch a list of all contacts that belong to a company."
  },
  {
    "title": "Delete a company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/deleteCompany/",
    "html": "You can delete a single company."
  },
  {
    "title": "Update a company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/UpdateCompany/",
    "html": "You can update a single company"
  },
  {
    "title": "Create or Update a company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/createOrUpdateCompany/",
    "html": "You can create or update a company.\n\nCompanies will be only visible in Intercom when there is at least one associated user.\n\nCompanies are looked up via company_id in a POST request, if not found via company_id, the new company will be created, if found, that company will be updated."
  },
  {
    "title": "Retrieve an admin",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/retrieveAdmin/",
    "html": "You can retrieve the details of a single admin."
  },
  {
    "title": "Retrieve companies",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/retrieveCompany/",
    "html": "You can fetch a single company by passing in company_id or name.\n\nhttps://api.intercom.io/companies?name={name}\n\nhttps://api.intercom.io/companies?company_id={company_id}\n\nYou can fetch all companies and filter by segment_id or tag_id as a query parameter.\n\nhttps://api.intercom.io/companies?tag_id={tag_id}\n\nhttps://api.intercom.io/companies?segment_id={segment_id}"
  },
  {
    "title": "List all admins",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/listAdmins/",
    "html": "You can fetch a list of admins for a given workspace."
  },
  {
    "title": "Retrieve a company by ID",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/RetrieveACompanyById/",
    "html": "You can fetch a single company."
  },
  {
    "title": "List all activity logs",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/listActivityLogs/",
    "html": "You can get a log of activities by all admins in an app."
  },
  {
    "title": "Identify an admin",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/identifyAdmin/",
    "html": "You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).\n\n🚧 Single Sign On\n\nIf you are building a custom \"Log in with Intercom\" flow for your site, and you call the /me endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk."
  },
  {
    "title": "Set an admin to away",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/setAwayAdmin/",
    "html": "You can set an Admin as away for the Inbox."
  },
  {
    "title": "Webhook Topics",
    "url": "https://developers.intercom.com/docs/references/webhooks/webhook-models/",
    "html": "Webhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.activity_log_event.created\tAdmin\tRun each time a new admin activity log is created\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.deleted\tCompany\tCompany deletions\tRead users and companies\nRead one user and one company\ncompany.updated\tCompany\tCompany being updated\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.subscribed\tSubscription\tContacts subscribing to email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tSubscription\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.open.assigned\tConversation\tAdmin open conversation assignments\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nTicket topics\nTopic\tObject\tEvent description\tPermissions\nticket.created\tTicket\tTicket created\tRead tickets\nticket.state.updated\tTicket\tTicket state updated\tRead tickets\nticket.note.created\tTicket\tTicket note created\tRead tickets\nticket.admin.assigned\tTicket\tTicket admin assigned\tRead tickets\nticket.team.assigned\tTicket\tTicket team assigned\tRead tickets\nticket.contact.attached\tTicket\tTicket contact attached\tRead tickets\nticket.contact.detached\tTicket\tTicket contact detached\tRead tickets\nticket.attribute.updated\tTicket\tTicket attribute updated\tRead tickets\nticket.admin.replied\tTicket\tTicket admin replied\tRead tickets\nticket.contact.replied\tTicket\tTicket contact replied\tRead tickets\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopics\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Use Pagination and Sorting",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination-sorting-search/",
    "html": "Use Pagination and Sorting\n\nWhen you use any Search resource, we require you to make a POST request that will not accept the common query params of GET requests. Therefore, the structure here has slight variations to our cursor-based approach.\n\nPagination\nExample Request Body with Pagination for first page\n{\n \"query\":  {\n    \"field\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"alex\"\n  },\n  \"pagination\": {\n    \"per_page\": 5,\n  } \n}\n\n\nYou can specify how many items per page you want to fetch.\n\nDEFAULT PAGINATION AMOUNT\n\nIf pagination is not provided, the request defaults to 50 items.\n\nExample Initial Pages Object\n{\n  \"pages\": {\n  \"type\": \"pages\",\n  \"next\": {\n    \"page\": 4,\n    \"starting_after\": \"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\nIncfQLD3ouPkZlCwJ86F\\n\"\n  },\n  \"page\": 3,\n  \"per_page\": 5,\n  \"total_pages\": 10\n  }\n}\n\n\nIn order to iterate through pages, you must parse the query response. A query with multiple response pages will include a next key in the pages hash. When a next value is provided, the starting_after value must be sent back in a new request to iterate to the next page.\n\n🚧 Paginating through all results\n\nThis method of pagination is used to iterate through a result set until all results have been fetched, not to directly go to page X of the results. This is not possible.\n\nExample Request Body with Pagination for next page\n{\n \"query\":  {\n    \"field\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"alex\"\n  },\n  \"pagination\": {\n    \"per_page\": 5,\n    \"starting_after\": \"1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\nIncfQLD3ouPkZlCwJ86F\\n\"\n  } \n}\n\n\n🚧 Warning about search context state\n\nThe starting_after context is stateless. Consequently, if items are updated between 2 paginated queries, this can lead to duplicate or missed records.\n\nFor example, if a query is sorting results by number of sessions and an item is updated from 1 session to 2 sessions during the pagination, they may be listed on page 1 of the results, but also on page 2.\n\nSorting\nExample Request Body with Sort\n{\n \"query\":  {\n    \"field\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"alex\"\n  },\n  \"sort\": {\n    \"field\": \"name\",\n    \"order\": \"ascending\"\n  } \n}\n\n\nThe Search resources can also sort query results by using the following parameters within the sort object:\n\nParameter\tRequired?\tDescription\nfield\tYes\tAny searchable attribute (available on the Simple Query \"Allowed fields\").\norder\tNo\tEither \"ascending\" or \"descending\" - default to \"descending\" if none is provided.\nDEFAULT SORT ORDER\n\nIf no sort pattern is provided, the query will use the default sorting parameter \"last_request_at\" with a descending value (e.g. listing most recent active items first)."
  },
  {
    "title": "Update a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/updateTicket/#!t=request&path=is_shared",
    "html": "You can update a ticket."
  },
  {
    "title": "Convert a conversation to a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/convertConversationToTicket/",
    "html": "You can convert a conversation to a ticket."
  },
  {
    "title": "Ticket",
    "url": "https://developers.intercom.com/docs/references/unstable/rest-api/api.intercom.io/Tickets/ticket/",
    "html": "Tickets are how you track requests from your users."
  },
  {
    "title": "Reply to a ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/replyTicket/",
    "html": "You can reply to a ticket with a message from an admin or on behalf of a contact, or with a note for admins."
  },
  {
    "title": "Search tickets",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/searchTickets/",
    "html": "You can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.\n\nTo search for tickets, you send a POST request to https://api.intercom.io/tickets/search. This will accept a query object in the body which will define your filters.\n\n🚧 Nesting & Limitations\n\nYou can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). There are some limitations to the amount of multiples there can be:\n\nThere's a limit of max 2 nested filters\nThere's a limit of max 15 filters for each AND or OR group\nAccepted Fields\n\nMost keys listed as part of the Ticket model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as created_at accepts a date, the value cannot be a string such as \"foobar\").\n\nField\tType\nid\tString\ncreated_at\tDate (UNIX timestamp)\nupdated_at\tDate (UNIX timestamp)\ntitle\tString\ndescription\tString\ncategory\tString\nticket_type_id\tString\ncontact_ids\tString\nteammate_ids\tString\nadmin_assignee_id\tString\nteam_assignee_id\tString\nopen\tBoolean\nstate\tString\nsnoozed_until\tDate (UNIX timestamp)\nticket_attribute.{id}\tString or Boolean or Date (UNIX timestamp) or Float or Integer"
  },
  {
    "title": "Search for articles",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/searchArticles/",
    "html": "You can search for articles by making a GET request to https://api.intercom.io/articles/search."
  },
  {
    "title": "Webhook Topics",
    "url": "https://developers.intercom.com/docs/references/webhooks/webhook-models/",
    "html": "Webhook Topics\n\nYou can subscribe to the following Webhook topics, and you will receive notifications on your endpoint URL when an event occurs. The 'Object' column shows the Intercom object related to the event sent as part of the notification.\n\nEach Webhook topic is associated with one or more permissions. When you set up a subscription to a particular topic, you will need to select the appropriate permissions to be able to receive a notification for that topic.\n\n🚧 Multiple permissions\n\nSome topics are associated with multiple permissions. In these cases, you don't need to select all these permissions to subscribe to that topic.\n\nAdmin topics\nTopic\tObject\tEvent description\tPermissions\nadmin.added_to_workspace\tAdmin\tAn Admin being added to workspace\tRead admins\nadmin.away_mode_updated\tAdmin\tAdmin away mode updates\tRead admins\nadmin.activity_log_event.created\tAdmin\tRun each time a new admin activity log is created\tRead admins\nadmin.removed_from_workspace\tAdmin\tAn Admin being removed from a workspace\tRead admins\nadmin.logged_in\tAdmin\tAn Admin logging into a workspace\tRead admins\nadmin.logged_out\tAdmin\tAn Admin manually logging out of Intercom in the current workspace or when the Admin's session expires after signing in through SAML SSO\tRead admins\nCompany topics\nTopic\tObject\tEvent description\tPermissions\ncompany.created\tCompany\tCompany creations\tRead users and companies\nRead one user and one company\ncompany.deleted\tCompany\tCompany deletions\tRead users and companies\nRead one user and one company\ncompany.updated\tCompany\tCompany being updated\tRead users and companies\nRead one user and one company\ncompany.contact.attached\tCompany, Contact\tCompany attached to a Contact\tRead users and companies, Read one user and one company\ncompany.contact.detached\tCompany, Contact\tCompany detached from a Contact\tRead users and companies, Read one user and one company\nContact topics\nTopic\tObject\tEvent description\tPermissions\ncontact.archived\tContact\tContacts archived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.deleted\tContact\tContacts deleted\tRead users and companies\nRead one user and one company\ncontact.email.updated\tContact\tA Contact email address is updated\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.added_email\tContact\tAn email address is added to a Contact\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.created\tContact\tContact creations\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.signed_up\tContact\tContacts converting from Leads to Users\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.created\tContact Tag\tContacts being tagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.tag.deleted\tContact Tag\tContacts being untagged (Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.lead.updated\tContact\tContacts being updated\n(Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.merged\tContact\tContacts being merged\n(User and Lead)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.subscribed\tSubscription\tContacts subscribing to email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unarchive\tContact\tContacts unarchived\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.unsubscribed\tSubscription\tContacts unsubscribing from email\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.created\tContact\tContact creations\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.created\tContact Tag\tContacts being tagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.tag.deleted\tContact Tag\tContacts being untagged\n(User)\tRead users and companies\nRead and write users\nRead one user and one company\ncontact.user.updated\tContact\tContact updated (User)\tRead users and companies, Read and write users,\nRead one user and one company\nConversation topics\nTopic\tObject\tEvent description\tPermissions\nconversation.admin.assigned\tConversation\tAdmin conversation assignments\tRead conversations\nconversation.admin.closed\tConversation\tAdmin conversation closed\tRead conversations\nconversation.admin.noted\tConversation\tAdmin conversation notes\tRead conversations\nconversation.admin.open.assigned\tConversation\tAdmin open conversation assignments\tRead conversations\nconversation.admin.opened\tConversation\tAdmin conversation opens\tRead conversations\nconversation.admin.replied\tConversation\tAdmin conversation replies\tRead conversations\nconversation.admin.single.created\tConversation\tAdmin initiated 1:1 conversations\tRead conversations\nconversation.admin.snoozed\tConversation\tAdmin conversation snoozes\tRead conversations\nconversation.admin.unsnoozed\tConversation\tAdmin conversation unsnoozes\tRead conversations\nconversation.deleted\tConversation\tConversation deleted\tRead conversations\nconversation_part.redacted\tConversation Part\tConversation parts being deleted\tRead conversations\nconversation_part.tag.created\tConversation Part\tConversation parts being tagged\tRead conversations\nconversation.priority.updated\tConversation\tConversation priority updated\tRead conversations\nconversation.rating.added\tConversation\tConversations getting a rating\tRead conversations\nconversation.read\tConversation\tContacts reading conversations\n(User and Lead)\t\nconversation.user.created\tConversation\tContact initiated conversations\n(User and Lead)\tRead conversations\nconversation.user.replied\tConversation\tContact conversation replies\n(Visitor, Lead and User)\tRead conversations\nconversation.contact.attached\tConversation, Contact\tContact attached to a conversation\tRead conversations\nconversation.contact.detached\tConversation, Contact\tContact detached from a conversation\tRead conversations\nEvent topics\nTopic\tObject\tEvent description\tPermissions\nevent.created\tEvent\tEvents created\tRead events\nTicket topics\nTopic\tObject\tEvent description\tPermissions\nticket.created\tTicket\tTicket created\tRead tickets\nticket.state.updated\tTicket\tTicket state updated\tRead tickets\nticket.note.created\tTicket\tTicket note created\tRead tickets\nticket.admin.assigned\tTicket\tTicket admin assigned\tRead tickets\nticket.team.assigned\tTicket\tTicket team assigned\tRead tickets\nticket.contact.attached\tTicket\tTicket contact attached\tRead tickets\nticket.contact.detached\tTicket\tTicket contact detached\tRead tickets\nticket.attribute.updated\tTicket\tTicket attribute updated\tRead tickets\nticket.admin.replied\tTicket\tTicket admin replied\tRead tickets\nticket.contact.replied\tTicket\tTicket contact replied\tRead tickets\nSubscription topics\nTopics\tObject\tEvent description\tPermissions\ngranular.unsubscribe\tSubscription\tA User unsubscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\ngranular.subscribe\tSubscription\tA User subscribes from a message subscription type\tRead and list users and companies\nRead and write users\nRead one user and one company\nVisitor topics\nTopics\tObject\tEvent description\tPermissions\nvisitor.signed_up\tVisitor\tContacts converting from Visitors to Users\tRead users and companies\nRead and write users\nRead one user and one company\nPing\nTopics\tObject\tEvent description\nping\tPing\tSent when a post to the subscription's ping resource is received or periodically by Intercom. Ping is always subscribed to.\nContent stat topics\nTopics\tObject\tEvent description\tPermissions\ncontent_stat.banner\tContent Stat\tBanner message events:\n- receipt (Banner displayed)\n- goal_success\n- click\n- collected_email\n- reaction\tRead content data\ncontent_stat.carousel\tContent Stat\tMobile carousel events:\n- receipt (Carousel displayed)\n- goal_success\n- button_tap\n- completion\n- dismissal\n- permission_grant\tRead content data\ncontent_stat.chat\tContent Stat\tChat message events:\n- receipt (Chat delivered)\n- goal_success\n- open\n- click\n- collected_email\n- reply\tRead content data\ncontent_stat.checklist\tContent Stat\tChecklist events:\n- receipt (Checklist shown)\n- goal_success\tRead content data\ncontent_stat.custom_bot\tContent Stat\tCustom Bot events:\n- receipt\n- goal_success\n- reply\n- completion\tRead content data\ncontent_stat.email\tContent Stat\tEmail events:\n- receipt (Email sent)\n- goal_success\n- open\n- click\n- reply\n\nEmail failure events:\n- hard_bounce\n- soft_bounce\n- spam_complaint\n- unsubscribe\tRead content data\ncontent_stat.news_item\tContent Stat\tNews Item events:\n- receipt (News Item displayed)\n- open\n- click\n- reaction\tRead content data\ncontent_stat.post\tContent Stat\tPost message events:\n- receipt (Post sent)\n- goal_success\n- open\n- click\n- Reply\n- reaction\tRead content data\ncontent_stat.push\tContent Stat\tPush message events:\n- receipt (Push sent)\n- goal_success\n- Open\n\nPush message failure events:\n- push_failure\tRead content data\ncontent_stat.series\tContent Stat\tSeries campaign events:\n- receipt\n- goal_success\n- series_completion\n- series_disengagement\n- series_exit\tRead content data\ncontent_stat.series.webhook\tContent Stat\tSeries Webhook events:\n- receipt\n\nSeries Webhook failure event:\n- failure\tRead content data\ncontent_stat.sms\tContent Stat\tSMS message events:\n- receipt (SMS sent)\n- goal_success\n- keyword_reply\n\nFailure stat types include:\n- sms_failure\n- unsubscribe\tRead content data\ncontent_stat.survey\tContent Stat\tSurvey events:\n- receipt (Survey shown)\n- goal_success\n- answer\n- click\n- completion\n- dismissal\tRead content data\ncontent_stat.tooltip_group\tContent Stat\tTooltip events:\n- receipt\n- goal_success\tRead content data\ncontent_stat.tour\tContent Stat\tProduct tour events:\n- receipt (Tour shown)\n- goal_success\n- tour_step_failure\n- completion\tRead content data\nWebhook notification object\n\nA standard Webhook notification object contains the following fields:\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'notification_event'\nid\tstring\tThe Intercom defined id representing the notification.\nself\tstring\tThe Intercom defined URL for the subscription. Optional.\ncreated_at\ttimestamp\tThe timestamp the notification was created.\ntopic\tstring\tCorresponds to a topic.\ndelivery_attempts\tnumber\tThe number of times this notification has been attempted.\nfirst_sent_at\ttimestamp\tThe first time the delivery was attempted.\ndata\tobject\tA container for the data associated with the notification.\ndata.item\tobject\tThe data associated with the notification, which will have a 'type' field.\n\nThe contents of data.item object will be defined according to its type field. In the example below, the type value of Company indicates a company object.\n\n{\n  \"type\": \"notification_event\",\n  \"topic\": \"company.created\",\n  \"id\": \"notif_ccd8a4d0-f965-11e3-a367-c779cae3e1b3\",\n  \"app_id\" : \"a86dr8yl\",\n  \"created_at\": 1392731331,\n  \"delivery_attempts\": 1,\n  \"first_sent_at\": 1392731392,\n  \"data\": {\n    \"item\": {\n      \"type\": \"company\",\n      \"id\": \"531ee472cce572a6ec000006\",\n      \"name\": \"Blue Sun\",\n      \"company_id\": \"6\",\n      \"remote_created_at\": 1394531169,\n      \"created_at\": 1394533506,\n      \"updated_at\": 1396874658,\n      \"custom_attributes\": {\n      }\n    }\n  }\n}\n\nHandling Webhook notifications\n\nYou will receive notifications on your chosen topics when you set up a subscription. How you handle those notifications, i.e. the HTTP status code returned, will determine the subsequent state of that subscription.\n\n❗️ Timeout\n\nYou have 5 seconds to respond to a notification. If you don't send a response within that time, the notification is treated as failed and will be retried only once after 1 minute.\n\nIf you respond with too many error responses, we drop future notifications for a period of 15 minutes.\n\nResponse Code\tDescription\tAction\n2xx\tSuccess\tThe webhook was successfully delivered.\n410\tGone\tWhen a 410 is received, we assume the resource is no longer available. We will disable the subscription and no more notifications will be sent.\n429\tToo many requests\tWhen a 429 is received, all notifications from that subscription will be throttled. Depending on the rate of delivery, this delay can be between 1 minute to 2 hours. If 429s continue and any notification is delayed for > 2 hours then we will drop that notification.\n4xx (excl. 429)\n5xx\tClient or service errors\tWe will retry after 1 minute for all other errors. If the 2nd retry fails then we mark the notification delivery as failed.\nSigned notifications\n\nIntercom signs webhook notifications via an X-Hub-Signature header. We do this so that you can verify that the notification came from Intercom by decoding the signature.\n\nWe compute the value of this X-Hub-Signature header by creating a signature using the body of the JSON request and your App's client_secret value, which you can find on the Basic Info page of your App.\n\nThe signature is the hexadecimal (40-byte) representation of an SHA-1 signature computed using the HMAC algorithm defined in RFC2104.\n\nThe X-Hub-Signature header value starts with the string sha1= followed by the signature.\n\nPOST https://example.org/hooks\nUser-Agent: intercom-parrot-service-client/1.0\nX-Hub-Signature: sha1=21ff2e149e0fdcac6f947740f6177f6434bda921\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"type\" : \"notification_event\",\n  \"id\" : \"notif_78c122d0-23ba-11e4-9464-79b01267cc2e\",\n  \"topic\" : \"user.created\",\n  \"app_id\" : \"a86dr8yl\",\n  \"data\" : {\n    \"type\" : \"notification_event_data\",\n    \"item\" : {\n      \"type\" : \"user\",\n      \"id\" : \"530370b477ad7120001d\",\n      \"user_id\" : \"25\",\n      \"name\" : \"Hoban Washburne\",\n      \"unsubscribed_from_emails\" : false,\n      \"custom_attributes\" : {}\n    }\n  }\n}\n\nAdmin notification object\n\nThe Admin notification object is similar to the model returned via the API. You can see an example object below:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"1\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@intercom.io\",\n  \"job_title\": \"CEO\",\n  \"away_mode_enabled\": true,\n  \"away_mode_reassign\": false,\n  \"away_status_reason\": \"🍔 On lunch\",\n  \"has_inbox_seat\": true,\n  \"team_ids\": []\n}\n\nContact Tag notification object\n\nWe only return the Contact Tag notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"contact_tag\",\n  \"created_at\": 1392731331,\n  \"tag\" : {\n      \"id\": \"1287\",\n      \"name\": \"independent\",\n      \"type\": \"tag\"\n    },\n  \"contact\" : {\n      \"type\": \"contact\",\n      \"id\": \"1287ab1287fefe\",\n        ........\n  }\n}\n\n\nA Contact Tag notification object is composed from the existing Contact and Tag objects and is sent when Contacts are tagged and untagged via the contact.user.tag.created, contact.lead.tag.created, contact.lead.tag.deleted and contact.user.tag.deleted topics.\n\nAttribute\tType\tDescription\ntype\tstring\tValue is 'contact_tag'.\ncreated_at\ttimestamp\tThe time the contact tag object was created.\ntag\tTag\tThe tag that was added or removed.\ncontact\tcontact\tThe contact that was tagged or untagged.\nContent Stat notification object\n\nWe only return the Content Stat notification object for Webhooks. You can see an example object below:\n\n{\n  \"type\": \"content_stat.series\",\n  \"created_at\": \"2022-10-11T15:01:07.000Z\",\n  \"content_stat\": {\n    \"id\": 1,\n    \"content_type\": \"series\",\n     \"content_id\": 1,\n     \"stat_type\": \"receipt\",\n     \"ruleset_id\": 29,\n     \"content_title\": \"Untitled\",\n     \"ruleset_version_id\": -1,\n     \"receipt_id\": 1,\n     \"tags\": {\n       \"type\": \"list\",\n       \"has_more\": false,\n       \"data\": [],\n       \"total_count\": 0\n     },\n     \"series_id\": 1,\n     \"series_title\": null,\n     \"node_id\": 3\n  },\n  \"contact\": {\n    \"type\": \"contact\",\n    \"id\": \"6318db7dfb80c614fe1792b5\",\n    ...\n  }\n}\n\n\nThe Content Stat notification object will match our existing Webhook notification object detailed here and contains the following fields:\n\nAttribute\tType\tDescription\nid\tstring\tThe unique identifier for the Content Stat set by Intercom\ncontent_type\tstring\tThe type of Content the Stat relates to, e.g. Email, Chat, Post, Push etc\ncontent_id\tstring\tThe unique identifier for the Content given by Intercom, In an A/B test each version has its own identifier.\nstat_type\tstring\tType of the stat event. While there are some common stat types like \"receipt\", others are content specific. Content Type email, for example, has stats for unsubscribe, bounce etc. The list of supported stat types is included in the table above. Others may be added over time.\ncontent_title\tstring\tThe title of Content you see in your Intercom Workspace\nruleset_id\tstring\tThe unique identifier of the Outbound Message the Content relates to in your Intercom Workspace\nruleset_version_id\tstring\tThe unique identifier of the Outbound Message version the Content relates to in your Intercom Workspace\nseries_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this will include the ID of that Series campaign\nseries_title\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is title of the Series\nnode_id\tstring\tOptional - If the stat relates to a Content object (email, push, etc) which is part of a Series campaign, this is the ID of the Node in the Series\ncontact\tobject\tNested Contact object. This is the user or lead to whom the content was sent.\ncompany\tobject\tOptional nested Company object. If the content stat relates to a company (company predicates were used in the audience targeting), the company information is also included.\nContent Stat Survey response notification object\n\nThe content_stat.survey notification object contains additional payload fields relating to Survey answers. The individual answer key is included in the answer stat type event. The answers key is included in the completion stat type event showing all answers in the Survey.\n\nAttribute\tType\tDescription\nanswered_at\tstring\tThe time the question was answered.\nquestion_id\tstring\tThe ID of the specific survey question.\nquestion_text\tstring\tThe text of the question\nresponse\tstring\tThe raw response from the user"
  },
  {
    "title": "Promoting your App",
    "url": "https://developers.intercom.com/docs/publish-to-the-app-store/promoting-your-app/",
    "html": "Promoting your App\n\nSo you've built your Intercom app, submitted it to the Intercom App Store, and are ready to make it live. Now what?\n\nWhen you've spent time and effort building an app, you'll want to ensure you're giving it the best possible chance of success once you put it out into the world.\n\nHere are some tips on promoting your app once it's live:\n\nTake advantage of the App Partner Program benefits\n\nAfter your app is published, you'll automatically get enrolled in our App Partner Program, which unlocks a number of benefits to help you drive more revenue, generate more leads, and retain more customers.\n\nWrite a blog post\n\nIn addition to your help doc or landing page, a blog post is a great opportunity to show off your app in more detail. Don't just describe how your app works, but focus on the benefits to your customers. Why should they use the integration? Does it save them time, money, pain? Examples of workflows or customer success stories always go down well too!\n\nPromote on social\n\nTwitter, Facebook, LinkedIn - wherever your target audience are, sharing on social is a great way to spread the news. Keep posts concise and benefits-focused, with images or gifs showing off your app in action.\n\nMessage your customers\n\nTargeted messaging to your customers - whether emails or in-app messages - is a great way to get people using your app right away. Focus on messaging customers who are likely to get value from your app or who you know are Intercom users (note: you should focus on messaging customers or subscribers who've signed up for updates - please don't message our customers without their permission!)\n\nPost on Product Hunt\n\nPosting your Intercom app on Product Hunt is a great way to get it in front of a large audience, attract new users and get feedback.\n\nWe recommend keeping your description concise and focused on the benefits of using your app. Include some clear screenshots or videos that show it in action too. Product Hunt has a great guide about posting too. And of course, use the Product Hunt app in your Messenger to drive more views and votes!\n\nIf you do post on Product Hunt, let us know in the Intercom Community!\n\nTHANK YOU!\n\nGood luck with your launch, and thank you for being part of our community 🙌"
  },
  {
    "title": "Publishing Your App",
    "url": "https://developers.intercom.com/docs/publish-to-the-app-store/review-publish-your-app/",
    "html": "Publishing Your App\n\nOnce you've finished developing your app with your initial development workspace, and successfully set up OAuth, you can submit your app for review and choose when to make it available to the public.\n\nEMAIL NOTIFICATIONS\n\nThroughout this process, both teammates who created the app and submitted the review will receive email notifications, including when feedback and approval is given by Intercom for any of the actions taken.\n\nSubmit your app for review\n\nYou'll first need to fill in all sections on the Submit for a review page of your app on the Developer Hub.\n\nApp Description\n\nGive a brief description of your app and how this will integrate/work with Intercom.\n\nIn order to access your app and test out the functionality, we need to ensure we have full access. If your app requires a subscription or account with your service, you'll need to provide us with a test one within the description\n\nApp Partner Program information\n\nBefore you submit your app for review, you will need to complete the App Partner Program section. This includes company details, target use cases, points of contact, and more. This ensures we always have the right contact information on hand for technical, co-marketing, or co-selling opportunities.\n\nEnd-to-End Video\n\nYou'll need to submit a video that shows the:\n\nInstallation of the app with OAuth\nEnd-to-end experience and functionality of your app\nUninstallation of the app with OAuth\n\nThis is to understand if the OAuth flow works and if your app meets our app guidelines.\n\n❗️ Make sure all guidelines are followed\n\nWe provide best practices and necessary pointers in our Canvas Kit: Messenger Best Practices, Canvas Kit: Inbox Best Practices, and Building Successful Apps guides. These must be followed, and you should take into consideration third party guidelines likewise.\n\nSubmit your App Store listing\n\nYou can also submit your App Store listing for review through the App Store Listing page of your app on the Developer Hub, either with or after the first review.\n\nThe first section focusses on the public-facing details of the listing. You can find a greater explanation of exactly what we need to receive and in what format in our App Listing Guidelines. You can also see really handy tips on how to market your app in our Promoting your app guide.\n\nFor the installation section, you'll need to select whether this is to be installed:\n\nDirectly via the Intercom App Store\n\nProvide the Install & Uninstall URLs you've set up for your Messenger App - this guide explains more.\n\nOr through your website/app\n\nInsert the URL that our Learn More button will navigate to, which you can find more about in our App Listing Guidelines.\n\nORDER OF SUBMITTING THE TWO REVIEWS\n\nYou can submit the app review first, and then the app listing review afterward. The only one that has to be done first is the app review, but the app listing can come at any time when you have marketing materials to hand.\n\nYour application's status and visibility\n\nClick Submit for Review when you're ready. You will see a yellow banner at the top of the screen stating it can take up to seven business days for approval or rejection while the application is under review.\n\nDuring this process, your app will be private for only your usage. Once it's been approved, it will become a public, but unlisted app. You'll see the following green banner and blue pill:\n\nWHY IS MY APP UNLISTED?\n\nWe allow your app to be public but unlisted so that you don't necessarily have to set the listing live straight away. You can instead test out your app in a separate staging environment, or send to your customers individually to collect feedback (ie. when in beta).\n\nWhen you want to set your listing live for public installs, you should select the List in App store option on the App Store listing page.\n\nChanging your review or listing\n\nYou may need to make changes to the current details in the review, listing, or OAuth pages. There's two different systems based on how the change comes about.\n\nChanging a rejected application\n\nIf your app is rejected, whereby you didn't follow our App Guidelines or our App Listing Guidelines, you'll need to change your listing.\n\nWe'll show you exactly where the issue is on the given page, under the header Feedback from Intercom, like so:\n\nThe application can take up to seven business days to review, so ensure everything is fixed. You can then resubmit via the Submit for Review button.\n\nChanging an approved application\n\nWe will need to review any changes that you've made to an already approved application. This means we show the old details until we approve the current detail, rather than putting your app back to 'private'.\n\nBefore submitting, you can see all the changes in the Review changes tab.\n\nYou can also see the changes to the listing being reviewed in your Pending configuration tab, and what's currently visible on the App store in the Approved configuration tab. These can be found on your App store listing page.\n\nCreate a new app for further development\n\nOnce your app has been approved, you're going to want to continue iterating and developing without touching your production app. It's best practice here to create a new app on the Developer Hub home page which can be used purely as a staging app for development purposes. You can populate this with all the URLs and settings for development.\n\nWHAT'S BEST PRACTICE TO PREVENT EDITING MY PRODUCTION APP?\n\nA good rule is to name the development app the same as your production app but append something such as [Staging] or [Dev] at the end to differentiate these. You'll also see that the production app will be labeled as Public and your development app will be labeled as Private."
  },
  {
    "title": "Writing your Start Guide",
    "url": "https://developers.intercom.com/docs/publish-to-the-app-store/writing-your-start-guide/",
    "html": "Writing your Start Guide\nIntroduction\n\nYour \"Start Guide\" is the section of your listing in the Intercom App Store where customers learn how to set up and use your app after installing it. Use this space to help your app users get the most value out of your app.\n\nCustomers will only see this section after installing your app, so the guide should focus on getting set up and getting started, not on installing the app.\n\nThe Basics\n\nThe most effective guides:\n\nOutline the 3-5 steps a user needs to take to start using your app after they have installed it. We suggest focusing on a specific use case and, if your app has additional use cases, listing the others at the bottom of your guide.\nUse concise, action-oriented headlines and number them clearly (e.g., \"1. Sign into your Slack account,\" \"2. Create new notification,\" etc.).\nKeep your description for each step short (2-3 lines max), and use bullet points when possible.\nInclude images, GIFs, and screencasts where possible to better explain flows in a visual manner — but no more than one per step.\nUse a button if a step requires a user to navigate to your product or website.\n\nYour Start Guide should outline the key steps for getting started, and should not just be a link to an external help doc. Users find it much easier to get started when they have all of the information they need in the app listing and don't have to navigate to another page.\n\nFurther Examples\n\nIf you're looking for inspiration, check out our own Slack app's Start Guide.\n\nPlus, use our Start Guide template to get start"
  },
  {
    "title": "Building Successful Apps",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/building-successful-apps/",
    "html": "Building Successful Apps\n\nWe want customers to be confident that any app they connect to their Intercom account will be useful, work well and use their data responsibly.\n\nWe've put together the following guidelines to help you build a successful app. Please take a few minutes to read them before getting started and ensure that any app you intend to make publicly-available complies.\n\nThese guidelines are in addition to our Terms of service, Privacy Policy and our general Developer Guidelines.\n\nUse Intercom Conventions\n\nIntercom is a system with many components which work together. Messages, conversations, users, notes, tags, custom attributes, and many more. Before you get started you should understand what customer problems you're solving and which of these Intercom objects you're going to use.\n\nIt is also important to use these objects according to the conventions of the Intercom products and of other 3rd party integrations. Using Intercom concepts in bespoke ways confuses your customers and makes your app less useful.\n\nThe best way to get familiar with these objects and patterns is to use Intercom. You can also learn more in these resources:\n\nEvents vs Custom Attributes\nIntercom glossary\nBuild something that adds value\n\nAn ecosystem of unique, useful apps and integrations benefits us all - you, us and all Intercom customers.\n\nIf you're an Intercom customer it can help to start building an app for your own team - many developers start by building tools to solve their own problems, then share them with the world. It's a great way to understand what your customers will want from your app.\n\nIf you've never used Intercom we'd recommend you create a free account and try it out. If you have any questions along the way, just let us know.\n\nEnsure your app is complementary to one or more of our products:\nTry and build something unique - take a look at other apps that exist and make sure your idea is different or better than what already exists\nDon't rebuild Intercom - your app should add new and unique capabilities that are useful to users\nUse our APIs and tools effectively\n\nYou should build your app so that it works well and is reliable. If you ever have questions we're always happy to help.\n\nUse OAuth as the only method of authorization for your app and use the scopes you've been granted for the use case(s) they were granted for\nUse a supported (ideally the newest) API version to build your app\nUse our APIs as intended and as efficiently as possible - e.g. use Bulk APIs where possible, use continuous syncing over bulk exports etc.\nHelp customers understand your integration and provide quality support\n\nFor some customers, sharing Intercom data with a third party can be a slightly scary experience. You should make the value of your app clear, as well as what you will (and won't) be using their data for.\n\nOnly ask for the OAuth scopes you need. Clearly let your customers know why each scope is important. It is good to map app features to scopes so customers understand why you need each one - this also makes your application for OAuth more likely to be approved by us\nProvide customers support through Intercom and/or Twitter, Facebook, email or phone\nDescribe your app accurately and don't deliberately mislead or confuse customers - provide clear text, screenshots, and videos to make the value of your app clear.\nUse Intercom branding in accordance with our guidelines and do not imply approval or partnership with Intercom unless you have our written consent to do so\nIt's fine to promote your app, but please don't send unsolicited spam to Intercom customers\nMake it easy to setup\n\nMaking it easy to set up your app means more customers are likely to use it, and it can help you attract new customers.\n\nThe easiest way to allow customers to install your app is to publish your app in the Intercom App Store\nIf you're going to use a \"Connect with Intercom\" button in your own product, ensure that clicking that button immediately takes the customer to authenticate using Intercom OAuth before any other steps occur\nIf an account with your product is required it should automatically be created by fetching the credentials from Intercom (via our /me endpoint). If you absolutely need to ask customers to manually sign up, you should pre-fill as much customer information as possible (for example their name, company, and email)\nThird party guidelines can be affected by apps\n\nIntercom is used upon multiple platforms, and thus the policies of browsers and OS's must be taken into consideration when building apps. If we take our iOS SDK as an example, Apple specifies in its App Store guidelines that in order to pass the review to be listed, you cannot promote or cater for in-app purchases away from Apple. Therefore, all apps that utilize Canvas Kit in conversations or Messenger Home must ensure that there is no mention or provision to access external mechanisms for purchases or subscriptions."
  },
  {
    "title": "Using Intercom",
    "url": "https://developers.intercom.com/installing-intercom/react-native/using-intercom/",
    "html": "Using Intercom\n\nTrack who your users are and what they do in your mobile app and customize the Intercom Messenger. Here’s how to configure the Intercom React Native wrapper:\n\nUser Login\n\nYou’ll now need to login your users before you can talk to them and track their activity in your app.\n\nThere are two type of users that can be created in Intercom: identified and unidentified.\n\nUnidentified users: If your app does not have a login option, like Angry Birds or a flashlight app, you have unidentified users.\nIdentified users: If users need to login to your app to use it, such as Facebook, Instagram, or Slack, they would be considered identified users.\n\nThere are three ways to log users into Intercom that visit your app:\n\nOnly login unidentified users\nOnly login identified users\nLogin both identified and unidentified users - an example of this is where your app has a login option, but it’s not essential for users to login to use your app, like Google Maps or YouTube.\n\nThe option you choose should be informed by the design of your app, namely whether you have a login option.\n\nLogin your unidentified users (visitors)\nloginUnidentifiedUser: () => Promise<boolean>;\n\nUsage\n\nLogin a unidentified user.\n\nThis is a user that doesn't have any identifiable information such as a userId or email.\n\nLogin an unidentified user in your application like so:\n\nIntercom.loginUnidentifiedUser()\n\nLogin your identified (logged in) users into Intercom\nloginUserWithUserAttributes: (params: UserAttributes) => Promise<boolean>;\n\nParameters\nparams : The UserAttributes object that contains the user's email or userId.\nUsage\n\nLogin a user with identifiable information.\nValid identifiers are userId and email which must be set in the UserAttributes object.\n\nYou can Login your like this\n\nIntercom.loginUserWithUserAttributes({email:'bob@example.com',userId:'bob-123'})\n\nRegister both unidentified (non-logged in) and identified (logged in) users\n\nIf you have an app with both unidentified and identified users, you will need to either conditionally choose which registration to call:\n\nif (loggedIn) {\n  Intercom.loginUserWithUserAttributes({email:'bob@example.com',userId:'bob-123'})\n}else {\n  Intercom.loginUnidentifiedUser()\n}\n\n\nOr you can login with Intercom.loginUnidentifiedUser() and if a user signs up/logs in later in your app call Intercom.loginUserWithUserAttributes. We will automatically transfer over any attributes or conversations from the unidentified user to the identified user, so you won't lose anything.\n\nBest practices for logging in users\nIt is important to only login identified users after verification of a login.\nYou can provide a userId and/or email when logging in an identified user. We recommend giving all your users unique userIds, but if you haven't implemented this, you should provide an email.\nDon’t use an email address as a userId as this field cannot be changed later. If you choose provide only an email address, the email address must not be associated with any other users on your workspace.\nHow to logout an identified user\nlogout(): Promise<boolean>;\n\nUsage\n\nLog a user out of their Intercom session.\nThis will dismiss any Intercom UI and clear Intercom's local cache.\n\nYou should only logout an identified user. Logging out an unidentified user will result in orphan records that cannot be merged in future.\n\nWhen users want to log out of your app, simply call:\n\nIntercom.logout()\n\n\n👍\n\nIntercom knows when your app is backgrounded and comes alive again, so you won’t need to re-register your users.\n\nUpdate a user\nupdateUser(userAttributes: UserAttributes): Promise<boolean>;\n\nParameters\nuserAttributes : The UserAttributes object with the user data.\nUsage\n\nUpdate a user in Intercom with data specified in UserAttributes.\n\nYou can send any data you like to Intercom from standard user attributes that are common to all Intercom users to custom user attributes that are unique to your app.\n\nStandard user attributes can be updated by calling:\n\nIntercom.updateUser({\n  email: 'bob@example.com',\n  userId: 'bob-123',\n  name: 'Bob',\n  phone: '010-1234-5678',\n  languageOverride: 'fr',\n  signedUpAt: 1621844451,\n  unsubscribedFromEmails: true,\n});\n\n\nTypically our customers see a lot of value in sending custom data that relates to customer development, such as price plan, value of purchases, etc. Custom user attributes can be created and modified by passing in customAttributes object to updateUser:\n\nIntercom.updateUser({\n  customAttributes: {\n    monthly_spend: 123,\n    paid_subscriber: true,\n    team_mates: 3\n  }\n});\n\n\nYou can also set company data on your user with the Company object, like:\n\nIntercom.updateUser({\n  companies: [{\n    createdAt: 1621844451,\n    id: 'companyId', // id is a required field for adding or modifying a company.\n    monthlySpend: 100,\n    name: 'CompanyName',\n    plan: \"plan\",\n    customAttributes: {\n      city: \"New York\"\n    },\n  }],\n});\n\nSubmit an event\nlogEvent(eventName: string, metaData?: MetaData): Promise<boolean>;\n\nParameters\neventName : The name of the event.\nmetaData : Metadata Objects support a few simple types that Intercom can present on your behalf.\n\nYou can log events in Intercom that record what users do in your app and when they do it. For example, you could record the item a user ordered from your mobile app, and when they ordered it.\n\nIntercom.logEvent('order-item', {itemId:'item-1', orderDate:\"1392036272\"})\n\nPresent Intercom Spaces\n\nSpaces are different areas of the messenger that you can open directly. Intercom defines 3 possible spaces:\n\nHome\nHelp Center\nMessages\n\nThese spaces can be presented by:\n\npresent(): Promise<boolean>;\n\nUsage\n\nPresent Intercom as a modal overlay in your app.\nThe Home space is displayed by default.\n\nIntercom.present();\n\n\nIf you want to present to a specific space\n\npresentSpace(space: Space): Promise<boolean>;\n\nParameters\nspace : The Intercom Space to be presented.\nUsage\n\nPresent an Intercom space as a modal overlay in your app\n\nIntercom.presentSpace(Space.home);\n\n\nThis opens Intercom and displays Home space.\n\nSimilarly, you can present HelpCenter and Messages by passing the respective Space.\n\nPresent Intercom Content\npresentContent(content: Content): Promise<boolean>;\n\nParameters\ncontent : An IntercomContent object.\nUsage\n\nPresent Intercom content.\n\nhere are various IntercomContent that you can present. The available types are:\n\nArticle\nSurvey\nCarousel\nHelpCenterCollections\nConversation via ID\n\nTo present an Intercom content you create the respective IntercomContent object and then call presentContent with that object\n\nFor instance, you create an \"article\" IntercomContent as follows:\n\nIntercomContent.articleWithArticleId('123456')\n\n\nSimilarly, you can can create surveys, carousels and help center collections.\n\nYou can then present such content using:\n\nIntercom.presentContent(\n      IntercomContent.articleWithArticleId('123456')\n);\n\n\nOr, you can present a conversation using conversation ID:\n\nIntercom.presentContent(\n      IntercomContent.conversationWithId('123456')\n);\n\n\n🚧 Make sure your content is live\n\nA content must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nCustomize the Intercom Messenger\n\nWe definitely recommend that you customize the Intercom Messenger so that it feels completely at home on your mobile app. Here’s how:\n\nSelect the color and language of the Messenger and how personalize your profiles.\nFollow the below steps to choose how the launcher appears and opens for your users.\nChoose how the launcher appears and opens for your users\n\nIf you’d like the standard launcher to appear on the bottom right-hand side of your screen, just call:\n\nIntercom.setLauncherVisibility(Visibility.VISIBLE)\n\n\nIf you want to set the bottom padding for the Messenger, which dictates how far from the bottom of the screen the default launcher and in-app messages will appear, you can call:\n\nIntercom.setBottomPadding(120)\n\nCreate a custom launcher\n\nHowever, if you’d like the Messenger to open from another location in your mobile app, you can create a custom launcher. This allows you to specify a button, link or element that opens the Messenger. For example, you can trigger the launcher to open when a customer clicks on your ‘Help and Support’ button.\n\nIf you have a custom launcher, you can call Intercom.present();\n\n<Button title=\"Open Intercom Messenger\" onPress={()=>{Intercom.present();}}/>\n\n\nThen we’ll ensure the Messenger opens in the best place for each user.\n\nFor example:\n\nIf a user has one unread conversation, we open that conversation.\nIf a user has no conversations, we open the composer.\nIf a user has more than one unread conversation, we open the conversations list.\nIf a user has no unread conversations, we open the last screen they were on when they closed it.\nShow your user’s unread message count\n\nGrab the current count with this method:\n\nIntercom.getUnreadConversationCount()\n\n\nThen, start listening for updates using:\n\nuseEffect(() => {\n    const countListener = Intercom.addEventListener(\n      IntercomEvents.IntercomUnreadCountDidChange,\n      (response) => {\n        setCount(response.count as number);\n      }\n    );\n\n    return () => {\n      countListener.remove();\n    };\n  }, []);\n\nTemporarily hide notifications\n\nYou can prevent in app messages from popping up in certain parts of your app, by calling:\n\nIntercom.setInAppMessageVisibility(Visibility.GONE)\n\n\nYou can hide any Intercom screen in your app, by calling:\n\nIntercom.hideIntercom();\n\nWhat's next?\n\nNow that you have Intercom configured it's time to:\n\nConfigure your Help enter\nEnable Identity Verification\nConfigure your app for Push Notifications."
  },
  {
    "title": "Supported Versions",
    "url": "https://developers.intercom.com/installing-intercom/react-native/supported-versions/",
    "html": "Supported Versions\n\nThe latest version of our Intercom React Native wrapper is 4.0.0. This is fully supported and receives regular feature enhancements and bug fixes.\n\nThe Intercom React Native wrapper supports version 0.59 of React Native and above. If you are using an older version of React Native, please upgrade\n\nThe React Native wrapper includes version 10.+ of the Android SDK and 11.+ of the iOS SDK.\n\nThe Intercom iOS SDK supports iOS 13 and above.\nThe Intercom Android SDK supports API 21 and above."
  },
  {
    "title": "Deep Linking",
    "url": "https://developers.intercom.com/installing-intercom/react-native/deep-linking/",
    "html": "Deep Linking\n\nUsing Intercom you can embed a deep link in your in-app messages or as the URI for your push messages.\n\nThere are comprehensive guides on enabling deep links on both platforms here.\n\nSetting up a Deep Link in Android\n\nYou'll need to set up a deep link in your apps AndroidManifest.xml. Android supports both app://page and http://www.app.com/page type schemes.\n\n<activity\n  android:name=\".MainActivity\"\n  android:label=\"@string/app_name\"\n  android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n  android:launchMode=\"singleTask\"\n  android:windowSoftInputMode=\"adjustResize\">\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\"/>\n    <category android:name=\"android.intent.category.LAUNCHER\"/>\n  </intent-filter>\n\n  <!--  START: Add this  -->\n  <intent-filter>\n    <action android:name=\"android.intent.action.VIEW\"/>\n    <category android:name=\"android.intent.category.DEFAULT\"/>\n    <category android:name=\"android.intent.category.BROWSABLE\"/>\n\n    <data android:scheme=\"http\" android:host=\"Your app url(www.app.com)\"/> <!-- Edit this line -->\n    <data android:scheme=\"Your app scheme(app)\"/> <!-- Edit this line -->\n  </intent-filter>\n  <!--  END: Add this  -->\n\n</activity>\n\nSetting up a Deep Link in iOS\n\nIntercom supports both Universal Links and Custom URL Schemes as a deep link.\nPlease follow the instructions for Universal Links on our main iOS page.\n\nYou'll also need to add the import to your AppDelegate.m\n\n#import \"AppDelegate.h\"\n\n#import <React/RCTBridge.h>\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n\n#import <React/RCTLinkingManager.h> // <--Add this\n\n\nAdd finally include this snippet code in your AppDelegate.m above @end\n\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\nLinking to your app\n\nOnce you have set up your app to respond to your deep link, you can send a push message with that as the URI. Tapping the push message will open your app to the specified page.\n\nYou can also add a link to your in-app messages and replies as follows:"
  },
  {
    "title": "Identity Verification",
    "url": "https://developers.intercom.com/installing-intercom/react-native/identity-verification/",
    "html": "Identity Verification\n\nIdentity verification helps to make sure that conversations between you and your users are kept private and that one user can't impersonate another. We strongly encourage all Intercom customers to set up and enable identity verification.\n\nEnable Identity Verification\n\nGet the identity verification secret from your app settings\n\nIOS\nAndroid\n\nNext toggle enforce identity verification to on.\n\n❗️ Have you already released your app with the Intercom messenger in it?\n\nIf you have then enabling identity verification will stop old versions of your app communicating with Intercom. We recommend that you complete setting up identity verification and test that everything is working. Then turn off identity verification and release an update to your app. This update will be sending user hashes to Intercom but not enforcing it. Once you are happy with the number of users on versions of your app sending the user hash you can come back and toggle identity verification on which will then start enforcing it for all versions of your app.\n\nReturning the HMAC Digest from your App Server's Authentication Call\n\nYour app server authentication code needs to be modified so that is uses the Intercom Android API Secret to create a HMAC digest (hash based message authentication code) from the user id or email address for that user. Then it returns the HMAC digest to your Android app. Note that identity verification does not apply to unidentified users, for whom you do not have a user id or email address.\n\nThe HMAC is computed as a SHA-256 digest as follows:\n\nOpenSSL::HMAC.hexdigest('sha256', api_key.secret, user_id_or_email)\n\n\n📘\n\nIf you wish to generate a HMAC in a different programming language we have a comprehensive list here.\n\nSet the User Hash\n\nWhen your React Native app initializes Intercom if the user is identified (i.e., you have a user id or email address), pass in a String of the HMAC returned from your server's authentication call. This should be done before making any user Registration calls.\n\nIntercom.setUserHash(\"your_hmac_of_user_id_or_email\");\n\n\nThe Intercom API Auth Server uses its copy of the API Secret to recreate the HMAC digest from the user_id or email. If it matches with the supplied HMAC digest, we can be sure that this request is coming from your app server and the API Auth Server issues an access token to the Android messenger.\n\nIf the HMAC fails to verify, the API Auth Server responds with a 401.\n\n📘 Sending both user_id and email values?\n\nIf you send both email and user_id values in your integration, you need to calculate the HMAC on the user_id value.\n\nSending an HMAC derived from the email will fail with a 401 if a user_id is provided"
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/installing-intercom/react-native/help-center/",
    "html": "Help Center\n\nIn the Intercom React Native wrapper you can display your Help Center, show articles programmatically, filter your Help Center content and using our data methods, deeply embed your Intercom Help Center alongside your own content.\n\nCheck here for more content on setting up your Help Center in Intercom.\n\nTo display the Help Center, call the following method:\n\nIntercom.presentSpace(Space.helpCenter)()\n\n\n🚧 Make sure Help Center is turned on\n\nIf you don't have Help Center enabled in your Intercom settings the method presentHelpCenter will fail to load. To enable your Help Center please go here and click the \"Turn On Help Center\" button.\n\nPresent an Article Programmatically\n\nTo present an Article, pass in an articleID from your Intercom workspace to the following method:\n\nlet conversationContent = IntercomContent.conversationWithConversationId(conversationId)\nIntercom.presentContent(conversationContent)\n\nPresent a filtered Help Center\n\nYou can now pass in 1 or more collection IDs to filter the Help Center. This will display the same view as calling presentSpace(Space.helpCenter) but the collections list will only show the IDs passed in.\n\nlet helpCenterCollectionsContent = IntercomContent.helpCenterCollectionsWithIds([\"123\", \"456\"])\nIntercom.presentContent(helpCenterCollectionsContent)\n\nUsing the data API\n\nYou can now fetch the data directly and build your own UI. This is useful when you want to show Intercom collections alongside your other support content.\n\nFetch Collections\n\nTo fetch a list of all Collections call:\n\nIntercom.fetchHelpCenterCollections()\n\n\nA successful response will return an HelpCenterCollectionItem[]. An HelpCenterCollectionItem contains the follow values:\n\nsummary - an optional string that describes the collection,\nid - an string to identify that collection, this can be used to fetch the sections/articles for this\ntitle - an string with the name of the collection\nFetch the contents of a collection\n\nTo get a list of sections/articles for a collections call:\n\nIntercom.fetchHelpCenterCollection(collectionId)\n\n\nThis method requires a “collectionId”. You can get the IDs of your collections from fetchHelpCenterCollections or searchHelpCenter methods.\n\nA collection can have a section (a group of articles with a header) or articles without a section. A successful response will return a HelpCenterCollectionContent object. It contains the follow values:\n\nid - an sring representing the id of the collection\ntitle - an string with the name of the collection\nsummary - an optional string that describes the collection\narticles - an array of HelpCenterArticle objects\nsections - an array of HelpCenterSection objects\nA section is a grouping of articles with a name.\n\nThe HelpCenterSection model is described as:\n\ntitle - an string with the name of the section\narticles - an array of HelpCenterArticle objects\n\nThe HelpCenterArticle model can be found both inside of sections, or at the top level of the collection content (not a part of any section). The HelpCenterArticle model is described as:\n\narticleId - an string representing the id of the article, this can be used to display the article calling presentArticle: articleId\ntitle- a string, the title of the article\nSearch the Help Center\n\nTo get a list of articles in the Help Center, filtered by a search term call:\n\nIntercom.searchHelpCenter(searchTerm)\n\n\nThe method requires an NSString with a term to search. A successful response will return an HelpCenterArticleSearchResult[]. It contains the follow values:\n\narticleId - an string with the id of the article, this can be used to display the article calling presentArticle: articleId\ntitle - a string with the title of the article\nmatchingSnippet - an string with the part of the article that matched the search string provided\nsummary - an string with a summary of the article"
  },
  {
    "title": "Installation",
    "url": "https://developers.intercom.com/installing-intercom/react-native/installation/",
    "html": "Installation\n\nThe Intercom React Native wrapper allows you to use Intercom for iOS and Intercom for Android in your React Native apps.\n\nIf you’re new to Intercom, you’ll need to create an account and start your free trial.\n\nSupported versions\nThe Intercom React Native wrapper supports version 0.59 of React Native and above.\nIntercom for iOS supports iOS 13 and above.\nIntercom for Android supports API 21 and above.\n\nEnable the Android and iOS Messengers from the toggles in the Intercom settings panel. When either of these platforms are disabled, requests from that platform to Intercom will fail.\n\nStep 1 - Adding the wrapper\n\nTo install Intercom you'll need to add the wrapper to your React Native project using the following snippet:\n\nyarn add @intercom/intercom-react-native\n\nnpm install @intercom/intercom-react-native\n\n\nThere are separate steps for setting up Android and iOS. If your React Native app does not support Android skip to Step 3.\n\nStep 2 - Android Setup\n\nYou'll need to take steps to link the wrapper in your project. These vary based on your apps React Native version.\n\nUsing React Native v0.60 and above\n\nIf you're using React Native v0.60 or above, the library will be linked automatically\n\nAutomatic linking with React Native v0.59\n\nTo automatically link the Intercom React Native wrapper in v0.59 of React Native run the following command:\n\nreact-native link @intercom/intercom-react-native\n\nManual linking with React Native v0.59\n\nIf you prefer to manually link libraries, add the following snippet to android/settings.gradle:\n\ninclude ':intercom-react-native'\nproject(':intercom-react-native').projectDir = new File(rootProject.projectDir, '../node_modules/@intercom/intercom-react-native/android')\n\n\nInside the dependancies block of android/app/build.gradle add the following line:\n\ndependencies {\n  implementation project(':intercom-react-native')\n}\n\n\n🚧 Apps using a React Native version below 0.65\n\nReact Native versions below 0.65 use OkHttp 3. The Intercom SDK currently uses OkHttp 4.\nThere is a problem with compatibility between those two versions which may result in crashes.\n\nYou can fix this by adding an explicit dependency on okhttp-urlconnection to dependencies in app/build.gradle:\n\ndependencies {\n\timplementation(\"com.squareup.okhttp3:okhttp-urlconnection:4.9.1\")\n\t[...]\n}\n\nInitialize Intercom\n\n🚧 Minimum Android SDK and build tools versions\n\nThe minSdkVersion in build.gradle needs to be to 21 or greater\n\nIn the dependencies block of the build.gradle make sure that\ncom.android.tools.build:gradle is at version 4.0.1\n\nYou'll need to update the MainApplication.java class. First add the import com.intercom.reactnative.IntercomModule at the top of the class.\n\nThen in the onCreate method, add the snippet below using the apiKey and appId found in your workspace settings.\n\nimport com.intercom.reactnative.IntercomModule; //  <-- Add this line\n\n// ...\n\n@Override\npublic void onCreate() {\n  super.onCreate();\n  SoLoader.init(this, /* native exopackage */ false);\n\n  // ...\n\n  IntercomModule.initialize(this, \"apiKey\", \"appId\"); // <-- Add this line\n\n  // ...\n}\n\nAndroid Permissions\n\nAdd below permissions to AndroidManifest.xml\n\nYou'll need to include the READ_EXTERNAL_STORAGE permission if you have enabled attachments:\n\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n\n\nYou can also include VIBRATE to enable vibration in push notifications:\n\n<uses-permission android:name=\"android.permission.VIBRATE\"/>\n\nStep 3 - iOS Setup\n\nIf you don't support iOS in your React Native app, you can skip to the configuration step.\n\nUsing React Native v0.60 and above\n\nIf you're using React Native v0.60 or above, the library will be linked automatically after running the pod install command.\n\nManual linking with React Native v0.59\n\nFirstly open your apps .xcworkspace. If you don't have a .workspace file open the .xcodeproj.\nDownload intercom for iOS and extract the zip\nDrag Intercom.xcframework into your project. Make sure \"Copy items if needed\" is selected and click Finish.\n\nFor additional information on iOS manual linking please refer to the React Native developer docs.\n\nInitialize Intercom\n\nOpen iOS/AppDelegate.m and import <IntercomModule.h>\n\n#import \"AppDelegate.h\"\n#import <React/RCTBridge.h>\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n// ...\n#import <IntercomModule.h> // <-- Add This\n\n\nNext, in the method didFinishLaunchingWithOptions you'll need to initialize Intercom. Add the snippet below using the apiKey and appId found in your workspace settings.\n\n// ...\n  self.window.rootViewController = rootViewController;\n\n  [IntercomModule initialize:@\"apiKey\" withAppId:@\"appId\"]; // <-- Add this (Remember to replace strings with your api keys)\n\n  return YES;\n  }\n\nIOS Permissions\n\nWith the exception of apps that only support iOS 14+, when installing Intercom, you'll need to make sure that you have an NSPhotoLibraryUsageDescription entry in your Info.plist.\n\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Send photos to support center</string>\n\n\nFor apps that support iOS 13 or lower, this is required by Apple to access the photo library. It is necessary when installing Intercom due to the image upload functionality. Users will be prompted for the photo library permission only when they tap the image upload button.\n\nOn iOS 14+, Intercom uses the new PHPickerViewController API which does not require requesting users for photo library permission.\n\nStep 4 - Register your users\n\nYou’ll need to register your users with Intercom before you can talk to them or see what they do in your app. If a person visits your mobile app they will be a user - the Intercom SDKs do not create leads or visitors. There are three way to register people who visit your app: (1) register only unidentified users (2) register only identified users (3) register both identified and unidentified users. The option you choose should be informed by the design of your app, namely whether you have a login option.\n\nRegister only your unidentified users\n\nIf you have an app with no login option (like Angry Birds or a flashlight app), you should register unidentified users only.\n\nJust register an unidentified user in your application like so:\n\nIntercom.loginUnidentifiedUser()\n\nRegister only your identified (logged in) users\n\nIf people must log in to access your app (as with Facebook, Instagram or Slack) you should follow these instructions to register identified users only.\n\nBest practices for registering users\nIt is important to only register identified users after verification of a login.\nYou can provide a userId and/or email when registering an identified user. We recommend giving all your users unique userIds, but if you haven't implemented this, you should provide an email.\nDon’t use an email address as a userId as this field cannot be changed later. If you choose provide only an email address, the email address must not be associated with any other users on your workspace.\nIntercom.loginUserWithUserAttributes({email:'bob@example.com',userId:'bob-123'})\n\nRegister both unidentified (non-logged in) and identified (logged in) users\n\nIf you have an app with both unidentified and identified users (like Google Maps or YouTube), you will need to either conditionally choose which registration to call:\n\nif (loggedIn) {\n  Intercom.loginUserWithUserAttributes({email:'bob@example.com',userId:'bob-123'})\n}else {\n  Intercom.loginUnidentifiedUser()\n}\n\n\nOr you can register with Intercom.loginUnidentifiedUser() and if a user signs up/logs in later in your app call Intercom.loginUserWithUserAttributes. We will automatically transfer over any attributes or conversations from the unidentified user to the identified user, so you won't lose anything.\n\nHow to unregister an identified user\n\nYou should only unregister an identified user. Unregistering an unidentified user will result in orphan records that cannot be merged in future.\n\nWhen users want to log out of your app, simply call:\n\nIntercom.logout()\n\n\n👍\n\nIntercom knows when your app is backgrounded and comes alive again, so you won’t need to re-register your users.\n\nWhat next?\nConfigure your React Native app for Intercom and create customizations.\nEnable push notifications so you can send push messages.\nEnable Identity Verification for your React Native app.\nIf Data Hosting in Europe, modify your app's region configuration"
  },
  {
    "title": "Compatibility",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/compatibility/",
    "html": "Compatibility\n\nJSON objects in the API follow a must ignore processing model, where clients are expected to ignore data fields they don't understand.\n\nFor example if the client saw the JSON as shown in the example on the right ('Unknown Field')\nand did not understand the such_key field, it must pretend the field wasn't there and will process the object as if it looked liked the object shown in 'Must Ignore'.\n\nWhen fetching content, fields that are optional for API objects are indicated in the documentation - clients must not assume they will always be present. When submitting content, fields that are required to be sent by client are also indicated in the documentation - if these are not sent the API may reject the request.\n\nIn general the API may reject JSON where data is not valid or incomplete with a 422 Unprocessable Entity response and an error message explaining the issue. For example, an email message type may be rejected if it is not sent with a subject field.\n\nUnknown Field\n{\n  \"type\": \"user\",\n  \"external_id\" : \"456456\",\n  \"email\" : \"j@example.org\",\n  \"such_key\": \"so_value\"\n}\n\nMust Ignore Interpretation\n{\n  \"type\": \"contact\",\n  \"external_id\" : \"456456\",\n  \"email\" : \"j@example.org\"\n}\n"
  },
  {
    "title": "Installing Intercom",
    "url": "https://developers.intercom.com/installing-intercom/",
    "html": "Installing Intercom\n\nHere you'll find everything you need to install Intercom in the following places:\n\nWeb\niOS\nAndroid\nCordova / PhoneGap\n\nOtherwise, you can utilise our quickstart guides and tutorials if you need to get set up faster with the basics, or get technical information uncovered elsewhere:\n\nTutorials on setting up custom domains for your Help Center\nChat with other Intercom customers, who've installed the Messenger, in our community forum.\nNEW TO INTERCOM?\n\nFor more information about Intercom products, you can visit our website or read our user documentation."
  },
  {
    "title": "Set up Webhooks",
    "url": "https://developers.intercom.com/docs/webhooks/setting-up-webhooks/",
    "html": "Set up Webhooks\n\nWebhooks allow you to subscribe to real-time notifications of events happening in Intercom; a Contact created, an incoming Conversation received, or an Outbound Message receipt.\n\nWebhooks Subscriptions are associated with your App and not a single Workspace. You will receive notifications of events from all Workspaces where you install your App.\n\nIn this guide, you'll learn how to:\n\nConfiguring your endpoint URL\nSubscribe to a Webhook topic\nUnsubscribe from a Webhook topic\nManually remove a Webhook Topic subscription\nRemove a related permission scope\nSELECTING PERMISSIONS\n\nFor Private Apps, the Intercom data you access is your own, so you're already good to go.\n\nFor Public apps, the data you need to access is related to your permission scopes which you'll need to select and be approved for.\n\nConfiguring your endpoint URL\n\nTo configure your Webhook subscriptions, navigate to your App in your Developer Hub and under the Configure menu, select Webhooks to set up a Webhook subscription.\n\nFirst, you'll need to set up the endpoint URL to receive notification requests.\n\nAdd your full endpoint URL, which must use HTTPS, into the given field.\n\nThis URL will receive the HTTP POST notification requests for every topic you have subscribed to. When you add your endpoint URL, it must be able to receive a HEAD request, which we use to validate the URL.\n\nYou can find Webhook testing tools online (e.g. ngrok, webhook.site etc) that will allow you to create endpoint URLs for testing and experimentation.\n\nSubscribe to a Webhook topic\n\nYou'll then need to select the topics you want to receive the notification requests for.\n\nClick on the Webhook topics dropdown to see all available topics - more information on each topic is available the Webhook models reference page.\n\nOnce selected, you should see the topic you've subscribed to appear in the list below. The name, description and permissions it requires to work will also be visible.\n\n🚧 Required permissions showing an error?\n\nYou'll need to ensure you've selected the correct permissions on your Authentication page, which the webhook topic requires.\n\nOnce you click Save, you will receive notification requests for all of the Topics you've subscribed to from all Workspaces where you install your App, if it's an Internal integration App (i.e. a private App for your use). For Public Apps, users will have to grant permission to access their data during the installation of your App.\n\nUnsubscribe from a Webhook topic\n\nYou can stop being sent notifications for topics in two ways:\n\nManually remove a Webhook Topic subscription\n\nOn the Webhooks page of your App, click Edit in the top right of the page and then click Delete on the far right of the topic you want to unsubscribe from.\n\nRemove a related permission scope\n\nOn the Authentication page of your App, you can remove the corresponding permission scopes required to subscribe to a Webhook topic. Removing permissions will automatically stop topic notifications from being sent and show the following error on the Webhooks page:"
  },
  {
    "title": "Messenger Apps Lifecycle",
    "url": "https://developers.intercom.com/docs/build-an-integration/getting-started/build-an-app-for-your-messenger/messenger-apps-lifecycle/",
    "html": "Messenger Apps Lifecycle\n\nCheck out the video below for a technical overview of how the request-response cycles work within Messenger apps, and then read on for a written breakdown with links for more information:\n\nAn overview of the different request flows\nConfigure flow\n\nThis flow allows teammates to configure an app prior to sending it to a user. This flow can occur multiple times as a teammate interacts with your app. On each request, you have the opportunity to respond and update the canvas that is displayed to the teammate. This allows more complicated, multi-stage configuration steps.\n\nLearn more about the configure flow →\n\nInitialize flow\n\nThis flow is about initializing the app in order to render how it first displays to an end user.\n\nLearn more about the initialize flow →\n\nSubmit flow\n\nThis flow is triggered any time a user interacts with your app and specifies the resulting action is to submit. This flow can occur multiple times as a user interacts with your app. On each request/response loop you have the opportunity to respond and update the canvas that's displayed to the user.\n\nLearn more about the submit flow →\n\nSheets flow\n\nThis flow provides access to Sheets, a full-bleed takeover of the Messenger window. Sheets are populated with iframes. There are two actions which are relevant if you're using sheets:\n\nThe open-sheet action you use to open a sheet\nThe submit-sheet action which is used when closing a sheet\n\nLearn more about the sheets flow →\n\nWhat happens during an individual request flow?\n\nWhile each individual flow is different, they do share a common pattern. Once you get used to the pattern you'll start to see your app as a tennis match between users or teammates triggering actions in your app and your backend service handling those requests and responding with the JSON to update the UI of your app appropriately.\n\nYou can see the general format of an individual flow, and whether they occur on the Intercom side or on your side, in the diagram below:\n\nInteraction A flow begins with an interaction. This can either be a teammate adding your app to the Messenger/Message/Conversation, or an end-user interacting with your app.\nNotification Following an interaction, Intercom will send an HTTP POST request to your web service with the data you'll need in order to respond. Examples of what we include in these requests can be found here.\nConsume You'll need to consume the HTTP request and get the data you need to enable you to decide how to respond. This is where any backend processing you might need to do would occur.\nRespond Armed with the data from the interaction step, you can decide how to respond. All responses should be valid JSON. Examples of what you can send in response can be found here.\n\nREQUEST SIGNING\n\nUnless otherwise specified, each request from Canvas Kit is signed by Intercom via an X-Body-Signature header. We do this so that you can check that each request is actually sent by Intercom by decoding the signature.\n\nThe value of this X-Body-Signature header is computed by creating a signature using the body of the JSON request and your app's OAuth client_secret value, which you can find on the Basic Info page of your app. It is a hexadecimal (64-byte) value that is computed using the HMAC-SHA256 algorithm as defined in RFC2104. The X-Body-Signature header value is the signature value.\n\nFor example, X-Body-Signature: 21ff2e149e0fdcac6f947740f6177f6434bda9219a7900921523730054c9214ae4.\n\nWhat order do the request flows happen in?\n\nEach request happens at a different time within the app's lifecycle, and will be sent to the URL that you must setup and then specify on Canvas Kit page on Developer Hub. Below is an overview of how teammates and end users can interact with the app through each flow and a description of each can be seen below.\n\nUSER DATA AND YOUR APP\n\nAs a developer building on top of the Intercom Platform, it's important to know that Intercom customers (and their end users) can put whatever data they want into Intercom at any stage of the flow and that data will not be checked for authenticity or veracity."
  },
  {
    "title": "Identifiers and URLs",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/identifiers-and-urls/",
    "html": "Identifiers and URLs\n\nAll objects in the API have an id field indicating their logical identifier.\n\nParameter\tType\tDescription\nid\tstring\tIdentifies the object within the API. The id field will not be larger than 128 characters (in SQL it corresponds to a varchar(128)).\n\n❗️ IDs are not globally unique\n\nWith the exception of workspace_id, all id fields are only unique within a given workspace. In your datastore, you should always store the workspace_id along with an id field to ensure uniqueness.\n\nThese fields must always be treated as opaque strings - no guarantees are made about the internal structure of the id fields for an object.\n\nThe id field is always defined by the API server and is guaranteed to be unique relative to the type field within a given workspace - this means no two user objects will have the same id field, but a user and a company may have the same value for their id fields. Some object types (such as Contact), also support client defined identifiers.\n\nThe company and user objects deserve special mention when it comes to identity for two reasons -\n\nThey allow you send your own external identifiers\nThe contact id field is in some cases, aliased to intercom_user_id. This is done to distinguish it from other identifiers in the API and to avoid confusion as to which object type an id denotes."
  },
  {
    "title": "Pagination",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/",
    "html": "Pagination\n\nThe majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.\n\nTheir responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.\n\nPages Object\nParameter\tDescription\nnext\tA link to the next page of results. A response that does not contain a next link does not have further data to fetch.\nprev\tA link to the previous page of results.\nfirst\tA link to the first page of results.\nlast\tA link to the last page of results.\nWHAT ABOUT FOR CONTACTS AND SEARCHES?\n\nWhen listing any Contact objects, we will instead use a cursor-based approach. Our Search resources will instead use a POST-based approach."
  },
  {
    "title": "Encoding",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/encoding/",
    "html": "Encoding\n\nData is encoded as defined by JSON in RFC4627. The default encoding for APIs is UTF-8. Certain characters, such as Emojji may be handled as surrogate unicode pairs (see section '2.5 Strings' of RFC4627).\n\nSome query parameters may need to be url encoded when sending - for example, the email parameter value used to query users should be encoded.\n\n❗️ HTML Encoding\n\nIt should be noted that the following identifiers are encoded to protect from potential cross-site scripting attacks: 'name', 'user_id', 'company_id' and 'email'. As a result you may see these identifiers in their encoded format when you retrieve them via the API.\nNote that the characters we encode are double quote, single quote, ampersand, less than and greater than symbols i.e \" ' & < >\n\n\"X&Ys\" == \"X&amp;Y&#39;s\"\n"
  },
  {
    "title": "About Messenger Apps",
    "url": "https://developers.intercom.com/docs/guides/messenger/about-messenger/",
    "html": "About Messenger Apps\n\nAfter you've installed the Intercom Messenger and added any customizations, you can start building your own apps — pieces of UI that are surfaced to users, leads, and visitors right in the Messenger.\n\nYou can build Messenger apps to:\n\nCapture customer feedback or surveys\nBook meetings and demos\nShare videos or articles\nShow system status or information\nHow do I build a Messenger App?\n\nYou can build these apps using our toolkit called Canvas Kit.\n\nTo see how it works, follow this tutorial for building a Messenger app or try the Canvas Kit builder to get an idea of what your app could look like.\n\nWhere can I add a Messenger App?\n\nMessenger apps can be added in the following areas:\n\nMessenger Home: Allows teammates to add your app to the home screen when the Messenger is opened.\nConversations: Allows teammates to insert your app within conversations.\nWorkflows: Allows teammates to send your app as a follow up action.\nMessages: Allows teammates to insert your app within in-app auto messages.\nWhat's Next?\nBuild an app for your Messenger by following this guide\nInstall a Messenger app from the App Store\nLearn about the flows you can use to control the display and interactions for your app\nExperiment with customizing a Messenger app with Canvas Kit Builder"
  },
  {
    "title": "API Changelog",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/api-changelog/",
    "html": "API Changelog\n\nThis represents a log of all changes to the API and the versions that are related to each new addition. To access the latest features, you'll need to change your API version in the Developer Hub or set a version in the header of your API call.\n\nAbout breaking changes in the Intercom API\n\nThe Intercom API is a versioned API. The version number increments by 0.1 each release, unless we introduce major new functionality, in which case we will increment by 1. We do not follow Semantic Versioning.\n\nAny breaking changes will be released in a new API version. Breaking changes are changes that can potentially break an integration. Breaking changes can include:\n\nremoving an entire operation\nremoving or renaming a parameter\nremoving or renaming a response field\nadding a new required parameter\nmaking a previously optional parameter required\nchanging the type of a parameter or response field\nremoving enum values\nadding a new validation rule to an existing parameter\nchanging authentication or authorization requirements\nChangelogs\nChangelog\tRelease date\tDocs\nRecent unversioned changes\tN/A\tN/A\nUnstable\tOngoing\tReference\n2.10\t2023-09-14\tReference\n2.9\t2023-01-24\tReference\n2.8\t2023-01-24\tReference\n2.7\t2022-12-07\tReference\n2.6\t2022-10-18\tReference\n2.5\t2022-06-07\tReference\n2.4\t2021-12-13\tReference\n2.3\t2020-11-12\tReference\n2.2\t2020-08-12\tReference\n2.1\t2020-07-14\tReference\n2.0\t2020-01-30\tReference\n1.4\t2019-09-26\tReference\n1.3\t2019-06-05\tReference\n1.2\t2019-05-03\tReference\n1.1\t2018-10-16\tReference\n1.0\t2018-10-15\tReference\n\nSome changes may need to be made across multiple versions and therefore are not considered to be released under any one version. We place all of these recent changes here.\n\nRecent unversioned changes\nApril 2023\nconversation_part IDs are no longer unique across all workspaces\n\n❗️ Breaking change\n\nAs flagged in a previous update, we're making changes to our databases and models, and as a result, the id of a conversation_part will no longer be unique across all workspaces. We're continuing to make this change for other models, and we urge you to make the change for all identifiers which don't consider the workspace_id/app_id.\n\nPrevious updates\nSupported HTML in Articles\n\nFrom now on, additive changes to the HTML content returned by the Articles model will not be considered a breaking change. We will not be introducing new API versions when adding new supported HTML elements or attributes.\n\nRemoving element support or changing its shape in a way that causes previously supported HTML to become unsupported will still constitute a breaking change, and a new API version will be introduced in such cases.\n\nWe encourage all API consumers reading the contents of the Articles model response to handle any valid HTML in the article body, not just the subset defined in the supported HTML specification. This will ensure your code is resilient in handling any new HTML elements or attributes we may support in the future.\n\nListed Articles will no longer return statistics\n\n❗️ Breaking change\n\nArticles which have been listed will no longer return a statistics object. In order to get these statistics, you will now have to take the id of the article you want to fetch the statistics object for, and retrieve the article individually.\n\nTables and Horizontal Rules are now supported as Article HTML content\n\nArticles now support both Tables and Horizontal rules. This will mean they will show in the Articles model, and can be added within the body of an Article when creating or updating these using the valid HTML. The Articles endpoint is available from V2.1 upwards.\n\nText component headers are now bold for Messenger Canvas Kit apps\n\nWhen a Text component which has a style of header is now rendered in a Messenger Canvas Kit app on web, the text will automatically be bold without need for markdown. This is in an effort to better style the text based on its given purpose, and makes for greater content accessibility.\n\nObfuscating Twitter data within Conversation objects\n\n❗️ Breaking change\n\nWe've been informed by Twitter that changes to their API policies mean we're no longer compliant. As a result, we've obfuscated several fields for conversations received from Twitter. This affects all versions of the API for the following models:\n\nConversation Message Object\nCustomer First Reply Object\nConversation Part Object\nChanging id's to no longer be unique across all workspaces\n\n❗️ Breaking change\n\nTo improve performance, we're making changes to our databases and models, and as a result, id will no longer be unique across all workspaces.\n\nThis means that the only unique identifier you should use is the workspace_id/app_id. If you've mapped any data to id's other than the workspace_id/app_id, then you should ensure that you are providing the workspace_id/app_id alongside, or in place of, other id's.\n\nWe made the change for conversation identifiers in late February — meaning the id of a conversation will only be unique to a given workspace. We plan to do the same for the id of a conversation_part some time in the future. We are also likely to apply this across several models in the future so we urge you to make the change for all identifiers which don't consider the workspace_id/app_id."
  },
  {
    "title": "Data table",
    "url": "https://developers.intercom.com/docs/references/unstable/canvas-kit/presentationcomponents/data-table/",
    "html": "Data table\n\nA data-table component is used for rendering a table of key-value pairs. For Messenger, text will wrap around on multiple lines. For Inbox and Frame (ie. Configure) views, we will truncate and use tooltips on hover if the text overflows.\n\nData-Table Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tdata-table\tYes\tThe type of component you are rendering.\nitems\tArray (See Below)\tYes\tThe items that will be rendered in the data-table.\nField-Value Parameters\nParameter\tPossible Values\tRequired\tDescription\ntype\tfield-value\tYes\tThe type of component you are rendering.\nfield\tAny string\tYes\tThe text of the key in your key-value pair.\nvalue\tAny string\tYes\tThe text of the value in your key-value pair."
  },
  {
    "title": "About our REST API",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/",
    "html": "About our REST API\n\nOur REST API is a core building block of the Intercom Platform. You can use it to retrieve and update information from your own Intercom account, or to integrate Intercom into your own product. It's completely up to you and your custom use case.\n\nRegional Hosting\n\nIntercom workspaces can be hosted in three distinct regions - US, EU and Australia. If you call api.intercom.io, we'll attempt to route your request to the correct region, but if you would prefer to specify the region where you expect the data to be stored, you can do so using the endpoints below. These replace the start of the URIs for each REST API endpoint, to connect to the specific regions. For example, to call the /me endpoint for a workspace stored in the EU, you would call https://api.eu.intercom.io/me instead of https://api.intercom.io/me.\n\nRegional Hosting Location\tREST Endpoint to use\nUS\thttps://api.intercom.io/\nEurope\thttps://api.eu.intercom.io\nAustralia\thttps://api.au.intercom.io\nCommon Approaches\n\nThe API uses common approaches for the following:\n\nFunction\tDescription\nData\tAPI data is JSON encoded with UTF-8. API JSON is either a single object or a list of objects.\nErrors\t4xx and 5xx responses returning JSON with error codes.\nRate Limiting\tControls how many requests can be made in a time window.\nHTTP\tMethods are used in accordance with HTTP (GET POST and DELETE are the primary methods used) and resources are identified using URIs. All API requests are sent over HTTPS."
  },
  {
    "title": "Setting up OAuth",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/authentication/setting-up-oauth/",
    "html": "Setting up OAuth\n\nYou'll need to set up OAuth if you're building an integration with Intercom that accesses other peoples' Intercom data. This can be done in a few simple steps:\n\nSetting up OAuth\nProvide the initial information\nRedirect URLs\nPermissions\nPeople & conversation data\nWorkspace data\nGet the authorization code\nTrade your authorization code for an Access Token\nUse your token\nExample Ruby Code\nTrade your authorization code for an access token\n\nAfter you complete these steps, you'll be able to use your access token to execute the actions authorized by an Intercom customer.\n\nACCESSING YOUR OWN DATA ONLY\n\nIf you just want to access your own Intercom data, you can use Access Tokens.\n\nIf you're unsure what you need, click here to get more context on the two options.\n\nProvide the initial information\n\nEach development workspace automatically gives you the option to use OAuth. To start, tick the Use OAuth option on your Authentication page in the Developer Hub.\n\nYou'll now have two sections to fill out:\n\nRedirect URLs\n\nThis is the URL which we POST to when your user has authorized your app to access their information. In other words, it's the URL that Intercom will use to send the authorization code for your user.\n\n❗️ Redirect URLs must use HTTPS\n\nThe redirect will need to communicate over a TLS/SSL connection, so the URL will need to be over HTTPS.\n\nMULTIPLE REDIRECT URLS\n\nYou can provide multiple URLs by selecting the Add redirect URL option after specifying your initial one. The first will always be the default.\n\nAfter approval, you can choose which URL to use when you're initiating the OAuth flow via the redirect_uri parameter. This means you can include testing as well as production URLs here.\n\nPermissions\n\nPermissions let you specify exactly how your application needs to access an Intercom user's account.\n\nYou should only specify the scopes you definitely need for your use case. It's best practice as these will go up for review when you submit your app for review.\n\n🚧 Scopes automatically being selected\n\nIf your app utilizes Canvas Kit, certain permissions are required by default due to the data your app will have access to. The following scopes will be automatically selected and cannot be deselected:\n\nRead and list users and companies\nRead conversations\nRead admins\nGather App data\n\nThe following permissions can be selected via checkboxes on your Authorization page:\n\nPeople & conversation data\nStandard scopes\tDescription\nRead and list users and companies\tList and view all segments, users and companies\nRead and write users\tList all users and execute bulk actions\nWrite users and companies\tCreate and update users and companies\nRead one user and one company\tList and view a single user and company\nRead tags\tList all tags\nWrite tags\tCreate, update, use and delete tags\nRead conversations\tView conversations\nWrite conversations\tReply to, mark as read and close conversations\nRead events\tList all events belonging to a user\nWrite events\tAbility to submit events (i.e. user activity)\nRead counts\tCount users and companies with specified criteria\nWrite data attributes\tCreate and update custom data attributes\nExport message data\tExport engagement data for messages\nExport content data\tExport engagement data for content\nRead content data\tCreate and update custom data attributes\nRead tickets\tView tickets\nWrite tickets\tCreate tickets\nWorkspace data\nExtended scopes\tDescription\nRead admins\tList and view all admins\nRead one admin\tView a single admin\nUpdate admins\tUpdate away mode for admins\nRead admin activity logs\tList and view all admins and their activity\nRead data when entered into the app\tGather data via Intercom Apps\nRead and List news items and newsfeeds\tList and view all News items and Newsfeeds\nRead and Write news items and newsfeeds\tRead, Update and Create news items and newsfeeds\nRead and List articles\tList and view all articles\nRead and Write Articles\tRead, Update and Create articles\nCreate phone call redirects\tCreate phone call redirects\nSELECTING WEBHOOK TOPICS\n\nWebhook topics are related to corresponding permission scopes. For example, if you need to setup a webhook to trigger when a user/lead is created then you will need to select the \"Read and write users\" permission scopes. You will then be able to setup the webhook topics for your app which will fire for each workspace it is installed on. Checkout our docs on setting up webhooks for more detailed information on how to enable webhooks for your app.\n\nGet the authorization code\n\nYou'll first need your client_id and client_secret. These can be found on the Basic Information page for your app in the Developer Hub.\n\nTo get the Authorization Code, you will need to redirect your user to the following URL:\n\nhttps://app.intercom.com/oauth?client_id=___&state=___\n\nclient_id: Your app's Client ID (see above)\nstate: A random session specific string which we will return in the callback to allow you to identify the session and mitigate CSRF attacks\n\nYour user will be presented with the permissions that your app is requesting. Once the user approves this request, they are redirected back via the Redirect URLs which you provided earlier.\n\nThe request to your Redirect URL will have 2 URL parameters: code and state. For example:\n\nhttps://yourapp.com/callback?code=___&state=___\n\ncode: This is the Authorization Code you will use to retrieve an Access Token\nstate: This should be the same as the state string you passed to the Authorization Code endpoint above\nTrade your authorization code for an Access Token\n\nWe can now exchange the code for the Access Token with a POST request to:\n\nhttps://api.intercom.io/auth/eagle/token\n\n\nwith the following parameters in the body:\n\ncode: The Authorization Code received above\nclient_id: Your app's Client ID from the Developer Hub (see above)\nclient_secret: Your app's Client secret from the Developer Hub (see above)\n\nA successful request will receive a response with the following parameters in the body of the response:\n\ntoken_type: Always 'Bearer'\ntoken: The Access Token\naccess_token: A duplicate of the Access Token above\n{\n  \"token_type\": \"Bearer\",\n  \"token\": \"dG9rOjBiM...\",\n  \"access_token\": \"dG9rOjBiM...\"\n}\n\nUse your token\n\nNow that we have the authorized token, we can use this to execute some action on behalf of our user.\n\nFor example, to retrieve the admin and app information associated with the Access Token:\n\ncurl --request GET \\\n     --url 'https://api.intercom.io/me' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <ACCESS_TOKEN>'\n\n// npm install api --save\n\nconst sdk = require('api')('@intercom-api-reference/v2.8#132bo2vleh7syud');\n\nsdk.auth('<ACCESS_TOKEN>');\nsdk.identifyAdmin({'intercom-version': '2.8'})\n  .then(({ data }) => console.log(data))\n  .catch(err => console.error(err));\n\n\nimport requests\n\nurl = \"https://api.intercom.io/me\"\n\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": \"Bearer <ACCESS_TOKEN>\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)\n\n\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.intercom.io/me\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"Intercom-Version\"] = '2.8'\nrequest[\"authorization\"] = 'Bearer <ACCESS_TOKEN>'\n\nresponse = http.request(request)\nputs response.read_body\n\n// composer require guzzlehttp/guzzle\n<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'https://api.intercom.io/me', [\n  'headers' => [\n    'Intercom-Version' => '2.8',\n    'accept' => 'application/json',\n    'authorization' => 'Bearer <ACCESS_TOKEN>',\n  ],\n]);\n\necho $response->getBody();\n\n\nAn example, successful response would be:\n\n{\n  \"type\": \"admin\",\n  \"id\": \"2633609\",\n  \"email\": \"hermione.granger@awesomecorp.io\",\n  \"name\": \"Hermione Granger\",\n  \"email_verified\": true,\n  \"app\": {\n    \"type\": \"app\",\n    \"id_code\": \"drzzt019\",\n    \"name\": \"Hogwarts workspace\",\n    \"created_at\": 1661876617,\n    \"secure\": true,\n    \"identity_verification\": true,\n    \"timezone\": \"Europe/Edinburgh\",\n    \"region\": \"US\"\n  },\n  \"avatar\": {\n    \"type\": \"avatar\",\n    \"image_url\": \"https://static.intercomassets.com/avatars/56395503/square_128/5449623-166556.jpg\"\n  },\n  \"has_inbox_seat\": true\n}\n\n\nFind out more about how to use the token through this link.\n\nUSE OMNIAUTH INSTEAD\n\nWe have added support for Intercom to number of OAuth libraries. It makes the setup process much easier, so it is a good way to setup OAuth for your app:\n\nFor Rails apps, use Intercom strategy for OmniAuth.\n\nFor Node.js apps, use Intercom Strategy for Passport.\n\nFor PHP apps, use Intercom Provider for PHP League's OAuth 2.0.\n\nFor GO apps, use GOTH library. To prevent user impersonation, check that user.RawData[\"email_verified\"] is set to true in the response.\n\nExample Ruby Code\n\nIntercom provides some Ruby sample code that you can use to allow the user to authorize MyApp's request via a \"Connect with Intercom\" button.\n\nFirstly, you will need to generate a Self Signed Certificate and a Private Key if you don't have SSL setup on your site. You can do so like so:\n\nopenssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout pkey.pem -out cert.crt\n\n\nNow you can use this very simple Sinatra setup with one of your publicly available endpoints to test the OAuth flow:\n\n<a href=\"https://app.intercom.com/oauth?client_id=<XXXXXXXXXXXX>&state=example\"><img src=\"https://static.intercomassets.com/assets/oauth/primary-7edb2ebce84c088063f4b86049747c3a.png\" srcset=\"https://static.intercomassets.com/assets/oauth/primary-7edb2ebce84c088063f4b86049747c3a.png 1x, https://static.intercomassets.com/assets/oauth/primary@2x-0d69ca2141dfdfa0535634610be80994.png 2x, https://static.intercomassets.com/assets/oauth/primary@3x-788ed3c44d63a6aec3927285e920f542.png 3x\"/></a>\n\n#!/usr/bin/env ruby\n#\n# This code snippet shows how to enable SSL in Sinatra+Thin.\n#\n\nrequire 'sinatra'\nrequire 'thin'\nrequire 'json'\nrequire 'slim'\n\nclass MyThinBackend < ::Thin::Backends::TcpServer\n  def initialize(host, port, options)\n    super(host, port)\n    @ssl = true\n    @ssl_options = options\n  end\nend\n\nconfigure do\n  set :environment, :production\n  set :bind, '0.0.0.0'\n  # set :port, 443\n  set :server, \"thin\"\n  class << settings\n    def server_settings\n      {\n          :backend          => MyThinBackend,\n          :private_key_file => File.dirname(__FILE__) + \"/pkey.pem\",\n          :cert_chain_file  => File.dirname(__FILE__) + \"/cert.crt\",\n          :verify_peer      => false\n      }\n    end\n  end\nend\n\nget '/' do\n  File.read('intercom.html')\nend\n\nget '/home' do\n  \"Welcome Back\"\nend\n\nget '/callback' do\n  code = params[:code]\n  state = params[:state]\n  puts \"CODE: #{code}\"\n  puts \"STATE:#{state}\"\n  redirect '/home'\nend\n\n\nThe full code example can be found here. You can copy the Intercom JS to a file, and reference it in a page where a user can click through to provide authorization. Then you will need to have a route for the Redirect URL you provided.\n\nWhen you run your server and click through to authorize the user, you should see something similar outputted on the terminal:\n\n> ruby ssl_server.rb\n== Sinatra (v1.4.7) has taken the stage on 4567 for production with backup from Thin\nThin web server (v1.6.4 codename Gob Bluth)\nMaximum connections set to 1024\nListening on 0.0.0.0:4567, CTRL+C to stop\n[05/May/2016:10:15:44 +0000] \"GET / HTTP/1.1\" 200 512 0.0036\nCODE: XXXXXXXXXXXXXXXXXXXXXXXXX\nSTATE:example\n89.101.228.226 - - [05/May/2016:10:15:49 +0000] \"GET /callback?code=XXXXXXXXXXXXXXXXXX&state=example HTTP/1.1\" 302 - 0.0008\n[05/May/2016:10:15:49 +0000] \"GET /home HTTP/1.1\" 200 12 0.0005\n\nTrade your authorization code for an access token\n\nWe can now exchange the code for the Access Token with a POST request to the Intercom Eagle endpoint.\n\nFor the simplified purposes of understanding the flow, add the following code to you callback route:\n\n# We can do a Post now to get the access token\n  uri = URI.parse(\"https://api.intercom.io/auth/eagle/token\")\n  response = Net::HTTP.post_form(uri, {\"code\" => params[:code],\n                                       \"client_id\" => \"XXXXXXXXXXXX\",\n                                       \"client_secret\" => \"YYYYYYYYYYYYY\"})\n\n  # Break Up the response and print out the Access Token\n  rsp = JSON.parse(response.body)\n  puts \"ACCESS TOKEN: #{rsp[\"token\"]}\"\n\n#!/usr/bin/env ruby\n#\n# This code snippet shows how to enable SSL in Sinatra+Thin.\n#\n\nrequire 'sinatra'\nrequire 'thin'\nrequire 'json'\nrequire 'slim'\nrequire 'json'\nrequire \"net/http\"\nrequire \"uri\"\n\nclass MyThinBackend < ::Thin::Backends::TcpServer\n  def initialize(host, port, options)\n    super(host, port)\n    @ssl = true\n    @ssl_options = options\n  end\nend\n\nconfigure do\n  set :environment, :production\n  set :bind, '0.0.0.0'\n  #:set :port, 443\n  set :server, \"thin\"\n  class << settings\n    def server_settings\n      {\n          :backend          => MyThinBackend,\n          :private_key_file => File.dirname(__FILE__) + \"/pkey.pem\",\n          :cert_chain_file  => File.dirname(__FILE__) + \"/cert.crt\",\n          :verify_peer      => false\n      }\n    end\n  end\nend\n\nget '/' do\n  File.read('intercom.html')\nend\n\nget '/home' do\n  \"Welcome Back\"\nend\n\nget '/callback' do\n  #Get the Code passed back to our redirect callback\n  @code = params[:code]\n  @state = params[:state]\n  puts \"CODE: #{@code}\"\n  puts \"STATE:#{@state}\"\n\n  #We can do a Post now to get the access token\n  uri = URI.parse(\"https://api.intercom.io/auth/eagle/token\")\n  response = Net::HTTP.post_form(uri, {\"code\" => params[:code],\n                                       \"client_id\" => \"XXXXXXXXXXXXX\",\n                                       \"client_secret\" => \"YYYYYYYYYYYY\"})\n\n  #Break Up the response and print out the Access Token\n  rsp = JSON.parse(response.body)\n  puts \"ACCESS TOKEN: #{rsp[\"token\"]}\"\n  redirect '/home'\nend\n\npost '/callback' do\n push = JSON.parse(request.body.read)\n puts \"I got some JSON: #{push.inspect}\"\nend\n\n\nWhen you run your server and click through to authorize the user, you should now also see the \"Access Token\" output on the terminal:\n\nruby ssl_server.rb\n== Sinatra (v1.4.7) has taken the stage on 4567 for production with backup from Thin\nThin web server (v1.6.4 codename Gob Bluth)\nMaximum connections set to 1024\nListening on 0.0.0.0:4567, CTRL+C to stop\n[05/May/2016:10:45:32 +0000] \"GET / HTTP/1.1\" 200 512 0.0041\nCODE: XXXXXXXXXXXXXXXXXXXXX\nSTATE:example\nACCESS TOKEN: YYYYYYYYYYYYYYYYYYYYYYYYYY\n[05/May/2016:10:45:36 +0000] \"GET /callback?code=XXXXXXXXXXXXXXXXXXXX&state=example HTTP/1.1\" 302 - 0.7180\n[05/May/2016:10:45:36 +0000] \"GET /home HTTP/1.1\" 200 12 0.0004\n"
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/unstable/introduction/",
    "html": "Introduction\nUNSTABLE VERSION\n\nThis version of the REST API is not considered stable and everything within is subject to change. We recommend using this for test and staging environments, as opposed to within production. Take a look at the Changelog for what's new.\n\nAre you looking at the right version of the API? For more information on versions check out our Changelog. For info on how to change your version see our versioning page.\n\nThis API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Create an article via Intercom API",
    "url": "https://developers.intercom.com/docs/guides/help-center/create-an-article/",
    "html": "Create an article via Intercom API\n\nThis tutorial will walk you through creating an Article inside a Collection via Intercom API.\n\nStep 1: Create a collection\n\nA collection is a way to group your Help Center articles by topics and provide easy navigation for your users.\n\nTo create a collection in Intercom, you need to make a call to Collections API:\n\ncurl --request POST \\\n     --url https://api.intercom.io/help_center/collections \\\n     --header 'Intercom-Version: 2.9' \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"name\": \"Getting started\",\n  \"description\": \"Everything you need to get started with articles\"\n}\n'\n\n\nThis will return the Collection object. You'll need its id in Step 3.\n\nStep 2: Fetch an author for the article\n\nTo create an article, you need to provide the id of its author. In this tutorial, we'll use the currently logged in admin user as an author. You may use the id of any Intercom admin that has the permission to create articles: if they don't, the API will return a 401 error.\n\nWe provide a dedicated API to find the admin user who is logged in:\n\ncurl --request GET \\\n     --url https://api.intercom.io/me \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>'\n\n\nThis will return the Admin object. You'll need its id in Step 3.\n\nStep 3: Create an article\n\nTo create an article in Intercom, you need to make a call to Articles API :\n\ncurl --request POST \\\n     --url https://api.intercom.io/articles \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"title\": \"How to create an article\",\n  \"body\": \"An easy way to create an article is via Intercom API. You can also create an article via Intercom UI.\",\n  \"author_id\": <admin_id>,\n  \"state\": \"draft\",\n  \"parent_type\": \"collection\",\n  \"parent_id\": <collection_id>,\n}\n'\n\n\nOnce the article is created, you may also choose to make it public by making an update to its state via the API:\n\ncurl --request PUT \\\n     --url https://api.intercom.io/articles/<article_id> \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer <Your access token>' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"state\": \"published\"\n}\n'\n\n\nYou should now see this article in your Help Center:\n\nCongrats! You are done.\n\nNext steps\nSee how to add translated content to your Help Center.\nLearn more about Articles as a product.\nExplore the Articles API.\nExplore the Collections API."
  },
  {
    "title": "Constructing a Article using HTML",
    "url": "https://developers.intercom.com/docs/guides/help-center/supported-html/",
    "html": "Constructing a Article using HTML\n\nTo provide the most flexibility possible, when creating or updating an article you can use HTML and CSS to construct the article body. Whilst we allow a wide range of tags, we do not allow all of them. This is to ensure that we can render the article in all of our supported channels. You can find a list of supported tags below.\n\nOver time we may add support for new HTML elements and attributes. This will not constitute a breaking change, we advise any client code to support the full HTML specification when reading article content. Removing element support, or otherwise changing the API in a way that causes previously supported HTML to become unsupported will be considered a breaking change.\n\nSupported HTML\nTag\tWhat does it do?\tAdditional Details\n<p>\tParagraph\tAll text must be placed within paragraph tags.\n<br>\tLine break\tSupported in-line.\n<hr>\tHorizontal rule\tNA\n<h1> <h2>\tHeading\tOnly these two header tags are supported. All others will be replaced with <h2>.\n<a>\tLink\tAn image can be placed in-between the link tags.\n<img>\tImage\tImages will be uploaded to Intercom and we'll use an Intercom link to display these.\nIf these fail to upload then we'll hard fail and return 400 Bad Request.\n<ul> <ol> <li>\tList\tLists must contain at least one non-empty <li> element.\n\n<li> elements can contain plain text, or any other supported HTML tags, except <table>.\n\nIf these criteria aren't met, then the article will hard fail and return 400 Bad request.\n<table>\tTable\tNeeds to have at least one row and one cell.\nCan contain any other supported HTML tags, except another <table> within.\nIf these criteria aren't met then it will hard fail and return 400 Bad request.\n<iframe>\tVideo\tsrc must be for a supported video embed link.\nOnly works for Youtube, Wistia, Vimeo, Loom, Vidyard or StreamIO.\n<pre> <code>\tPre-formatted code\t\n<b> <strong>\tBold\t\n<i> <em>\tItalic\t\nSupported CSS\nClass\tWhat does it do?\tWhere does it work?\nintercom-align-center\tCenter Alignment\tOn tag level: Headers, Paragraphs.On wrapping div: Images, Buttons.\nintercom-h2b-button\tButton\tOn tag level: Links\nUnsupported HTML\nTag\tWhat does it do?\tWhat do we do?\n<dl>\tDefinition List\tHard fail - 400 Bad Request\n<ul> or <ol>\tNested lists\tHard fail - 400 Bad Request\n<iframe>\tiFrameUnsupported video\tHard fail - 400 Bad Request\n<div> <span>\tContent division\tReplace with <p>\n<h3> to <h6>\tHeading\tReplace with <h2>\n<form>\tForm\tRemove from content\n<input> <textarea>\tInput\tRemove from content\n<script>\tJavascript Script\tRemove from content\n<head> <html> <footer> etc.\tAll other tags\tRemove from contentInternals replaced with <p>"
  },
  {
    "title": "What are Articles and Collections?",
    "url": "https://developers.intercom.com/docs/guides/help-center/",
    "html": "What are Articles and Collections?\n\nArticles allow you to build a knowledge base for your product and lets you provide customers with faster support. You can automatically suggest articles to answer common questions, and let your customers quickly help themselves before they reach out to your support team.\n\nYou can organize your Articles into Collections to make navigation easier. Collections are top level containers for Articles, but can also contain other Collections up to three levels deep.\n\nHow can I interact with my Help Center via the API?\n\nYou can perform create, read, update and delete actions across all the Help Center features.\n\nArticles\nCollections\nWhat's next?\nLearn about how to create Articles and Collections via the API.\nLearn more about Articles as a product."
  },
  {
    "title": "Data Hosting Region Configuration",
    "url": "https://developers.intercom.com/installing-intercom/react-native/data-hosting-region-configuration/",
    "html": "Data Hosting Region Configuration\n\nFor customers who are part of Data Hosting in Europe, you will need to modify your app's configuration in order to configure the iOS Messenger to point to your EU workspace.\n\niOS\n\nSee our iOS Installation guidelines here.\n\nExpo\n\nFor customers using Expo you can modify your info.plist by adding the following as a to the info.plist secion of your app.json file.\n\n\"infoPlist\": {\n  \"IntercomEURegion\": \"true\"\n},\n\nAndroid\n\nSee our Android Installation guidelines here."
  },
  {
    "title": "Data Hosting Region Configuration",
    "url": "https://developers.intercom.com/installing-intercom/cordova-phonegap/data-hosting-region-configuration/",
    "html": "Data Hosting Region Configuration\n\nFor customers who wish to configure their data hosting region, you will need to modify your app's config.xml in order to configure the Messenger to point to your desired workspace.\n\nThis is usually present in /<YOUR_APP_DIR>/config.xml\n\niOS\n\nYou can add a String entry into your info.plist by adding the following to config.xml file.\n\n<widget>\n...\n\n    <config-file target=\"*-Info.plist\" parent=\"IntercomRegion\">\n        <string>EU</string> <!-- This can be US, EU or AU to point to United States, Europe, Australia regions respectively-->\n    </config-file>\n...\n</widget>\n\n\nThe SDK will default to US servers if this parameter is not specified.\n\nValid options for value are\n\nEU for Europe region\nAU for Australia region\nUS for United States region\nAndroid\n\nYou can add a meta-data into AndroidManifest.xml by adding the following to config.xml file\n\n<widget>\n...\n\n    <config-file target=\"AndroidManifest.xml\" parent=\"/manifest/application\">\n        <meta-data android:name=\"io.intercom.android.sdk.server.region\" android:value=\"@integer/intercom_server_region_aus\" />\n    </config-file>\n...\n</widget>\n\n\nThe SDK will default to US servers if this parameter is not specified.\n\nValid options for io.intercom.android.sdk.server.region are\n\nintercom_server_region_eu for Europe region\nintercom_server_region_aus for Australia region\nintercom_server_region_us for United States region"
  },
  {
    "title": "Identity Verification",
    "url": "https://developers.intercom.com/installing-intercom/cordova-phonegap/identity-verification/",
    "html": "Identity Verification\n\nIdentity verification helps to make sure that conversations between you and your users are kept private and that one user can't impersonate another. We strongly encourage all Intercom customers to set up and enable identity verification.\n\nEnable Identity Verification\n\nTo enable identity verification in a Cordova/Phonegap app you will need to enable it on both iOS and Android.\nGet the Android identity verification secret from your Android app settings and iOS identity verification secret from your iOS app settings and store them in a secure place on your app server.\n\nNext toggle enforce identity verification to on for both Android and iOS.\n\n❗️ Have you already released your app with the Intercom messenger in it?\n\nIf you have then enabling identity verification will stop old versions of your app communicating with Intercom. We recommend that you complete setting up identity verification and test that everything is working. Then turn off identity verification and release an update to your app. This update will be sending user hashes to Intercom but not enforcing it. Once you are happy with the number of users on versions of your app sending the user hash you can come back and toggle identity verification on which will then start enforcing it for all versions of your app.\n\nReturning the HMAC Digest from your App Server's Authentication Call\n\nYour app server authentication code needs to be modified so that it uses the Intercom Android and iOS API Secrets to create a HMAC digest (hash based message authentication code) from the user id or email address for that user.\nWith a Cordova/Phonegap app we have to use the correct secret per platform. I would suggest passing in the platform to your app server authentication code. The example below shows how you might call a method on your server providing it the mobile platform.\n\nyourApi.authenticateUser(user_id_or_email, password, device.platform);\n\n\nThen it returns the HMAC digest to your Cordova/Phonegap app. Note that identity verification does not apply to unidentified users, for whom you do not have a user id or email address.\n\nThe HMAC is computed as a SHA-256 digest as follows:\n\ndef authenticateUser (user_id_or_email, password, platform)\n  ... do your app authentication and if successful generate a hmac for intercom\n  if platform == iPhone\n    OpenSSL::HMAC.hexdigest('sha256', ios_api_key.secret, user_id_or_email) \n  else\n    OpenSSL::HMAC.hexdigest('sha256', android_api_key.secret, user_id_or_email) \n  end\nend\n\n\nIf you wish to generate a HMAC in a different programming language we have a comprehensive list here.\n\nSet the User Hash in your Cordova/Phonegap App\n\nWhen your Cordova/Phonegap app initializes Intercom if the user is identified (i.e., you have a user id or email address), pass in a String of the HMAC returned from your server's authentication call. This should be called before making the registerIdentifiedUser call:\n\nintercom.setUserHash(\"your_hmac_of_user_id_or_email\");\n\n\nThe Intercom API Auth Server uses its copy of the Android and iOS API Secrets to recreate the HMAC digest from the user_id or email. If it matches with the supplied HMAC digest, we can be sure that this request is coming from your app server and the API Auth Server issues an access token to the Android messenger.\n\nIf the HMAC fails to verify, the API Auth Server responds with a 401.\n\n📘 Sending both user_id and email values?\n\nIf you send both email and user_id values in your integration, you need to calculate the HMAC on the user_id value.\n\nSending an HMAC derived from the email will fail with a 401 if a user_id is provided\n\nTroubleshooting\nMake sure you are using the correct identity verification secret for each platform eg. on iOS your server is returning a HMAC using the iOS secret not the Android one.\nThe user data passed to your server must be either the user_id or email for that Intercom user. If you supply both email and user_id values, calculate the HMAC on the user_id value\nDo not forget that identity verification needs to be activated (and configured) separately in your development/test and production apps."
  },
  {
    "title": "Supported versions",
    "url": "https://developers.intercom.com/installing-intercom/cordova-phonegap/supported-versions/",
    "html": "Supported versions\n\nThe latest major version of Intercom for Cordova & PhoneGap is v8. This is fully supported and receives regular feature enhancements and bug fixes.\n\nIf you are using an older version of the plugin, please upgrade, as these are no longer supported."
  },
  {
    "title": "Configuration",
    "url": "https://developers.intercom.com/installing-intercom/cordova-phonegap/configuration/",
    "html": "Configuration\n\nTrack who your users are and what they do in your mobile app and customize the Intercom Messenger. Here’s how to configure Intercom for Cordova/Phonegap:\n\nUpdate a user\n\nYou can send any data you like to Intercom from standard user attributes that are common to all Intercom users to custom user attributes that are unique to your app.\n\nStandard user attributes such as a user's name or email address can be updated by calling:\n\nintercom.updateUser({ email: \"bob@example.com\", name: \"Bob\" });\n\n\nTypically our customers see a lot of value in sending custom data that relates to customer development, such as price plan, value of purchases, etc. Custom user attributes can be created and modified by passing a custom_attributes map. A detailed description of the user model is available here.\n\nintercom.updateUser({\n    custom_attributes: {\n        paid_subscriber : true,\n        monthly_spend: 155.5,\n        team_mates: 3\n    }\n});\n\n\n👍\n\nYou don’t have to create attributes in Intercom beforehand. If a custom attribute hasn't been seen before, it will be created for you automatically.\n\nYou can also set company data by submitting an attribute map, like:\n\nintercom.updateUser({\n    companies: [\n        {\n            name : \"My company\",\n            company_id: \"abcd1234\"\n        }\n    ]\n});\n\n\n📘\n\nid is a required field for adding or modifying a company.\nA detailed description of the company model is available here.\nSubmit an event\n\nYou can log events in Intercom that record what users do in your app and when they do it. For example, you could record the item a user ordered from your mobile app, and when they ordered it.\n\nintercom.logEvent(\"ordered_item\", {\n    order_date: 1392036272,\n    stripe_invoice: \"inv_3434343434\",\n    order_number: 123\n    value: \"3434-3434\",\n    url: \"https://example.org/orders/3434-3434\"\n});\n\n\nYou’ll find more details about how events work and how to submit them here.\n\nCustomize the Intercom Messenger\n\nWe definitely recommend that you customize the Intercom Messenger so that it feels completely at home on your product, site or mobile app. Here’s how:\n\nSelect the color and language of the Messenger and how personalize your profiles.\nFollow the below steps to choose how the launcher appears and opens for your users.\nChoose how the launcher appears and opens for your users\n\nIf you’d like the standard launcher to appear on the bottom right-hand side of your screen, just call:\n\nintercom.setLauncherVisibility('VISIBLE');\n\nCreate a custom launcher\n\nHowever, if you’d like the Messenger to open from another location in your mobile app, you can create a custom launcher. This allows you to specify a button, link or element that opens the Messenger. For example, you can trigger the launcher to open when a customer clicks on your ‘Help and Support’ button.\n\nIf you have a custom launcher, you can call intercom.displayMessenger(); and we’ll ensure the Messenger opens in the best place for each user. For example:\n\nIf a user has one unread conversation, we open that conversation.\nIf a user has no conversations, we open the composer.\nIf a user has more than one unread conversation, we open the conversations list.\nIf a user has no unread conversations, we open the last screen they were on when they closed it.\nShow your user’s unread message count\n\nNow you can show how many unread conversations your user has on your custom launcher. Even if a user dismisses a notification, they’ll still have a persistent indicator of unread conversations.\n\nJust grab the current count with this method:\n\nintercom.unreadConversationCount();\n\nTemporarily hide notifications\n\nYou can prevent in app messages from popping up in certain parts of your app by calling:\n\nintercom.setInAppMessageVisibility('GONE');\n\n\nYou can hide the Intercom Messenger in your app by calling:\n\nintercom.hideMessenger();\n\nArticles Help Center\n\nFrom version 6.0.0 of the Cordova plugin we support opening up your Articles Help Center.\n\nhttps://www.intercom.com/help/en/articles/56660-resources-to-help-with-educating-your-customers.\n\nTo open up the Help Center simply call intercom.displayHelpCenter() and we will display a view with your Help Center content in it.\n\n🚧 Make sure Help Center is turned on\n\nIf you don't have Help Center enabled in your Intercom settings the method displayHelpCenter will log an error and not open. To enable your Help Center please go here and click the \"Turn On Help Center\" button.\n\nPresent an Article Programmatically\n\nFrom version 9.3.0 of the Cordova plugin you can programmatically display an Article. To display an Article, pass in an articleID from your Intercom workspace to the following method:\n\nintercom.displayArticle(“123456”);\n\n\n🚧 Make sure your article is live\n\nAn article must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nPresent a Carousel Programmatically\n\nFrom version 9.3.0 of the Cordova plugin you can programmatically display a Carousel. To display a Carousel, pass in a carouselID from your Intercom workspace to the following method:\n\nintercom.displayCarousel(“123456”);\n\n\n🚧 Make sure your carousel is live\n\nA carousel must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nPresent a Survey Programmatically\n\nFrom version 12.1.0 of the Cordova plugin you can programmatically display a Survey. To display a Survey, pass in a surveyID from your Intercom workspace to the following method:\n\nintercom.displaySurvey(“123456”);\n\n\n🚧 Make sure your survey is live\n\nA survey must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nWhat's next?\n\nNow that you have Intercom configured you can:\n\nEnable Secure Mode for Cordova.\nConfigure Push Notifications for Cordova/Phonegap"
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/cordova-phonegap/push-notifications/",
    "html": "Push Notifications\n\nIntercom for mobile supports Push Notifications on iOS and Firebase Cloud Messaging (FCM) on Android. To get started, you can read our FCM docs, or our iOS docs.\n\niOS\n\nTo enable iOS push notifications, simply call the following anywhere in your code:\n\nintercom.registerForPush();\n\nAndroid\n\nTo enable Android FCM push notifications, copy your google-services.json file into the root directory of your project and add this line to config.xml\n\n<preference name=\"intercom-android-push-type\" value=\"FCM\"/>\n\n\nAs always, you can contact us via Intercom. We're always here to help 😀"
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/android/fcm-push-notifications/",
    "html": "Push Notifications\n\nBelow, we’ll show you how to send push notifications and/or push messages to your customers, with Firebase Cloud Messaging (FCM) in Intercom.\n\nStep 1. Enable Google services for your app\n\nIf you already have a Firebase project with notifications enabled you can skip to the next step. Otherwise go to the FCM Console page and create a new project following these steps:\n\nGive the project a name and click ‘Create Project’.\n\nOnce your project is set up, scroll down and select the ‘Cloud Messaging’’ card.\n\nClick on the Android icon to continue setup.\n\nEnter your app’s package name and click ‘Register App’.\n\nStep 2. Setup client to receive push\n\nClick the button \"Download google-services.json\" to download the config file. You’ll need to move that file into the same directory as your application level build.gradle.\n\nClick \"next\" and then in your apps build.gradle you will need to add the following lines to your dependencies:\n\ngroovyKotlin\ndependencies {\n    implementation 'io.intercom.android:intercom-sdk:10.6.1'\n    implementation 'com.google.firebase:firebase-messaging:20.2+'\n}\n\n\nAt the bottom of your build.gradle you must add:\n\napply plugin: 'com.google.gms.google-services'\n\nIt is important that this is at the very end of the file.\n\nClick the Next button and then skip the verification step.\n\nStep 3. Add your Server key to Intercom for Android settings\n\nFinally, click the settings cog and select ‘Project settings’, then ‘Cloud Messaging tab’ and copy your Server key.\n\nOpen your Intercom app’s settings and select ‘Installation -> Android’. Then find the ‘Enable Push Notifications’ section. Here you'll be able to paste and save your Server API key.\n\nStep 4. Setting your FCM icon (Optional)\n\nIf you want to add a custom icon for your notifications, just add an image named intercom_push_icon.png to each of your supported densities. Please note that vector drawables cannot be used here. For example:\n\n/res/drawable-xxhdpi/intercom_push_icon.png \n/res/drawable-xhdpi/intercom_push_icon.png \n/res/drawable-hdpi/intercom_push_icon.png \n/res/drawable-mdpi/intercom_push_icon.png\n\n\n👍 Notifications icon design guidelines\n\nWe recommend following these material design guidelines for producing this icon.\n\nStep 5. Disable push on log out\n\nTo stop users from receiving push messages when they have logged out of the app make sure to call:\n\nKotlinJava\nIntercom.client().logout()\n\nStep 6. Using Intercom with other FCM setups (Optional)\n\nThe Intercom android sdk already comes with a default implementation of FirebaseMessagingService. This provides default implementations for onNewToken and onMessageReceived for FCM to work with Intercom. This step can be skipped if your app uses only Intercom for Push Notifications\n\nIf your application uses FCM for your own content, or if you use a third party service for FCM. You’ll need to update your FirebaseInstanceIdService and FirebaseMessagingService.\n\nYou should have a class that extends FirebaseMessagingService or the now deprecated FirebaseInstanceIdService. That service is where you get the device token to send to your backend to register for push. To register for Intercom push set it up like this:\n\nKotlinJava\nprivate val intercomPushClient = IntercomPushClient()\n\noverride fun onNewToken(refreshedToken: String) {\n    intercomPushClient.sendTokenToIntercom(application, refreshedToken)\n    // DO HOST LOGIC HERE\n}\n\noverride fun onMessageReceived(remoteMessage: RemoteMessage) {\n    val message = remoteMessage.data\n    if (intercomPushClient.isIntercomPush(message)) {\n     intercomPushClient.handlePush(application, message)\n    } else {\n        // DO HOST LOGIC HERE\n    }\n}\n\nTroubleshooting tips\n\nIf you’re having trouble getting FCM to work in your app, here's a list of things you should check:\n\nMake sure to tick the 'Send a push notification' box when you send a manual message.\nCheck that the notifications are not disabled for your app on your test device. Settings > Sound & Notification > App notifications. This may differ depending on the Android version.\nDid you specify the correct Push Server API key?\nMake sure you added your google-services.json file in the correct directory.\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀\n\nStep 7. Open Intercom conversations from FCM\n\nWhen a user taps on a push notification we hold onto data such as the URI in your message or the conversation to open. When you want Intercom to act on that data, just call:\n\nKotlinJava\nIntercom.client().handlePushMessage()\n\n\n📘 Note\n\nIt’s important to wait for any splash screens or loading screens to finish before calling handlePushMessage or your users might not have time to see the conversation we opened.\n\nIf you wish to create a custom back stack for this notification you can pass a TaskStackBuilder to the same method:\n\nKotlinJava\nhandlePushMessage(stackBuilder)\n"
  },
  {
    "title": "Using Intercom",
    "url": "https://developers.intercom.com/installing-intercom/android/using-intercom/",
    "html": "Using Intercom\n\nTrack who your users are and what they do in your mobile app and customize the Intercom Messenger. Here’s how to configure Intercom for Android:\n\nUser Login\n\nYou’ll now need to login your users before you can talk to them and track their activity in your app.\n\nThere are two type of users that can be created in Intercom: identified and unidentified.\n\nIdentified users: If users need to login to your app to use it, such as Facebook, Instagram, or Slack, they would be considered identified users.\nUnidentified users: If your app does not have a login option, like Angry Birds or a flashlight app, you have unidentified users.\n\nThere are three ways to log users into Intercom that visit your app:\n\nOnly login identified users\nOnly login unidentified users\nLogin both identified and unidentified users - an example of this is where your app has a login option, but it’s not essential for users to login to use your app, like Google Maps or YouTube.\n\nThe option you choose should be informed by the design of your app, namely whether you have a login option.\n\nLogin your identified (logged in) users into Intercom\nFirst you'll have to create an user\nKotlinJava\nval registration = Registration.create().withUserId(\"123456\")\n\nThen can login your user, like this:\nKotlinJava\nprivate fun successfulLogin() {\n        /* For best results, use a unique user_id if you have one. */\n        val registration = Registration.create().withUserId(\"123456\")\n        Intercom.client().loginIdentifiedUser(\n            userRegistration = registration,\n            intercomStatusCallback = object : IntercomStatusCallback{\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n\n            }\n        )\n}\n\n\n📘 Note\n\nIf you don't have a unique userId to use here, or if you have a userId and an email you can use with Email(String email) on the Registration object.\n\nYou’ll also need to register your user anywhere they sign in. Just call:\nKotlinJava\nif (loggedIn) {\n/* We're logged in, we can register the user with Intercom */\n    val registration = Registration.create().withUserId(\"123456\")\n    Intercom.client().loginIdentifiedUser(\n            userRegistration = registration,\n            intercomStatusCallback = object : IntercomStatusCallback{\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n\n            }\n        )\n}\n\nLogin your unidentified users (visitors)\n\nFollow these instructions to login your unidentified users:\n\nKotlinJava\noverride fun onCreate() {\n    super.onCreate()\n    Intercom.initialize(this, \"your api key\", \"your app id\")\n    Intercom.client().loginUnidentifiedUser(\n            intercomStatusCallback = object : IntercomStatusCallback{\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n\n            }\n        )\n}\n\nLogin your users and visitors\nFirst, you’ll need to login your user, like this:\nKotlinJava\nprivate fun successfulLogin() {\n    /* For best results, use a unique user_id if you have one. */\n    val registration = Registration.create().withUserId(\"123456\")\n    Intercom.client().loginIdentifiedUser(registration, new IntercomStatusCallback() {\n                @Override\n                public void onSuccess() {\n                    // Handle success\n                }\n\n                @Override\n                public void onFailure(@NonNull IntercomError intercomError) {\n                    // Handle failure\n                }\n            });\n}\n\n\n📘 Note\n\nIf you don't have a unique userId to use here, or if you have a userId and an email you can use withEmail(String email) on the Registration object.\n\nYou’ll also need to login your user anywhere they sign in. Just call:\nKotlinJava\nif (loggedIn) {\n    /* We're logged in, we can login the user with Intercom */\n    val registration = Registration.create().withUserId(\"123456\")\n    Intercom.client().loginIdentifiedUser(registration, new IntercomStatusCallback() {\n                @Override\n                public void onSuccess() {\n                    // Handle success\n                }\n\n                @Override\n                public void onFailure(@NonNull IntercomError intercomError) {\n                    // Handle failure\n                }\n            });\n} else {\n    /* Since we aren't logged in, we are an unidentified user. \n     * Let's tell Intercom. */\n    Intercom.client().loginUnidentifiedUser(new IntercomStatusCallback() {\n            @Override\n            public void onSuccess() {\n                // Handle success\n            }\n\n            @Override\n            public void onFailure(@NonNull IntercomError intercomError) {\n                // Handle failure\n            }\n        });\n}\n\nHow to logout a user\n\nWhen users want to log out of your app, simply call logout like so:\n\nKotlinJava\nprivate fun logout() {\n    /* This clears the Intercom SDK's cache of your user's identity\n     * and wipes the slate clean. */\n    Intercom.client().logout()\n}\n\nBest practices for logging in users\nDon’t use an email address as a userId as this field is unique and cannot be changed or updated later. If you only have an email address, you can just register a user with that.\nIf you login users with an email address, the email must be a unique field in your app. Otherwise we won't know which user to update and the mobile integration won't work.\n\n👍 Note\n\nIntercom knows when your app is backgrounded and comes alive again, so you won’t need to re-register your users.\n\nUpdate a user\nKotlinJava\nupdateUser(\n        userAttributes: UserAttributes,\n        intercomStatusCallback: IntercomStatusCallback\n)\n\nParameters\nuserAttributes : The userAttributes object with the attributes to be set on the user in Intercom.\nintercomStatusCallback : IntercomStatusCallback to listen to success and failure\nUsage\n\nYou can send any data you like to Intercom from standard user attributes that are common to all Intercom users to custom user attributes that are unique to your app.\n\nThe complete list of standard user attributes that can be updated are described in the UserAttributes object. Standard user attributes such as a user's name or email address can be updated by calling:\n\nKotlinJava\nval userAttributes = UserAttributes.Builder()\n        .withName(\"Bob\")\n        .withEmail(\"bob@example.com\")\n        .build()\nIntercom.client().updateUser(\n            userAttributes = userAttributes,\n            intercomStatusCallback = object : IntercomStatusCallback {\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n            }\n        )\n\n\nTypically our customers see a lot of value in sending custom data that relates to customer development, such as price plan, value of purchases, etc. Custom user attributes can be created and modified by calling withCustomAttribute(key, value) on the UserAttributes object.\n\nKotlinJava\nval userAttributes = UserAttributes.Builder()\n        .withCustomAttribute(\"paid_subscriber\", \"Yes\")\n        .withCustomAttribute(\"monthly_spend\", 155.5)\n        .withCustomAttribute(\"team_mates\", 3)\n        .build()\nIntercom.client().updateUser(\n            userAttributes = userAttributes,\n            intercomStatusCallback = object : IntercomStatusCallback {\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n            }\n        )\n\n\n👍\n\nYou don’t have to create attributes in Intercom beforehand. If a custom attribute hasn't been seen before, it will be created for you automatically.\n\nYou can also set company data on your user with the Company object, like:\n\nKotlinJava\nval company = Company.Builder()\n        .withName(\"My Company\")\n        .withCompanyId(\"abc1234\")\n        .build()\nval userAttributes = UserAttributes.Builder()\n        .withCompany(company)\n        .build()\nIntercom.client().updateUser(\n            userAttributes = userAttributes,\n            intercomStatusCallback = object : IntercomStatusCallback {\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n            }\n        )\n\n\n📘\n\nid is a required field for adding or modifying a company.\nThe Company object describes all the standard attributes you can modify.\nSubmit an event\nKotlinJava\nlogEvent(name: String?, metaData: Map<String, *>?)\n\nParameters\nname : The name of the event you wish to track.\nmetaData : a map of simple types to present to Intercom\nUsage\n\nYou can log events in Intercom that record what users do in your app and when they do it. For example, you could record the item a user ordered from your mobile app, and when they ordered it.\n\nKotlinJava\nval eventData = mapOf(\n    \"order_date\" to \"1392036272\",\n    \"stripe_invoice\" to \"38572984\"\n)\nIntercom.client().logEvent(\"sent_invitation\", eventData)\n\n\nYou’ll find more details about how events work and how to submit them here.\n\nPresent Intercom Spaces\nKotlinJava\npresent(space: IntercomSpace)\n\nParameters\nspace : The IntercomSpace enum for the space to be presented\nUsage\n\nSpaces are different areas of the messenger that you can open directly. Intercom defines 4 possible spaces:\n\nHome\nHelp Center\nMessages\nTickets\n\nThese spaces can be presented by:\n\nKotlinJava\nIntercom.client().present(space = IntercomSpace.Home)\n\n\nThis opens Intercom and displays Home space.\n\nSimilarly, you can present HelpCenter and Messages by passing the respective enum.\nNot providing space and calling Intercom.client().present() will open Home by default\n\nPresent Intercom Content\nKotlinJava\npresentContent(content: IntercomContent)\n\nParameters\ncontent : The IntercomContent to be presented\nUsage\n\nThere are various IntercomContent that you can present. The available types are:\n\nArticle\nSurvey\nCarousel\nHelpCenterCollections\n\nTo present an Intercom content you create the respective IntercomContent object and then call presentContent with that object\n\nFor example, you can present an Article as follows\n\nKotlinJava\nIntercom.client().presentContent(content = IntercomContent.Article(id = \"12345\"))\n\n\nSimilarly, you can can present Surveys, Carousels and Help Center Collections.\n\n🚧 Make sure your content is live\n\nA content must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nCustomize the Intercom Messenger\n\nWe definitely recommend that you customize the Intercom Messenger so that it feels completely at home on your product, site or mobile app. Here’s how:\n\nSelect the color and language of the Messenger and how personalize your profiles.\nFollow the below steps to choose how the launcher appears and opens for your users.\nChoose how the launcher appears and opens for your users\n\nIf you’d like the standard launcher to appear on the bottom right-hand side of your screen, just call:\n\nKotlinJava\nIntercom.client().setLauncherVisibility(Visibility.VISIBLE)\n\n\nIf you want to set the bottom padding for the Messenger, which dictates how far from the bottom of the screen the default launcher and in-app messages will appear, you can call:\n\nKotlinJava\nIntercom.client().setBottomPadding(bottomPadding)\n\nCreate a custom launcher\n\nHowever, if you’d like the Messenger to open from another location in your mobile app, you can create a custom launcher. This allows you to specify a button, link or element that opens the Messenger. For example, you can trigger the launcher to open when a customer clicks on your ‘Help and Support’ button.\n\nIf you have a custom launcher, you can call:\n\nKotlinJava\nIntercom.client().present()\n\n\nIf you want to open the Messenger to the composer screen with message field pre-populated you can call:\n\nKotlinJava\nIntercom.client().displayMessageComposer(\"Message\")\n\nShow your user’s unread message count\n\nNow you can show how many unread conversations your user has on your custom launcher. Even if a user dismisses a notification, they’ll still have a persistent indicator of unread conversations.\n\nJust grab the current count with this method:\n\nKotlinJava\nIntercom.client().getUnreadConversationCount()\n\n\nThen, start listening for updates using:\n\nKotlinJava\nIntercom.client().addUnreadConversationCountListener(listener)\n\nTemporarily hide notifications\n\nYou can prevent in app messages from popping up in certain parts of your app by calling:\n\nKotlinJava\nIntercom.client().setInAppMessageVisibility(Visibility.GONE)\n\n\n📘 Mobile Carousels and Surveys Visibility\n\nThe method setInAppMessageVisibility does not apply to Mobile Carousels or Surveys. They will always be displayed.\n\nYou can hide any Intercom screen in your app, by calling:\n\nKotlinJava\nIntercom.client().hideIntercom()\n\nWhat's next?\n\nNow that you have Intercom configured you can:\n\nEnable Identity Verification.\nConfigure Android Push Notifications."
  },
  {
    "title": "Code Samples",
    "url": "https://developers.intercom.com/installing-intercom/android/code-samples/",
    "html": "Code Samples\n\nCheck out our code samples from Github"
  },
  {
    "title": "Migrating to 14.0.0",
    "url": "https://developers.intercom.com/installing-intercom/android/migration-guide-v14/",
    "html": "Migrating to 14.0.0\n\nVersion 14.0.0 of the Intercom Android SDK adds support for the 5th version of the messenger.\n\nIn this version, we have deprecated a few methods and replaced them with new methods in our API.\n\nThe outgoing methods and their replacements are listed below.\n\nFor more information and code samples, please visit Using Intercom\n\nDeprecated API\tNew API\ndisplayMessenger()\tpresent()\ndisplayConversationsList()\tpresent(IntercomSpace.Messages)\ndisplayHelpCenter()\tpresent(IntercomSpace.HelpCenter)\ndisplayHelpCenterCollections(ids)\tpresentContent( IntercomContent.HelpCenterCollections(ids))\ndisplayCarousel(id)\tpresentContent(IntercomContent.Carousel(id))\ndisplaySurvey(id)\tpresentContent(IntercomContent.Survey(id))\ndisplayArticle(id)\tpresentContent(IntercomContent.Article(id))\nregisterUnidentifiedUser()\tloginUnidentifiedUser()\nregisterIdentifiedUser(userRegistration)\tloginIdentifiedUser(userRegistration)\nupdateUser(userAttributes)\tupdateUser(userAttributes,statusCallback)\nreset()\tlogout()"
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/installing-intercom/android/error-codes/",
    "html": "Error Codes\n\nStarting from version 12.1.0 of our Android SDK, we have introduced new error codes to give you some context around why an API call may be failing.\n\nList of error codes\nError Code\tError Message\tDescription\n1001\tERROR - [HTTP 4xx] - server error message\tHere, you will get back an HTTP error code and the error message that the server has returned.\n3002\tERROR - Failed to register user. We already have a registered user. If you are attempting to register a new user, call logout() before this.\tRegister user was called when another user is already registered."
  },
  {
    "title": "Data Hosting Region Configuration",
    "url": "https://developers.intercom.com/installing-intercom/android/data-hosting-region-configuration/",
    "html": "Data Hosting Region Configuration\n\nFor customers who are part of Data Hosting in Europe or Australia, you will need to modify your AndroidManifest.xml in order to configure the Android Messenger to point to your regional workspace.\n\nIn your AndroidManifest.xml of the base Android project add the following right before </application>:\n\nEUAUSUS\n<meta-data\n        android:name=\"io.intercom.android.sdk.server.region\"\n        android:value=\"@integer/intercom_server_region_eu\" />\n\n\nThe SDK will default to US servers if this parameter is not specified.\n\nValid options for io.intercom.android.sdk.server.region are\n\nintercom_server_region_eu\nintercom_server_region_aus\nintercom_server_region_us\n\nMeta data tag shouldUseEuServer has been deprecated and can be removed from your manifest file. Please replace it with the above changes to specify the region if you are using it."
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/android/fcm-push-notifications/",
    "html": "Push Notifications\n\nBelow, we’ll show you how to send push notifications and/or push messages to your customers, with Firebase Cloud Messaging (FCM) in Intercom.\n\nStep 1. Enable Google services for your app\n\nIf you already have a Firebase project with notifications enabled you can skip to the next step. Otherwise go to the FCM Console page and create a new project following these steps:\n\nGive the project a name and click ‘Create Project’.\n\nOnce your project is set up, scroll down and select the ‘Cloud Messaging’’ card.\n\nClick on the Android icon to continue setup.\n\nEnter your app’s package name and click ‘Register App’.\n\nStep 2. Setup client to receive push\n\nClick the button \"Download google-services.json\" to download the config file. You’ll need to move that file into the same directory as your application level build.gradle.\n\nClick \"next\" and then in your apps build.gradle you will need to add the following lines to your dependencies:\n\ngroovyKotlin\ndependencies {\n    implementation 'io.intercom.android:intercom-sdk:10.6.1'\n    implementation 'com.google.firebase:firebase-messaging:20.2+'\n}\n\n\nAt the bottom of your build.gradle you must add:\n\napply plugin: 'com.google.gms.google-services'\n\nIt is important that this is at the very end of the file.\n\nClick the Next button and then skip the verification step.\n\nStep 3. Add your Server key to Intercom for Android settings\n\nFinally, click the settings cog and select ‘Project settings’, then ‘Cloud Messaging tab’ and copy your Server key.\n\nOpen your Intercom app’s settings and select ‘Installation -> Android’. Then find the ‘Enable Push Notifications’ section. Here you'll be able to paste and save your Server API key.\n\nStep 4. Setting your FCM icon (Optional)\n\nIf you want to add a custom icon for your notifications, just add an image named intercom_push_icon.png to each of your supported densities. Please note that vector drawables cannot be used here. For example:\n\n/res/drawable-xxhdpi/intercom_push_icon.png \n/res/drawable-xhdpi/intercom_push_icon.png \n/res/drawable-hdpi/intercom_push_icon.png \n/res/drawable-mdpi/intercom_push_icon.png\n\n\n👍 Notifications icon design guidelines\n\nWe recommend following these material design guidelines for producing this icon.\n\nStep 5. Disable push on log out\n\nTo stop users from receiving push messages when they have logged out of the app make sure to call:\n\nKotlinJava\nIntercom.client().logout()\n\nStep 6. Using Intercom with other FCM setups (Optional)\n\nThe Intercom android sdk already comes with a default implementation of FirebaseMessagingService. This provides default implementations for onNewToken and onMessageReceived for FCM to work with Intercom. This step can be skipped if your app uses only Intercom for Push Notifications\n\nIf your application uses FCM for your own content, or if you use a third party service for FCM. You’ll need to update your FirebaseInstanceIdService and FirebaseMessagingService.\n\nYou should have a class that extends FirebaseMessagingService or the now deprecated FirebaseInstanceIdService. That service is where you get the device token to send to your backend to register for push. To register for Intercom push set it up like this:\n\nKotlinJava\nprivate val intercomPushClient = IntercomPushClient()\n\noverride fun onNewToken(refreshedToken: String) {\n    intercomPushClient.sendTokenToIntercom(application, refreshedToken)\n    // DO HOST LOGIC HERE\n}\n\noverride fun onMessageReceived(remoteMessage: RemoteMessage) {\n    val message = remoteMessage.data\n    if (intercomPushClient.isIntercomPush(message)) {\n     intercomPushClient.handlePush(application, message)\n    } else {\n        // DO HOST LOGIC HERE\n    }\n}\n\nTroubleshooting tips\n\nIf you’re having trouble getting FCM to work in your app, here's a list of things you should check:\n\nMake sure to tick the 'Send a push notification' box when you send a manual message.\nCheck that the notifications are not disabled for your app on your test device. Settings > Sound & Notification > App notifications. This may differ depending on the Android version.\nDid you specify the correct Push Server API key?\nMake sure you added your google-services.json file in the correct directory.\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀\n\nStep 7. Open Intercom conversations from FCM\n\nWhen a user taps on a push notification we hold onto data such as the URI in your message or the conversation to open. When you want Intercom to act on that data, just call:\n\nKotlinJava\nIntercom.client().handlePushMessage()\n\n\n📘 Note\n\nIt’s important to wait for any splash screens or loading screens to finish before calling handlePushMessage or your users might not have time to see the conversation we opened.\n\nIf you wish to create a custom back stack for this notification you can pass a TaskStackBuilder to the same method:\n\nKotlinJava\nhandlePushMessage(stackBuilder)\n"
  },
  {
    "title": "Deep Linking",
    "url": "https://developers.intercom.com/installing-intercom/android/deep-linking/",
    "html": "Deep Linking\n\nUsing Intercom you can embed a deep link in your in-app messages or as the URI for your push messages.\n\nSetting up a Deep Link in your App\n\nYou will need to set up a deep link in your apps AndroidManifest.xml. Android supports both app://page and http://www.app.com/page type schemes.\n\n<activity android:name=\"app.SettingsActivity\">    \n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"http\"\n              android:host=\"www.app.com\"\n              android:pathPrefix=\"/settings\" />\n        <data android:scheme=\"app\"\n              android:host=\"settings\" />\n    </intent-filter>\n</activity>\n\nLinking to your app\n\nOnce you have set up your app to respond to a URI, you can send a push message with that as the URI. Tapping the push message will open your app to the specified page.\n\nYou can also add a link to your in-app messages and replies as follows:\n\nLinking to other apps\n\nYou can link to other apps instead of your own. For example if you wanted to link to a location in Google Maps you could set the URI. Tapping the push message would open the Maps app and move you to the coordinates provided."
  },
  {
    "title": "Identity Verification",
    "url": "https://developers.intercom.com/installing-intercom/android/identity-verification/",
    "html": "Identity Verification\n\nIdentity verification helps to make sure that conversations between you and your users are kept private and that one user can't impersonate another. We strongly encourage all Intercom customers to set up and enable identity verification.\n\nEnable Identity Verification\n\nGet the Android identity verification secret from your app settings and store it in a secure place on your app server.\n\nNext toggle enforce identity verification to on.\n\n❗️ Have you already released your app with the Intercom messenger in it?\n\nIf you have then enabling identity verification will stop old versions of your app communicating with Intercom. We recommend that you complete setting up identity verification and test that everything is working. Then turn off identity verification and release an update to your app. This update will be sending user hashes to Intercom but not enforcing it. Once you are happy with the number of users on versions of your app sending the user hash you can come back and toggle identity verification on which will then start enforcing it for all versions of your app.\n\nReturning the HMAC Digest from your App Server's Authentication Call\n\nYour app server authentication code needs to be modified so that is uses the Intercom Android API Secret to create a HMAC digest (hash based message authentication code) from the user id or email address for that user. Then it returns the HMAC digest to your Android app. Note that identity verification does not apply to unidentified users, for whom you do not have a user id or email address.\n\nThe HMAC is computed as a SHA-256 digest as follows:\n\nOpenSSL::HMAC.hexdigest('sha256', api_key.secret, user_id_or_email)\n\n\nIf you wish to generate a HMAC in a different programming language we have a comprehensive list here.\n\nSet the User Hash in your Android App\n\nWhen your Android app initializes Intercom if the user is identified (i.e., you have a user id or email address), pass in a String of the HMAC returned from your server's authentication call. This should be done before making any user Registration calls.\n\nKotlinJava\nIntercom.client().setUserHash(\"your_hmac_of_user_id_or_email\")\n\n\nThe Intercom API Auth Server uses its copy of the Android API Secret to recreate the HMAC digest from the user_id or email. If it matches with the supplied HMAC digest, we can be sure that this request is coming from your app server and the API Auth Server issues an access token to the Android messenger.\n\nIf the HMAC fails to verify, the API Auth Server responds with a 401.\n\n📘 Sending both user_id and email values?\n\nIf you send both email and user_id values in your integration, you need to calculate the HMAC on the user_id value.\n\nSending an HMAC derived from the email will fail with a 401 if a user_id is provided\n\nTroubleshooting\nYou must use the exact Android Secret Key that we provide you within the code. Making up your own won't work. Note: Don't confuse this with your app_id.\nMake sure you are using the Android Secret Key, not the iOS or web one they are not the same.\nThe user data passed to your server must be either the user_id or email for that Intercom user. If you supply both email and user_id values, calculate the HMAC on the user_id value\nDo not forget that identity verification needs to be activated (and configured) separately in your development/test and production apps."
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/installing-intercom/android/help-center/",
    "html": "Help Center\nArticles Help Center\n\nFrom version 10.0.0 of the Android SDK you can display your Help Center, show articles programmatically, filter your Help Center content and using our data methods, deeply embed your Intercom Help Center alongside your own content.\n\nCheck here for more content on setting up your Help Center in Interccom.\n\nTo display an Activity with your Help Center content, call the following method:\n\nKotlinJava\nIntercom.client().displayHelpCenter()\n\n\n🚧 Make sure Help Center is turned on\n\nIf you don't have Help Center enabled in your Intercom settings the method displayHelpCenter will fail to load. To enable your Help Center please go here and click the \"Turn On Help Center\" button.\n\nPresent an Article Programmatically\n\nFrom version 8.1.0 of the Android SDK you can programmatically present an Article. To present an Article, pass in an articleID from your Intercom workspace to the following method:\n\nKotlinJava\nIntercom.client().displayArticle(\"123456\")\n\n\n🚧 Make sure your article is live\n\nAn article must be ‘live’ to be used in this way. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nPresent a filtered Help Center\n\nFrom version 10.0.0 of the Android SDK you can now pass in 1 or more collection IDs to filter the Help Center. This will display the same Activity as calling displayHelpCenter but the collections list will only show the IDs passed in.\n\nKotlinJava\nIntercom.client().displayHelpCenterCollections(listOf(\"COLLECTION_1_ID\", \"COLLECTION_2_ID\"))\n\n\n🚧 Empty or invalid collection IDs\n\nIf the collection IDs are invalid or have no content, we will default to showing the complete Help Center list.\n\nUsing the data API\n\nFrom version 10.0.0 you can now fetch the data directly and build your own UI. This is useful when you want to show Intercom collections alongside your other support content.\n\nFetch Collections\n\nTo fetch a list of all Collections call:\n\nKotlinJava\nIntercom.client().fetchHelpCenterCollections(collectionRequestCallback)\n\n\nThe CollectionRequestCallback has three callbacks:\n\nonComplete - if the request is successful we return a list of HelpCenterCollection objects.\nonError - we return onError for any server errors or if the content isn’t found. We return the error code to the client, this would include errors like 500s, 404s, 401s.\nonFailure - we hit this block if we either had a connectivity issue or some unknown error\n\nThe HelpCenterCollection object contains the follow values:\n\nsummary - an optional string that describes the collection\nid - a string to identify that collection, this can be used to fetch the sections/articles for this\ntitle - a string with the title of the collection\nFetch the contents of a collection\n\nTo get a list of sections/articles for a collections call:\n\nKotlinJava\nIntercom.client().fetchHelpCenterCollection(\"COLLECTION_ID\", collectionContentCallback)\n\n\nThis method requires a “COLLECTION_ID”. You can get the IDs of your collections from fetchHelpCenterCollections or fetchFilteredCollections methods.\n\nThe CollectionContentRequestCallback has three callbacks:\n\nonComplete - if the request is successful we return a HelpCenterCollectionContent object.\nonError - we return onError for any server errors or if the content isn’t found. We return the error code to the client, this would include errors like 500s, 404s, 401s.\nonFailure - we hit this block if we either had a connectivity issue or some unknown error\n\nA collection can have a section (a group of articles with a header) or articles without a section. The HelpCenterCollectionContent object contains the following values:\n\nid - a string, the id of the collection\nname - a string with the name of the collection\nsummary - an optional string that describes the collection\narticles - a list of HelpCenterArticle objects\nsections - a list of HelpCenterSection objects\n\nA section is a grouping of articles with a name. The HelpCenterSection model is described as:\n\nname - a string, the name of the section\narticles - a list of HelpCenterArticle objects\n\nThe HelpCenterArticle model can be found both inside of sections, or at the top level of the collection content (not a part of any section). The HelpCenterArticle model is described as:\n\narticleId - a string, the id of the article, this can be used to display the article calling displayArticle(articleId)\ntitle - a string, the title of the article\nSearch the Help Center\n\nTo get a list of articles in the Help Center, filtered by a search term call:\n\nKotlinJava\nIntercom.client().searchHelpCenter(\"SEARCH_TERM\", searchCallback)\n\n\nThe method takes a string to filter the Collections. The SearchRequestCallback has three callbacks:\n\nonComplete - if the request is successful we return a list of HelpCenterArticleSearchResult objects.\nonError - we return onError for any server errors or if the content isn’t found. We return the error code to the client, this would include errors like 500s, 404s, 401s.\nonFailure - we hit this block if we either had a connectivity issue or some unknown error\n\nThe HelpCenterArticleSearchResult object contains the follow values:\n\narticleId - a string, the id of the article, this can be used to display the article calling displayArticle(articleId)\ntitle - a string, the title of the article\nmatchingSnippet - a string with the part of the article that matched the search string provided\nsummary - a with a summary of the article"
  },
  {
    "title": "Using Intercom",
    "url": "https://developers.intercom.com/installing-intercom/android/using-intercom/",
    "html": "Using Intercom\n\nTrack who your users are and what they do in your mobile app and customize the Intercom Messenger. Here’s how to configure Intercom for Android:\n\nUser Login\n\nYou’ll now need to login your users before you can talk to them and track their activity in your app.\n\nThere are two type of users that can be created in Intercom: identified and unidentified.\n\nIdentified users: If users need to login to your app to use it, such as Facebook, Instagram, or Slack, they would be considered identified users.\nUnidentified users: If your app does not have a login option, like Angry Birds or a flashlight app, you have unidentified users.\n\nThere are three ways to log users into Intercom that visit your app:\n\nOnly login identified users\nOnly login unidentified users\nLogin both identified and unidentified users - an example of this is where your app has a login option, but it’s not essential for users to login to use your app, like Google Maps or YouTube.\n\nThe option you choose should be informed by the design of your app, namely whether you have a login option.\n\nLogin your identified (logged in) users into Intercom\nFirst you'll have to create an user\nKotlinJava\nval registration = Registration.create().withUserId(\"123456\")\n\nThen can login your user, like this:\nKotlinJava\nprivate fun successfulLogin() {\n        /* For best results, use a unique user_id if you have one. */\n        val registration = Registration.create().withUserId(\"123456\")\n        Intercom.client().loginIdentifiedUser(\n            userRegistration = registration,\n            intercomStatusCallback = object : IntercomStatusCallback{\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n\n            }\n        )\n}\n\n\n📘 Note\n\nIf you don't have a unique userId to use here, or if you have a userId and an email you can use with Email(String email) on the Registration object.\n\nYou’ll also need to register your user anywhere they sign in. Just call:\nKotlinJava\nif (loggedIn) {\n/* We're logged in, we can register the user with Intercom */\n    val registration = Registration.create().withUserId(\"123456\")\n    Intercom.client().loginIdentifiedUser(\n            userRegistration = registration,\n            intercomStatusCallback = object : IntercomStatusCallback{\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n\n            }\n        )\n}\n\nLogin your unidentified users (visitors)\n\nFollow these instructions to login your unidentified users:\n\nKotlinJava\noverride fun onCreate() {\n    super.onCreate()\n    Intercom.initialize(this, \"your api key\", \"your app id\")\n    Intercom.client().loginUnidentifiedUser(\n            intercomStatusCallback = object : IntercomStatusCallback{\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n\n            }\n        )\n}\n\nLogin your users and visitors\nFirst, you’ll need to login your user, like this:\nKotlinJava\nprivate fun successfulLogin() {\n    /* For best results, use a unique user_id if you have one. */\n    val registration = Registration.create().withUserId(\"123456\")\n    Intercom.client().loginIdentifiedUser(registration, new IntercomStatusCallback() {\n                @Override\n                public void onSuccess() {\n                    // Handle success\n                }\n\n                @Override\n                public void onFailure(@NonNull IntercomError intercomError) {\n                    // Handle failure\n                }\n            });\n}\n\n\n📘 Note\n\nIf you don't have a unique userId to use here, or if you have a userId and an email you can use withEmail(String email) on the Registration object.\n\nYou’ll also need to login your user anywhere they sign in. Just call:\nKotlinJava\nif (loggedIn) {\n    /* We're logged in, we can login the user with Intercom */\n    val registration = Registration.create().withUserId(\"123456\")\n    Intercom.client().loginIdentifiedUser(registration, new IntercomStatusCallback() {\n                @Override\n                public void onSuccess() {\n                    // Handle success\n                }\n\n                @Override\n                public void onFailure(@NonNull IntercomError intercomError) {\n                    // Handle failure\n                }\n            });\n} else {\n    /* Since we aren't logged in, we are an unidentified user. \n     * Let's tell Intercom. */\n    Intercom.client().loginUnidentifiedUser(new IntercomStatusCallback() {\n            @Override\n            public void onSuccess() {\n                // Handle success\n            }\n\n            @Override\n            public void onFailure(@NonNull IntercomError intercomError) {\n                // Handle failure\n            }\n        });\n}\n\nHow to logout a user\n\nWhen users want to log out of your app, simply call logout like so:\n\nKotlinJava\nprivate fun logout() {\n    /* This clears the Intercom SDK's cache of your user's identity\n     * and wipes the slate clean. */\n    Intercom.client().logout()\n}\n\nBest practices for logging in users\nDon’t use an email address as a userId as this field is unique and cannot be changed or updated later. If you only have an email address, you can just register a user with that.\nIf you login users with an email address, the email must be a unique field in your app. Otherwise we won't know which user to update and the mobile integration won't work.\n\n👍 Note\n\nIntercom knows when your app is backgrounded and comes alive again, so you won’t need to re-register your users.\n\nUpdate a user\nKotlinJava\nupdateUser(\n        userAttributes: UserAttributes,\n        intercomStatusCallback: IntercomStatusCallback\n)\n\nParameters\nuserAttributes : The userAttributes object with the attributes to be set on the user in Intercom.\nintercomStatusCallback : IntercomStatusCallback to listen to success and failure\nUsage\n\nYou can send any data you like to Intercom from standard user attributes that are common to all Intercom users to custom user attributes that are unique to your app.\n\nThe complete list of standard user attributes that can be updated are described in the UserAttributes object. Standard user attributes such as a user's name or email address can be updated by calling:\n\nKotlinJava\nval userAttributes = UserAttributes.Builder()\n        .withName(\"Bob\")\n        .withEmail(\"bob@example.com\")\n        .build()\nIntercom.client().updateUser(\n            userAttributes = userAttributes,\n            intercomStatusCallback = object : IntercomStatusCallback {\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n            }\n        )\n\n\nTypically our customers see a lot of value in sending custom data that relates to customer development, such as price plan, value of purchases, etc. Custom user attributes can be created and modified by calling withCustomAttribute(key, value) on the UserAttributes object.\n\nKotlinJava\nval userAttributes = UserAttributes.Builder()\n        .withCustomAttribute(\"paid_subscriber\", \"Yes\")\n        .withCustomAttribute(\"monthly_spend\", 155.5)\n        .withCustomAttribute(\"team_mates\", 3)\n        .build()\nIntercom.client().updateUser(\n            userAttributes = userAttributes,\n            intercomStatusCallback = object : IntercomStatusCallback {\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n            }\n        )\n\n\n👍\n\nYou don’t have to create attributes in Intercom beforehand. If a custom attribute hasn't been seen before, it will be created for you automatically.\n\nYou can also set company data on your user with the Company object, like:\n\nKotlinJava\nval company = Company.Builder()\n        .withName(\"My Company\")\n        .withCompanyId(\"abc1234\")\n        .build()\nval userAttributes = UserAttributes.Builder()\n        .withCompany(company)\n        .build()\nIntercom.client().updateUser(\n            userAttributes = userAttributes,\n            intercomStatusCallback = object : IntercomStatusCallback {\n                override fun onSuccess() {\n                    // Handle success\n                }\n\n                override fun onFailure(intercomError: IntercomError) {\n                    // Handle failure\n                }\n            }\n        )\n\n\n📘\n\nid is a required field for adding or modifying a company.\nThe Company object describes all the standard attributes you can modify.\nSubmit an event\nKotlinJava\nlogEvent(name: String?, metaData: Map<String, *>?)\n\nParameters\nname : The name of the event you wish to track.\nmetaData : a map of simple types to present to Intercom\nUsage\n\nYou can log events in Intercom that record what users do in your app and when they do it. For example, you could record the item a user ordered from your mobile app, and when they ordered it.\n\nKotlinJava\nval eventData = mapOf(\n    \"order_date\" to \"1392036272\",\n    \"stripe_invoice\" to \"38572984\"\n)\nIntercom.client().logEvent(\"sent_invitation\", eventData)\n\n\nYou’ll find more details about how events work and how to submit them here.\n\nPresent Intercom Spaces\nKotlinJava\npresent(space: IntercomSpace)\n\nParameters\nspace : The IntercomSpace enum for the space to be presented\nUsage\n\nSpaces are different areas of the messenger that you can open directly. Intercom defines 4 possible spaces:\n\nHome\nHelp Center\nMessages\nTickets\n\nThese spaces can be presented by:\n\nKotlinJava\nIntercom.client().present(space = IntercomSpace.Home)\n\n\nThis opens Intercom and displays Home space.\n\nSimilarly, you can present HelpCenter and Messages by passing the respective enum.\nNot providing space and calling Intercom.client().present() will open Home by default\n\nPresent Intercom Content\nKotlinJava\npresentContent(content: IntercomContent)\n\nParameters\ncontent : The IntercomContent to be presented\nUsage\n\nThere are various IntercomContent that you can present. The available types are:\n\nArticle\nSurvey\nCarousel\nHelpCenterCollections\n\nTo present an Intercom content you create the respective IntercomContent object and then call presentContent with that object\n\nFor example, you can present an Article as follows\n\nKotlinJava\nIntercom.client().presentContent(content = IntercomContent.Article(id = \"12345\"))\n\n\nSimilarly, you can can present Surveys, Carousels and Help Center Collections.\n\n🚧 Make sure your content is live\n\nA content must be ‘live’ to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nCustomize the Intercom Messenger\n\nWe definitely recommend that you customize the Intercom Messenger so that it feels completely at home on your product, site or mobile app. Here’s how:\n\nSelect the color and language of the Messenger and how personalize your profiles.\nFollow the below steps to choose how the launcher appears and opens for your users.\nChoose how the launcher appears and opens for your users\n\nIf you’d like the standard launcher to appear on the bottom right-hand side of your screen, just call:\n\nKotlinJava\nIntercom.client().setLauncherVisibility(Visibility.VISIBLE)\n\n\nIf you want to set the bottom padding for the Messenger, which dictates how far from the bottom of the screen the default launcher and in-app messages will appear, you can call:\n\nKotlinJava\nIntercom.client().setBottomPadding(bottomPadding)\n\nCreate a custom launcher\n\nHowever, if you’d like the Messenger to open from another location in your mobile app, you can create a custom launcher. This allows you to specify a button, link or element that opens the Messenger. For example, you can trigger the launcher to open when a customer clicks on your ‘Help and Support’ button.\n\nIf you have a custom launcher, you can call:\n\nKotlinJava\nIntercom.client().present()\n\n\nIf you want to open the Messenger to the composer screen with message field pre-populated you can call:\n\nKotlinJava\nIntercom.client().displayMessageComposer(\"Message\")\n\nShow your user’s unread message count\n\nNow you can show how many unread conversations your user has on your custom launcher. Even if a user dismisses a notification, they’ll still have a persistent indicator of unread conversations.\n\nJust grab the current count with this method:\n\nKotlinJava\nIntercom.client().getUnreadConversationCount()\n\n\nThen, start listening for updates using:\n\nKotlinJava\nIntercom.client().addUnreadConversationCountListener(listener)\n\nTemporarily hide notifications\n\nYou can prevent in app messages from popping up in certain parts of your app by calling:\n\nKotlinJava\nIntercom.client().setInAppMessageVisibility(Visibility.GONE)\n\n\n📘 Mobile Carousels and Surveys Visibility\n\nThe method setInAppMessageVisibility does not apply to Mobile Carousels or Surveys. They will always be displayed.\n\nYou can hide any Intercom screen in your app, by calling:\n\nKotlinJava\nIntercom.client().hideIntercom()\n\nWhat's next?\n\nNow that you have Intercom configured you can:\n\nEnable Identity Verification.\nConfigure Android Push Notifications."
  },
  {
    "title": "About the Intercom SDK for Android",
    "url": "https://developers.intercom.com/installing-intercom/android/about-the-sdk/",
    "html": "About the Intercom SDK for Android\n\nThe Intercom SDK for Android enables you to use the Intercom Messenger in your app, have conversations with your customers, send rich outbound messages, show your Help Center, and track events.\n\nInstallation\n\nYou can install Intercom for Android using Gradle or manually. A basic installation takes around 15 minutes, but will take a little longer if you need to configure event tracking or have a more complex use case.\n\nTo install Intercom for Android you will need an API key. You’ll find that in Intercom > Settings > Installation > Android. That’s where you can configure push notifications as well.\n\nSample app\n\nYou’ll find Intercom for Android on Github here. There’s also a sample app that you can use to play around with the SDK here.\n\nCompatibility\n\nIntercom for Android is compatible with API 21 and up. We also have a plugin for Cordova and Phonegap.\n\nSDK size\n\nThe size of Intercom for Android once installed varies depending on your app’s configuration. 3.1MB is the maximum size we would expect to see, and much smaller if you're minifying your app build."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/installing-intercom/ios/error-codes/",
    "html": "Error Codes\n\nStarting from version 12.1.0 of our iOS SDK, we have introduced new error codes to give you some context around why an API call may be failing.\n\nList of error codes\nError Code\tError Message\tDescription\n[HTML Error Code] e.g. 401\tERROR - [HTTP 4xx] - server error message\tHere, you will get back an HTTP error code and the error message that the server has returned.\n2001\tERROR - Failed to register user - the 'userId' or 'email' property of 'userAttributes' must be populated as a string\tError caused when an invalid userId or email is passed to a login user call\n3001\tERROR - Failed to update user - the update object must be not nil and of type ICMUserAttributes\tIncorrect instance or nil object passed to the update user call\n4001\tERROR - Failed to register a device token - push notifications are not enabled on the host device\tThe host device does not have push notification permissions granted\n4002\tERROR - Failed to register a device token - device token is nil\tDevice token passed to function is nil\n4003\tERROR - Failed to register a device token - identity verification is not setup correctly\tIdentity verification is not setup for the user\n4004\tERROR - Failed to register a device token - device token is invalid\tAttempted to register device with an invalid device token"
  },
  {
    "title": "Data Hosting Region Configuration",
    "url": "https://developers.intercom.com/installing-intercom/ios/data-hosting-region-configuration/",
    "html": "Data Hosting Region Configuration\n\nFor customers who wish to configure their data hosting region, you will need to modify your Info.plist in order to configure the iOS Messenger to point to your desired workspace.\n\nAdd IntercomRegion as a new String key to your info.plist.\n\nAdd a value of AU (Australia), EU (Europe) or US (United States) to this key.\n\nIf this key is absent, the region will default to US."
  },
  {
    "title": "Deep Linking",
    "url": "https://developers.intercom.com/installing-intercom/ios/deep-linking/",
    "html": "Deep Linking\n\nUsing Intercom you can embed a deep link in your in-app messages, Help Centre articles or as the URI for your push messages. Intercom supports both Universal Links and Custom URL Schemes as a deep link.\n\nUniversal Link\n\nUniversal Links support is available from iOS SDK v9.3.0\n\nIn order for Intercom to be able to correctly handle a Universal Link from within an in-app message, Help Center article or a push notification, you will first need to specify the domains that these universal links belong to.\n\nIn your Info.plist add a new entry named IntercomUniversalLinkDomains . Then add an array of one or more domains.\n\nWhen a user taps on a Universal Link within Intercom, the domain of this link is compared against the list of domains specified in your Info.plist. If the domain matches one of these, Intercom then proceeds to call your application:continueUserActivity:restorationHandler: method in your AppDelegate, passing the URL as the webpageURL property on the NSUserActivity. This will allow your app to handle this universal link in the same manner as it would handle the link if it is opened outside of your app.\n\nThe code sample below shows how you would handle the UTL https://www.mywebsite.com/profile\nIf your app cannot handle a Universal Link, please ensure you return NO/false from this method. This will allow Intercom to open the URL as a regular link in Safari.\n\nobjectivecswift\n- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n    NSURLComponents *urlComponents = [NSURLComponents componentsWithURL:userActivity.webpageURL resolvingAgainstBaseURL:YES];\n    if ([urlComponents.path isEqualToString:@\"/profile\"]) {\n        [self.mainController pushViewController:[ProfileViewController new] animated:YES];\n    } else {\n        // Ensure that you return NO if your app cannot handle this Universal Link.\n        return NO;\n    }\n    return YES;\n}\n\nCustom URL Scheme\n\nYou will need to set up a deep link in your apps Info.plist. iOS supports schemes like app://page. Below is an example to that will respond to app://\n\nYou will then need to implement, application:openURL:sourceApplication:annotation: in your app delegate. This is where you can respond to specific schemes. In this case we will push the SettingsViewController for the scheme app://settings\n\nobjectivecswift\n- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    if([[url scheme] isEqualToString:@\"app\"]){\n        if([[url host] isEqualToString:@\"settings\"]){\n            [self.mainController pushViewController:[[SettingsViewController alloc] init] animated:YES];\n        }\n        return YES;\n    }\n}\n\nLINKING TO OTHER APPS\n\nLinking to other apps is not supported with the iOS messenger. Your deep links must be for a scheme belonging to your app.\n\nLinking to your app\n\nOnce you have set up your app to respond to a URI, you can send a push message with that as the URI. Tapping the push message will open your app to the specified page.\n\nYou can also add a link to your in-app messages and replies as follows:"
  },
  {
    "title": "Identity Verification",
    "url": "https://developers.intercom.com/installing-intercom/ios/identity-verification/",
    "html": "Identity Verification\n\nIdentity verification helps to make sure that conversations between you and your users are kept private and that one user can't impersonate another. We strongly encourage all Intercom customers to set up and enable identity verification.\n\nEnable Identity Verification\n\nGet the iOS identity verification secret from your app settings and store it in a secure place on your app server.\n\nNext toggle enforce identity verification to on.\n\nHAVE YOU ALREADY RELEASED YOUR APP WITH THE INTERCOM MESSENGER IN IT?\n\nIf you have then enabling identity verification will stop old versions of your app communicating with Intercom. We recommend that you complete setting up identity verification and test that everything is working. Then turn off identity verification and release an update to your app. This update will be sending user hashes to Intercom but not enforcing it. Once you are happy with the number of users on versions of your app sending the user hash you can come back and toggle identity verification on which will then start enforcing it for all versions of your app.\n\nReturning the HMAC Digest from your App Server's Authentication Call\n\nYour app server authentication code needs to be modified so that is uses the Intercom iOS API Secret to create a HMAC digest (hash based message authentication code) from the user id or email address for that user. Then it returns the HMAC digest to your iOS app. Note that identity verification does not apply to unidentified users, for whom you do not have a user id or email address.\n\nThe HMAC is computed as a SHA-256 digest as follows:\n\nOpenSSL::HMAC.hexdigest('sha256', api_key.secret, user_id_or_email)\n\n\nIf you wish to generate a HMAC in a different programming language we have a comprehensive list here.\n\nSet the User Hash in your iOS App\n\nWhen your iOS app initializes Intercom if the user is identified (i.e., you have a user id or email address), pass in a String of the HMAC returned from your server's authentication call. This should be called before any registration calls:\n\nobjectivecswift\n[Intercom setUserHash:\"your_hmac_of_user_id_or_email\"];\n\n\nThe Intercom API Auth Server uses its copy of the iOS API Secret to recreate the HMAC digest from the user_id or email. If it matches with the supplied HMAC digest, we can be sure that this request is coming from your app server and the API Auth Server issues an access token to the iOS messenger.\n\nIf the HMAC fails to verify, the API Auth Server responds with a 401.\n\nIf you send both email and user_id values in your integration, you need to calculate the HMAC on the user_id value.\n\nSending an HMAC derived from the email will fail with a 401 if a user_id is provided\n\nTroubleshooting\nYou must use the exact iOS Secret Key that we provide you within the code. Making up your own won't work. Note: Don't confuse this with your app_id.\nMake sure you are using the iOS Secret Key, not the Android or web one they are not the same.\nThe user data passed to your server must be either the user_id or email for that Intercom user. If you supply both user_id and email, calculate the HMAC based on the user_id value\nDo not forget that identity verification needs to be activated (and configured) separately in your development/test and production apps."
  },
  {
    "title": "Supported versions",
    "url": "https://developers.intercom.com/installing-intercom/ios/supported-versions/",
    "html": "Supported versions\n\nThe latest major version of Intercom for iOS is v14.0.0. This is fully supported and receives regular feature enhancements and bug fixes.\n\nIf you are using an older version of the iOS SDK, please upgrade, as these are no longer supported.\n\nIf you are currently using v5 or below and are ready to upgrade, read through the Migrating to v14.0.0 doc to make sure your upgrade goes smoothly.\n\nNote: In 2020 we announced the deprecation of SDK versions 5 and below, with the intention that they would no longer function after June 2021. Based on usage trends and feedback, we've decided not to disable those SDKs. Those versions will continue to work but are unsupported, and we encourage you to upgrade to the latest SDKs to take advantage of new features and bug fixes."
  },
  {
    "title": "Rich Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/ios/rich-push-notifications/",
    "html": "Rich Push Notifications\n\nWith Intercom version 12.3.0+, you can send rich push notifications on iOS. You can add images to your notifications.\n\nPrerequisites\n\nBefore you begin with this, make sure you have gone through Push Notifications. Everything required for simple push notifications needs to be done in order for Rich Push Notifications to work.\n\nOnce you are finished with setting up basic push notifications, you can proceed further.\n\nStep 1: Create Notification Service Extension\n\nIn Xcode, go to File -> New -> Target, and choose “Notification Service Extension”. Give it a name and click finish. A new target will be added to your project. Set the desired deployment target. The extension will also require its own provisioning profile.\n\nStep 2: Integrate Intercom\nCocoapodsSwift Package ManagerManual\n\nIn your podfile, add a new target for your Notification Service Extension and add the Intercom pod to that target. Run pod install to install the pod to the extension.\n\ntarget :YourNotificationServiceExtensionTargetName do\n  pod 'Intercom'\nEnd\n\nStep 3: Handling Intercom Push Notifications\nAutomatically (Default)\n\nWhen your NotificationServiceExtension receives a push notification request, Intercom for iOS checks if it is an Intercom push notification and if it is, it then downloads the media and attaches it to the notification. To do this we safely swizzle the public methods in your Notification Service Extension’s \"Principal Class\", which will be NotificationService by default, that handle receiving push notification requests. We do not use any private APIs to do this.\n\nManually\n\nIn certain circumstances you may want more control of your push notifications. You can disable automatic handling of Intercom push notifications by doing the following:\n\nAdd the following to your Info.plist of your Notification Service Extension:\nIntercomAutoIntegratePushNotifications with a value of NO.\n\nImport Intercom in your NotificationService class.\n\nHandle Intercom push notifications manually in didReceiveNotificationResponse in your UNNotificationServiceExtension:\n\nobjectivecswift\n- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {\n    self.contentHandler = contentHandler;\n    self.bestAttemptContent = [request.content mutableCopy];\n\n    if (!self.bestAttemptContent) {\n        contentHandler(request.content);\n        return;\n    }\n\n    if ([Intercom isIntercomPushNotification:self.bestAttemptContent.userInfo]) {\n        [Intercom handleIntercomRichPushNotificationContent:self.bestAttemptContent withContentHandler:contentHandler];\n    } else {\n        // Handle non Intercom push notifications here.\n        self.contentHandler(self.bestAttemptContent);\n    }\n}\n"
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/installing-intercom/ios/help-center/",
    "html": "Help Center\nArticles\n\nFrom version 10.0.0 of the iOS SDK you can display your Help Center, show articles programmatically, filter your Help Center content and using our data methods, deeply embed your Intercom Help Center alongside your own content.\n\nCheck here for more content on setting up your Help Center in Interccom.\n\nTo display a ViewController with your Help Center content, call the following method:\n\nobjectivecswift\n[Intercom presentHelpCenter];\n\n\nIf you don't have Help Center enabled in your Intercom settings the method presentHelpCenter will fail to load. To enable your Help Center please go here and click the \"Turn On Help Center\" button.\n\nPresent an Article Programmatically\n\nFrom version 8.1.0 of the iOS SDK you can programmatically present an Article. To present an Article, pass in an articleID from your Intercom workspace to the following method:\n\nobjectivecswift\n[Intercom presentArticle:@\"123456\"];\n\nMAKE SURE THE ARTICLE IS LIVE\n\nAn article must be ‘live’ to be used in this way. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nCollections\nPresent a filtered Help Center\n\nFrom version 10.0.0 of the iOS SDK you can now pass in 1 or more collection IDs to filter the Help Center. This will display the same ViewController as calling presentHelpCenter but the collections list will only show the IDs passed in.\n\nobjectivecswift\n[Intercom presentHelpCenterCollections:@[@\"COLLECTION_1_ID\", @\"COLLECTION_2_ID\"]];\n\n\nIf the collection IDs are invalid or have no content, we will default to showing the complete Help Center list.\n\nFetch Collections\n\nTo fetch a list of all Collections call:\n\nobjectivecswift\n[Intercom fetchHelpCenterCollectionsWithCompletion: completionBlock];\n\n\nA successful response will return an Array of ICMHelpCenterCollection objects. An ICMHelpCenterCollection contains the follow values:\n\nName\tType\tDescription\nsummary\tNSString\tA string that describes the collection\ncollectionId\tNSString\tAn identifier for that collection, this can be used to fetch the sections/articles for this\ntitle\tNSString\tThe name of the collection\nFetch the contents of a collection\n\nTo get a list of sections/articles for a collections call:\n\nobjectivecswift\n[Intercom fetchHelpCenterCollection:@\"COLLECTION_ID\" withCompletion: completionBlock];\n\n\nThis method requires a COLLECTION_ID. You can get the IDs of your collections from fetchHelpCenterCollections or searchHelpCenter methods.\n\nA collection can have a section (a group of articles with a header) or articles without a section. A successful response will return a ICMHelpCenterCollectionContent object. It contains the follow values:\n\nName\tType\tDescription\ncollectionId\tNSString\tThe ID for that collection\ntitle\tNSString\tThe name of the collection\nsummary\tNSString\tA string that describes the collection\narticles\tNSArray\tAn array of ICMHelpCenterArticle objects\nsections\tNSArray\tAn array of ICMHelpCenterSection objects\n\nA section is a grouping of articles with a name. The ICMHelpCenterSection model is described as:\n\nName\tType\tDescription\ntitle\tNSString\tThe name of the section\narticles\tNSArray\tAn array of ICMHelpCenterArticle objects\n\nThe ICMHelpCenterArticle model can be found both inside of sections, or at the top level of the collection content (not a part of any section). The ICMHelpCenterArticle model is described as:\n\nName\tType\tDescription\narticleId\tNSString\tThe ID for that article, this can be used to display the article calling presentArticle: articleId\ntitle\tNSString\tThe title of the article\nSearch the Help Center\n\nTo get a list of articles in the Help Center, filtered by a search term call:\n\nobjectivecswift\n[Intercom searchHelpCenter:@\"SEARCH_TERM\" withCompletion: completionBlock];\n\n\nThe method requires an NSString with a term to search. A successful response will return an NSArray of ICMHelpCenterArticleSearchResult objects. It contains the follow values:\n\nName\tType\tDescription\narticleId\tNSString\tThe ID for that article, this can be used to display the article calling presentArticle: articleId\ntitle\tNSString\tThe title of the article\nmatchingSnippet\tNSString\tThe part of the article that matched the search string provided\nsummary\tNSString\tA summary of the article\n\nErrors returned from any of the methods come back in the ICMHelpCenterDataError object. The error can have the following types:\n\nName\tDescription\nnotFound\tA 404, the content does not exist or has been removed\nserverError\tThere was a server error, this covers most unsuccessful response codes. The code is returned in the log.\nmissingUserIdentity\tyou need to have registered a user to use any of the Intercom Help Center methods.\nmissingAppIdentity\tyou need to have set your app_id and api_key before calling any of the Help Center methods\ninvalidResponseObject\tthe server returned a 200 but the response could not be modelled by the Intercom SDK\nunknownError\tan unknown error type has occurred"
  },
  {
    "title": "Using Intercom",
    "url": "https://developers.intercom.com/installing-intercom/ios/using-intercom/",
    "html": "Using Intercom\nUser Login\n\nYou'll need to log your users into Intercom before you can talk to them or see what they do in your app. There are two types of users that can be created in Intercom: identified and unidentified.\n\nIdentified users: If users need to login to your app to use it, such as Facebook, Instagram, or Slack, they would be considered identified users.\nUnidentified users: If your app does not have a login option, like Angry Birds or a flashlight app, you have unidentified users.\n\nThere are three ways to log users into Intercom that visit your app:\n\nOnly login unidentified users\nOnly login identified users\nLogin both identified and unidentified users - an example of this is where your app has a login option, but it's not essential for users to login to use your app, like Google Maps or YouTube.\n\nThe option you choose should be informed by the design of your app, namely whether you have a login option.\n\nLogin only unidentified users\n\nIf you have an app with no login option (like Angry Birds or a flashlight app), you should only login unidentified users.\n\nobjectivecswift\n+ (void)loginUnidentifiedUserWithSuccess:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure NS_REFINED_FOR_SWIFT;\n\nParameters\nName\tDescription\nsuccess\tA nullable success callback with no parameters.\nfailure\tA failure callback with an error parameter.\n\nYou must call one of the user login methods in order to start communicating with Intercom.\n\nUsage\n\nIf you call loginUnidentifiedUserWithSuccess:failure:, all activity will be tracked anonymously. If you choose to subsequently identify that user, all that anonymous activity will be merged into the identified user. This means that you will no longer see the anonymous user in Intercom, but rather the identified one.\n\nWe recommend this is called from within the application delegate's didFinishLaunchingWithOptions: method.\n\nJust login as an unidentified user in your application's delegate, like so:\n\nobjectivecswift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [Intercom loginUnidentifiedUserWithSuccess:^{\n        // Handle success\n    } failure:^(NSError * _Nonnull error) {\n        // Handle error\n    }];\n}\n\n\nIf the failure block of this call is executed, you can check against our list of error codes to help debug the issue.\n\nIf a request to login a user fails, it will be retried before calling the failure callback. Furthermore if all login retries have failed, you can still attempt to call other Intercom methods, as the Intercom SDK will first try to log the user in if previous login attempts have failed. The success and failure callbacks are also optional, so nil can be passed to them in scenarios where you're not interested in their outcome.\n\nLogin only identified (logged in) users\n\nIf people must log in to access your app (as in with Facebook, Instagram or Slack) you should follow these instructions to login identified users to Intercom only.\n\nobjectivecswift\n+ (void)loginUserWithUserAttributes:(ICMUserAttributes *)userAttributes success:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure\n\nParameters\nName\tDescription\nuserAttributes\tAn ICMUserAttributes object. Either or both email and userId properties must be populated.\nsuccess\tA nullable success callback with no parameters.\nfailure\tA failure callback with an error parameter.\nUsage\n\nIn order to keep track of a specific user, you must identify it with a unique user identity, an email address, or both. To provide these, you must first create a new ICMUserAttributes object and then populate the email and/or userId properties for that object. This is a userId, supplied by you (e.g. from an existing web service for your product) to represent your user in Intercom, once set it cannot be changed.\n\nAs well as the email and userId fields, you can populate the other user attribute fields within ICMUserAttributes when you login as an identified user. By supplying information like this, Intercom provides richer user profiles for your users.\n\nBest practices for logging in users\nIt is important to only login identified users to Intercom after verification of a login\nWe recommend giving all your users unique userIds, but if you haven't implemented this, you should create an ICMUserAttributes object and only populate the email property instead of populating the userId . Do not use an email address as a userId as this field cannot be changed later. If you choose to login a user with just an email, the email address must not be associated with any other users on your workspace.\nFirst, you'll need to log your user into Intercom when your app launches, like this:\nobjectivecswift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ICMUserAttributes *userAttributes = [ICMUserAttributes new];\n    userAttributes.userId = @\"<#123456#>\";\n    [Intercom loginUserWithUserAttributes:userAttributes success:^{\n        // Handle success\n    } failure:^(NSError * _Nonnull error) {\n        // Handle failure\n    }];\n}\n\n\nIf the failure block of this call is executed, you can check against our list of error codes to help debug the issue.\n\nIf you don't have a unique userId to use here, you can create an ICMUserAttributes object and just populate the email property. Similarly, if you have both a userId and an email, you can populate both the userId and email attributes of the ICMUserAttributes object.\n\nYou'll also need to log your users into Intercom anywhere they login to your app:\nobjectivecswift\n- (void)successfulLogin {\n    ICMUserAttributes *userAttributes = [ICMUserAttributes new];\n    userAttributes.userId = @\"<#123456#>\";\n    [Intercom loginUserWithUserAttributes:userAttributes success:^{\n        // Handle success\n    } failure:^(NSError * _Nonnull error) {\n        // Handle failure\n    }];\n}\n\n\nIf the failure block of this call is executed, you can check against our list of error codes to help debug the issue.\n\nLogin both unidentified (non-logged in) and identified (logged in) users\n\nIf you have an app with both unidentified and identified users (like Google Maps or YouTube), follow these instructions.\n\nBest practices for logging in users\nIt is important to only login identified users to Intercom after verification of login to your app\nWe recommend giving all your users unique userIds, but if you haven't implemented this, you should create an ICMUserAttributes object and only populate the email property instead of populating the userId . Do not use an email address as a userId as this field cannot be changed later. If you choose to login a user with just an email, the email address must not be associated with any other users on your workspace.\nFirst, you'll need to log your users into Intercom when your app launches, like this:\nobjectivecswift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    if (loggedIn) {\n        ICMUserAttributes *userAttributes = [ICMUserAttributes new];\n        userAttributes.userId = @\"<#123456#>\";\n        [Intercom loginUserWithUserAttributes:userAttributes success:^{\n            // Handle success\n        } failure:^(NSError * _Nonnull error) {\n            // Handle failure\n        }];\n    } else {\n        [Intercom loginUnidentifiedUserWithSuccess:^{\n            // Handle success\n        } failure:^(NSError * _Nonnull error) {\n            // Handle error\n        }];\n    }\n}\n\n\nIf you don't have a unique userId to use here, you can create an ICMUserAttributes object and just populate the email property. Similarly, if you have both a userId and an email, you can populate both the userId and email attributes of the ICMUserAttributes object.\n\nYou'll also need to log your users into Intercom anywhere they login to your app:\nobjectivecswift\n- (void)successfulLogin {\n    ICMUserAttributes *userAttributes = [ICMUserAttributes new];\n    userAttributes.userId = @\"<#123456#>\";\n    [Intercom loginUserWithUserAttributes:userAttributes success:^{\n        // Handle success\n    } failure:^(NSError * _Nonnull error) {\n        // Handle failure\n    }];\n}\n\n\nIf the failure block of this call is executed, you can check against our list of error codes to help debug the issue.\n\nHow to log out an identified user\n\nYou should only log out an identified user. Logging out an unidentified user will result in orphan records that cannot be merged in future.\n\nWhen users want to log out of your app simply call:\n\nobjectivecswift\n- (void)logout {\n    [Intercom logout];\n}\n\n\nIntercom knows when your app is backgrounded and comes alive again, so you won't need to log your users in again.\n\nUpdate a user\nobjectivecswift\n+ (void)updateUser:(ICMUserAttributes *)userAttributes success:(void(^ __nullable)(void))success failure:(void(^ __nullable)(NSError *_Nonnull error))failure NS_REFINED_FOR_SWIFT;\n\nParameters\nName\tDescription\nuserAttributes\tThe attributes to update the user with.\nsuccess\tA nullable success callback with no parameters.\nfailure\tA failure callback with an error parameter.\nUsage\n\nYou can send any data you like to Intercom. Typically our customers see a lot of value in sending data that relates to customer development, such as price plan, value of purchases, etc. Once these have been sent to Intercom you can then apply filters based on these attributes.\n\nYou can send any data you like to Intercom from standard user attributes that are common to all Intercom users to custom user attributes that are unique to your app.\n\nThe complete list of standard user attributes that can be updated are described in the ICMUserAttributes object. Standard user attributes such as a user's name or email address can be updated by calling:\n\nobjectivecswift\nICMUserAttributes *userAttributes = [ICMUserAttributes new];\nuserAttributes.name = @\"Bob\";\nuserAttributes.email = @\"bob@example.com\";\n[Intercom updateUser:userAttributes success:^{\n    // Handle success\n} failure:^(NSError * _Nonnull error) {\n   // Handle error\n}];\n\n\nIf the failure block of the above call is executed, you can check against our list of error codes to help debug the issue.\n\nTypically our customers see a lot of value in sending custom data that relates to customer development, such as price plan, value of purchases, etc. Custom user attributes can be created and modified by setting the customAttributes on the ICMUserAttributes object with a dictionary.\n\nobjectivecswift\nICMUserAttributes *userAttributes = [ICMUserAttributes new];\nuserAttributes.customAttributes = @{@\"paid_subscriber\" : @YES,\n                                    @\"monthly_spend\"   : @155.5,\n                                    @\"team_mates\"      : @3};\n[Intercom updateUser:userAttributes success:^{\n    // Handle success\n} failure:^(NSError * _Nonnull error) {\n   // Handle error\n}];\n\n\nIf the failure block of the above call is executed, you can check against our list of error codes to help debug the issue.\n\nYou don't have to create attributes in Intercom beforehand. If a custom attribute hasn't been seen before, it will be created for you automatically.\n\nYou can also set company data by setting an array of ICMCompany objects on the ICMUserAttributes object, like:\n\nobjectivecswift\nICMCompany *company = [ICMCompany new];\ncompany.name = @\"My Company\";\ncompany.companyId = @\"abc1234\";\n\nICMUserAttributes *userAttributes = [ICMUserAttributes new];\nuserAttributes.companies = @[company];\n[Intercom updateUser:userAttributes success:^{\n    // Handle success\n} failure:^(NSError * _Nonnull error) {\n   // Handle error\n}];\n\n\nIf the failure block of the above call is executed, you can check against our list of error codes to help debug the issue.\n\nid is a required field for adding or modifying a company.\n\nSubmit an event\nobjectivecswift\n+ (void)logEventWithName:(NSString *)name metaData:(NSDictionary *)metaData;\n\nParameters\nName\tDescription\nname\tThe name of the event you wish to track.\nmetaData\tContains simple types to present to Intercom\nUsage\n\nYou can log events in Intercom that record what users do in your app and when they do it. For example, you could record the item a user ordered from your mobile app, and when they ordered it.\n\nobjectivecswift\n[Intercom logEventWithName:@\"ordered_item\" metaData: @{\n    @\"order_date\": @1392036272,\n    @\"stripe_invoice\": @\"inv_3434343434\",\n    @\"order_number\": @{\n      @\"value\": @\"3434-3434\",\n      @\"url\": @\"https://example.org/orders/3434-3434\"}\n }];\n\nPresent Intercom Spaces\nobjectivecswift\n+ (void)presentIntercom;\n\n\nPresents the Intercom Messenger.\n\nSpaces\n\nSpaces are different areas of the messenger that you can open directly. Intercom defines 4 possible spaces:\n\nHome\nHelp Center\nMessages\nTickets\n\nThese spaces can be presented using:\n\nobjectivecswift\n+ (void)presentIntercom:(Space)space;\n\nPresent Content\n\nThere are various IntercomContent that you can present. The available types are:\n\nArticle\nSurvey\nCarousel\nHelp Center Collections\n\nYou create an IntercomContent by passing the content's Id to the respective function. For instance, you create an \"article\" IntercomContent as follows:\n\nobjectivecswift\n[IntercomContent articleWithId:@\"12345\"]\n\n\nSimilarly, you can can create surveys, carousels and help center collections.\n\nYou can then present such content using:\n\nobjectivecswift\n[Intercom presentContent:[IntercomContent articleWithId:\"12345\"]];\n\nMAKE SURE YOUR CONTENT IS LIVE\n\nContent must be 'live' to be used in this feature. If it is in a draft or paused state, end-users will see an error if the app tries to open the content.\n\nCustomize the Intercom Messenger\n\nWe definitely recommend that you customize the Intercom Messenger so that it feels completely at home on your mobile app. Here's how:\n\nSelect the color and language of the Messenger and how personalize your profiles.\nFollow the below steps to choose how the launcher appears and opens for your users.\nChoose how the launcher appears and opens for your users\n\nIf you'd like the standard launcher to appear on the bottom right-hand side of your screen, just call:\n\nobjectivecswift\n[Intercom setLauncherVisible:YES];\n\n\nIf you want to set the bottom padding for the Messenger, which dictates how far from the bottom of the screen the default launcher and in-app messages will appear, you can call:\n\nobjectivecswift\n[Intercom setBottomPadding: bottomPadding];\n\nCreate a custom launcher\n\nHowever, if you'd like the Messenger to open from another location in your mobile app, you can create a custom launcher. This allows you to specify a button, link or element that opens the Messenger. For example, you can trigger the launcher to open when a customer taps on your ‘Help and Support' button.\n\nIf you have a custom launcher, you can call:\n\nobjectivecswift\n[Intercom presentIntercom];\n\n\nIf you want to open the Messenger to the composer screen with message field pre-populated you can call:\n\nobjectivecswift\n[Intercom presentMessageComposer:@\"Message\"];\n\nShow your user's unread message count\n\nNow you can show how many unread conversations your user has on your custom launcher. Even if a user dismisses a notification, they'll still have a persistent indicator of unread conversations.\n\nJust grab the current count with this method:\n\nobjectivecswift\n[Intercom unreadConversationCount];\n\n\nThen, start listening for updates by observing an NSNotification\n\nobjectivecswift\n[[NSNotificationCenter defaultCenter] addObserver:self\n     selector:@selector(updateUnreadCount:)\n         name:IntercomUnreadConversationCountDidChangeNotification\n       object:nil];\n\nTemporarily hide notifications\n\nYou can prevent in app messages from popping up in certain parts of your app, by calling:\n\nobjectivecswift\n[Intercom setInAppMessagesVisible:NO];\n\nMOBILE CAROUSELS AND SURVEYS VISIBILITY\n\nThe method setInAppMessagesVisible does not apply to Mobile Carousels or Surveys. They will always be displayed.\n\nYou can hide any Intercom screen in your app, by calling:\n\nobjectivecswift\n[Intercom hideIntercom];\n\nIntercom Notifications\n\nIntercom fires a number of Notifications to allow developers to be notified of certain events occurring within their app.\n\nMessenger Display\nThe following notifications are fired during the Messenger presentation and dismissal. For example, when a user receives a new In App message, IntercomWindowWillShowNotification will be fired. Once the In App is displayed on screen IntercomWindowDidShowNotification will be fired.\nIf the user taps on that In App message, these notifications will not be fired again as the Intercom window (In App message) is already displayed.\n\nWhen the user closes the messenger, IntercomWindowWillHideNotification and IntercomWindowDidHideNotification will be fired. This allows developers to perform certain actions in their app when the Intercom window is closed.\n\nUIKIT_EXTERN NSString *const IntercomWindowDidShowNotification;\nUIKIT_EXTERN NSString *const IntercomWindowDidShowNotification;\nUIKIT_EXTERN NSString *const IntercomWindowWillHideNotification;\nUIKIT_EXTERN NSString *const IntercomWindowDidHideNotification;\n\n\nStarting a New Conversation\nThe notification IntercomDidStartNewConversationNotification is fired when a new conversation is started. By listening to this notification, developers can perform certain actions in their app like presenting the Allow Notifications alert to users so that they can receive push notifications replies to that conversation.\n\nUIKIT_EXTERN NSString *const IntercomDidStartNewConversationNotification;\n\nStatus Bar Style\n\nIf you wish to change your status bar's style or visibility while the Intercom Launcher or an Intercom in-app is displayed on screen, you will need to call [Intercom setNeedsStatusBarAppearanceUpdate] to ensure that Intercom's window can reflect these changes accordingly.\n\nobjectivecswift\n+ (void)setNeedsStatusBarAppearanceUpdate;\n\nEnable debug logging\nobjectivecswift\n+ (void)enableLogging;\n\n\nEnable logging for Intercom for iOS. By calling this method, Intercom will display debug information.\nNote it is recommended to use it only while debugging.\n\nFAQ\n\nDo you support Dark Mode?\nNot yet.\n\nDo you support Multiple Windows on iPadOS?\nWe plan to support this in the future.\n\nWill you support Catalyst apps in macOS Catalina?\nNot yet, but we hope to be able to support this in the future.\n\nWhat's next?\n\nNow that you have Intercom configured it's time to:\n\nConfigure your Help enter\nEnable Identity Verification\nConfigure your app for Push Notifications."
  },
  {
    "title": "Custom Domains for Email Assets",
    "url": "https://developers.intercom.com/installing-intercom/web/custom-domain-for-email/",
    "html": "Custom Domains for Email Assets\n\nWhen you set up your workspace, all email assets (i.e. images, links, unsubscribe links, attachments) in your emails are served from a subdomain of intercom-mail.com, e.g. your-workspace-name.intercom-mail.com. We recommend using your own domain to improve the deliverability of your emails and make them more trustworthy.\n\nIf you'd like to use your own domain, you can do so by setting up a custom domain for email assets using the following steps:\n\n1. Creating a custom CNAME record\nGo to your DNS provider’s website (e.g. GoDaddy or Cloudflare). If you’re choosing one for the first time, go with one that supports SSL.\nCreate a CNAME (‘canonical name’) record for your custom domain.\nPoint it at Intercom’s host domain (This is based on your data hosting region, not where you are located geographically):\nIntercom US: your-workspace-name.intercom-mail.com\nIntercom Europe: your-workspace-name.intercom-mail.eu\nIntercom Australia: your-workspace-name.au.intercom-mail.com\nGOOD TO KNOW\n\nYou can copy the exact Intercom host domain URL of your workspace from the Link Branding Settings page.\n\n1.1 How to create a custom CNAME record with Cloudflare\n\nThese steps will vary, so check with your own DNS provider for support. As an example, here’s how to set up a CNAME record with Cloudflare:\n\nGo to the ‘DNS’ section for your domain in Cloudflare and add a CNAME record for your email assets custom domain.\nGive the CNAME a Name based on the first part of your custom domain e.g. if you want your custom custom domain to be emails.example.com, use emails.\nPoint it at the Intercom host domain. Depending on your data hosting region, it will look like one of these:\nIntercom US: your-workspace.intercom-mail.com\nIntercom Europe: your-workspace.intercom-mail.eu\nIntercom Australia: your-workspace.au.intercom-mail.com\nThe proxy status should be turned on.\n\nDNS changes can sometimes take up to 72 hours to take effect, but are typically much faster.\n\n2. Configuring SSL\n\nAfter you set up a custom domain, you must also add SSL support to your domain.\n\nSSL (or TLS), is the most widely used way to secure the connection between your server and your browser. It ensures the connection between the server and browser is encrypted and safe, and appears as HTTPS.\n\nThere are two ways to set up SSL with a custom domain for email assets:\n\nUse a flexible SSL (using a third party DNS provider like CloudFlare or AWS CloudFront)\nUse your own SSL certificate (using a TLS Termination Proxy)\n2.1 How to configure SSL with Cloudflare\n2.1.1 Add SSL support to your domain\n\nGo to the ‘SSL/TLS’ section and change SSL to ‘Full’.\n\n2.1.2 Create a page rule enforcing HTTPS\n\nGo to ‘Rules -> Page Rules’ and create a new page rule with the following settings:\n\nIf the URL matches: http://emails.example.com/*, replacing it with your own custom domain\nThen the settings are: Always use HTTPS\n\nWatch out for typos! The protocol in the URL should be HTTP not HTTPS.\n\n2.1.3 Create a page rule overriding the host header\n\nGo to ‘Rules -> Page Rules’ again and create a new page rule with the following settings:\n\nIf the URL matches:- https://emails.example.com/*\nThen the settings are: Host Header Override\nValue: Intercom host URL e.g. your-workspace.intercom-mail.com\n\nWatch out for typos! The protocol in the URL should be HTTP not HTTPS.\n\n Note: The \"Host Header Override\" is only available as part of CloudFlare's \"Enterprise\" plan\n\n3.1.4 Disable Cloudflare page speed features\n\nGo to ‘Speed -> Optimization’ and disable Rocket Loader and Mirage for your email assets custom domain.\n\n2.2 How to configure SSL with AWS\n2.2.1 Create a CloudFront Distribution\nSign in to the AWS Management Console and open the CloudFront console.\nChoose Create Distribution\nUpdate the 'Origin' settings.\nOrigin domain: Intercom host domain, e.g. your-workspace.intercom-mail.com\nProtocol: HTTPS only.\nMinimum origin SSL protocol: TLSv1.2.\n\nUpdate the 'Default cache behavior' settings.\n\nUpdate 'Cache key and origin requests':\nCache policy and origin request policy\nCache policy: CachingDisabled\nOrigin request policy: AllViewerExceptHostHeader\n\nUnder origin 'Settings'\n'Alternate domain name (CNAME)': your subdomain to be used for assets, e.g. emails.example.com\nYou must associate a certificate. You need a certificate that matches your domain.\n\n2.2.2 Create a CNAME record\nCopy your distribution domain name\nNavigate to your domain provider and create a new CNAME record\nFor host/name input your subdomain (ex. emails)\nFor value input your CloudFront distribution domain name\n\n2.3 Using your own SSL certificate with Apache\n\nThe SSL certificate used by your email assets is a shared certificate signed by your DNS provider. It uses SNI (Server Name Indication) to secure your site.\n\nIf you wish to host your own security certificates, you can do so through a TLS termination proxy. You’ll need to edit the configuration file on your proxy webserver.\n\nHere are the basic instructions to set up your own SSL using Apache webserver:\n\n# Prerequisites: mod_ssl, mod_proxy and mod_proxy_http should be enabled\n\n# Step 1: Acquire an SSL certificate and private key (e.g. LetsEncrypt.org)\n# Step 2: Set up Apache proxy settings, example below.\n# Step 3: Set custom domain in Intercom Help Center settings\n# Step 4: Make sure your custom domain's DNS record resolves to your Apache server\n\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n        ServerName your-help-site.custom-domain.com # specify your custom domain here\n\n        # Set SSL options for your own domain\n        SSLEngine on\n        SSLCertificateFile /path/to/your/fullchain.pem\n       \tSSLCertificateKeyFile /path/to/your/privatekey.pem\n  \n        # Proxy SSL options\n        SSLProxyEngine on\n        SSLProxyVerifyDepth 10\n        SSLProxyCheckPeerCN off\n        SSLProxyCheckPeerName on\n\n       # Set up the reverse proxy to Intercom\n        ProxyPreserveHost Off\n  \t\t\tProxyAddHeaders Off\n        ProxyPass / https://your-workspace.intercom-mail.com/\n        ProxyPassReverse / https://your-workspace.intercom-mail.com/\n</VirtualHost>\n</IfModule>\n\n\nThere are many ways to set up your own SSL certificate - we can’t guarantee that we can support every type of proxy setup. If you have specific needs, we can't support you in configuring it.\n\nNote that you may also need to add redirect from HTTP protocol (port 80) to HTTPS as part of your server configuration.\n\nWhile most modern browsers support SNI, a few older ones don’t. If you’re supporting those browsers, you should use your own SSL certificate instead. Check with your DNS provider to see if this option is available.\n\n3. Entering the newly registered custom domain in Link branding\n\nThe last remaining step is specifying your custom domain in Intercom's Link branding page (US, EU and AU links)."
  },
  {
    "title": "Javascript API: Attributes & Objects",
    "url": "https://developers.intercom.com/installing-intercom/web/attributes-objects/",
    "html": "Javascript API: Attributes & Objects\n\nThis page details the possible attributes that can be used when Installing the Messenger\n\nVisitors / LeadsLogged In users\nwindow.intercomSettings = { \n  app_id: YOUR_APP_ID\n  // customise installation with your attributes \n}\n\nMessenger Attributes\n\nThese attributes will modify the behaviour of the messenger. They do not modify user/lead data.\n\nAttribute in Javascript code\tType\tDescription\napp_id\tstring\tThe app_id of your Intercom app which will indicate where to store any data\ncustom_launcher_selector\tstring\tThe CSS selector of an element to trigger Intercom(\"show\") in order to activate the messenger (See docs). To target an element by ID: \"#id_of_element\". To target elements by class \".classname_of_elements\"\nalignment\tstring\tDictate the alignment of the default launcher icon to be on the left/right. Possible values: \"left\" or \"right\" (any other value is treated as right). (See docs)\nvertical_padding\tinteger\tMove the default launcher icon vertically. Padding from bottom of screen. Minimum value: 20. Does not work on mobile. (See docs)\nhorizontal_padding\tinteger\tMove the default launcher icon horizontally. Padding from right side of screen Minimum value: 20. Does not work on mobile. (See docs)\nhide_default_launcher\tboolean\tHide the default launcher icon. Setting to false will forcefully show the launcher icon (See docs)\nsession_duration\tinteger\tTime in milliseconds for the Intercom session to be considered active.A value of 5 * 60 * 1000 would set the expiry time to be 5 minutes\naction_color\tstring*\tUsed in button links and more to highlight and emphasise\nbackground_color\tstring*\tUsed behind your team profile and other attributes\n\n* The color string can be any valid CSS Color Name HEX or RGB\n\nData Attributes\n\nThese attributes are used to update user/lead information.\n\nWhen user_id / email is provided, it will be saved as a User record\nWhen no user_id / email is provided, it will be considered a Visitor record which is not seen in the Intercom dashboard. When a Visitor sends a message via the Intercom messenger they will be converted to a Lead which is viewable in the Intercom dashboard\nAny other attribute not listed below and not in the Messenger Attributes will be treated as a custom user attribute\nIf the value of a custom user attribute is set to an empty string, or a string with the value \"undefined\", or \"null\", this will appear as Unknown in Platform.\nIf a value is set for a custom user attribute that has been configured to prevent updates via the Messenger then this value will be ignored in the request.\nAttribute\tType\tDescription\nemail\tstring\tThe email address of the currently logged in user (Only applicable to users)\nuser_id\tstring\tThe user_id address of the currently logged in user (Only applicable to users)\ncreated_at\ttimestamp\tThe Unix timestamp (in seconds) when the user signed up to your app (Only applicable to users)\nname\tstring\tName of the current user/lead\nphone\tstring\tPhone number of the current user/lead\nlast_request_at\ttimestamp\tThis value can't actually be set by the Javascript API (it automatically uses the time of the last request but is a this is a reserved attribute)\nunsubscribed_from_emails\tboolean\tSets the [unsubscribe status]((https://docs.intercom.com/faqs-and-troubleshooting/unsubscribing-users/how-do-i-unsubscribe-users-from-receiving-emails) of the record\nlanguage_override\tstring\tSet the messenger language programmatically (instead of relying on browser language settings)\nutm_campaign\tstring\tUTM Campaign valueNote: All UTM parameters are updated automatically and can not be manually overidden\nutm_content\tstring\tUTM Content value\nutm_medium\tstring\tUTM Medium value\nutm_source\tstring\tUTM Source value\nutm_term\tstring\tUTM Term value\navatar\tavatar object\tSet the avatar/profile image associated to the current record (typically gathered via social profiles via email address)\nuser_hash\tstring\tUsed for identity verification (Only applicable to users)\ncompany\tcompany object\tCurrent user's company (Only applicable to users) For field definitions see Company Object in the section below Note: Company ID and company name are the minimum requirements to pass a company into Intercom.\ncompanies\tarray of company objects\tAn array of companies the user is associated to (Only applicable to users)\npage_title\tstring\tUsed for keeping track of user page views. Default value is the document title property.\nUser Profile in Web Interface indicating corresponding attributes\n\nAvatar Object\n\nSimilar to the API avatar object\n\nwindow.intercomSettings =  {\n  app_id: YOUR_APP_ID, \n  user_id: USER_ID_OF_CURRENTLY_LOGGED_IN_USER, \n  avatar: {\n    \"type\": \"avatar\", \n    \"image_url\" :\"https://yourwebsite.com/user_id/profile.png\"\n  }\n }\n\n\nAttribute in Javascript code\n\n\t\n\nAttribute in API\n\n\t\n\nAttribute / Data in Web interface\n\n\t\n\nType\n\n\t\n\nDescription\n\n\n\n\ntype\n\n\t\n\ntype\n\n\t\n\tstring\tThe value is \"avatar\"\nimage_url\timage_url\tThe avatar/profile picture of the record\tstring\tAn avatar image URL. Note: needs to be https.\nCompany Object\n\nLearn more about companies from our Help Center article.\nThese are very similar to the API company object.\nAttributes not listed below will be considered as a custom company attribute.\nNote: Company ID and company name are the minimum requirements to pass a company into Intercom.\n\nSingle companyMultiple companies\nwindow.intercomSettings = {\n  app_id: YOUR_APP_ID, \n  user_id: USER_ID_OF_CURRENTLY_LOGGED_IN_USER, \n  company: {\n    company_id: \"6\",\n    created_at: 1394531169,\n    name: \"Blue Sun\",\n    monthly_spend: 49,\n    plan: \"Pro\",\n    size: 85,\n    website: \"http://example.com\",\n    industry: \"Manufacturing\"\n  }\n}\n\nAttribute in Javascript code\tAttribute in API\tAttribute / Data in Web interface\tType\tDescription\nid / company_id\tcompany_id\tCompany ID\tstring\tThe company ID of the company\nname\tname\tName\tstring\tThe name of the company\ncreated_at / remote_created_at\tremote_created_at\tCompany created at\ttimestamp\tThe time the company was created in your system\nplan\tplan\tPlan\tstring\tThe name of the plan the company is on\nmonthly_spend\tmonthly_spend\tMonthly spend\tinteger\tHow much revenue the company generates for your business\nuser_count\tpeople\tPeople\tinteger\tIndicates the number of users in Intercom associated to the companyDoes not actually update the value but is a reserved keyword\nsize\tsize\tCompany Size\tinteger\tThe number of employees in the company\nwebsite\twebsite\tCompany Website\tstring\tThe URL for the company website\nindustry\tindustry\tCompany Industry\tstring\tThe industry of the company\nCompany Profile in Web Interface indicating corresponding attributes"
  },
  {
    "title": "Javascript API: Methods",
    "url": "https://developers.intercom.com/installing-intercom/web/methods/",
    "html": "Javascript API: Methods\n\nLoading the Intercom JavaScript library provides an Intercom JavaScript object that responds to a few methods. These allow you to update users without a page refresh and interact with the messenger window.\n\nIntercom('boot', intercomSettings)\n\nIf you'd like to control when Intercom is loaded, you can use the 'boot' method. This is useful in situations like a one-page Javascript based application where the user may not be logged in when the page loads. You call this method with the standard intercomSettings object.\n\nIntercom('boot', {  \n    app_id: 'abc12345',  \n    email: 'john.doe@example.com',\n    created_at: 1234567890,\n    name: 'John Doe',\n    user_id: '9876'\n});\n\nIntercom('shutdown')\n\nIf you have the Inbox product (combined with another product like Messages) you should call the Intercom shutdown method to clear your users’ conversations anytime they logout of your application. Otherwise, the cookie we use to track who was most recently logged in on a given device or computer will keep these conversations in the Messenger for one week. This method will effectively clear out any user data that you have been passing through the JS API.\n\nIntercom('shutdown');\n\nDeleting cookies\n\nIf you need to delete cookies created by the Messenger but are unable to use this method (e.g. because our JavaScript hasn’t been loaded), all cookies are prefixed with intercom- and are created on your domain.\n\nIntercom('update')\n\nCalling the update method with some new user data will trigger the JavaScript to look for new messages that should be displayed to the current user (the one whose details are in the window.intercomSettings variable) and show them if they exist.\n\nCalling the update method with a JSON object of user details will update those fields on the current user in addition to logging an impression at the current URL and looking for new messages for the user.\n\nUpdate with No ArgumentsUpdate With User Details\nIntercom('update');\n\nIDs & Data\n\nIf the person's ID is not found in the user list when calling the update, a new user will be created.\n\nIf trying to update a custom_attribute, you do not need to include those values as an object. Include them in-line with the standard Intercom fields and they will be applied accordingly.\n\nUpdate Throttling\n\nYou can call Intercom('update') without getting throttled up to 20 times per 30 minutes. After the 20th call, you'll be throttled and the quota of 20 calls will get reset every 30 minutes. Reloading the page will refresh this state.\n\nIntercom('hide')\n\nThis will hide the main Messenger panel if it is open. It will not hide the Messenger Launcher.\n\nIntercom('hide');\n\nIntercom('show')\n\nThis will show the Messenger. If there are no new conversations, it will open to the Messenger Home. If there are, it will open with the message list.\n\nIntercom('show');\n\nIntercom('showSpace', spaceName)\n\nThis will show the specified space in the Messenger, if that space is enabled.\n\nIntercom('showSpace', 'home');\nIntercom('showSpace', 'messages');\nIntercom('showSpace', 'help');\nIntercom('showSpace', 'news');\nIntercom('showSpace', 'tasks');\nIntercom('showSpace', 'tickets');\n\nIntercom('showMessages')\n\nThis will open the Messenger with the message list.\n\nIntercom('showMessages');\n\nIntercom('showNewMessage')\n\nThis will open the Messenger as if a new conversation was just created.\n\nThis function can also take an optional second parameter, used to pre-populate the message composer as shown in the code example below..\n\nOpen For New Messages\nIntercom('showNewMessage');\n\nPre-Populate Messages\nINBOX ONLY\n\nPre-populating messages is only possible with our Inbox Essential & Pro product.\n\nJS ExampleHTML Example\nIntercom('showNewMessage', 'pre-populated content');\n\nIntercom('onHide')\n\nWhen we hide the messenger, you can hook into the event. This requires a function argument.\n\nIntercom('onHide', function() { /** Do stuff **/ });\n\nIntercom('onShow')\n\nWhen we show the messenger, you can hook into the event. This requires a function argument.\n\nIntercom('onShow', function() { /** Do stuff **/ });\n\nIntercom('onUnreadCountChange')\n\nThis method allows you to register a function that will be called immediately when invoked, and again whenever the current number of unread messages changes.\n\nIntercom('onUnreadCountChange', function(unreadCount) {\n  // Do stuff...\n});\n\nUsing with a Custom Launcher\n\nIf you use a custom launcher and also want to use the 'badge' delivery option, we recommend that you use the onUnreadCountChange method to show a badge on your custom launcher. If you use a custom launcher without a badge, you shouldn't use the badge delivery option.\n\nIntercom('trackEvent')\n\nYou can submit an event using the trackEvent method. This will associate the event with the currently logged in user and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.\n\nYou can also add custom information to events in the form of event metadata, which can be included in event based messages to your customers.\n\nWithout metadataWith metadata\nIntercom('trackEvent', 'invited-friend');\n\nIntercom('getVisitorId')\n\nA visitor is someone who goes to your site but does not use the messenger. You can track these visitors via the visitor user_id. This user_id can be used to retrieve the visitor or lead through the REST API.\n\nIntercom('getVisitorId')\n\nIntercom('startTour', tourId)\n\nIf you would like to trigger a tour based on an action a user or visitor takes in your site or application, you can use this API method. You need to call this method with the id of the tour you wish to show. The id of the tour can be found in the “Use tour everywhere” section of the tour editor.\n\nPlease note that tours shown via this API must be published and the “Use tour everywhere” section must be turned on. If you're calling this API using an invalid tour id, nothing will happen.\n\nFrom JSFrom a link\nIntercom('startTour', 123);\n\nIntercom('showArticle', articleId)\n\nIf you would like to trigger an article in the Messenger, you can use the showArticle method. The article will be shown within the Messenger, and clicking the Messenger back button will return to the previous context.\nIf the Messenger is closed when the method is called, it will be opened first and then the article will be shown.\n\nTriggering an articleTriggering from HTML\nIntercom(‘showArticle’, 123);\n\nIntercom('showNews', newsItemId)\n\nIf you would like to trigger a news item in the Messenger, you can use the showNews method. The news item will be shown within the Messenger, and clicking the Messenger back button will return to the previous context.\nIf the Messenger is closed when the method is called, it will be opened first and then the news item will be shown.\n\nTriggering a news itemTriggering from HTML\nIntercom('showNews', 123);\n\nIntercom('startSurvey', surveyId)\n\nIf you would like to trigger a survey in the Messenger, you can use the startSurvey method. The id of the survey can be found in the “Additional ways to share your survey” section of the survey editor as well as in the URL of the editor.\n\nPlease note that surveys shown via this API must be live. If you're calling this API using an invalid survey id, nothing will happen.\n\nTriggering a surveyTriggering from HTML\nIntercom('startSurvey', 123);\n\nIntercom('startChecklist', checklistId)\n\nIf you would like to trigger a checklist in the Messenger, you can use the startChecklist method. The id of the checklist can be found in the “Additional ways to share your checklist” section of the checklist editor as well as in the URL of the editor.\n\nPlease note that checklists shown via this API must be live. If you're calling this API using an invalid checklist id, nothing will happen.\n\nTriggering a checklistTriggering from HTML\nIntercom('startChecklist', 123);\n\nIntercom('showTicket', ticketId)\n\nIf you would like to trigger a ticket in the Messenger, you can use the showTicket method. The ticket will be shown within the Messenger, and clicking the Messenger back button will return to the previous context.\nIf the Messenger is closed when the method is called, it will be opened first and then the ticket will be shown.\n\nTriggering a ticketTriggering from HTML\nIntercom('showTicket', 123);\n\nIntercom('showConversation', conversationId);\n\nYou can show a conversation programatically in the Messenger by calling showConversation method\n\nTriggering a conversationTriggering from HTML\nIntercom('showConversation', 123);\n\nIntercom('onUserEmailSupplied')\n\nWhen a visitor enters their email into the Messenger, you can hook into the event. This requires a function argument.\n\nIntercom('onUserEmailSupplied', function () {\n  // Do stuff...\n});\n"
  },
  {
    "title": "About the SDK",
    "url": "https://developers.intercom.com/installing-intercom/ios/about-the-sdk/",
    "html": "About the SDK\n\nThe Intercom SDK for iOS enables you to use the Intercom Messenger in your app, have conversations with your customers, send rich outbound messages, show your Help Center, and track events.\n\nInstallation\n\nYou can install Intercom for iOS using Cocoapods, Swift Package Manager, or manually. A basic installation takes around 15 minutes, but will take a little longer if you need to configure event tracking or have a more complex use case.\n\nTo install Intercom for iOS you will need an API key. You’ll find that in Intercom > Settings > Installation > iOS. That’s where you can upload your push certificate as well.\n\nSample app\n\nYou’ll find Intercom for iOS on Github here. There’s also a sample app that you can use to play around with the SDK here.\n\nCompatibility\n\nIntercom for iOS is compatible with iOS 13 and up. We also have a plugin for Cordova and Phonegap.\n\nThe SDK is written using both Objective-C and Swift.\n\nSDK size\n\nThe size of Intercom for iOS once installed varies depending on your app’s configuration. For most installations, it’s around 3MB in size."
  },
  {
    "title": "Activity Log",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Models/activity_log/",
    "html": "Activities performed by admins."
  },
  {
    "title": "Update a visitor",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Visitors/updateVisitor/",
    "html": "Sending a PUT request to /visitors will result in an update of an existing Visitor.\n\nOption 1. You can update a visitor by passing in the user_id of the visitor in the Request body.\n\nOption 2. You can update a visitor by passing in the id of the visitor in the Request body."
  },
  {
    "title": "Error Codes",
    "url": "https://developers.intercom.com/docs/references/rest-api/errors/error-codes/",
    "html": "Error Codes\n\nThe API may send the following error codes. Other codes may be added in the future.\n\nField\tDescription\nserver_error\tGeneric server error\nclient_error\tGeneric client error\ntype_mismatch\tThe JSON value type is incorrect for the field\nparameter_not_found\tA required parameter was not supplied\nparameter_invalid\tA parameter's value is invalid\naction_forbidden\tThe action is not authorized\nconflict\tThere is existing data that clashes with the request data\napi_plan_restricted\tThe API is not available on this App's Plan\nrate_limit_exceeded\tThe rate limit for the App has been exceeded\nunsupported\tThe operation is not supported\ntoken_revoked\tThe token or API Key has been revoked\ntoken_blocked\tThe API Key or App has been blocked\ntoken_not_found\tThe token or API Key does not exist\ntoken_unauthorized\tThe token or API Key is not allowed to access the resource\ntoken_expired\tThe token is expired\nmissing_authorization\tNo authorization data was found on the request\nretry_after\tThe client should wait for a time before retrying the request\njob_closed\tThe client should start a new bulk job\nnot_restorable\tThis user was blocked and cannot be recreated\nteam_not_found\tThe team does not exist\nteam_unavailable\tThis team is deprecated so conversations cannot be assigned to it\nadmin_not_found\tThe admin does not exist"
  },
  {
    "title": "List all ticket types",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Ticket-Types/listTicketTypes/",
    "html": "You can get a list of all ticket types for a workspace."
  },
  {
    "title": "Ticket",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tickets/ticket/",
    "html": "Tickets are how you track requests from your users."
  },
  {
    "title": "Create a new attribute for a ticket type",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Ticket-Type-Attributes/createTicketTypeAttribute/",
    "html": "You can create a new attribute for a ticket type."
  },
  {
    "title": "Team",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Teams/team/",
    "html": "Teams are groups of admins in Intercom."
  },
  {
    "title": "Create a phone Switch",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Switch/createPhoneSwitch/",
    "html": "You can use the API to deflect phone calls to the Intercom Messenger. Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.\n\nIf custom attributes are specified, they will be added to the user or lead's custom data attributes."
  },
  {
    "title": "Subscription Types",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Subscription-Types/subscription_type/",
    "html": "A subscription type lets customers easily opt out of non-essential communications without missing what's important to them."
  },
  {
    "title": "Tag",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Tags/tag/",
    "html": "A tag allows you to label your contacts, companies, and conversations and list them using that tag."
  },
  {
    "title": "Segment",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Segments/segment/",
    "html": "A segment is a group of your contacts defined by the rules that you set."
  },
  {
    "title": "Note",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Notes/note/",
    "html": "Notes allow you to annotate and comment on your contacts."
  },
  {
    "title": "News Item",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/News/news_item/",
    "html": "A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers."
  },
  {
    "title": "Message",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Messages/message/",
    "html": "Message are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact."
  },
  {
    "title": "Help Center",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Help-Center/help_center/",
    "html": "Help Centers contain collections"
  },
  {
    "title": "Data Event",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Events/data_event/",
    "html": "Data events are used to notify Intercom of changes to your data."
  },
  {
    "title": "Data Export",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Export/data_export/",
    "html": "The data export api is used to view all message sent & viewed in a given timeframe."
  },
  {
    "title": "Contact",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/contact/",
    "html": "Contact are the objects that represent your leads and users in Intercom."
  },
  {
    "title": "Data Attribute",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Data-Attributes/data_attribute/",
    "html": "Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes."
  },
  {
    "title": "Conversation",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Conversations/conversation/",
    "html": "Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact."
  },
  {
    "title": "Article",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/article/",
    "html": "The Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone."
  },
  {
    "title": "Company",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Companies/company/",
    "html": "Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies."
  },
  {
    "title": "Admin",
    "url": "https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Admins/admin/",
    "html": "Admins are teammate accounts that have access to a workspace."
  },
  {
    "title": "Update your API version",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/update-your-api-version/",
    "html": "Update your API version\n\nYou can select which version of the API to apply to any given app. Visit your Developer Hub page to see a list of all your apps. From there, you can select which version of the API to apply to any particular app by:\n\nSelecting it via your Developer Hub app settings page, or\nSetting the version on each API call via an HTTP header\n\n❗️ Always test new versions of the API\n\nSome API versions may be breaking changes and require you to change your code if you are using that feature. We will highlight this when we provide information on the new version but you should always test new versions of the API to ensure they are fully compatible with your system\n\nSelecting the version via the Developer Hub\nGo to your Developer Hub and choose the relevant app.\nThen go to the API Version menu, click on the Change version box and select your new version. Once you have selected the appropriate version for your app all subsequent API requests will use this version.\n\nAny conflicts between the topics available in the new version and the topics in the existing subscription will be displayed in a table below. Topics which are not available in the new version will have a status of 'Off'. These will need to be deleted before proceeding. If you wish to continue receiving webhooks for the topic, please check the webhook topics of the respective version.\n\nTopic conflict table\n\nSelecting the version via the API request\nIdentify the version you want to test (e.g. 1.x or 2.x). You can check the change log or look at the available versions in the app dropdown above to confirm the version number you want to use.\nAdd an HTTP header of Intercom-Version to your API request.\nUsing the Access token for your app make an API request with the header and the appropriate version.\nhttpstat https://api.intercom.io/users?email=cathalhoran@gmail.com \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n-H 'Accept: application/json' \\\n-H 'Intercom-Version: 1.1'\n\nImportant API questions\nHow can I test new versions?\n\nThere are two options for testing new versions\"\n\nVia the API\nVia a Private app\nVia API\n\nThe best way to test new versions of the API is by setting the version in a HTTP header (see above). That way you can check what has changed and see whether it is compatible with your code, or whether you need to make a change before adopting the new version.\n\nVia Private App\n\nAlternatively, you can create a new private app on the target API version. Ensure you have selected the desired webhook topics, and provided a webhook url endpoint. Then you can use Intercom to test the new webhook topics and payloads. This will allow you to check see whether the version is compatible with your code, or whether you need to make changes before adopting the new version.\n\nCan I rollback after making a change?\n\nYes, if you select a new version for your app and you discover an issue you can switch back to an older version.\n\nHow do I switch over to a new version for my production app?\n\nYou can start by setting the version via the HTTP header. This way you can ship code to production which changes the version and any new code needed at the same time. Once this is working in production you can change the version in your app and then remove the headers if you like.\n\nFor OAuth apps, this setting also dictates which version your clients use. All access tokens granted via OAuth (even those granted before the change) use the version that you have specified in your app settings and/or HTTP header.\n\nCan I set the header version and the version in the app?\n\nYes, but the header version in the API request will override the version selected in the app.\n\nWhere can I find out information on the different versions?\n\nThe change log is the best place to find information on the different versions and the changes they contain. We will highlight breaking changes in the change log clearly so you are aware of versions that may require you to make a change on your end.\n\nWill I always have a choice to upgrade?\n\nUsually, but there may be security updates which necessitate mandatory changes. In these cases we will attempt to minimize any impact on older versions. For example, if we have to remove an attribute we will do that in the new version and may only change the value in older versions so as to minimize the impact until you upgrade to the newer version."
  },
  {
    "title": "Changelog (v2.10)",
    "url": "https://developers.intercom.com/docs/references/changelog/",
    "html": "Changelog (v2.10)\nBREAKING CHANGES\n\nThis version of the API includes breaking changes. They are listed below.\n\nBreaking Changes\nHelp Centers no longer have sections\n\nThe sections endpoints have been removed. You can now use the collections endpoints to get all collections and their articles. If you previously had sections, they will be returned as collections.\n\nArticle collections can now be multi-level\n\nPrevious to this version, article collections could only be one level deep. Now, you can have collections within collections. The collections endpoint now returns a parent_id attribute for each collection. If the collection has no parent, the parent_id will be null. You can also set the parent_id when creating or updating a collection.\n\nBackwards Compatible Changes\nAdding additional fields to the Company object in Webhooks\n\nWe've added the following fields to the Company object in Webhooks:\n\nsize\nwebsite\nindustry\nplan\nIntroducing the Articles Search endpoint\n\nUsing the new Articles Search endpoint, you can now search the text of Articles in your Help Center, and filter by state.\n\nTry Articles Search\nIntroducing the Tickets Search endpoint\n\nUsing the new Tickets Search endpoint, you can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.\n\nTry Tickets Search\nIntroducing the Ticket Tags endpoints\n\nUsing the /ticket/{ticket_id}/tags endpoint, you can now add and remove tags from tickets.\n\nTickets now have a linked objects field\n\nThe Tickets object now includes a linked_objects field, which is list of objects that are linked to the ticket. These can be conversations or other tickets.\n\nAdding open and snoozed_until attributes to tickets.\n\nTickets now have an open attribute, which is true if the ticket is open, and false if it is closed. Tickets also have a snoozed_until attribute, which is the date and time that the ticket is snoozed until, if it is snoozed. This is different from the ticket’s state.\n\nAdd External ID to Contact\n\nWe now return the external_id for a Contact where one exists.\n\nCreate comments on Tickets\n\nYou can now create comments on tickets using the Reply to a ticket endpoint.\n\nAdd Category to Tickets and Ticket Types\n\nTickets now have one of three different categories.\n\nSharing tickets\n\nUsing the new is_shared attribute, you can now share tickets with your customers via the API.\n\nConverting a conversation to a ticket\n\nYou can now use the API to convert a Conversation to a Ticket\n\nAdd Ticket ID to Ticket Response\n\nThe ticket model now includes the ticket_id attribute. This represents the Ticket ID that is visible in the Intercom user interface, and is distinct from the id of the ticket.\n\nAdd snooze_until attribute to tickets.\n\nThe Tickets API now accepts a snooze_until attribute when updating a ticket. This allows you to snooze a ticket until a specific date and time.\n\nAdd Admin activity log webhook\n\nWe've added a new webhook, admin.activity_log_event.created, which will be sent each time a new admin activity log is created."
  },
  {
    "title": "Listing your App",
    "url": "https://developers.intercom.com/docs/publish-to-the-app-store/listing-your-app/",
    "html": "Listing your App\n\nYour listing in the Intercom App Store is how customers discover, learn about and install your app. You should use this space to really 'sell' your app, telling a compelling story about its benefits and what it helps customers do.\n\nOnce you've published your app to the store and you will automatically be enrolled in our App Partner Program which unlocks revenue-driving partnership opportunities.\n\nHere are the requirements to create an effective listing:\n\nApp icon\n\nYour app icon should be eye-catching and recognizable. Avoid text and too much detail. The icon will be small, so bold and simple works best. Additional criteria include:\n\nThe image needs to be 512px by 512px and PNG format. (Make sure that the image is not pixelated or stretched).\nYou must have the right to use the image.\nYour icon cannot contain any form of the Intercom logo.\nApp name\n\nCustomers browsing the store will see your app's name first, so make it punchy, memorable, and easy to search. A great name will give customers an indication of what the app does. Your app name:\n\nMust be 40 characters or less\nMust be a unique name in the store\nCan be your product or company's name\nMust not contain Intercom\nShort description\n\nHere you should outline a clear value proposition or job to be done (e.g., \"Notify customers about issues to cut down on questions,\" \"Seamlessly book meetings with leads and customers,\" or \"Convert your hottest leads right from Slack\").\n\nMake sure your short description is punchy, concise, and intriguing so that customers click to find out more. The description should focus on your Intercom app specifically — not your product more generally — and should:\n\nBe 70 characters or less\nUse sentence capitalization\nNot end with a period or full stop\nBuilt by\n\nThis should be your company name. It can be the same as your app name.\n\nTerms of service URL\n\nThis is the URL where customers can read your company's terms of service.\n\nPrivacy policy URL\n\nThis is the URL where customers can read your company's privacy policy.\n\nTell us how you sell your app\n\nCustomers feel more confident in choosing an app when they understand the cost. In this section, you should select the pricing model that best describes how customers will access your app (\"Free,\" \"Trial for free,\" \"Some features free,\" or \"Paid app\"). If customers will need to pay, you should also list the URL for your pricing page.\n\nDocumentation URL\n\nThis is the URL for your app's help doc. Make it easy for customers to learn more and get help.\n\nSupport email address\n\nThis is your team's support email address. Enable customers to easily reach out if they need support. If you use Intercom for support, you can forward these emails to your Inbox and manage all of your conversations in one place.\n\nWorkspace avatars\n\nMake your listing feel more personal by showing your team's avatars. List here the id for the workspace from which your teammate avatars will be fetched. Your workspace id is the unique code assigned to your app when you create it in Intercom. You can find it by checking the URL of any page you have open in Intercom. It's the string of characters that comes after apps/ in the URL.\n\nWebsite URL\n\nThis is the URL where customers can access your company's website and learn more.\n\nLong description\n\nThis is your opportunity to really let your app shine. An impactful long description:\n\nIs 2-3 short paragraphs (or bullet points if helpful) and uses sentence capitalization (not all caps)\nFocuses on why customers should use your app (i.e., the benefits of using it and the results customers might expect), rather than how\nIncludes specific examples or use cases to help customers envision the ways in which they might use your app\nIs tailored to Intercom customers — B2B and B2C companies ranging from SMB to enterprise and using Intercom for support, sales, and/or marketing (for more details on what we offer, check out our website)\n\nHere's a structure you can use if you like:\n\nParagraph 1: Tee up the key benefit of your app, the problem you solve, and the core use case or example.\nParagraph 2: Delve into additional benefits and/or use cases, and if needed, provide more context on your own product or service.\nParagraph 3 (optional): Just one sentence that links to a page for users to find more details (e.g., a landing page for the app).\n\n🚧 Note\n\nPlease make sure that all of your line breaks appear correctly, such that you don't have too much or too little space between paragraphs. You can preview your formatting by clicking the \"Open Preview\" button on the righthand side when editing your app listing in your Developer Hub.\n\nPromotional video (optional)\n\nHaving a video is not a requirement to be published on the App Store, but it is a powerful way to show customers the value of your app and boost install rates. It may also be used by our sales team to better understand your app and potentially recommend it to Intercom's existing customers or prospects. A few pointers for a successful video:\n\nKeep your video short (we recommend 30-60 seconds) and focus on the key benefits of your app (not the details of how to use it).\nMake sure your video is about your app - and the value of using your product and Intercom together - and is not solely about your product.\nUpload your video to Youtube, Vimeo, Wistia or Loom in order to add it to your listing.\nPRO TIP\n\nUse Loom or ScreenFlow (or your preferred video recording and editing software) to capture your app in action and record yourself on your front-facing camera - adding a human touch makes your content clearer and more engaging. See the Google Analytics listing for an example.\n\nApp images\n\nImages help customers quickly understand what your app does and let you highlight key features. Customers rely heavily on listing images when evaluating apps, and the best images emphasize the core benefits of your app. Your listing must have 2-5 images that:\n\nAre at least 1600px by 1000px (8:5 ratio), PNG format, and less than 21MB\nAre not pixelated or stretched\nCombine cropped, focused, or layered screenshots with text\n\nIn addition, good images are ones that:\n\n✅ Reflect the brand and identity of your app or product\n✅ Use text to highlight the value and benefits of your app, or to walk through features\n🚫 Avoid full, uncropped, and unannotated screenshots\n🚫 Avoid irrelevant use of photography (focus instead on the features and benefits of your app)\n\nHere are a few examples of good images:\n\nPRO TIP\n\nUse our internal template (in Keynote, Figma, or Powerpoint—or upload the Powerpoint version to Google Drive and use it there), or create your own (websites like Canva are great resources for simple but powerful design).\n\nCategories\n\nApp Store visitors can browse apps by category. Please select the 1-2 categories you think best describe your app.\n\nUsing the Intercom logo\n\nIf you're using our logo in any of your marketing materials, please follow the guidelines and use the brand assets available on our Press Resources page. Please do not modify or animate our logo in any way."
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/react-native/push-notifications/",
    "html": "Push Notifications\n\nThis article explains how to enable push notifications in the Intercom React Native wrapper. If you are new to push notifications, check out this page first.\n\nEnable Android push notifications\nStep 1. Enable Google services for your app\n\nIf you already have a Firebase project with notifications enabled you can skip to the next step. Otherwise go to the FCM Console page and create a new project following these steps:\n\nGive the project a name and click ‘Create Project’.\n\nOnce your project is set up, scroll down and select the ‘Cloud Messaging’’ card.\n\nClick on the Android icon to continue setup.\n\nEnter your app’s package name and click ‘Register App’.\n\nStep 2. Setup client to receive push\n\nClick the button \"Download google-services.json\" to download the config file. You’ll need to move the google-services.json file into the android/app directory.\n\nClick \"next\" and then in android/build.gradle you'll need to add the following lines to your dependencies:\n\nbuildscript {\n    // ...\n    dependencies {\n        // ...\n        classpath 'com.google.gms:google-services:4.2.0' // <-- Add this\n    }\n}\n\n\nNext in android/app/build.gradle, in the dependencies block add firebase-messaging and at the bottom of the build.gradle add: apply plugin: 'com.google.gms.google-services'\n\nIt is important that this is at the very end of the file.\n\n// ...\n\ndependencies{\n    implementation \"com.facebook.react:react-native:+\"\n\n    implementation 'com.google.firebase:firebase-messaging:20.2.+' // <-- Add this\n    // ...\n}\n// ...\n\napply plugin: 'com.google.gms.google-services' // <-- Add this\n\napply from: file(\"../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle\"); applyNativeModulesAppBuildGradle(project)\n\n\nYou'll need to create a new class MainNotificationService.java inside your app directory(/app/src/main/java/<package-name>) with the following code:\n\npackage com.example; // <-- Replace with your package\n\nimport com.google.firebase.messaging.FirebaseMessagingService;\nimport com.google.firebase.messaging.RemoteMessage;\nimport com.intercom.reactnative.IntercomModule;\n\n class MainNotificationService: FirebaseMessagingService {\n\n\toverride fun onNewToken(refreshedToken: String) {\n\t    IntercomModule.sendTokenToIntercom(application, refreshedToken)\n\t    // DO HOST LOGIC HERE\n\t}\n\n\toverride fun onMessageReceived(remoteMessage: RemoteMessage) {\n\t    if (IntercomModule.isIntercomPush(remoteMessage)) {\n\t     \tIntercomModule.handlePush(application, message)\n\t    } else {\n\t        // DO HOST LOGIC HERE\n\t    }\n\t}\n}\n\npackage com.example; // <-- Replace with your package\n\nimport com.google.firebase.messaging.FirebaseMessagingService;\nimport com.google.firebase.messaging.RemoteMessage;\nimport com.intercom.reactnative.IntercomModule;\n\npublic class MainNotificationService extends FirebaseMessagingService {\n  \n  @Override public void onNewToken(String refreshedToken) {\n    IntercomModule.sendTokenToIntercom(getApplication(), refreshedToken);\n    //DO HOST LOGIC HERE\n\t}\n\n  public void onMessageReceived(RemoteMessage remoteMessage) {\n    if (IntercomModule.isIntercomPush(remoteMessage)) {\n      IntercomModule.handleRemotePushMessage(getApplication(), remoteMessage);\n    } else {\n      // HANDLE NON-INTERCOM MESSAGE\n    }\n  }\n}\n\n\nThen edit the AndroidManifest.xml with the following snippet:\n\n<!-- Add xmlns:tools to manifest. See example below-->\n<manifest\n  xmlns:tools=\"http://schemas.android.com/tools\"\n>\n  <application>\n    <activity>\n      ...\n    </activity>\n    ...\n\n    <!-- START: Add this-->\n    <service\n      android:name=\".MainNotificationService\">\n      <intent-filter>\n        <action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n      </intent-filter>\n    </service>\n\n    <receiver\n      android:name=\"com.intercom.reactnative.RNIntercomPushBroadcastReceiver\"\n      tools:replace=\"android:exported\"\n      android:exported=\"true\"/>\n    <!-- END: Add this-->\n\n  </application>\n</manifest>\n\n\nFinally you'll need to update your React Native app to handle push messages being tapped:\n\nuseEffect(() => {\n    /**\n     * Handle PushNotification\n     */\n    AppState.addEventListener(\n      'change',\n      (nextAppState) =>\n        nextAppState === 'active' && Intercom.handlePushMessage()\n    );\n    return () => AppState.removeEventListener('change', () => true);\n  }\n  , [])\n\n\nOnce that's all done, click the Next button in Firebase and then skip the verification step.\n\nStep 3. Add your Server key to Intercom for Android settings\n\nFinally, click the settings cog and select ‘Project settings’, then ‘Cloud Messaging tab’ and copy your Server key.\n\nOpen your Intercom app’s settings and select ‘Installation -> Android’. Then find the ‘Enable Push Notifications’ section. Here you'll be able to paste and save your Server API key.\n\nThat's all the setup for Android, if your React Native app also supports iOS continue to the next step.\n\nEnable iOS push notifications\n\nTo enable Intercom push notifications for iOS, you first need to create a private key, upload it to Intercom, and enter details about your app.\n\nStep 1: Create a Private Key\n\nUsing these instructions, create and download a private key with APNs enabled. Note the Key ID for the next step.\n\nAlternatively, use an existing private key with APNs enabled.\n\nNext add Push Notifications and Background Modes > Remote Notifications to your target as explained here\n\nStep 2: Enable in Intercom\n\nGo to your workspace settings and select Installation > iOS. In the \"Enable Push Notifications\" section:\n\nUpload the .p8 file you just created\nEnter the Key ID from Step 1\nEnter the Bundle ID for the app you want to send notifications to\nEnter the Apple team ID\nClick Save\n\nStep 3: Register Device Tokens\n\nTo enable your users to receive push notifications from Intercom, you must request permission. There are 2 options you can choose.\n\nOption 1: In your JavaScript code\n\nUsing react-native-notifications:\n\n// Request notification permissions\nNotifications.registerRemoteNotifications();\n\n// When permission is granted, send the device token to Intercom using [Intercom.sendTokenToIntercom(token)](#intercomsendtokentointercomtoken)\nNotifications.events().registerRemoteNotificationsRegistered(({ deviceToken }: Registered) => {\n  Intercom.sendTokenToIntercom(deviceToken);\n});\n\nOption 2: In your native code\n\nIn your AppDelegate.m at the top add the following import:\n\n#import <UserNotifications/UserNotifications.h>\n\n\nRequest notification permissions when app launches by adding the following to didFinishLaunchingWithOptions:\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    // ...\n\n    // START: Code to add\n    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n    [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionSound)\n                          completionHandler:^(BOOL granted, NSError *_Nullable error) {\n                          }];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n    // END: Code to add\n\n    return YES;\n}\n\n\nIn same file, above @end add the following snippet to send the device token to Intercom when permission is granted:\n\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [IntercomModule setDeviceToken:deviceToken];\n}\n\n@end\n\n\nAt this stage you should also make sure that you have enabled the Push Notifications capability in Xcode.\n\nStep 4: Handling Intercom Push Notifications\n\nWhen your app receives a push notification, the React Native wrapper checks if it is an Intercom push notification and opens the message if required. To do this we safely swizzle the public methods in UIApplicationDelegate that handle receiving push notifications. We do not use any private APIs to do this.\n\nTesting Intercom Push Notifications\n\nYou can easily test if push notifications are working properly in your app. Just send a manual message to the app user via Intercom.\n\nTroubleshooting\n\nIf you are having trouble getting push notifications to work in your app, here's a list of things you should check:\n\nEnsure you ticked the box 'Send a push notification' when you send a manual message.\niOS\nEnsure you are requesting permission from your users to send push notifications.\nDo you get a device token from APNS? If you put a breakpoint into the application:didregisterforremotenotificationswithdevicetoken: delegate call, you should get a token shortly after your app launches.\nHave you set the correct Bundle ID in Settings > Installation > iOS? Make sure it matches the app that you want push notifications sent to.\nIs your private key still active? Check your keys to make sure it has not been revoked.\nYou can find more technical information and troubleshooting steps in the Apple iOS Developer Library.\nAndroid\nCheck that the notifications are not disabled for your app on your test device. Settings > Sound & Notification > App notifications. This may differ depending on the Android version.\nDid you specify the correct Push Server API key?\nMake sure you added your google-services.json file in the correct directory.*\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀"
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/android/push-notifications-android/",
    "html": "Push Notifications\n\nBelow, we’ll show you how to send push notifications and/or push messages to your customers, with Firebase Cloud Messaging (FCM) in Intercom.\n\nStep 1. Enable Google services for your app\n\nIf you already have a Firebase project with notifications enabled you can skip to the next step. Otherwise go to the FCM Console page and create a new project following these steps:\n\nGive the project a name and click ‘Create Project’.\n\nOnce your project is set up, scroll down and select the ‘Cloud Messaging’’ card.\n\nClick on the Android icon to continue setup.\n\nEnter your app’s package name and click ‘Register App’.\n\nStep 2. Setup client to receive push\n\nClick the button \"Download google-services.json\" to download the config file. You’ll need to move that file into the same directory as your application level build.gradle.\n\nClick \"next\" and then in your apps build.gradle you will need to add the following lines to your dependencies:\n\ngroovyKotlin\ndependencies {\n    implementation 'io.intercom.android:intercom-sdk:14.0.0'\n    implementation 'com.google.firebase:firebase-messaging:23.1.+'\n}\n\n\nAt the bottom of your build.gradle you must add:\n\napply plugin: 'com.google.gms.google-services'\n\nIt is important that this is at the very end of the file.\n\nClick the Next button and then skip the verification step.\n\nStep 3. Add your Server key to Intercom for Android settings\n\nFinally, click the settings cog and select ‘Project settings’, then ‘Cloud Messaging tab’ and copy your Server key.\n\nOpen your Intercom app’s settings and select ‘Installation -> Android’. Then find the ‘Enable Push Notifications’ section. Here you'll be able to paste and save your Server API key.\n\nStep 4. Setting your FCM icon (Optional)\n\nIf you want to add a custom icon for your notifications, just add an image named intercom_push_icon.png to each of your supported densities. Please note that vector drawables cannot be used here. For example:\n\n/res/drawable-xxhdpi/intercom_push_icon.png \n/res/drawable-xhdpi/intercom_push_icon.png \n/res/drawable-hdpi/intercom_push_icon.png \n/res/drawable-mdpi/intercom_push_icon.png\n\n\n👍 Notifications icon design guidelines\n\nWe recommend following these material design guidelines for producing this icon.\n\nStep 5. Disable push on log out\n\nTo stop users from receiving push messages when they have logged out of the app make sure to call:\n\nKotlinJava\nIntercom.client().logout()\n\nStep 6. Using Intercom with other FCM setups (Optional)\n\nThe Intercom android sdk already comes with a default implementation of FirebaseMessagingService. This provides default implementations for onNewToken and onMessageReceived for FCM to work with Intercom. This step can be skipped if your app uses only Intercom for Push Notifications\n\nIf your application uses FCM for your own content, or if you use a third party service for FCM. You’ll need to update your FirebaseInstanceIdService and FirebaseMessagingService.\n\nYou should have a class that extends FirebaseMessagingService or the now deprecated FirebaseInstanceIdService. That service is where you get the device token to send to your backend to register for push. To register for Intercom push set it up like this:\n\nKotlinJava\nprivate val intercomPushClient = IntercomPushClient()\n\noverride fun onNewToken(refreshedToken: String) {\n    intercomPushClient.sendTokenToIntercom(application, refreshedToken)\n    // DO HOST LOGIC HERE\n}\n\noverride fun onMessageReceived(remoteMessage: RemoteMessage) {\n    val message = remoteMessage.data\n    if (intercomPushClient.isIntercomPush(message)) {\n     intercomPushClient.handlePush(application, message)\n    } else {\n        // DO HOST LOGIC HERE\n    }\n}\n\nTroubleshooting tips\n\nIf you’re having trouble getting FCM to work in your app, here's a list of things you should check:\n\nMake sure to tick the 'Send a push notification' box when you send a manual message.\nCheck that the notifications are not disabled for your app on your test device. Settings > Sound & Notification > App notifications. This may differ depending on the Android version.\nDid you specify the correct Push Server API key?\nMake sure you added your google-services.json file in the correct directory.\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀\n\nStep 7. Open Intercom conversations from FCM\n\nWhen a user taps on a push notification we hold onto data such as the URI in your message or the conversation to open. When you want Intercom to act on that data, just call:\n\nKotlinJava\nIntercom.client().handlePushMessage()\n\n\n📘 Note\n\nIt’s important to wait for any splash screens or loading screens to finish before calling handlePushMessage or your users might not have time to see the conversation we opened.\n\nIf you wish to create a custom back stack for this notification you can pass a TaskStackBuilder to the same method:\n\nKotlinJava\nhandlePushMessage(stackBuilder)\n"
  },
  {
    "title": "Push Notifications",
    "url": "https://developers.intercom.com/installing-intercom/ios/push-notifications/",
    "html": "Push Notifications\n\nThis article explains how to enable push notifications in Intercom for iOS. If you are new to push notifications in iOS, check out this page first.\n\nTo enable Intercom push notifications, you first need to create a private key, upload it to Intercom, and enter details about your app.\n\nStep 1: Create a Private Key\n\nUsing these instructions, create and download a private key with APNs enabled. Note the Key ID for the next step.\n\nAlternatively, use an existing private key with APNs enabled.\n\nStep 2: Enable in Intercom\n\nGo to your workspace settings and select Installation > iOS. In the \"Enable Push Notifications\" section:\n\nUpload the .p8 file you just created\nEnter the Key ID from Step 1\nEnter the Bundle ID for the app you want to send notifications to\nEnter the Apple team ID\nClick Save\nStep 3: Register Device Tokens\n\nTo enable your users to receive push notifications from Intercom via Intercom for iOS, you must request permission to send push notifications and register the device token of your user in your AppDelegate.\n\nobjectivecswift\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [Intercom setDeviceToken:deviceToken failure:^(NSError * _Nullable error) {\n        // Handle error\n    }];\n}\n\n\nIf the failure block of the above call is executed, you can check against our list of error codes to help debug the issue.\n\nAt this stage you should also make sure that you have enabled the Push Notifications capability in Xcode.\n\nStep 4: Handling Intercom Push Notifications\nAutomatically (Default)\n\nWhen your app receives a push notification, Intercom for iOS checks if it is an Intercom push notification and opens the message if required. To do this we safely swizzle the public methods in UIApplicationDelegate that handle receiving push notifications. We do not use any private APIs to do this.\n\nManually\n\nIn certain circumstances you may want more control of your push notifications. You can disable automatic handling of Intercom push notifications by doing the following:\n\nAdd the following to your Info.plist:\nIntercomAutoIntegratePushNotifications with a value of NO\n\nHandle Intercom push notifications manually in didReceiveNotificationResponse in your UNUserNotificationCenterDelegate:\nobjectivecswift\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler {\n    //Add any custom push handling for your own app here\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    if ([Intercom isIntercomPushNotification:userInfo]) {\n        [Intercom handleIntercomPushNotification:userInfo];\n    }\n    completionHandler(UIBackgroundFetchResultNoData);\n}\n\nStep 5: Testing Intercom Push Notifications\n\nYou can test if push notifications are working properly in your app by sending a manual message to the app user via Intercom.\n\nBadge Values\n\nIntercom never changes the badge value of your app. Thus we can ensure that whatever badge value you're managing in your app, we don't alter in any way.\n\nTroubleshooting\n\nIf you are having trouble getting push notifications to work in your app, here's a list of things you should check:\n\nEnsure you ticked the box 'Send a push notification' when you send a manual message.\nEnsure you are requesting permission from your users to send push notifications.\nDo you get a device token from APNS? If you put a breakpoint into the application:didregisterforremotenotificationswithdevicetoken: delegate call, you should get a token shortly after your app launches.\nHave you set the correct Bundle ID in Settings > Installation > iOS? Make sure it matches the app that you want push notifications sent to.\nIs your private key still active? Check your keys to make sure it has not been revoked.\nYou can find more technical information and troubleshooting steps in the Apple iOS Developer Library.\n\nAnd as always, you can contact us via Intercom. We're always here to help 😀"
  },
  {
    "title": "Identity Verification",
    "url": "https://developers.intercom.com/installing-intercom/web/identity-verification/",
    "html": "Identity Verification\n\nIdentity Verification helps to make sure that conversations between you and your users are kept private and that one user can't impersonate another. We strongly encourage all Intercom customers to set up and enable Identity Verification.\n\nIdentity Verification works by using a server side generated HMAC (hash based message authentication code), using SHA256, on either the user’s user_id or email.\n\nSetting up Identity Verification\n\nYou can set up, turn on or turn off Identity Verification at any time in the Intercom for web settings. This can be useful while you’re developing but your conversations will be vulnerable while it’s off.\n\nTroubleshooting\nCheck that you’ve set up Identity Verification everywhere in your app or website where you talk to logged-in users. If you only set it up on some places and not others, then Intercom Messenger may not work properly.\nIf you only talk to anonymous visitors or don’t use the Intercom Messenger, you can skip the Identity Verification setup, but we still encourage you to enable it in the Intercom for web settings.\nMake sure you’re generating your HMAC with the right user data based on what you’re sending to Intercom.\nIf you’re sending both user_id and email, then make sure your HMAC is generated with the user_id value.\nIf you’re sending just the user_id attribute, make sure your HMAC is generated with that same user_id value.\nIf you’re sending just the email attribute, make sure your HMAC is generated with that same email value.\nUse the right secret key. You can find your secret key in the Intercom for web settings.\nBe careful not to leak your secret key onto your frontend client or anywhere publicly accessible. If you’ve leaked your secret key, contact us to get a new one."
  },
  {
    "title": "Customizing the Messenger",
    "url": "https://developers.intercom.com/installing-intercom/web/customization/",
    "html": "Customizing the Messenger\n\nOnce you have installed Intercom on your site, you should see the Messenger in the bottom right of your screen. You may now want to tailor how the Messenger appears on your site.\n\nMessenger alignment\n\nBy default the Messenger will appear on the bottom right corner of your site, but you can change its position if you like. To do this, add the extra lines below to your installation script:\n\nwindow.intercomSettings = {\n    app_id: ‘abc123’,\n    alignment: 'left',\t\t\t# Customize left or right position of messenger\n    horizontal_padding: 20,\t\t# Customize horizontal padding\n    vertical_padding: 20\t\t# Customize vertical padding\n  };\n\nInteractive Configuration Example\n\nThe above link is to a Codepen where you can test the different configuration options outlined here. Codepen allows you to copy and paste code into an JS (or HTML and CSS) editor where you see the results immediately. You can use your own App ID if you have one or your can user our test example App ID, whatever you find easier."
  },
  {
    "title": "Object Model",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/object-model/",
    "html": "Object Model\n\nCommon Fields\n\nAPI objects have a type field indicating their object type. Each object in the API may be given an identifier, indicated via its id field, and will typically be addressable via a URI. Many objects will also have a created_at field indicating the object's creation date as a UTC Unix timestamp.\n\n{\n  \"type\": \"contacts\",\n  \"id\": \"456456456456\",\n  \"created_at\": 1392241887,\n  \"custom_attributes\": {\n    \"note\": \"some extra information\"\n  }\n}\n\nDates and Timestamps\n\nAll temporal fields in the API are encoded as Unix timestamps and are by definition always treated as UTC. The most common time fields in the API are created_at and updated_at.\n\nParameter\tDescription\ncreated_at\tThe time the object was created. In most, but not all cases, this is the time the object was created according to the API server.\nupdated_at\tThe time the object was last updated according to the API server.\nOptional Fields\n\nUnpopulated optional data is returned as follows:\n\nNumber, String and Boolean types may be returned as having null values.\nArrays and Objects may be returned as empty ([] {})\n\nIn general clients should be able to handle null and empty fields.\n\nMetadata and Custom Attributes\n\nSome object types, such as Events, Users and Companies, have a metadata or custom_attributes field that allows clients to set custom-defined data about an object."
  },
  {
    "title": "SDKs & Plugins",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/sdks-plugins/",
    "html": "SDKs & Plugins\n\nWe've made a number of open source libraries and plugins available for the API.\n\nPHP | Node | Ruby | Go | Java | .NET\n\nInstall Intercom and discover bindings for our multiple SDKs.\n\nRails Plugin\n\nInstall Intercom easily on a Rails app with our handy plugin.\n\nMobile SDKs\n\nLook here for more on installing Intercom through our native mobile SDKs & Cordova plugin."
  },
  {
    "title": "Build a Messenger App",
    "url": "https://developers.intercom.com/docs/build-an-integration/getting-started/build-an-app-for-your-messenger/",
    "html": "Build a Messenger App\n\nIn this quickstart tutorial we'll be using Canvas Kit to build an interactive app for use in the Messenger.\n\nWe are using a tool called Glitch to build an app with this code. Glitch is a platform that lets you create, test and update apps, for free, with publicly available URLs.\n\nThe only prerequisite required is that you already have an Intercom workspace. If not, go here and follow the steps to create one.\n\nWHY NODE.JS?\n\nYou can use whatever language you like when creating Intercom apps. We chose Node here as an example of a popular programming language.\n\nStep 1: Copy and paste some code\n\nCreate your Glitch Project by clicking on the Remix button below.\n\nCopy the sample code as shown into the server.js file on the left hand side of your Glitch project.\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(express.static(__dirname));\n\n// http://expressjs.com/en/starter/static-files.html\napp.use(express.static('public'));\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get('/', function(request, response) {\n  response.sendFile(__dirname + '/views/index.html');\n});\n\nconst listener = app.listen(process.env.PORT, () => {\n  console.log('Your app is listening on port ' + listener.address().port);\n});\n\n/*\n  This is an endpoint that Intercom will POST HTTP request when the card needs to be initialized.\n  This can happen when your teammate inserts the app into a conversation composer, Messenger home settings or User Message.\n  Params sent from Intercom contains for example `card_creation` parameter that was formed by your `configure` response.\n*/\napp.post(\"/initialize\", (request, response) => {\n  const body = request.body;\n  response.send({\n    canvas: {\n      content: {\n        components: [\n          { type: \"button\", label: \"Click ME!!!!\", style: \"primary\", id: \"url_button\", action: {type: \"submit\"} },\n        ],\n      },\n    },\n  });\n});\n\n\nDon't expect anything to happen after pasting this in - you'll need to follow the rest before you see a functional app.\n\nStep 2: Create an app\n\nYou now need to associate that code to your own Intercom workspace.\n\nTo do this, you must create an app. Don't worry - this will be totally private to you and your workspace.\n\nClick the \"New App\" button in the Your Apps section within the Developer Hub, give your app a name, and select your workspace.\n\nStep 3: Give your app some URLs\n\nNext, given we're building an interactive app for the messenger, we need to tell Intercom where to send requests when someone uses your app. You can read more details about the lifecycle of Canvas Kit apps here but at a high level, Intercom will send you requests and you'll respond with the content that you want your app to show the end user.\n\nGlitch already provides us with an easy way to get public URLs - simply click on the \"Show Live\" button to see these:\n\nCopy both the Initialize URL and Submit URL, and paste them into the relevant fields (Initialize flow webhook URL and Submit flow webhook URL) in the Canvas Kit > For Users, Leads, and Visitors page of your app configuration settings in Intercom.\n\nDon't click Save just yet - go to Step 4 first. Also, ensure that you only add the initialize and submit URLs. If you add other URLs for this tutorial you may encounter an error in later steps\n\nStep 4: Specify how your app works\n\nBefore you save your update, you will need to specify how your app works. There are many ways to use your app, but for now, let's just focus on one capability and add it to your Messenger homescreen.\n\nWe need to tick the relevant option just above where you pasted the URLs in order to say where the app can be used within Intercom. Select Place on the Messenger home screen and click Save.\n\nStep 5: Add your app to the Messenger\n\nAfter clicking Save, you'll be able to add the app to the Messenger.\n\nClick on the link to the workspace associated with your app in the Your apps section.\nGo to your Messenger page by either clicking on the Messenger icon in the left hand panel or following that link.\nSelect Add Messenger home apps and then Add an app to bring up a menu of apps whereby you should be able to choose yours. Note, if you have other apps installed you may need to scroll down to see your new app. It will be listed alphabetically.\n\nRemember, this will appear on any site where your Messenger is installed. This should be fine unless you are using a production workspace that's already being shown to your end users - in which case, it's best to use a free developer workspace which you can setup here\n\nPROBLEMS ADDING YOUR APP TO THE HOMESCREEN?\n\nIf you cannot find your app then you may need to ensure that you have ticked the right capability. Alternatively, if you can see your app but you get an error when trying to add it then your URL may be incorrect so just double check that first.\n\nStep 6: Check out your new app\n\nYou should now have some code in Glitch, which is linked to an app you created in Intercom via the URLs you copied to that app. Now we'll want to see how it looks in your Messenger.\n\nIf you already have a Messenger installed somewhere, then you can just check it there. Alternatively, install it on your Glitch project like so:\n\nCopy the code below:\n\n<script>\n  var WS_ID = \"YOUR WORKSPACE ID\";\n\n window.intercomSettings = {\n    app_id: WS_ID\n  };\n</script>\n<script>(function(){var w=window;var ic=w.Intercom;if(typeof ic===\"function\"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/APP_ID';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()</script>\n\n\nPaste it into the views/index.html file in your Glitch project, where it says # INSERT YOUR MESSENGER CODE HERE.\n\nMake sure to change the WS_ID to your own workspace ID - then, you should see your Messenger pop up in the \"Show Live\" page. Clicking on the Messenger should then show your app like so:\n\nHAVING ISSUES?\n\nIf you don't see anything, make sure to check that you clicked \"Save\" in Step 5 after adding the app.\n\nRemember to also replace the text \"YOUR WORKSPACE ID\" with your own workspace ID. You can grab this from the URL in Intercom.\n\nStep 7: Add some functionality with an action\n\nYou might have seen that for now the app does not do much - if you click it, nothing happens. Our next steps will be to add some code and return a message when you click on the button.\n\nTo do this, copy the code below and just append it to the code already in your Glitch server.js file.\n\nIt will add a submit endpoint (which you already added the URL for earlier). An action has already been defined so that if the button is clicked, the submit endpoint will respond with an updated app.\n\napp.post(\"/submit\", (request, response) => {\n  const body = request.body;\n  response.send({\n    canvas: {\n      content: {\n        components: [\n          { type: \"text\", text: \"Someone just clicked something AND you just created a new component!\",\n           style: \"header\", align: \"center\" },\n        ],\n      },\n    },\n  });\n});\n\n\nOnce you have copied the code, go to your Messenger to interact with this.\n\nYou will notice that in our example, you can only click on the button once and then you will need to re-add your app to restart it. Don't worry - this is just a very simple example to get started. There are ways to refresh this automatically but for now we wanted to keep it as simple as possible."
  },
  {
    "title": "Install your App",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/authentication/installing-uninstalling-apps/",
    "html": "Install your App\n\nYour app will need to be installed on a workspace in order for it to be used there. Here you can learn how to:\n\nInstalling & Uninstalling Apps\nInstall your app on your own workspaces\nSet up your app for third-party installation\nInstallation URL\nAllow installation directly from your App Store Listing (recommended)\nAllow installation from your own product or website only\nUninstallation\nInstall your app on your own workspaces\n\nYou may want to install your app on a different workspace, either for testing purposes, or so you can use your app in the production workspaces that you own.\n\nIf you visit the Test & Publish > Your Workspaces page of your app in the Developer Hub then you should see all the workspaces you (as an Intercom teammate) are a member of.\n\nYou can click on Install app next to the workspace you want to install the given app on. This app will then be installed and an Access Token will be provided for that workspace so you can access its data through the API.\n\nYou can also then regenerate the Access Token (by clicking Regenerate token or uninstall this app which will revoke the Access Token (by clicking Uninstall app).\n\nCONSIDER HOW THE APP IS BEING USED BEFORE UNINSTALLING\n\nThe app will no longer have access to data or be able to take actions on the workspace when uninstalled. Ensure uninstalling does not impact any workflows or teammates usage as it can be disruptive and is destructive. We give a warning box to ensure the action is deliberate before uninstallation and tell you where the app is currently being used if Canvas Kit capabilities are utilized.\n\nSet up your app for third-party installation\n\nIf your app is going to be publicly used by others, then you'll need to do additional setup so they can install your app.\n\nInstallation URL\n\nThird-parties (i.e. other Intercom workspaces) should always authenticate via OAuth. This flow will be kicked off via a URL hosted by yourself, which should then redirect to the Intercom OAuth URL. Our Setting up OAuth tutorial goes into depth on how you should setup the flow.\n\nOnce this flow is working, you need to decide where you want your app to be installed from:\n\nAllow installation directly from your App Store Listing (recommended)\nDOES YOUR APP USE CANVAS KIT CAPABILITIES?\n\nIf your app uses any form of Canvas Kit capability, it's mandatory to allow your app to be installed through the listing on the App Store. This is because apps which use the Canvas Kit work from within Intercom by default, are often discovered through the product itself, and have onboarding built in to the listing to help people get started.\n\nYour users are able to install your app directly from its listing within the Intercom App Store. This is strongly recommended because it drives higher install rates and reduces confusion on the part of teammates installing the app.\n\nYou need to select Directly from the Intercom App Store in the Installation section on the Test & Publish > App Store Listing page of your app in the Developer Hub. Insert the URL that kicks off the OAuth flow in the Direct installation URL field.\n\nSUCCESSFUL INSTALLATION\n\nIf installation was successful, you should redirect the user to <https://app.intercom.com/appstore/redirect?install_success=true>. This URL will bring them back to the App Store and will display a success message.\n\nFAILED INSTALLATION\n\nIf installation was unsuccessful, you should redirect the user to <https://app.intercom.com/appstore/redirect?install_success=false&error_message=><your error message>. You can fill in the error_message parameter with any error information you feel is beneficial for the end user to know.\n\nAllow installation from your own product or website only\n\nYour app can also be installed through your own product or website exclusively. This means that you kick off the OAuth installation flow through your own product and redirect the user back there once complete.\n\nYour listing will need to provide a Learn More URL - a page on your site where users can find out more detail about your app, and how to install and use it. This can be a landing page or a help doc. You can use UTM tags if you want to track referrals from your listing.\n\nUninstallation\n\nIf you want to be notified when someone uninstalls your app or revokes access through any means, then you can optionally provide a URL for us to send you a POST request to.\n\nYou can use this to handle any cleanup or de-authorization on your side. The JSON payload will be as follows:\n\n{\n  \"app_id\": \"abc123\"\n}\n\n\nYou can also uninstall an app and revoke access either for yourself or on behalf of a customer by making a POST request to the https://api.intercom.io/auth/uninstall endpoint with the given Access Token you want to deauthorize.\n\n$ curl https://api.intercom.io/auth/uninstall \\\n-X POST \\\n-H 'Authorization:Bearer <Access token>' \\\n-H 'Accept:application/json'\n-H 'Content-Type: application/json' -d\n"
  },
  {
    "title": "Build an Inbox App",
    "url": "https://developers.intercom.com/docs/build-an-integration/getting-started/build-an-app-for-your-inbox/",
    "html": "Build an Inbox App\nBefore you get started\n\nIn this quickstart tutorial we'll be using Canvas Kit to build an interactive app for use in the conversation details in your Inbox.\n\nWe have provided some Node.js code that you can use to setup a simple app. We are using a tool called Glitch to build an app with this code. Glitch is a platform that lets you create, test and update apps, for free, with publicly available URLs.\n\nThe only prerequisite required is that you already have an Intercom workspace. If not, go here and follow the steps to create one.\n\nWHY NODE.JS?\n\nYou can use whatever language you like when creating Intercom apps. We chose Node here as an example of a popular programming language.\n\nStep 1: Copy and paste some code\n\nCreate your Glitch Project by clicking on the Remix button below.\n\nCopy the sample code as shown into the server.js file on the left hand side of your Glitch project.\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(express.static(__dirname));\n\n// http://expressjs.com/en/starter/static-files.html\napp.use(express.static('public'));\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get('/', function(request, response) {\n  response.sendFile(__dirname + '/views/index.html');\n});\n\nconst listener = app.listen(process.env.PORT, () => {\n  console.log('Your app is listening on port ' + listener.address().port);\n});\n\n/*\n  This is an endpoint that Intercom will POST HTTP request when the card needs to be initialized.\n  This can happen when your teammate inserts the app into the inbox, or a new conversation is viewed.\n*/\n\napp.post(\"/initialize\", (request, response) => {\n  const body = request.body;\n  response.send({\n    canvas: {\n      content: {\n        components: [\n          { type: \"button\", label: \"Click Me!\", style: \"primary\", id: \"url_button\", action: {type: \"submit\"} },\n        ],\n      },\n    },\n  });\n});\n\n\nDon't expect anything to happen after pasting this in - you'll need to follow the rest before you see a functional app in the Inbox.\n\nStep 2: Create an app\n\nYou now need to associate that code to your own Intercom workspace.\n\nTo do this, you must create an app. Don't worry - this will be private to you and your workspace.\n\nClick the \"New App\" button in the Your Apps section within the Developer Hub, give your app a name, and select your workspace.\n\nStep 3: Give your app some URLs\n\nNext, we need to tell Intercom where to send requests when someone uses your app.\n\nFor now let's just focus on the initial request. This will be sent when a teammate adds it to their inbox sidebar, or when a new conversation is viewed. When either occurs, Intercom will send you a request for information about your app. You just need to tell Intercom where to send this request.\n\nGlitch already provides us with an easy way to get public URLs - simply click on the Show Live button to see these: \nCopy both the Initialize URL and Submit URL.\nPaste them into the relevant fields (Initialize flow webhook URL and Submit flow webhook URL) in the Configure > Canvas Kit > For teammates page of your app in the Developer Hub.\nMake sure Add to conversation details in this section is also checked.\nClick Save and you're ready to go!\n\nStep 4: Create a conversation\n\nIn order to add the app in the Inbox, we need to have an active conversation in our workspace. The easiest way to achieve this is to start a new conversation via Intercom Messenger. To do this, you need to install Messenger in your Glitch app.\n\nCopy this code:\n<script>\n  var WS_ID = \"YOUR WORKSPACE ID\";\n\n window.intercomSettings = {\n    app_id: WS_ID\n  };\n</script>\n\n<script>(function(){var w=window;var ic=w.Intercom;if(typeof ic===\"function\"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/APP_ID';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})() </script>\n\nPaste the code into the views/index.html file in your Glitch project, where it says # INSERT YOUR MESSENGER CODE HERE: \nReplace the WS_ID with your own workspace ID. You can grab it from the URL in Intercom.\nYou should see your Messenger pop up in the Show Live page. Click on the Messenger and start a New conversation - once it's sent, you will have a conversation in your Inbox.\nStep 5: Add your app to the Inbox\n\nThe code in Glitch has setup your endpoints, which you've now added to Intercom in order to specify where we send the requests to. We've also created a conversation meaning we can now use your Inbox app. Let's go see how it looks!\n\nClick on the link to the workspace associated with your app in the Your apps section.\nGo to the Inbox by either clicking on the Inbox icon in the left hand panel or following that link.\nSelect Edit within the side panel (on the top right hand side) and then + Add Card to bring up a list of apps whereby you should be able to choose yours. You may have to scroll down as these will be listed alphabetically.\n\nPROBLEMS ADDING YOUR APP TO THE INBOX?\n\nIf you can see your app but you get an error when trying to add it to Inbox, your URLs may be incorrect.\n\nStep 6: Add some functionality with an action\n\nYou might have seen that for now the app does not do much: if you click the \"Click me\" button, nothing happens. For some apps, you may not need to take any action (i.e. you just want information to show and for the data to update). However, for this app, we'd like the button to take a Submit action and show a new screen.\n\nTo do this, copy the code below and append it to the code already in your Glitch server.js file.\n\nIt will add a submit endpoint (which you already added the URL for earlier). An action has already been defined so that if the button is clicked, the submit endpoint will respond with a new component.\n\napp.post(\"/submit\", (request, response) => {\n  const body = request.body;\n  response.send({\n    canvas: {\n      content: {\n        components: [\n          { type: \"text\", text: \"Someone just clicked something -> You just responded with a text component which you're now showing here\",\n           style: \"header\", align: \"center\" },\n        ],\n      },\n    },\n  });\n});\n\n\nTake a look at the components in our reference to see what you can build as the content of your app within the canvas object. You might find this guide helpful too."
  },
  {
    "title": "Authentication",
    "url": "https://developers.intercom.com/docs/build-an-integration/learn-more/authentication/",
    "html": "Authentication\n\nTo access the Intercom API, you'll need an access token. How you get this token depends on if your app is for your own usage or for the public's usage.\n\nUse the given Access Token if you're using the API to access data in your own Intercom workspace.\nUse OAuth if you're building a publicly-available app that accesses other people's Intercom data.\nAccess Tokens\n\nYou should use the given access Access Token if:\n\nYou want to use the API to interact with your own Intercom app\nYou have scripts to push or extract data from your Intercom app\nYou want to use the API to programmatically automate certain actions in your own Intercom app\nThe data you interact with programmatically is your own customer data\n\nHow to get your Access Token\n\nWe provide you with an Access Token as soon as you create an app on your workspace. You can find your Access Token in the Configure > Authentication section in your app within the Developer Hub.\n\nYou will also see it in your Test & Publish > Your Workspaces page of your app in the Developer Hub. This lists out all of your workspaces that have the app installed. More about how this works can be found in our Installing & Uninstalling Apps guide.\n\nNEVER GIVE YOUR ACCESS TOKEN TO A THIRD PARTY\n\nYour Access Token can give access to your private Intercom data and should be treated like a password. If an app provider asks you for your Access Token, please do not provide it. Instead, let us know - apps are required to use OAuth rather than asking users for Access Tokens.\n\nOAuth\n\nYou should use OAuth if:\n\nYou are requesting access to other people's Intercom accounts/data (for example, through an integration you've built)\nYou currently ask people for their API Keys to request resources on their behalf\nYou want to make it easier for your customers to share their customers' data with you\n\nGetting Started with OAuth\n\nTo set up and test the OAuth installation flow we recommend using a development workspace. For more information on how to set up OAuth please follow our tutorial.\n\nNEVER ASK USERS FOR THEIR ACCESS TOKEN\n\nAsking your users for their Access Tokens rather than implementing OAuth is against our terms of service and may result in your API access being revoked.\n\nHow to use the token\n\nOnce you have a token, whether an access token or a token via the OAuth process, simply provide it as an Authorization:Bearer header in your requests, as shown below. If you want to go deeper on how the Authorization:Bearer header works please check out the full spec here.\n\n$ curl \\\n-s https://api.intercom.io/users/5321a20f72cdbb4192000013 \\\n-H 'Authorization:Bearer <access_token>' \\\n-H 'Accept:application/json'\n\n\nAlternatively, helper functions are provided in some of our SDKs to authorize via Access Tokens. This means you don't need to specify the header explicitly - it's all done under the hood.\n\nintercom = Intercom::Client.new(token: '<access_token>');\n\n{\"token\": '<access_token>'}\n\nvar client = new Intercom.Client({ token: '<access_token>' });\n"
  },
  {
    "title": "Set up a Workspace",
    "url": "https://developers.intercom.com/docs/build-an-integration/getting-started/",
    "html": "Set up a Workspace\n\nBuild context-relevant, action-oriented apps directly on top of Intercom - whether you're publicly integrating your service with ours, or you're building for your own team's private usage.\n\nStep 1: Create an Intercom workspace\n\nYou'll need to set up an Intercom account in order to get started. If you have your own workspace already and want to use that for development, then login through the usual page here.\n\nWe highly recommend that you create a new developer workspace for developing apps. Developer workspaces are totally free and intended for development purposes only.\n\nDEVELOPER WORKSPACE LIMITATIONS\n\nThese free workspaces we provide you will not have all the functionalities of a standard Intercom production workspace. These limitations include:\n\nNo outbound emailing or push notifications.\nHelp Center Sites that can never be set live.\nA watermarked Messenger, showing that it's linked to a Developer Workspace.\nA maximum of 20 users/leads (if you have more than 20 users/leads, the oldest extras will be archived automatically on a regular basis).\nDeveloper Workspaces cannot be converted into production workspaces.\nStep 2: Create an app\n\nNow that you have your workspace, it's time to create your first app in the Developer Hub.\n\nEVERYTHING IS AN APP\n\nAnytime you want to interact with the Intercom Platform via our REST API, webhooks, or to build an app for the Messenger, you start by creating an app. Think of apps as containers for various pieces of functionality that you have access to on the Intercom Platform and each app can be managed and installed to your other Intercom workspaces independently.\n\nIn Your Apps, click New App: \nIn the modal box, put the name of your app and select the workspace you want to install it on: \nClick Create app. This will create the app and pre-install it to your selected workspace.\nYou can view your Access Token on the Authentication page, which provides greater details alongside OAuth settings: \n\nYou can also manage which workspace your app is installed on within the Your Workspaces page and gain Access Token's for each of these workspaces.\n\nACCESS TOKENS OR OAUTH\n\nAn Access Token is used to access your own app data via the API. You should never give your Access Token to a 3rd party. If you're building an app that's destined to be used only by your own teams in your own apps then using your Access Token is generally sufficient.\n\nIf you plan to make your app publicly available on the Intercom App Store, you'll need to set up OAuth. You can always decide to set up OAuth at a later date. For more information on authorization and setting up OAuth take a look at the guide here.\n\nStep 3: Make your first API Call\n\nFor your first API call, we're going to create a new Contact in Intercom. You can do this by making a POST request to https://api.intercom.io/contacts.\n\nCopy the snippet below into your terminal, making sure to swap YOUR_ACCESS_TOKEN for the access token of your app from Step 2.\n\ncurl --request POST \\\n     --url https://api.intercom.io/contacts \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer YOUR_ACCESS_TOKEN' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"email\": \"jdoe@example.com\"\n}\n'\n\nStep 4: Learn more\n\nThis was just the beginning. Here are some ideas of what you might do next:\n\nBuild a Messenger App\nBuild an Inbox App\nExplore Intercom APIs\nLearn more about Intercom as a product\nCheck out Intercom App Store\nJoin our Community forum"
  },
  {
    "title": "Using a custom domain with your Help Center",
    "url": "https://developers.intercom.com/docs/guides/help-center/custom-domains/",
    "html": "Using a custom domain with your Help Center\n\nWhen you turn on your Articles Help Center, your content is available through intercom.help by default. Your URL will look like this: intercom.help/exampleapp\n\nIf you’d like to use a different URL, you can create one by manually setting up a custom domain.\n\nWhen you set up your domain, you have the option of HTTPS (quick setup), HTTPS (manual setup), and HTTP setup. The setup steps detailed below are for HTTP and HTTPS (manual setup) only. We recommend HTTPS (quick setup) if it is available in your workspace — follow the directions outlined in the setup guide in your settings as they will be slightly different than the below.\n\nEntering your custom domain in Articles\nCreating a custom CNAME record\nChoosing to configure SSL (Optional)\n\nTo recognize logged-in Users on your Help Center and/or use audience targeting for Articles, your web app (where you have Intercom installed) and your Help Center must share a top level domain. E.g. If your domain is app.example.com, your custom Help Center domain must be something like help.example.com. This allows Intercom to identify your logged-in users when they visit your Help Center.\n\n1. Enter your custom domain in Intercom Articles\n\nEnter the custom domain you want to use in your Help Center settings in Articles. Let’s use ‘help.exampleapp.com’ as an example:\n\nWe also support custom domains with subpaths, like ‘www.exampleapp.com/support’ for example. If using subpaths then you need to configure your server path's pattern to match our origin (we'll explain how to do it in AWS Cloudfront, but it should be applicable with other providers too).\n\n2. Create a custom CNAME record\n\nIf you selected HTTPS (quick setup) in your settings note that the Intercom host domain will be different than the ones listed below. For quick setup they are:\n\nIntercom US: us.intercomhelpcenter.com\nIntercom Europe: eu.intercomhelpcenter.com\nIntercom Australia: au.intercomhelpcenter.com\n\nFor troubleshooting check out this page or contact us in the Messenger in the bottom right.\n\nGo to your DNS provider’s website (e.g. GoDaddy, Cloudflare. If you’re choosing one for the first time, go with one that supports SSL.\nCreate a CNAME (‘canonical name’) record for your custom domain.\nPoint it at Intercom’s host domain (This is based on your data hosting region, not where you are located geographically):\nIntercom US: custom.intercom.help\nIntercom Europe: custom.eu.intercom.help\nIntercom Australia: custom.au.intercom.help\nCNAME FOR SUBPATH\n\nIf you're using subpath your root level domain (eg www.example.com/support), you don't need to create another custom domain as it is assumed that you already have it setup.\n\nHow to create a custom CNAME record with Cloudflare\n\nThese steps will vary, so check with your own DNS provider for support.\nAs an example, here’s how to set up a CNAME record with Cloudflare:\n\nSet up Cloudflare as the resolver for your custom CNAME by changing your domain nameserver to Cloudflare.\nGo to the ‘DNS’ section in Cloudflare and add a CNAME record for your Help Center custom domain. Give the CNAME a Name based on the first part of your custom domain e.g. if your custom domain is help-center.example.com, use help-center.\nPoint it at the Intercom host domain:\nIntercom US: custom.intercom.help\nIntercom Europe: custom.eu.intercom.help\nIntercom Australia: custom.au.intercom.help\n\nTo enable the CNAME record, toggle on Proxy Status so that cloud icon is orange.\n\nSave your settings\n\nNow you can go to Articles > Settings > General > Domains to enter your domain URL and click Save and set live.\n\nNext you can optionally setup SSL as a security layer.\n\n3. Choose to configure SSL (optional)\n\nAfter you set up a custom domain, your Help Center will be hosted on your domain, but on HTTP rather than HTTPS. Your Help Center will now appear as ‘not secure’ on web browsers like Chrome Here’s how to secure it.\n\nSSL (or TLS), is the most widely used way to secure the connection between your server and your browser. It ensures the connection between the server and browser is encrypted and safe, and appears as HTTPS.\n\nHere’s what an SSL-configured website (with HTTPS) typically looks like on the Chrome browser:\n\nThis is what it looks like if you’ve visited a website not secured by SSL (without HTTPS):\n\nThere are two ways to set up SSL with Articles on your custom domain:\n\nUse a flexible SSL (using a third party DNS provider like CloudFlare or AWS CloudFront)\nUse your own SSL certificate (using a TLS Termination Proxy)\n\nYou can configure SSL for your custom domain to keep sensitive information encrypted. If you want to do this, make sure you’ve set up your CNAME with a DNS provider that supports SSL, like Cloudflare.\n\nDNS changes can sometimes take up to 72 hours to take effect, but are typically much faster.\n\nHow to configure SSL with Cloudflare\nAdd SSL support to your domain\n\nGo to the SSL/TLS section and change SSL to ‘Flexible’ or ‘Full’.\n\nDon’t choose ‘Full (Strict)’ as this will result in an invalid SSL certificate.\n\nCreate a page rule enforcing HTTPS\n\nGo to ‘Page Rules’ and create a new page rule with the following settings, replacing help.exampleapp.com with your own custom domain.\n\nDisable Cloudflare page speed features\n\nGo to ‘Speed’ and disable Rocket Loader and Mirage for your custom help center domain.\n\nBoth of these features result in Cloudflare attempting to add some javascript to your Help Center. This will break functionality on your Help Center due to security settings your Help Center has enabled.\n\nREADY TO GO!\n\nYour custom domain should be fully secured and ready to go. Visitors to your Help Center will see the green lock icon in their browser to let them know the site is secure.\n\nHow to configure SSL with AWS\nCreate a CloudFront Distribution\nSign in to the AWS Management Console and open the CloudFront console.\nChoose Create Distribution\nUpdate the 'Origin' settings.\nThe origin domain depends on your data hosting region:\nIntercom US: custom.intercom.help\nIntercom Europe: custom.intercom-help.eu\nIntercom Australia: custom.au.intercom.help\nThe protocol should be HTTPS only.\nOur servers support TLSv1.2.\n\nUpdate the 'Default cache behavior' settings.\n\n❗️ Cookie Forwarding and Query String Forwarding\n\nIt is important that your Cloudfront distribution's behaviour is set up to forward all Headers, Cookies and Query Strings or else critical features of the Articles product (e.g. article search or private articles) will not work.\n\n🚧 Cache Settings Changed\n\nWhen setting up your Cloudfront distribution, you need to select \"Use legacy cache settings\", which will now show the options for:\n\nHeaders\nQuery strings\nCookies\n\nThese should be set to All\n\nUnder 'Settings', add your custom domain, e.g. help.exampleapp.com as an Alternate domain name and upload your SSL certificate if you have one. You need a certificate that matches your domain. If you use a certificate that does not match your domain, then you will see the following error when navigating to the HTTPS version of your website: NET::ERR_CERT_COMMON_NAME_INVALID\n\nCreate a CNAME record\nCopy your distribution domain name with all _ characters removed\nNavigate to your domain provider and create a new CNAME record\nFor host/name input your subdomain (ex. help)\nFor value input your CloudFront distribution domain name\n\nUsing your own SSL certificate with Apache or Nginx\n\nThe SSL certificate used by your Help Center is a shared certificate signed by your DNS provider. It uses SNI (Server Name Indication) to secure your site.\n\nIf you wish to host your own security certificates, you can do so through a TLS termination proxy. You’ll need to edit the configuration file on your proxy webserver.\n\nNote: If you created a CNAME record that points to custom.intercom.help, you'll need to delete this to host your own SSL certificate.\n\nHere are the basic instructions to set up your own SSL using Apache and Nginx webservers:\n\n# Prerequisites: mod_ssl, mod_proxy and mod_proxy_http should be enabled\n\n# Step 1: Acquire an SSL certificate and private key (e.g. LetsEncrypt.org)\n# Step 2: Set up Apache proxy settings, example below.\n# Step 3: Set custom domain in Intercom Help Center settings\n# Step 4: Make sure your custom domain's DNS record resolves to your Apache server\n\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n        ServerName your-help-site.custom-domain.com # specify your custom domain here\n\n        # Set SSL options for your own domain\n        SSLEngine on\n        SSLCertificateFile /path/to/your/fullchain.pem\n       \tSSLCertificateKeyFile /path/to/your/privatekey.pem\n  \n        # Proxy SSL options\n        SSLProxyEngine on\n        SSLProxyVerifyDepth 10\n        SSLProxyCheckPeerCN off\n        SSLProxyCheckPeerName on\n\n       # Set up the reverse proxy to Intercom\n        ProxyPreserveHost On\n        ProxyPass / https://custom.intercom.help/\n        ProxyPassReverse / https://custom.intercom.help/\n</VirtualHost>\n</IfModule>\n\n# Prerequisites: ngx_http_ssl_module and ngx_http_proxy_module should be enabled\n\n# Step 1: set up normal server with HTTPS https://letsencrypt.org/\n# Step 2: set up proxy settings as shown below \n# Step 3: set custom domain in Intercom Help Center settings\n# Step 4: make sure your DNS record is configured to IP of your Nginx server\n\nresolver 8.8.8.8; # use own DNS server if you have one\nserver {\n  listen 443 ssl;\n  server_name your-help-site.custom-domain.com; # replace this with your domain\n\n  ssl_certificate /path/to/your/fullchain.pem;\n  ssl_certificate_key /path/to/your/privatekey.pem;\n\n  location / {\n    # using \"set\" is important as IP addresses of Intercom servers \n    # changes dynamically. \"set\" enables nginx to follow dynamic IPs\n    set $intercom \"https://custom.intercom.help:443\"; \n    proxy_set_header Host $host;\n    proxy_pass $intercom;\n  }\n}\n\n\nThere are many ways to set up your own SSL certificate - we can’t guarantee that we can support every type of proxy setup. If you have specific needs, we can't support you in configuring it.\n\nIf your robots.txt file is returning 502 with your setup, you will need to increase proxy-buffer-size to 8kb in your Nginx configuration file.\n\nNote that you may also need to add redirect from HTTP protocol (port 80) to HTTPS as part of your server configuration.\n\nWhile most modern browsers support SNI, a few older ones don’t. If you’re supporting those browsers, you should use your own SSL certificate instead. Check with your DNS provider to see if this option is available.\n\nHow to configure subpath using AWS Cloudfront\nCreate a new origin for the subpath\nSign in to the AWS Management Console and open the CloudFront console.\nChoose the Distribution for your domain\nUpdate the 'Origin' settings. The origin domain will be custom.intercom.help and the protocol should be HTTPS only. Our servers support TLSv1.2.\n\nCreate the new path patterns\nIn the behaviors tab, create two new behaviors for the path patterns serving the help center (eg. /support and /support*)\n\nBoth should point to the HelpCenter proxy origin created above.\nUpdate its settings.\n\nChoose the legacy cache settings\n\nSSL SETUP\n\nWhen using subpath on your root domain (eg www.example.com/support), we assumed that your root domain is already setup with SSL. The steps above is only configuring the path patterns and not related to how you setup SSL for your root URL domain."
  },
  {
    "title": "Installation",
    "url": "https://developers.intercom.com/installing-intercom/cordova-phonegap/installation/",
    "html": "Installation\n\nThis is a plugin that allows your Cordova or PhoneGap app to use Intercom for iOS and/or Intercom for Android.\nIf you’re new to Intercom, you’ll need to create an account and start your free trial.\n\n👍 OS Requirements\n\nIntercom for iOS supports iOS 13+.\nIntercom for Android supports API 22 and above.\n\nFirst you’ll need to ensure that both the Android and iOS Messengers are enabled from inside the Intercom settings panel. When either of these platforms are disabled, requests from that platform to Intercom will fail.\n\nStep 1 - Install Intercom\nCordova\n\nTo install the plugin in your Cordova app, run the following:\n\ncordova plugin add cordova-plugin-intercom\n\nPhonegap\n\nTo add the plugin to your PhoneGap app, add the following to your config.xml:\n\n<plugin name=\"cordova-plugin-intercom\" version=\"~11.0.0\" />\n\n\n🚧 Android Support Repository\n\nYou need to make sure that you have either the Android Support Repository or Google Repository installed. Follow these instructions on how to do that.\n\n🚧 AndroidX\n\nAs of version 9.1.0 we are using AndroidX. We strongly recommend upgrading your app to AndroidX if you are upgrading to our newest plugin. If you do not already use AndroidX you will need to add <preference name=\"AndroidXEnabled\" value=\"true\" /> to your config.xml. Details of upgrading to AndroidX can be found here https://cordova.apache.org/announcements/2020/06/29/cordova-android-9.0.0.html\n\nStep 2 - Initialize Intercom\n\nFirst, you'll need to get your Intercom app ID and iOS/Android API key. To find these, just select the 'Intercom for iOS' or 'Intercom for Android' option in Settings > Installation > iOS / Android.\n\nThen initialize Intercom by importing Intercom and adding the following to your config.xml:\n\n<preference name=\"intercom-app-id\" value=\"your_app_id\"/>\n<preference name=\"intercom-ios-api-key\" value=\"ios_sdk-...\"/>\n<preference name=\"intercom-android-api-key\" value=\"android_sdk-...\"/>\n\nStep 3 - Registering Users\n\nYou’ll need to register your users with Intercom before you can talk to them or see what they do in your app. Depending on the type of app you have, you can register logged in users of your app, website visitors of your website or both. Here’s tailored instructions for each option:\n\nRegister your logged in users\n\nIf you have an app with logged in (identified) users only (like Facebook, Instagram or Slack) follow these instructions:\n\nFirst, you’ll need to register your user when your app launches, like this:\nonDeviceReady: function() {\n    if(loggedIn){\n        // We're logged in, we can register the user with Intercom\n        intercom.registerIdentifiedUser({userId: \"123456\"});\n    }\n}\n\nYou’ll also need to register your user anywhere they log in:\nfunction successfulLogin() {\n    //For best results, use a unique user_id if you have one.\n    intercom.registerIdentifiedUser({userId: \"123456\"});\n}\n\n\n📘 Tip\n\nIf you don't have a unique userId to use here, or if you have a userId and an email you can register with those too, by calling intercom.registerIdentifiedUser({email: \"alice@example.com\"}) or intercom.registerIdentifiedUser({email:\"alice@example.com\", userId: \"123456\"})\n\nRegister your website visitors\n\nIf you have an app with website visitors (unidentified) only (like Angry Birds or a flashlight app), follow these instructions:\n\nJust register an unidentified user when your app launches:\n\nonDeviceReady: function() {\n    // This registers an unidentifed user with Intercom.\n    intercom.registerUnidentifiedUser();\n}\n\nRegister your logged in and website visitors\n\nIf you have an app with both logged in and website visitors (like Google Maps or YouTube), follow these instructions:\n\nFirst, you’ll need to register your user when your app launches, like this:\nonDeviceReady: function() {\n    if(loggedIn){\n        // We're logged in, we can register the user with Intercom\n        intercom.registerIdentifiedUser({userId: \"123456\"});\n    } else {\n        intercom.registerUnidentifiedUser();\n    }\n}\n\n\n📘 Tip\n\nIf you don't have a unique userId to use here, or if you have a userId and an email you can register with those too, by calling intercom.registerIdentifiedUser({email: \"alice@example.com\"}) or intercom.registerIdentifiedUser({email:\"alice@example.com\", userId: \"123456\"})\n\nYou’ll also need to register your user anywhere they log in:\nfunction successfulLogin() {\n    //For best results, use a unique user_id if you have one.\n    intercom.registerIdentifiedUser({userId: \"123456\"});\n}\n\nHow to unregister a user\n\nWhen users want to log out of your app, simply call:\n\nfunction logout() {\n    // This resets the Intercom integration's cache of your user's identity and wipes the slate clean.\n    intercom.logout();\n}\n\nBest practices for registering users\nDon’t use an email address as a userId as this field is unique and cannot be changed or updated later. If you only have an email address, you can just register a user with that.\nIf you register users with an email address, the email must be a unique field in your app. Otherwise we won't know which user to update and the mobile integration won't work.\n\n👍\n\nIntercom knows when your app is backgrounded and comes alive again, so you won’t need to re-register your users.\n\nWhat next?\nOnce you've got Intercom installed it's time to configure it for your Cordova/Phonegap app.\nEnable push notifications so you can send push messages."
  },
  {
    "title": "Installation",
    "url": "https://developers.intercom.com/installing-intercom/android/installation/",
    "html": "Installation\n\nInstall Intercom to see and talk to users of your Android app. Intercom for Android supports API 21 and above.\nNote: We recommend using the latest available compileSdkVersion.\n\nFirst you’ll need to ensure that the Android Messenger is enabled from inside the Intercom settings panel. When this is disabled, all requests to Intercom will fail.\n\nStep 1 - Install Intercom\n\nIf you’re new to Intercom, you’ll need to create an account and start your free trial. Then you have two options:\n\nOption 1: Install Intercom with Push Messaging\n\nAdd the following dependency to your app's build.gradle file:\n\ngroovyKotlin\ndependencies {\n    implementation 'io.intercom.android:intercom-sdk:15.5.1'\n    implementation 'com.google.firebase:firebase-messaging:23.1.+'\n}\n\nOption 2: Install Intercom without Push Messaging\n\nIf you'd rather not have push notifications in your app, you can use this dependency:\n\ndependencies {\n    implementation 'io.intercom.android:intercom-sdk-base:15.5.1'\n}\n\ndependencies {\n    implementation(\"io.intercom.android:intercom-sdk-base:15.5.1\")\n}\n\n\n🚧 Important\n\nIf you choose this method you won’t be able to send push messages.\n\nMaven central\n\nIntercom is hosted on maven central. You will need to add maven central to your root build.gradle file.\n\nallprojects {\n    repositories {\n      mavenCentral()\n    }\n}\n\nPermissions\n\nWe include the INTERNET permission by default as we need it to make network requests:\n\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n\n\nYou will need to include the READ_EXTERNAL_STORAGE permission if you have enabled image attachments:\n\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n\n\nYou can also include VIBRATE to enable vibration in push notifications:\n\n<uses-permission android:name=\"android.permission.VIBRATE\"/>\n\n\n🚧 Transitive Dependencies\n\nAs of version 9.0.0, Intercom Android SDK transitively depends on the latest versions of Gson, Otto, Okio, Okhttp and Retrofit. If your app is using any one of these libraries, they should at least be on the same major version that the Intercom SDK is using. When there are two versions of a library at build time, Gradle automatically picks the newer version. This means if you are currently using Retrofit 2.4.0, you would automatically get Retrofit 2.9.0 after including Intercom.\n\nFor the exact version numbers we are using, please check the dependency graph on Maven Central.\n\nStep 2 - Initialize Intercom\n\nFirst, you'll need to get your Intercom app ID and Android API key. To find these, just select the 'Intercom for Android' option in your app settings.\n\nThen, initialize Intercom by calling the following in the onCreate() method of your application class:\n\nKotlinJava\nIntercom.initialize(this, \"your api key\", \"your app id\")\n\n\nNote: If you don't currently implement a custom application, you’ll need to create one. A custom application looks like this:\n\nKotlinJava\nclass CustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Intercom.initialize(this, \"your api key\", \"your app id\")\n    }\n}\n\n\nYou’ll need to update your manifest to use your application:\n\n<application\n    android:name=\".CustomApplication\">\n</application>\n\n\n📘 Important\n\nIntercom must be initialized inside the application onCreate() method. Initializing anywhere else will result in Intercom not behaving as expected and could even result in the host app crashing.\n\nWhat next?\n\nOnce you've installed Intercom you can start using Intercom in your Android app.\n\nConfigure it for your Android app.\nEnable push notifications so you can send push messages.\nEnable Identity Verification for your Android app."
  },
  {
    "title": "Installation",
    "url": "https://developers.intercom.com/installing-intercom/ios/installation/",
    "html": "Installation\n\nInstall Intercom to see and talk to users of your iOS app. The Intercom for iOS library supports iOS 13+ and requires Xcode 14 to build.\n\nFirst you’ll need to ensure that the iOS Messenger is enabled from inside the Intercom settings panel. When this is disabled, all requests to Intercom will fail.\n\nStep 1 - Install Intercom\n\nIf you’re new to Intercom, you’ll need to create an account and start your free trial. Then you have three options:\n\nOption 1: CocoaPods\n\nCocoapods 1.10 is required to install Intercom.\nAdd Intercom to your Podfile and run pod install\n\ntarget :YourTargetName do\n  pod 'Intercom'\nend\n\nOption 2: Swift Package Manager\n\nAdd https://github.com/intercom/intercom-ios as a Swift Package Repository in Xcode and follow the instructions to add Intercom as a Swift Package.\n\nOption 3: Install Intercom manually\nDownload Intercom for iOS and extract the zip.\nDrag Intercom.xcframework into your project. Make sure ** \"Copy items if needed\"** is selected and click Finish.\n\nIn the target settings for your app, set the Intercom.xcframework to “Embed & Sign”. This can be found in the “Frameworks, Libraries, and Embedded Content” section of the “General” tab.\n\nStep 2 - Update Info.plist\n\nPhoto Library usage:\nWith the exception of apps that only support iOS 14+, when installing Intercom, you'll need to make sure that you have a NSPhotoLibraryUsageDescription entry in your Info.plist.\n\nFor apps that support iOS 13, this is required by Apple to access the photo library. It is necessary when installing Intercom due to the image upload functionality. Users will be prompted for the photo library permission only when they tap the image upload button.\n\nOn iOS 14+, Intercom uses the new PHPickerViewController API which does not require requesting users for photo library permission.\n\nCamera and microphone usage:\nYou need to make sure that you have NSCameraUsageDescription and NSMicrophoneUsageDescription entries in your Info.plist. They are required by Apple to access device's camera and microphone. It is necessary when installing Intercom due to the camera upload functionality. Users will be prompted for the camera and microphone permissions only when they tap the camera upload button.\n\nStep 3 - Initialize Intercom\n\nFirst, you'll need to get your Intercom app ID and iOS API key. To find these, just select the 'Intercom for iOS' option in your app settings.\n\nThen initialize Intercom by importing Intercom and adding the following to your application delegate:\n\nswiftobjectivec\nimport Intercom \n  \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n     Intercom.setApiKey(\"<Your iOS API Key>\", forAppId: \"<Your App ID>\")\n}\n\n\nIf your app is using a UISceneDelegate you will need to put your Intercom initialisation code into your SceneDelegate\n\nswiftobjectivec\nimport Intercom \n\nfunc scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n \tIntercom.setApiKey(\"<Your iOS API Key>\", forAppId: \"<Your App ID>\")\n}\n"
  },
  {
    "title": "Installation",
    "url": "https://developers.intercom.com/installing-intercom/web/installation/",
    "html": "Installation\n\nWe support three different ways to install Intercom on your website. The first is a standard install and will work for most websites. The second is for single page apps and the third uses a Rails gem to install Intercom if your website is built using Ruby on Rails.\n\nFirst you’ll need to ensure that the web Messenger is enabled from inside the Intercom settings panel. When this is disabled, all requests to Intercom will fail.\n\nStandard installation\n\nIf you have a web app with multiple pages where each one triggers a new page refresh then you will most likely need the basic JavaScript method. This means you will not need to create separate actions which trigger when the Messenger will appear or update. The page refresh itself is enough to trigger the action. To set up the basic JavaScript, you will only need to follow one step.\n\nHow to Install\n\nTo get the Messenger to appear on your web app copy and paste the snippet below before the </body> tag on every page where you want the Messenger to appear for website visitors.\n\n//Set your APP_ID\nvar APP_ID = \"APP_ID\";\n\nwindow.intercomSettings = {\n    app_id: APP_ID\n  };\n(function(){var w=window;var ic=w.Intercom;if(typeof ic===\"function\"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s, x);};if(document.readyState==='complete'){l();}else if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();\n\n\nYou can find your workspace ID in the URL when you are logged into Intercom. It will be a string of numbers and letters directly after apps/. So for https://app.intercom.com/a/apps/ecahpwf5/home the workspace ID is ecahpwf5.\n\nInstalling the Messenger for Regional Data Hosted Customers\n\nFor customers who are using Regional Data Hosting for Intercom, there is an additional parameter to set, to ensure your Messenger is pointing to your regional workspace. The snippet below contains this additional api_base parameter to connect to the Messenger's Regional endpoint.\n\nwindow.intercomSettings = {\n    app_id: REGIONAL_APP_ID,\n    api_base: `see table below`\n  };\n\nRegional Location\tAPI Base to Set\nUS\thttps://api-iam.intercom.io\nEU\thttps://api-iam.eu.intercom.io\nAustralia\thttps://api-iam.au.intercom.io\nWebsite visitors v Logged In?\n\nWebsite visitors are generally leads (visitors if they have not communicated via the Messenger) whereas logged in users are users in the Intercom sense. The main difference is the amount of information you know about them. You will have more info on logged in users so you will want to provide this when sending data via the Messenger.\n\n//Set your APP_ID\nvar APP_ID = \"APP_ID\";\nvar current_user_email = \"sartre@existentialist.com\";\nvar current_user_name = \"Jean Paul Sartre\";\nvar current_user_id = \"1940\";\n\nwindow.intercomSettings = {\n    app_id: APP_ID,\n    name: current_user_name, // Full name\n    email: current_user_email, // Email address\n    user_id: current_user_id // current_user_id\n  };\n(function(){var w=window;var ic=w.Intercom;if(typeof ic===\"function\"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s, x);};if(document.readyState==='complete'){l();}else if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();\n\nSingle Page App\n\nIf you have a single page app then you can get Intercom installed on your page in two simple steps. So let's waste no time and get you chatting to your customers.\n\nStep 1: Include Intercom JS Library\n\nFirst, include the intercom JS library file in your HTML head element.\n\n//Set your APP_ID\nvar APP_ID = \"APP_ID\";\n\n(function(){var w=window;var ic=w.Intercom;if(typeof ic===\"function\"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s, x);};if(document.readyState==='complete'){l();}else if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();\n\nBE SURE TO SET YOUR APP_ID!\n\nOne of the most common issues people have when setting up Intercom first is they forget to include their App ID in the above library code and copy and paste it into their site. The problem is you won't see any error message and Intercom will not show up when you boot the Messenger in the next step. You can set it using a var as noted in the above example or manually in the code itself. You might need to include the App ID in multiple places so using a var is generally a good idea.\n\nYou can find your workspace ID in the URL when you are logged into Intercom. It will be a string of numbers and letters directly after apps/. So for https://app.intercom.com/a/apps/ecahpwf5/home the workspace ID is ecahpwf5.\n\nStep 2: Launch Messenger\n\nOnce you have the Intercom library installed then you need to tell the Messenger to startup. You can do this using the Respond code snippet which will enable the Messenger to launch whenever the page is refreshed, i.e. no special action needs to be triggered to launch it.\n\nwindow.Intercom('boot', {\n   app_id: APP_ID,\n  //Website visitor so may not have any user related info\n});\n\nAdding information in the boot\n\nThe above example is the most basic way you can launch the Messenger. It does not include any information when it boots. You can include information here if you like but that will depend on what Intercom products you are using and what information you need from your users.\n\nIf you have the launcher on page where a user need to sign in to get to then you can include more info in that boot code.\n\nwindow.Intercom('boot', {\n  app_id: APP_ID,\n  email: 'example@example.com',\n  user_id: 'abc123',\n  created_at: 1234567890,\n});\n\nRails gem\n\nIf you have a Rails app then you can use our Rails gem to install Intercom.\n\nStep 1: Add Intercom to your Gemfile.\ngem \"intercom-rails\"\n\nStep 2: Make sure Intercom is installed by running this command:\nbundle install\n\nStep 3: Generate a config file with this command:\nrails generate intercom:config <YOUR APP ID>\n\n\nYou can find your workspace ID in the URL when you are logged into Intercom. It will be a string of numbers and letters directly after apps/. So for https://app.intercom.com/a/apps/ecahpwf5/home the workspace ID is ecahpwf5.\n\nStep 4: Add this line to the config file to display the Messenger on every page of your app:\nconfig.include_for_logged_out_users = true\n\n\nOnce you’ve completed your changes, open your website. Your Messenger should appear in the bottom right corner."
  },
  {
    "title": "Introduction",
    "url": "https://developers.intercom.com/docs/references/introduction/",
    "html": "Introduction\n\nThis is documentation for version 2.10 of the REST API. For more information on versions checkout our Changelog. For info on how to change your version see our versioning page.\n\nThis version of our API reference is auto-generated from an Open API specification. It is also interactive, which means you can now make calls to Intercom API directly from the docs, using Node, Ruby, PHP, Java, Python and other languages.\n\nIf you'd like to chat with other Intercom customers who are integrating with our API, you can ask a question in the Intercom Community.\n\nFor more information about Intercom products, you can visit our product documentation.\n\nAdmins\nArticles\nCompanies\nContacts\nConversations\nData Attributes\nData Events\nData Export\nHelp Center\nMessages\nNews\nNotes\nSegments\nSubscription Types\nSwitch\nTags\nTeams\nTicket Type Attributes\nTicket Types\nTickets\nVisitors\nModels\nErrors"
  },
  {
    "title": "Welcome",
    "url": "https://developers.intercom.com/docs",
    "html": "Welcome\n\nThe Intercom Developer Platform is a suite of SDKs and APIs for building apps that connect with Intercom. You can use these apps to extend the functionality of Intercom or to integrate Intercom with other services.\n\nNEW TO INTERCOM?\n\nFor more information about Intercom products, visit our main website or read our user documentation.\n\nHere are a few steps to take to get started:\n\nInstall Intercom\n\nThe first integration you'll use is Intercom itself, by installing the Messenger into your product. This will allow your customers to send messages to your Intercom Inbox. You can also:\n\nMake customizations to the Messenger\nSet up identity verification\nEnable push notifications for iOS, Android, and React Native.\nSet up your Workspace\n\nYou'll need an Intercom workspace — either a workspace you already have set up or a new developer workspace if you are planning to develop apps. This will give you access to your Developer Hub and access token. Follow this guide to set it up.\n\nDownload an app from the App Store\n\nInstall connectors to tools you already use, like:\n\nSlack\nStripe\nWhatsApp\nSalesforce\n\nAnd more, available on the Intercom App Store. The store offers apps built by Intercom, and apps built by other companies. Try downloading a few into your workspace.\n\nBuild your own integration\n\nNow that you have a few integrations installed from the App Store, you can try building your own using our REST APIs. Apps you build can be private apps just for your and your organization, or public apps available to anyone.\n\nTry building an app for Inbox or building an app for Messenger.\n\nIf you decide to build a public-facing integration you can submit it to the App Store.\n\nGetting help\nLET US KNOW\n\nIf you have any feedback on our developer documentation, please let us know what you think in the forms at the bottom of each page. Report issues with code blocks by clicking the feedback icon in the top right of the block.\n\nJoin our Intercom Community to get help, chat to Intercom experts, and connect to other developers building with Intercom. If you need immediate assistance, contact Intercom customer support directly using the Messenger in the bottom right of this page."
  },
  {
    "title": "Installing Intercom",
    "url": "https://developers.intercom.com/installing-intercom/",
    "html": "Installing Intercom\n\nHere you'll find everything you need to install Intercom in the following places:\n\nWeb\niOS\nAndroid\nCordova / PhoneGap\n\nOtherwise, you can utilise our quickstart guides and tutorials if you need to get set up faster with the basics, or get technical information uncovered elsewhere:\n\nTutorials on setting up custom domains for your Help Center\nChat with other Intercom customers, who've installed the Messenger, in our community forum.\nNEW TO INTERCOM?\n\nFor more information about Intercom products, you can visit our website or read our user documentation."
  }
]