[
    {
      "title": "Infor M3",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/infor-m3",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsInfor M3\nInfor M3 \n\nThe Infor M3 modules allow you to create, update, retrieve, and list the supplier invoices in your Infor M3 account.\n\nNote\n\nTo use Infor M3 in Make you must have the Enterprise plan.\n\nAll Enterprise apps are currently labeled as premium tier 3 in Make.\n\nGetting Started with Infor M3\n\nPrerequisites\n\nAn Infor M3 account - create an account at infor.com/resources/infor-m3-cloud.\n\nNote\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Infor M3 to Make\n\nTo connect your Infor M3, you need Host URL, Username, and Password for your Infor M3 Cloud account and insert it in the Create a connection dialog in the Make module. Please reach out to your system administrator for the details.\n\nLog in to your Make account, add a module from the Infor M3 app into an Make scenario.\n\nClick Add next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Username and Password fields, enter your Infor M3 account credentials, and click Continue.\n\nThe connection has been established.\n\nSupplier Invoice\nList Supplier Invoices by Payee\nList Supplier Invoice Line Items\nCreate a Supplier Invoice\nAdd a Supplier Invoice Line Item\nGet a Supplier Invoice\nGet a Supplier Invoice Line Item\nUpdate a Supplier Invoice\nOther\nMake an API Call\nExample of Use - Get Users\nInfor M3\nGetting Started with Infor M3\nConnecting Infor M3 to Make\nSupplier Invoice\nList Supplier Invoices by Payee\nList Supplier Invoice Line Items\nCreate a Supplier Invoice\nAdd a Supplier Invoice Line Item\nGet a Supplier Invoice\nGet a Supplier Invoice Line Item\nUpdate a Supplier Invoice\nOther\nMake an API Call\nExample of Use - Get Users\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "JobNimbus",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/jobnimbus",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsJobNimbus\nJobNimbus\n\nWith JobNimbus modules in Make, you can manage contacts and files and watch for jobs and activities in your JobNimbus account.\n\nTo use the JobNimbus modules, you must have a paid JobNimbus account. You can create an account at jobnimbus.com. For subscription information, refer to the JobNimbus Pricing page.\n\nRefer to the JobNimbus API documentation for a list of available endpoints.\n\nConnect JobNimbus to Make\n\nTo establish the connection, you must:\n\nObtain your API key in JobNimbus.\n\nEstablish the connection in Make.\n\nObtain your API key in JobNimbus\n\nTo obtain your API key from your JobNimbus account:\n\nLog in to your JobNimbus account.\n\nIn the top-right corner, click on your Profile icon > Settings.\n\nIn the left sidebar, click API.\n\nClick New API key.\n\nEnter a Description and choose an Access Profile for the new API Key.\n\nClick Save.\n\nCopy the Key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with JobNimbus in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a JobNimbus module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more JobNimbus modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild JobNimbus Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nContacts\n\nWatch Contacts\n\nCreate a Contact\n\nSearch Contacts\n\nGet a Contact\n\nUpdate a Contact\n\nFiles\n\nCreate a File\n\nCreate a File by URL\n\nList Files\n\nGet a File\n\nOther\n\nWatch Jobs\n\nWatch Activities\n\nMake an API Call\n\nJobNimbus\nConnect JobNimbus to Make\nObtain your API key in JobNimbus\nEstablish the connection with JobNimbus in Make\nBuild JobNimbus Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Katana Cloud Inventory",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/katana",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsKatana Cloud Inventory\nKatana Cloud Inventory\n\nWith Katana Cloud Inventory modules in Make, you can manage batch stocks, customers, inventories, manufacturing orders, manufacturing order recipe and operation rows, materials, products, recipes, purchase orders, purchase order rows, sales order, sales order addresses, sales order rows, stock adjustments, stock transfers, stocktake, suppliers, tax rates, and variants.\n\nTo use the Katana Cloud Inventory modules, you must have a paid account there. For subscription information, refer to the Katana Cloud Inventory Pricing page.\n\nRefer to the Katana Cloud Inventory API documentation for a list of available endpoints.\n\nEstablish the connection with Katana Cloud Inventory in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a  module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Switch on the Show advanced settings toggle and enter your custom app client credentials. For more information, refer to Katana Cloud Inventory documentation.\n\nIf requested, use the following Redirect URI when creating your custom app: https://www.integromat.com/oauth/cb/katana-mrp2\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Katana Cloud Inventory modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Katana Cloud Inventory Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nBatch Stocks\n\nList Batch Stocks\n\nGet a Batch Stock\n\nUpdate a Batch Stock\n\nCustomers\n\nList Customers\n\nGet a Customer\n\nCreate a Customer\n\nInventory\n\nList Current Inventory\n\nUpdate the Reorder Point\n\nManufacturing Order\n\nList Manufacturing Orders\n\nGet a Manufacturing Order\n\nCreate a Manufacturing Order\n\nCreate a Make-to-Order Manufacturing Order\n\nUnlink a Manufacturing Order from Sales Order\n\nUpdate a Manufacturing Order\n\nDelete a Manufacturing Order\n\nManufacturing Order Recipe Rows\n\nList Manufacturing Order Recipe Rows\n\nGet a Manufacturing Order Recipe Row\n\nCreate a Manufacturing Order Recipe Row\n\nUpdate a Manufacturing Order Recipe Row\n\nDelete a Manufacturing Order Recipe Row\n\nManufacturing Order Operation Rows\n\nList Manufacturing Order Operation Rows\n\nGet a Manufacturing Order Operation Row\n\nCreate a Manufacturing Order Operation Row\n\nUpdate a Manufacturing Order Operation Row\n\nDelete a Manufacturing Order Operation Row\n\nMaterials\n\nList Materials\n\nGet a Material\n\nProducts\n\nList Products\n\nGet a Product\n\nCreate a Product\n\nRecipes\n\nList Recipes\n\nCreate a Recipe\n\nUpdate a Recipe Row\n\nDelete a Recipe Row\n\nDelete a Recipe\n\nPurchase Orders\n\nList Purchase Orders\n\nGet a Purchase Order\n\nCreate a Purchase Order\n\nUpdate a Purchase Order\n\nReceive a Purchase Order\n\nDelete a Purchase Order\n\nPurchase Order Rows\n\nCreate a Purchase Order Row\n\nUpdate a Purchase Order Row\n\nDelete a Purchase Order Row\n\nSales Orders\n\nList Sales Orders\n\nGet a Sales Order\n\nCreate a Sales Order\n\nUpdate a Sales Order\n\nDelete a Sales Order\n\nSales Order Addresses\n\nCreate a Sales Order Address\n\nUpdate a Sales Order Address\n\nDelete a Sales Order Address\n\nSales Order Rows\n\nCreate a Sales Order Row\n\nUpdate a Sales Order Row\n\nDelete a Sales Order Row\n\nStock Adjustments\n\nList Sock Adjustments\n\nCreate a Stock Adjustment\n\nUpdate a Stock Adjustment\n\nDelete a Stock Adjustment\n\nStock Transfers\n\nList Stock Transfers\n\nCreate a Stock Transfer\n\nUpdate a Stock Transfer\n\nDelete a Stock Transfer\n\nStocktake\n\nList Stocktakes\n\nCreate a Stocktake\n\nUpdate a Stocktake\n\nDelete a Stocktake\n\nSuppliers\n\nList Suppliers\n\nGet a Supplier\n\nCreate a Supplier\n\nTax Rates\n\nList Tax Rates\n\nGet a Tax Rate\n\nCreate a Tax Rate\n\nVariants\n\nList Variants\n\nGet a Variant\n\nCreate a Variant\n\nOther\n\nMake an API Call\n\nNote\n\nThis app uses webhooks to trigger a scenario when an event occurs instantly. All webhook modules have an instant tag next to their name.\n\nWhen you create a Katana Cloud Inventory webhook in Make, it is attached automatically and requires no additional set up.\n\nKatana Cloud Inventory\nEstablish the connection with Katana Cloud Inventory in Make\nBuild Katana Cloud Inventory Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Flowlu",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/flowlu",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsFlowlu\nFlowlu\n\nWith Flowlu modules in Make, you can create, update, retrieve, search, and delete account types, calendars, opportunity sources, opportunity stages, pipelines, tasks, opportunities, accounts, and call APIs.\n\nTo get started with Flowlu, create an account at flowlu.com.\n\nRefer to the Flowlu API documentation for the list of available endpoints.\n\nConnect Flowlu to Make\n\nTo establish the connection:\n\nLog in to your Flowlu account.\n\nClick Settings > API Settings and copy the API Token to your clipboard.\n\nLog in to your Make account, add a Flowlu module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Domain field, enter your company from your account URL address. For example, if your account URL address is https://example.flowlu.com, then your domain is example.\n\nIn the API Key field, enter the API key copied in Step 2 and click Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Flowlu modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Flowlu Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nAccount Types\n\nCreate an Account Type\n\nUpdate an Account Type\n\nGet an Account Type\n\nSearch Account Type\n\nDelete an Account Type\n\nCalendars\n\nCreate a Calendar\n\nUpdate a Calendar\n\nGet a Calendar\n\nSearch Calendars\n\nDelete a Calendar\n\nOpportunity Sources\n\nCreate an Opportunity Source\n\nUpdate an Opportunity Source\n\nGet an Opportunity Source\n\nSearch Opportunity Source\n\nDelete an Opportunity Source\n\nOpportunity Stages\n\nCreate an Opportunity Stage\n\nUpdate an Opportunity Stage\n\nGet an Opportunity Stage\n\nSearch Opportunity Stage\n\nDelete an Opportunity Stage\n\nPipelines\n\nCreate a Pipeline\n\nUpdate a Pipeline\n\nGet a Pipeline\n\nSearch Pipelines\n\nDelete a Pipeline\n\nTasks\n\nCreate a Task\n\nUpdate a Task\n\nGet a Task\n\nSearch Tasks\n\nDelete a Task\n\nOpportunities\n\nCreate an Opportunity\n\nUpdate an Opportunity\n\nGet an Opportunity\n\nSearch Opportunities\n\nDelete an Opportunity\n\nAccounts\n\nCreate an Account\n\nUpdate an Account\n\nGet an Account\n\nSearch Accounts\n\nDelete an Account\n\nOther\n\nMake an API Call\n\nFlowlu\nConnect Flowlu to Make\nBuild Flowlu Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Float",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/float",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsFloat\nFloat\n\nWith Float modules in Make, you can:\n\nwatch, create, update, retrieve, list, and delete clients\n\nwatch, create, update, retrieve, list, and delete departments\n\nwatch, create, update, retrieve, list, and delete logged time\n\ncreate, update, retrieve, list, and delete milestones\n\nwatch, create, update, retrieve, list, and delete persons\n\nwatch, create, update, retrieve, list, and delete projects\n\nwatch, create, update, retrieve, list, and delete tasks\n\nwatch, create, update, retrieve, list, and delete time offs\n\nTo get started with Float, create an account at app.float.com.\n\nConnecting Float to Make\n\nTo connect Float with Make you need to obtain the Float Access Token values from your Float account:\n\nLog in to your Float account.\n\nClick Teams > Team Settings.\n\nClick Integrations. Copy the API Key to a safe place.\n\nLog in to your Make account, and add a module from the Float app into a Make scenario.\n\nClick Add next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Float Access Token field, enter the details copied in step 3, and click Save.\n\nYou have successfully established the connection and can now build scenarios.\n\nClients\n\nYou can watch, create, update, retrieve, list, and delete the clients using the following modules.\n\nWatch New Clients\nCreate a Client\nUpdate a Client\nGet a Client\nList Clients\nDelete a Client\nDepartments\n\nYou can watch, create, update, retrieve, list, and delete the departments using the following modules.\n\nWatch New Departments\nCreate a Department\nUpdate a Department\nGet a Department\nList Departments\nDelete a Department\nLogged Times\n\nYou can watch, create, update, retrieve, list, and delete the logged time using the following modules.\n\nWatch New Logged Times\nWatch Updated Logged Times\nCreate a Logged Time\nUpdate a Logged Time\nGet a Logged Time\nList Logged Times\nDelete a Logged Time\nMilestones\n\nYou can create, update, retrieve, list, and delete the milestones using the following modules.\n\nCreate a Milestone\nUpdate a Milestone\nGet a Milestone\nList Milestones\nDelete a Milestone\nPersons\n\nYou can watch, create, update, retrieve, list, and delete the persons using the following modules.\n\nWatch New Persons\nCreate a Person\nUpdate a Person\nGet a Person\nList Persons\nDelete a Person\nProjects\n\nYou can watch, create, update, retrieve, list, and delete projects using the following modules.\n\nWatch New Projects\nCreate a Project\nUpdate a Project\nGet a Project\nList Projects\nDelete a Project\nTasks\n\nYou can watch, create, update, retrieve, list, and delete the task using the following modules.\n\nWatch New Tasks\nWatch Updated Tasks\nCreate a Task\nUpdate a Task\nGet a Task\nList Tasks\nDelete a Task\nTime Offs\n\nYou can watch, create, update, retrieve, list, and delete the time offs using the following modules.\n\nWatch New Time Offs\nCreate a Time Off\nUpdate a Time Off\nGet a Time Off\nList Time Offs\nDelete a Time Off\nOther\n\nYou can call APIs using the following module.\n\nMake an API Call\nFloat\nConnecting Float to Make\nClients\nWatch New Clients\nCreate a Client\nUpdate a Client\nGet a Client\nList Clients\nDelete a Client\nDepartments\nWatch New Departments\nCreate a Department\nUpdate a Department\nGet a Department\nList Departments\nDelete a Department\nLogged Times\nWatch New Logged Times\nWatch Updated Logged Times\nCreate a Logged Time\nUpdate a Logged Time\nGet a Logged Time\nList Logged Times\nDelete a Logged Time\nMilestones\nCreate a Milestone\nUpdate a Milestone\nGet a Milestone\nList Milestones\nDelete a Milestone\nPersons\nWatch New Persons\nCreate a Person\nUpdate a Person\nGet a Person\nList Persons\nDelete a Person\nProjects\nWatch New Projects\nCreate a Project\nUpdate a Project\nGet a Project\nList Projects\nDelete a Project\nTasks\nWatch New Tasks\nWatch Updated Tasks\nCreate a Task\nUpdate a Task\nGet a Task\nList Tasks\nDelete a Task\nTime Offs\nWatch New Time Offs\nCreate a Time Off\nUpdate a Time Off\nGet a Time Off\nList Time Offs\nDelete a Time Off\nOther\nMake an API Call\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Finolog",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/finolog",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsFinolog\nFinolog\n\nWith Finolog modules in Make, you can manage and/or watch accounts, categories, companies, contractors, transactions, projects, and requisites in your Finolog account.\n\nTo use the Finolog modules, you must have a Finolog account. You can create an account at finolog.ru.\n\nNote\n\nThe Finolog website is available only in Russian.\n\nRefer to the Finolog API documentation for a list of available endpoints.\n\nConnect Finolog to Make\n\nTo establish the connection, you must:\n\nObtain your API key in Finolog.\n\nEstablish the connection in Make.\n\nObtain your API key in Finolog\n\nTo obtain your API key from your Finolog account:\n\nLog in to your Finolog account.\n\nIn the top right corner, click your account name and Profile.\n\nIn the API keys section, click Add Key.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with Finolog in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Finolog module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Finolog modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Finolog Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nAccounts\n\nWatch Accounts\n\nList Accounts\n\nGet an Account\n\nCreate an Account\n\nUpdate an Account\n\nDelete an Account\n\nCategories\n\nWatch Categories\n\nList Categories\n\nGet a Category\n\nCreate a Category\n\nUpdate a Category\n\nDelete a Category\n\nCompanies\n\nWatch Companies\n\nList Companies\n\nGet a Company\n\nCreate a Company\n\nUpdate a Company\n\nDelete a Company\n\nContractors\n\nWatch Contractors\n\nList Contractors\n\nList Contractor Requisites\n\nGet a Contractor\n\nCreate a Contractor\n\nUpdate a Contractor\n\nDelete a Contractor\n\nProjects\n\nWatch Projects\n\nRequisites\n\nWatch Requisites\n\nTransactions\n\nWatch Transactions\n\nList Transactions\n\nGet a Transaction\n\nCreate a Transaction\n\nUpdate a Transaction\n\nDelete a Transaction\n\nOther\n\nMake an API Call\n\nFinolog\nConnect Finolog to Make\nObtain your API key in Finolog\nEstablish the connection with Finolog in Make\nBuild Finolog Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Filestage",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/filestage",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsFilestage\nFilestage\n\nWith Filestage modules in Make, you can manage the projects, files, steps, folders, and create general comments in your Filestage account.\n\nTo use the Filestage modules, you must have a paid Filestage account. You can create an account at filestage.io. For subscription information, refer to the Filestage Pricing page.\n\nRefer to the Filestage API documentation for a list of available endpoints.\n\nConnect Filestage to Make\n\nTo establish the connection, you must:\n\nObtain your API key in Filestage.\n\nEstablish the connection in Make.\n\nObtain your API key in Filestage\n\nTo obtain your API key from your Filestage account:\n\nLog in to your Filestage account.\n\nFrom the dashboard, click Team > API.\n\nClick Generate API key.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with Filestage in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Filestage module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Filestage modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Filestage Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nProjects\n\nCreate a Project\n\nGet a Project\n\nList Projects\n\nFiles\n\nGet a File\n\nList Files\n\nDownload File Version\n\nUpload a File\n\nSteps\n\nCreate a Step\n\nAdd Reviewers to a Step\n\nList Steps\n\nFolders\n\nCreate a Folder\n\nList Folders\n\nOther\n\nMake an API Call\n\nFilestage\nConnect Filestage to Make\nObtain your API key in Filestage\nEstablish the connection with Filestage in Make\nBuild Filestage Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "DEAR Inventory",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/dear-inventory",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsDEAR Inventory\nDEAR Inventory\n\nWith DEAR Inventory modules in Make, you can manage your suppliers, sales, customers, sale payments, sale attachments, and stock adjustments, monitor your products, payments, stock levels, and add sale packs or sale shipments.\n\nTo get started with DEAR Inventory create an account at dearsystems.com.\n\nRefer to the DEAR Inventory API Introduction for a list of available endpoints.\n\nConnect DEAR Inventory to Make\n\nTo connect your DEAR Inventory account to Make, you must first obtain the API Key and Account ID from your DEAR Inventory account.\n\nTo establish the connection:\n\nLog in to your DEAR Systems account.\n\nIn the left sidebar, click Integration.\n\nA list of integrations appears. In the search field, search for API and click on the CIN7 Core API integration.\n\nFrom the top menu, click the plus icon to create a new app.\n\nEnter a name for your new app and click Create.\n\nCopy and save the provided Key and Account ID.\n\nLog in to your Make account, add a DEAR Inventory module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key and Account ID fields, enter the Key and Account ID saved in Step 6.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more DEAR Inventory modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild DEAR Inventory Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nSuppliers\n\nWatch New or Updated Supplier\n\nCreate a Supplier\n\nGet a Supplier\n\nList Suppliers\n\nSales\n\nWatch New Sale Invoice Authorized\n\nCreate a Sale\n\nUpdate a Sale\n\nGet a Sale\n\nList Sales\n\nFind a Sale Invoice\n\nFind a Sale Fulfilment\n\nDelete a Sale\n\nCustomers\n\nWatch New or Updated Customer\n\nCreate a Customer\n\nUpdate a Customer\n\nGet a Customer\n\nList Customers\n\nProducts\n\nGet a Product\n\nList Products\n\nFind a Product's Availability\n\nSale Payments\n\nWatch New Sale Credit Note Authorized\n\nWatch New Sale Shipment Tracking Number\n\nWatch New Sale Voided\n\nAdd a Sale Payment\n\nUpdate a Sale Payment\n\nFind a Sale Credit Note\n\nList Sale Payments\n\nDelete a Sale Payment\n\nSale Packs\n\nAdd a Sale Pack\n\nGet a Sale Pack\n\nSale Shipments\n\nAdd a Sale Shipment\n\nSale Attachments\n\nAdd a Sale Attachment\n\nList Sales Attachments\n\nDelete a Sale Attachment\n\nStock Adjustments\n\nCreate a Stock Adjustment\n\nUpdate a Stock Adjustment\n\nGet a Stock Adjustment\n\nList Stock Adjustments\n\nDelete a Stock Adjustment\n\nPayments\n\nWatch New Payment\n\nStock Levels\n\nWatch New Stock Level Update\n\nAssemblies\n\nFind an Assembly\n\nOther\n\nMake an API Call\n\nDEAR Inventory\nConnect DEAR Inventory to Make\nBuild DEAR Inventory Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "easybill",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/easybill",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPseasybill\neasybill\n\nWith easybill modules in Make, you can create, manage, and monitor all your customers, documents, payments, invoices, projects, tasks, and contacts in your easybill account.\n\nTo get started with easybill, create an account at easybill.de.\n\nConnect easybill to Make\n\nTo make a connection you must obtain an API key from your easybill account.\n\nLog in to your easybill account.\n\nClick your username and select Profiles and settings from the drop-down menu.\n\nScroll down and generate a new API key. Copy your new key, you will need it to make the connection later.\n\nGo to your Make scenario and select the easybill module you want to use.\n\nUnder Connection, click Add, then give your new connection a name.\n\nPaste the API key from step 3 into the field provided, then click Save.\n\nYou have successfully established the connection. You can now begin editing your scenario and adding more easybill modules. If your connection needs reauthorization at any point, follow the connection renewal steps here.\n\nSetting up easybill webhooks\n\nThis app makes use of webhooks to instantly trigger a scenario when an event occurs. Follow the steps below to set them up.\n\nGo to your Make scenario and select the easybill Watch module you want to use.\n\nUnder Webhook, click Add, then give your new webhook a name.\n\nAdd or select the connection you want to use.\n\nSelect which type of event you want to monitor.\n\nCustomer Created\n\nCustomer Updated\n\nCustomer Deleted\n\nClick Save.\n\nMake attaches the webhook automatically for you in your easybill account. The scenario will now trigger when an event occurs.\n\neasybill\nConnect easybill to Make\nSetting up easybill webhooks\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Emporix Orchestration Engine",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/emporix-oe",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsEmporix Orchestration Engine\nEmporix Orchestration Engine\n\nWith Emporix Orchestration Engine modules in Make, you can start new orchestrations in your Emporix OE account.\n\nTo use the Emporix Orchestration Engine modules, you must have an Emporix OE account. To learn how to request for such an account, see Provisioning OE.\n\nRefer to the Emporix API documentation for a list of available endpoints.\n\nConnect Emporix Orchestration Engine to Make\n\nTo establish the connection, you must:\n\nObtain your Source ID and Secret in Emporix.\n\nObtain your client credentials in Emporix.\n\nEstablish the connection in Make.\n\nObtain your Source ID and Secret in Emporix\n\nTo obtain your Source ID and Secret from your Emporix account:\n\nLog in to your Emporix OE dashboard.\n\nIn the left sidebar, click OE > Admin.\n\nIn the Source field copy the suffix with format src_abcdeMNiwCsZ and store it in a safe place.\n\nCopy the Secret value shown and store it in a safe place.\n\nYou will use these values in the Event-Receiver Source ID and Event-Receiver Secret fields in Make.\n\nObtain your Client ID and Client Secret in Emporix\n\nTo obtain your client credentials from your Emporix account:\n\nIn the Emporix dashboard, go to API keys > Manage API Keys.\n\nIn the Emporix API row, copy the Client ID and Secret values shown and store them in a safe place.\n\nYou will use these values in the Orchestration API Client ID and Orchestration API Client Secret fields in Make.\n\nEstablish the connection with Emporix Orchestration Engine in Make\n\nLog in to your Make account, add a Emporix Orchestration Engine module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Event-Receiver Source ID and Event-Receiver Secret fields, enter the source ID and secret copied above.\n\nIn the Environment field, select whether you want to connect to Production (api.emporix.io), Stage (api-stage.emporix.io) or Dev environment (api-dev.emporix.io).\n\nIn the Orchestration API Client ID and Orchestration API Client Secret fields, enter the client credentials copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Emporix Orchestration Engine modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Emporix Orchestration Engine Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nActions\n\nStart a New Orchestration\n\nEmporix Orchestration Engine\nConnect Emporix Orchestration Engine to Make\nObtain your Source ID and Secret in Emporix\nObtain your Client ID and Client Secret in Emporix\nEstablish the connection with Emporix Orchestration Engine in Make\nBuild Emporix Orchestration Engine Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "DHL",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/dhl",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsDHL\nDHL\n\nWith DHL modules in Make, you can track shipments in your DHL account and make API calls\n\nTo get started with DHL, create an account at developer.dhl.com.\n\nConnecting DHL to Make\n\nTo make a connection, you need to obtain an API key by creating an app in your DHL account.\n\nLog in to your DHL developers account.\n\nClick your avatar in the top-right corner to take you to the user dashboard.\n\nClick Create App.\n\nGive your new app a name.\n\nSelect the APIs you want to use. The APIs you need to select to use all the DHL modules in Make are:\n\nShipment Status (DHL Global Forwarding)\n\nShipment Tracking (DHL Global Forwarding)\n\nShipment Tracking (Unified)\n\nFor each API selected, click the plus sign under Add to app to enable the API.\n\nOnce you have selected al the necessary APIs, click Create App.\n\nSelect your newly created app from the list.\n\nNext to API key, click Show key and copy the API key to your clipboard.\n\nGo to your Make scenario and select the DHL module you want to use.\n\nUnder Connection, click Add.\n\nGive your new connection a name.\n\nPaste the API key in the filed below.\n\nClick Save.\n\nYou have successfully established the connection.\n\nShipment Trackings\nTrack a Shipment (Unified)\n\nRetrieves up-to-the-minute shipment status report.\n\nConnection\n\n\t\n\nEstablish a connection to your DHL account.\n\n\n\n\nTracking number\n\n\t\n\nEnter the tracking number of the shipment for which to return the information.\n\n\n\n\nService\n\n\t\n\nSelect which service (provider) should be used to resolve the tracking number.\n\nExpress\n\nParcel-DE\n\neCommerce\n\nDGF\n\nParcel-UK\n\nPost-DE\n\nSameday\n\nFreight\n\nParcel-NL\n\nParcel-PL\n\nDSC\n\n\n\n\nRequester Country Code\n\n\t\n\nSelect the country of the consumer of the API response.\n\n\n\n\nOrigin Country Code\n\n\t\n\nSelect the country of the shipment origin.\n\n\n\n\nRecipient Postal Code\n\n\t\n\nEnter the postal code of the destination address.\n\n\n\n\nLanguage\n\n\t\n\nEnter the language code for the response. For example: en.\n\n\n\n\nLimit\n\n\t\n\nEnter the maximum number of results Make returns during one scenario execution cycle.\n\nTrack a Shipment (DHL Global Forwarding)\n\nRetrieves shipment information by shipment house bill number.\n\nConnection\n\n\t\n\nEstablish a connection to your DHL account.\n\n\n\n\nHouse Bill\n\n\t\n\nEnter the house bill number of the shipment you want to track.\n\nGet a House Bill Number\n\nRetrieves a house bill number.\n\nConnection\n\n\t\n\nEstablish a connection to your DHL account.\n\n\n\n\nSearch Type\n\n\t\n\nSpecify one of the supported search-types.\n\nCustomer Reference\n\nMasterbill\n\nContainer Number\n\n\n\n\nValue\n\n\t\n\nEnter a value.\n\nShipment Statuses\nGet a Shipment Status\n\nRetrieves shipment status information by shipment's house bill number.\n\nConnection\n\n\t\n\nEstablish a connection to your DHL account.\n\n\n\n\nHouse Bill\n\n\t\n\nEnter the house bill number of the shipment you want to get a status for.\n\nDHL\nConnecting DHL to Make\nShipment Trackings\nTrack a Shipment (Unified)\nTrack a Shipment (DHL Global Forwarding)\nGet a House Bill Number\nShipment Statuses\nGet a Shipment Status\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Coupa",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/coupa",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsCoupa\nCoupa \n\nThe Coupa modules enable you to grant or reject approvals, and update or add approvers to requisitions in your Coupa account.\n\nCaution\n\nCoupa has deprecated connection using API Key. You need to create OAuth2.0 client credentials to connect Coupa with Make\n\nNote\n\nTo use Coupa in Make you must have the Enterprise plan.\n\nAll Enterprise apps are currently labeled as premium tier 3 in Make.\n\nTo get started with Coupa, create an account at Coupa.com.\n\nConnect Coupa to Make\n\nTo connect your Coupa account to Make you need to obtain the client credentials from the Integrations section of your Coupa account.\n\nLog in to your Coupa account.\n\nClick Setup > Integration > OAuth2/OpenID Connect Clients. Alternatively, use the search option to locate OAuth2/OpenID Connect Clients.\n\nClick Create.\n\nEnter the details as provided in the table below and click Save.\n\nGrant Type\n\n\t\n\nSelect Client credentials.\n\n\n\n\nName\n\n\t\n\nEnter the app's name.\n\n\n\n\nJWK URI\n\n\t\n\nEnter the following redirect URI:\n\nhttps://www.integromat.com/oauth/cb/coupa \n\nhttps://www.make.com/oauth/cb/coupa\n\n\n\n\nLogin\n\n\t\n\nEnter the login username of the user.\n\n\n\n\nContact First Name\n\n\t\n\nEnter the user's first name.\n\n\n\n\nContact Last Name\n\n\t\n\nEnter the user's last name.\n\n\n\n\nContact Email\n\n\t\n\nEnter the user's email address.\n\n\n\n\nScopes\n\n\t\n\nSelect the following mandatory scopes for the user:\n\nemail\n\nlogin\n\noffline_acces\n\nopenid\n\nprofile\n\ncore.accounting.read\n\nCopy the Identifier value, click Show/hide against the Secret field, and copy the value to a safe place.\n\nGo to Make and open the Coupa module's Create a connection dialog.\n\nSelect the Connection type as Coupa.\n\nIn the Connection name field, enter the connection name.\n\nIn the Resource URL field, enter your account's URL address without https://.\n\nIn the Identifier, and Secret fields, enter the client credentials from step 5, select the scopes, and click Save.\n\nThe connection is established. You can proceed with setting up the module.\n\nApprovals\nGrant an Approval\nReject an Approval\nRequisitions\nUpdate a Requisition Line\nAdd an Approver to a Requisition\nOther\nMake an API Call\nExample of Use - List Requisitions\nCoupa\nConnect Coupa to Make\nApprovals\nGrant an Approval\nReject an Approval\nRequisitions\nUpdate a Requisition Line\nAdd an Approver to a Requisition\nOther\nMake an API Call\nExample of Use - List Requisitions\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Axosoft",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/axosoft",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsAxosoft\nAxosoft\n\nWith the Axosoft modules in Make, you can:\n\nwatch, create, update, search, retrieve, and delete customers\n\nwatch, create, update, search, retrieve, and delete contacts\n\nwatch, create, update, search, retrieve, and delete work items\n\nwatch, create, update, search, retrieve, and delete tickets or incidents\n\nwatch, create, update, search, retrieve, and delete projects\n\nwatch, create, update, search, retrieve, and delete work logs\n\nConnect Axosoft with Make\n\nTo connect Axosoft with Make, you need to obtain the Client ID and Client Secret values from your Axosoft account:\n\nLog in to your Axosoft account.\n\nClick Tools > System Settings > Axosoft API Settings.\n\nClick Manage API Keys.\n\nClick Add, enter a name for the API key and click Close.\n\nClick Manage Tokens > Non-Expiring Token.\n\nChoose the App, scope for the token, and click Create.\n\nCopy the Client ID and Client Secret values to a safe place.\n\nLog in to your Make account, and add a module from the Axosoft app into a Make scenario.\n\nClick Add next to the Connection field.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Subdomain field, enter your account URL address subdomain value. For example, https://<subdomain>.axosoft.com.\n\nIn the Client ID and Client Secret field, enter the details copied in step 7, and click Save.\n\nConfirm the access by clicking Allow.\n\nYou have successfully established the connection and can now build scenarios.\n\nCustomers\n\nYou can watch, create, update, retrieve, and delete the customers using the following modules.\n\nWatch Customers\n\nTriggers when a new customer has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of customers Make will return during one execution cycle.\n\nCreate a Customer\n\nCreates a new customer.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nCompany Name\n\n\t\n\nEnter (map) the company name.\n\n\n\n\nCompany URL\n\n\t\n\nEnter (map) the company website URL address.\n\n\n\n\nContacts\n\n\t\n\nAdd the contacts for the customer. See Create a Contact.\n\nUpdate a Customer\n\nUpdates a customer.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the Customer ID whose details you want to update.\n\n\n\n\nCompany Name\n\n\t\n\nEnter (map) a new company name.\n\n\n\n\nCompany URL\n\n\t\n\nEnter (map) the company's website URL address.\n\nGet a Customer\n\nRetrieves a customer.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the Customer ID whose details you want to retrieve.\n\n\n\n\nExtend\n\n\t\n\nSelect or map an optional parameter whose details you want to include in the response. There are two options that can be used in conjunction with one another, and a third to extend all possibilities.\n\nTo specify more than one, send them in either a string array or a comma separate string:\n\nContacts: retrieves information about the contacts for the customer\n\nCustom Fields: retrieves the values for each custom field set for this customer\n\nAll: extends to all of the above options\n\nSearch Customers\n\nSearches for customers or lists them all.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nSearch\n\n\t\n\nEnter (map) a keyword or a phrase to search the customers that match the specified query.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of customers Make will return during one execution cycle.\n\nDelete a Customer\n\nDeletes a customer.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the Customer ID you want to delete.\n\n\n\n\nInclude Contacts\n\n\t\n\nSelect whether you want to delete the contacts of the customer.\n\nContacts\n\nYou can watch, create, update, retrieve, and delete the contacts using the following modules.\n\nWatch Contacts\n\nTriggers when a new customer contact has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of contacts Make will return during one execution cycle.\n\nCreate a Contact\n\nCreates a new contact.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the company to which the contact belongs.\n\n\n\n\nFirst Name\n\n\t\n\nEnter the contact's first name.\n\n\n\n\nLast Name\n\n\t\n\nEnter the contact's last name.\n\n\n\n\nCan Login\n\n\t\n\nIf you select Yes and the contact status is Approved then the contact is allowed to log in to the Customer Portal.\n\n\n\n\nEmail\n\n\t\n\nEnter (map) the contact's email address.\n\n\n\n\nStatus\n\n\t\n\nSelect or map the status of the contact. For example, Approved.\n\n\n\n\nPhone\n\n\t\n\nEnter (map) the contact's phone number.\n\n\n\n\nSecurity Role\n\n\t\n\nSelect the contact's role. For example, project manager.\n\nUpdate a Contact\n\nUpdates a contact.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nContact ID\n\n\t\n\nSelect or map the Contact ID whose details you want to update.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the Customer ID to which the contact belongs.\n\n\n\n\nFirst Name\n\n\t\n\nEnter (map) the contact's first name.\n\n\n\n\nLast Name\n\n\t\n\nEnter (map) the contact's last name.\n\n\n\n\nCan Login\n\n\t\n\nIf you select Yes and the contact status is Approved then the contact is allowed to log in to the Customer Portal.\n\n\n\n\nStatus\n\n\t\n\nSelect or map the contact status. For example, Approved.\n\n\n\n\nPhone\n\n\t\n\nEnter (map) the contact's phone number.\n\n\n\n\nSecurity Role\n\n\t\n\nSelect or map the contact's role. For example, project manager.\n\nGet a Contact\n\nRetrieves a contact.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nContact ID\n\n\t\n\nSelect or map the Contact D whose details you want to retrieve.\n\n\n\n\nExtend\n\n\t\n\nSelect or map an optional parameter to specify which additional details are requested. Currently, only one option is available, custom_fields that retrieve the values for each custom field set for this contact.\n\nSearch Contacts\n\nSearches for contacts or lists them all.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nSearch\n\n\t\n\nEnter a keyword or phrase to search the contacts that match the specified query.\n\n\n\n\nSearch Field\n\n\t\n\nSelect or map the column to search the contacts based on the specified value. For example, Phone.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the customer ID whose contacts you want to search/\n\n\n\n\nSort Fields\n\n\t\n\nSelect or map the fields to sort the responses.\n\n\n\n\nColumns\n\n\t\n\nSelect or map the columns you want to include in the responses.\n\n\n\n\nGroup Field\n\n\t\n\nSelect or map the group fields to sort the responses.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of contacts Make will return during one execution cycle.\n\nDelete a Contact\n\nDeletes a contact.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nContact ID\n\n\t\n\nSelect or map the Contact ID you want to delete.\n\nWork Items (Features)\n\nYou can watch, create, update, retrieve, search, and delete the work items using the following modules.\n\nWatch Work Items\n\nTriggers when a new work item has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of work items Make will return during one execution cycle.\n\nCreate a Work Item\n\nCreates a new work item.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nCustom Fields\n\n\t\n\nSelect or map the work item type. For example, epic.\n\nFor field descriptions, see Create a Ticket.\n\nUpdate a Work Item\n\nUpdates a work item.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nWork Item ID\n\n\t\n\nSelect or map the Work Item ID whose details you want to update.\n\n\n\n\nCustom Fields\n\n\t\n\nSelect or map the work item type. For example, epic.\n\nFor field descriptions, see Create a Ticket.\n\nGet a Work Item\n\nRetrieves a work item.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nWork Item ID\n\n\t\n\nSelect or map the Work Item ID whose details you want to retreive.\n\nSearch Work Items\n\nSearches a work item or lists them all.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nProject ID\n\n\t\n\nSelect or map the Project ID whose work items you want to search.\n\n\n\n\nInclude Sub Project Items\n\n\t\n\nSelect whether to include items belonging to the sub-projects of the project.\n\n\n\n\nInclude Inactive Projects\n\n\t\n\nSelect whether to include items belonging to inactive projects.\n\n\n\n\nRelease ID\n\n\t\n\nSelect or map the Release ID whose work items you want to search.\n\n\n\n\nInclude Sub Release Items\n\n\t\n\nSelect whether to include items belonging to the sub-releases of the release.\n\n\n\n\nInclude Inactive Releases\n\n\t\n\nSelect whether to include items belonging to inactive releases.\n\n\n\n\nAssigned to Type\n\n\t\n\nSelect or map the option to choose the user or teams whose work items you want to search.\n\n\n\n\nAssigned to ID\n\n\t\n\nSelect or map the User ID or Team ID whose work items you want to search.\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the Customer ID whose work items you want to search.\n\n\n\n\nContact ID\n\n\t\n\nSelect or map the Contact ID whose work items you want to search.\n\n\n\n\nFilter ID\n\n\t\n\nSelect or map the Filter ID to search the work items based on the specified filter.\n\n\n\n\nSort Fields\n\n\t\n\nSelect or map the fields to sort the results.\n\n\n\n\nSearch String\n\n\t\n\nEnter (map) the keyword to search the work items that match the specified query.\n\n\n\n\nSearch Field\n\n\t\n\nSelect or map the field to sort the work items.\n\n\n\n\nColumns\n\n\t\n\nSelect or map the columns to search the work items from the specified columns.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of work items Make will return during one execution cycle.\n\nDelete a Work Item\n\nDeletes a work item.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nWork Item ID\n\n\t\n\nSelect or map the Work Item ID you want to delete.\n\n\n\n\nDelete Subitems\n\n\t\n\nSelect whether you want to delete the subitems related to the work item.\n\nTickets (Incidents)\n\nYou can watch, create, update, retrieve, and delete the tickets using the following modules.\n\nWatch Tickets\n\nTriggers when a new ticket has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of tickets Make will return during one execution cycle.\n\nCreate a Ticket\n\nCreates a new ticket.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nNotify Customer\n\n\t\n\nSelect whether or not a one-time notification should be sent to the customer contact assigned to this item.\n\n\n\n\nName\n\n\t\n\nEnter (map) the name for the ticket.\n\n\n\n\nDescription\n\n\t\n\nEnter (map) the ticket details.\n\n\n\n\nNotes\n\n\t\n\nEnter (map) any additional information about the ticket.\n\n\n\n\nResolution\n\n\t\n\nEnter (map) the ticket resolution details.\n\n\n\n\nReplication Procedures\n\n\t\n\nEnter (map) the instructions to reproduce the issue mentioned in the ticket.\n\n\n\n\nPercent Complete\n\n\t\n\nEnter (map) the percentage between 0 and 100 that represent the work completed on the ticket.\n\n\n\n\nArchived\n\n\t\n\nSelect whether this ticket is archived.\n\n\n\n\nPublicly Viewable\n\n\t\n\nSelect whether this ticket is publicly viewable.\n\n\n\n\nCompletion Date\n\n\t\n\nEnter (map) the date on which the ticket is resolved. See the list of supported date and time formats.\n\n\n\n\nDue Date\n\n\t\n\nEnter (map) the date by which this ticket should be resolved. See the list of supported date and time formats.\n\n\n\n\nReported Date\n\n\t\n\nEnter (map) the date on which the ticket is reported. See the list of supported date and time formats.\n\n\n\n\nStart Date\n\n\t\n\nEnter (map) the date on which the work on the ticket starts. See the list of supported date and time formats.\n\n\n\n\nAssigned To\n\n\t\n\nSelect or map the user to whom this ticket is assigned.\n\n\n\n\nEscalation\n\n\t\n\nSelect or map the escalation type applicable to this ticket.\n\n\n\n\nPriority\n\n\t\n\nSelect or map the ticket priority. For example, Low.\n\n\n\n\nProject\n\n\t\n\nSelect or map the project to which the ticket belongs.\n\n\n\n\nParent\n\n\t\n\nSelect or map the parent ticket to which this ticket belongs.\n\n\n\n\nRelease\n\n\t\n\nSelect or map the release associated with the ticket.\n\n\n\n\nReported By\n\n\t\n\nSelect or map who has reported the ticket in the system.\n\n\n\n\nReported by Customer Contact\n\n\t\n\nSelect or map the contact of the customer who has reported the ticket.\n\n\n\n\nSeverity\n\n\t\n\nSelect or map the ticket severity. For example, Low Impact.\n\n\n\n\nStatus\n\n\t\n\nSelect or map the ticket status. For example, In progress.\n\n\n\n\nActual Duration\n\n\t\n\nEnter the actual time worked on the ticket in minutes, hours, days, weeks, or months.\n\n\n\n\nEstimated Duration\n\n\t\n\nEnter the estimated time for the ticket in minutes, hours, days, weeks, or months.\n\n\n\n\nRemaining Duration\n\n\t\n\nEnter the work hours remaining on the ticket in minutes, hours, days, weeks, or months.\n\nUpdate a Ticket\n\nUpdates a ticket.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nTicket ID\n\n\t\n\nSelect or map the Ticket ID whose details you want to update.\n\nFor the field descriptions, see Create a Ticket.\n\nGet a Ticket\n\nRetrieves a ticket.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nTicket ID\n\n\t\n\nSelect or map the Ticket ID whose details you want to retrieve.\n\n\n\n\nWith Lock\n\n\t\n\nSelect whether the method should acquire and return a lock on the ticket.\n\nDelete a Ticket\n\nDeletes a ticket.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nTicket ID\n\n\t\n\nSelect or map the Ticket ID you want to delete.\n\nProjects\n\nYou can watch, retrieve, search, and delete projects using the following modules.\n\nWatch Projects\n\nTriggers when a new project has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of projects Make will return during one execution cycle.\n\nGet a Project\n\nRetrieves a project.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nProject ID\n\n\t\n\nSelect or map the Project ID whose details you want to retrieve.\n\n\n\n\nExtend\n\n\t\n\nEnter (map) an optional parameter to specify which additional details are requested.\n\nTo specify more than one, send them in either a string array or a comma separate string:\n\nField Templates - retrieves information about the field templates set for the project, including if they are explicitly set or if they are inherited from an ancestor.\n\nWorkflows - retrieves information about the workflows set for the project, including if they are explicitly set or if they are inherited\n\nEscalations - retrieves the specified escalation path for the project, including if it is explicitly set or if it is inherited\n\nCustomer Portal - retrieves the field templates for each action type (view, edit, and add) including if they are explicitly set or if they are inherited\n\nCustom Fields - retrieves the values for each custom field set for this project\n\nAll of the above - extends to all of the above options\n\nSearch Projects\n\nSearches for projects or lists them all.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nDisplay Inactive\n\n\t\n\nSelect whether you want to include inactive projects in the search results.\n\n\n\n\nExtend\n\n\t\n\nEnter (map) an optional parameter to specify which additional details are requested.\n\nTo specify more than one, send them in either a string array or a comma separate string:\n\nField Templates - retrieves information about the field templates set for the project, including if they are explicitly set or if they are inherited from an ancestor.\n\nWorkflows - retrieves information about the workflows set for the project, including if they are explicitly set or if they are inherited\n\nEscalations - retrieves the specified escalation path for the project, including if it is explicitly set or if it is inherited\n\nCustomer Portal - retrieves the field templates for each action type (view, edit, and add) including if they are explicitly set or if they are inherited\n\nCustom Fields - retrieves the values for each custom field set for this project\n\nAll of the above - extends to all of the above options\n\n\n\n\nFlat\n\n\t\n\nSelect whether you want to list the projects in the flat hierarchy.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of projects Make will return during one execution cycle.\n\nDelete a Project\n\nDeletes a project.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nProject ID\n\n\t\n\nSelect or map the Project ID you want to delete.\n\n\n\n\nProject to Move to\n\n\t\n\nSelect or map the Project ID to which you want to move all the associated items of the above project you are deleting.\n\n\n\n\nDelete Items\n\n\t\n\nSelect whether you want to delete all the associated items of the project.\n\nWork logs\n\nYou can watch, create, update, retrieve, search, and delete the work logs using the following modules.\n\nWatch Work logs\n\nTriggers when a new work log has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of work logs Make will return during one execution cycle.\n\nCreate a Work log\n\nCreates a new work log.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nUser ID\n\n\t\n\nSelect or map the User ID whose work log you want to create.\n\n\n\n\nWork Done\n\n\t\n\nAdd the duration for which the user has worked:\n\nTime Unit: Select the unit of time. For example, minutes.\n\nDuration: Enter (map) a numerical value indicating the duration of the work done in conjunction to the above selected unit.\n\n\n\n\nItem ID\n\n\t\n\nEnter (map) the ticket or incident on which the user has worked.\n\n\n\n\nDate Time\n\n\t\n\nEnter (map) the date for which you want to add the work log.\n\n\n\n\nDescription\n\n\t\n\nEnter (map) the work log details.\n\n\n\n\nWork Log Type\n\n\t\n\nSelect or map the work log type:\n\nBillable\n\nNon-billable\n\n\n\n\nRemaining Time\n\n\t\n\nAdd the remaining time to complete the work:\n\nTime Unit: Select the unit of time. For example, minutes.\n\nDuration: Enter (map) a numerical value indicating the duration of work in conjunction to the above selected unit.\n\nUpdate a Work log\n\nUpdates a work log.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nWork Log ID\n\n\t\n\nSelect or map the Work Log ID whose details you want to update.\n\n\n\n\nDate Time\n\n\t\n\nEnter (map) the date and time on which the work took place.\n\n\n\n\nDescription\n\n\t\n\nEnter (map) the work log details.\n\n\n\n\nWork Log Type\n\n\t\n\nSelect or map the work log type:\n\nBillable\n\nNon-billable\n\n\n\n\nWork Done\n\n\t\n\nEnter (map) the duration of work done:\n\nTime Unit: Select the unit of time. For example, minutes.\n\nDuration: Enter (map) a numerical value indicating the duration in conjunction with the above selected unit.\n\n\n\n\nRemaining Time\n\n\t\n\nEnter (map) the remaining work hours to complete the work:\n\nTime Unit: Select the unit of time. For example, minutes.\n\nDuration: Enter (map) a numerical value indicating the duration in conjunction with the above-selected unit.\n\nGet a Work log\n\nRetrieves a work log.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nWork Log ID\n\n\t\n\nSelect or map the Work Log ID whose details you want to retrieve.\n\nSearch Work logs\n\nSearches for work logs or lists them all.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nProject ID\n\n\t\n\nSelect or map the Project ID whose work logs you want to search.\n\n\n\n\nRelease ID\n\n\t\n\nSelect or map the Release ID whose work logs you want to search.\n\n\n\n\nInclude Sub Releases Items\n\n\t\n\nSelect whether to include items belonging to the sub-releases of the release.\n\n\n\n\nInclude Inactive Releases\n\n\t\n\nWhether to include items belonging to inactive releases.\n\n\n\n\nAssigned to Type\n\n\t\n\nSelect or map the option to choose either a user or a customer to search the work logs.\n\n\n\n\nAssigned to ID\n\n\t\n\nSelect or map the assignee to search the work logs related to the specified ID.\n\n\n\n\nCustomer Type\n\n\t\n\nSelect or map an option to choose the customer type:\n\nContact\n\nCustomer\n\n\n\n\nCustomer ID\n\n\t\n\nSelect or map the Customer ID whose work logs you want to search.\n\n\n\n\nContact ID\n\n\t\n\nSelect or map the Contact ID whose work logs you want to search.\n\n\n\n\nItem Type\n\n\t\n\nSelect or map the item type whose work logs you want to search.\n\n\n\n\nItem ID\n\n\t\n\nSelect or map the Item ID whose work logs you want to search.\n\n\n\n\nStart Date\n\n\t\n\nEnter (map) the date to search the work logs that were created on or after the specified date. See the list of supported date and time formats.\n\n\n\n\nEnd Date\n\n\t\n\nEnter (map) the date to search the work logs that were created on or before the specified date. See the list of supported date and time formats.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of work logs Make will return during one execution cycle.\n\nDelete a Work log\n\nDeletes a work log.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nWork Log ID\n\n\t\n\nSelect or map the Work Log ID you want to delete.\n\nOther\n\nYou can watch releases, customers, and call APIs using the following modules.\n\nWatch Releases\n\nTriggers when a new release has been created.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of releases Make will return during one execution cycle.\n\nWatch Emails\n\nTriggers when a new email has been sent/received.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nLimit\n\n\t\n\nSet the maximum number of emails Make will return during one execution cycle.\n\nMake an API Call\n\nPerforms an arbitrary authorized API call.\n\nConnection\n\n\t\n\nEstablish a connection to your Axosoft account.\n\n\n\n\nURL\n\n\t\n\nEnter a path relative to https://api.apollo.io/. For example,/v1/accounts.\n\nNote\n\nFor the list of available endpoints, refer to the Axosoft API Documentation.\n\n\n\n\nMethod\n\n\t\n\nGET\n\nto retrieve information for an entry.\n\nPOST\n\nto create a new entry.\n\nPUT\n\nto update/replace an existing entry.\n\nPATCH\n\nto make a partial entry update.\n\nDELETE\n\nto delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter the desired request headers. You don't have to add authorization headers; we already did that for you.\n\n\n\n\nQuery String\n\n\t\n\nEnter the request query string.\n\n\n\n\nBody\n\n\t\n\nEnter the body content for your API call.\n\nExample of Use - Get Users\n\nThe following API call returns users from your Axosoft account:\n\nURL:\n\nv5/users\n\nMethod\n\nGET\n\nMatches of the search can be found in the module's Output under Bundles > Body > data.\n\nIn our example, 2 were returned:\n\nAxosoft\nConnect Axosoft with Make\nCustomers\nWatch Customers\nCreate a Customer\nUpdate a Customer\nGet a Customer\nSearch Customers\nDelete a Customer\nContacts\nWatch Contacts\nCreate a Contact\nUpdate a Contact\nGet a Contact\nSearch Contacts\nDelete a Contact\nWork Items (Features)\nWatch Work Items\nCreate a Work Item\nUpdate a Work Item\nGet a Work Item\nSearch Work Items\nDelete a Work Item\nTickets (Incidents)\nWatch Tickets\nCreate a Ticket\nUpdate a Ticket\nGet a Ticket\nDelete a Ticket\nProjects\nWatch Projects\nGet a Project\nSearch Projects\nDelete a Project\nWork logs\nWatch Work logs\nCreate a Work log\nUpdate a Work log\nGet a Work log\nSearch Work logs\nDelete a Work log\nOther\nWatch Releases\nWatch Emails\nMake an API Call\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Bitrix24",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/bitrix24",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsBitrix24\nBitrix24\n\nThe Bitrix24 modules allow you to watch, create, update, list, retrieve, and delete the contact, companies, leads, deals, invoices, and tasks in your Bitrix24 account.\n\nTo get started with Bitrix24, create an account at bitrix24.com/.\n\nNote\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Bitrix24 to Make\n\nTo connect Bitrix24 app, you need to obtain a Client ID and Client Secret values by creating a custom app in the Bitrix Marketplace.\n\nGo to the Bitrix apps site and install the Integromat app.\n\nIn the application, select Applications > Market.\n\nClick Developer Resources > Other > Local Application.\n\nEnter the details as specified below and click Save.\n\nServer or Static\n\n\t\n\nSelect Server.\n\n\n\n\nYour Handler path\n\n\t\n\nEnter https://www.integromat.com/oauth/cb/bitrix24\n\n\n\n\nInitial installation path\n\n\t\n\nLeave blank.\n\n\n\n\nScript only (no user interface)\n\n\t\n\nSelect the checkbox.\n\n\n\n\nAssign Permissions\n\n\t\n\nClick +select and assign the following permissions:\n\nCRM\n\nSite\n\nTask\n\nUsers\n\nWorkgroups\n\nPayment systems\n\nOnline Store\n\nCopy the Client ID and Client Secret values to a safe place.\n\nLog in to your Make account, and add a module from the Bitrix24 app into a Make scenario.\n\nClick Add next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Domain URL field, enter your Bitrix24 account's URL address. For example, https://domain_name.bitrix24.com.\n\nClick Advanced Settings. In the Client ID and Client Secret field, enter the details copied in step 5.\n\nClick Continue.\n\nYou have successfully connected the Bitrix24 app with Make and can now build scenarios.\n\nContact\n\nYou can watch, create, update, search, retrieve, and delete the contacts using the following modules.\n\nWatch Contacts\nSearch Contacts\nGet a Contact\nCreate a Contact\nUpdate a Contact\nDelete a Contact\nCompany\n\nYou can watch, create, update, search, retrieve, and delete the companies.\n\nWatch Companies\nSearch Companies\nGet a Company\nCreate a Company\nUpdate a Company\nDelete a Company\nLead\n\nYou can watch, create, update, search, retrieve, and delete the leads using the following modules.\n\nWatch Leads\nSearch Leads\nGet a Lead\nCreate a Lead\nUpdate a Lead\nDelete a Lead\nDeal\n\nYou can watch, create, update, retrieve, search, and delete the deals using the following modules.\n\nWatch Deals\nSearch Deals\nGet a Deal\nCreate a Deal\nUpdate a Deal\nDelete a Deal\nInvoice\n\nYou can watch, create, search, retrieve, and delete the invoices from the following modules.\n\nWatch Invoices\nSearch Invoices\nGet an Invoice\nCreate an Invoice\nDelete an Invoice\nTask\n\nYou can watch, create, update, search, retrieve, and delete the task using the followig modules.\n\nWatch Tasks\nSearch Tasks\nGet a Task\nCreate a Task\nUpdate a Task\nDelete a Task\nAdd a Checklist to a Task\nOthers\n\nYou can call APIs using the following module.\n\nMake an API Call\n\nPerforms an arbitrary authorized API call.\n\nConnection\n\n\t\n\nEstablish a connection to your Bitrix24 account.\n\n\n\n\nURL\n\n\t\n\nEnter a path relativeto https://yourdomain.bitrix24.region/rest. For example, /crm.contact.list.\n\nFor the list of available endpoints, refer to the Bitrix24 API Documentation.\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET \n\nto retrieve information for an entry.\n\nPOST \n\nto create a new entry.\n\nPUT \n\nto update/replace an existing entry.\n\nPATCH \n\nto make a partial entry update.\n\nDELETE \n\nto delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter the desired request headers. You don't have to add authorization headers; we have already done that for you.\n\n\n\n\nQuery String\n\n\t\n\nEnter the request query string.\n\n\n\n\nBody\n\n\t\n\nEnter the body content for your API call.\n\nExample of Use - List Companies\n\nThe following API call returns all companies in your Bitrix24 account:\n\nURL: /crm.contact.list\n\nMethod: GET\n\nThe result can be found in the module's Output under Bundle > Body > result.\n\nIn our example, 3 companies were returned:\n\nBitrix24\nConnecting Bitrix24 to Make\nContact\nWatch Contacts\nSearch Contacts\nGet a Contact\nCreate a Contact\nUpdate a Contact\nDelete a Contact\nCompany\nWatch Companies\nSearch Companies\nGet a Company\nCreate a Company\nUpdate a Company\nDelete a Company\nLead\nWatch Leads\nSearch Leads\nGet a Lead\nCreate a Lead\nUpdate a Lead\nDelete a Lead\nDeal\nWatch Deals\nSearch Deals\nGet a Deal\nCreate a Deal\nUpdate a Deal\nDelete a Deal\nInvoice\nWatch Invoices\nSearch Invoices\nGet an Invoice\nCreate an Invoice\nDelete an Invoice\nTask\nWatch Tasks\nSearch Tasks\nGet a Task\nCreate a Task\nUpdate a Task\nDelete a Task\nAdd a Checklist to a Task\nOthers\nMake an API Call\nExample of Use - List Companies\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "AfterShip",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/aftership",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsAfterShip\nAfterShip\n\nWith AfterShip modules in Make, you can create and monitor your trackings, manage notifications, and make API calls.\n\nTo get started with AfterShip, create an account at aftership.com.\n\nNote\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory.\n\nConnecting AfterShip to Make\n\nTo make a connection you need an API key.\n\nLog in to your AfterShip account.\n\nClick Settings, then click API Keys.\n\nA default API is already created. You use this one or create a new one. Copy the API key to your clipboard.\n\nGo to your Make scenario and choose the AfterShip module you want to use.\n\nUnder Connection, click Add.\n\nGive your new connection a name.\n\nPaste the API key in the field below.\n\nClick Save.\n\nYou have successfully created the connection.\n\nTrackings\nSearch Trackings\nGet a Tracking\nCreate a Tracking\nUpdate a Tracking\nDelete a Tracking\nNotifications\nGet a Notification\nAdd a Notification\nRemove a Notification\nOther\nMake an API Call\nExample of use - List trackings\nAfterShip\nConnecting AfterShip to Make\nTrackings\nSearch Trackings\nGet a Tracking\nCreate a Tracking\nUpdate a Tracking\nDelete a Tracking\nNotifications\nGet a Notification\nAdd a Notification\nRemove a Notification\nOther\nMake an API Call\nExample of use - List trackings\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Cloud BOT",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/cloud-bot",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsCloud BOT\nCloud BOT\n\nWith Cloud BOT modules in Make, you can manage your BOTs, and the transfer of files to your BOTs in your Cloud BOT account.\n\nTo use the Cloud BOT modules, you must have a Cloud BOT account. You can create an account at c-bot.pro/en.\n\nRefer to the Cloud BOT API documentation for a list of available endpoints.\n\nConnect Cloud BOT to Make\n\nTo establish the connection, you must:\n\nEnable the external connection setting on Cloud BOT.\n\nEstablish the connection in Make.\n\nEnable the external connection setting on Cloud BOT\n\nTo enable the external connection setting on your Cloud BOT account:\n\nLog in to your Cloud BOT account.\n\nIn the left sidebar, click Connect.\n\nIn the External Connections section, turn on the switch.\n\nIn the BOT to connect section, turn on the switch of the appropriate BOT.\n\nThe external connection is enabled.\n\nEstablish the connection with Cloud BOT in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Cloud BOT module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Click Show advanced settings and enter your custom app client credentials. For more information, refer to Cloud BOT OAuth2 API Reference.\n\nIf requested, use the following Redirect URI when creating your custom app: https://www.integromat.com/oauth/cb/cloud-bot.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Cloud BOT modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Cloud BOT Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nTriggers\n\nWatch BOT Done\n\nActions\n\nExecute BOT\n\nUpload File\n\nDownload File\n\nMake an API Call\n\nNote\n\nThis app uses webhooks to trigger a scenario when an event occurs instantly. All webhook modules have an instant tag next to their name.\n\nWhen you create a Cloud BOT webhook in Make, it is attached automatically and requires no additional set up.\n\nCloud BOT\nConnect Cloud BOT to Make\nEnable the external connection setting on Cloud BOT\nEstablish the connection with Cloud BOT in Make\nBuild Cloud BOT Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "BoondManager",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/boondmanager",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsBoondManager\nBoondManager\n\nWith BoondManager modules in Make, you can create, update, search, retrieve, and delete:\n\nactions\n\ncandidates\n\ncontacts\n\ncompanies\n\nopportunities\n\nresources\n\nTo get started with BoondManager, create an account at boondmanager.com.\n\nConnect BoondManager to Make\n\nTo connect BoondManager app, you need to obtain the user credentials.\n\nLog in to your BoondManager account.\n\nIn your Make account, insert a BoondManager module in your scenario and click the Add button next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Login and Password fields, enter your BoondManager credentials and click Save.\n\nYou have successfully connected the BoondManager app and can now build scenarios.\n\nActions\n\nYou can search, retrieve, create, and delete actions using the following modules.\n\nSearch Actions\nGet an Action\nCreate an Action\nDelete an Action\nCandidates\n\nYou can search, retrieve, create, and delete candidates using the following modules.\n\nSearch Candidates\nGet a Candidate\nCreate a Candidate\nUpdate a Candidate\nContacts\n\nYou can search, retrieve, create, update and delete contacts using the following modules.\n\nSearch Contacts\nGet a Contact\nCreate a Contact\nUpdate a Contact\nDelete a Contact\nCompanies\n\nYou can search, retrieve, create, update and delete companies using the following modules.\n\nSearch Companies\nGet a Company\nCreate a Company\nUpdate a Company\nDelete a Company\nOpportunities\n\nYou can search, retrieve, create, update and delete opportunities using the following modules.\n\nSearch Opportunities\nGet an Opportunity\nCreate an Opportunity\nUpdate an Opportunity\nDelete an Opportunity\nResources\n\nYou can search, retrieve, create, update and delete resources using the following modules.\n\nSearch Resources\nGet a Resource\nCreate a Resource\nUpdate a Resource\nDelete a Resource\nOther\n\nYou can call APIs using the following module.\n\nNote\n\nFor the list of available endpoints, refer to the BoondManager API documentation.\n\nMake an API Call\nBoondManager\nConnect BoondManager to Make\nActions\nSearch Actions\nGet an Action\nCreate an Action\nDelete an Action\nCandidates\nSearch Candidates\nGet a Candidate\nCreate a Candidate\nUpdate a Candidate\nContacts\nSearch Contacts\nGet a Contact\nCreate a Contact\nUpdate a Contact\nDelete a Contact\nCompanies\nSearch Companies\nGet a Company\nCreate a Company\nUpdate a Company\nDelete a Company\nOpportunities\nSearch Opportunities\nGet an Opportunity\nCreate an Opportunity\nUpdate an Opportunity\nDelete an Opportunity\nResources\nSearch Resources\nGet a Resource\nCreate a Resource\nUpdate a Resource\nDelete a Resource\nOther\nMake an API Call\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Automation Anywhere (Cloud)",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/automation-anywhere--cloud-",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsAutomation Anywhere (Cloud)\nAutomation Anywhere (Cloud)\n\nWith the Automation Anywhere modules in Make you can:\n\ntrigger a bot\n\ncall APIs\n\nTo get started with Automation Anywhere, create an account here.\n\nConnect Automation Anywhere (Cloud) with Make\nNote\n\nTo connect to the Automation Anywhere (Cloud) app, you must have:\n\na Bot Runner license in the Automation Anywhere Control Room\n\na default device assigned to a user in the Automation Anywhere Control Room\n\nLog in to your Make and add a module from the Automation Anywhere (Cloud) app into a Make scenario .\n\nClick Add next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Control Room URL field, enter your control room URL address in the http://<domain>.my.automationanywhere.digital format. This is a URL address used to access your Automation Anywhere application.\n\nIn the Username field, enter your account's username field.\n\nYou can authenticate the Automation Anywhere account either by using API key or your account password. In the Authentication Method field, select the option and enter the value to authenticate the account.\n\nIn the API Key field, enter the API key generated in your account. Using API keys is a way to authenticate an application accessing the API, without referencing an actual user (for example, in the organizations that support SSO). The app adds the key to each API request, and the API can use the key to identify the application and authorize the request. Users can generate an API key in the AA control room. See how to generate the API key.\n\nIn the Password field, enter your account's password.\n\nClick Continue.\n\nYou have successfully established the connection and can now build scenarios .\n\nTrigger a Bot\n\nTriggers a configured bot from Automation Anywhere.\n\nThis module allows you to trigger the bot that was configured in your Automation Anywhere Control Room and execute it on the user’s default device. Only unattended automation is possible at this point.\n\nPrerequisites to deploy or trigger a bot:\n\nView and Run my bots feature permissions\n\nRun and schedule permissions for the folder that contains bots\n\nAccess to Bot Runner licensed users\n\nAccess to either a default device or a device pool\n\nConnection\n\n\t\n\nEstablish a connection to your Automation Anywhere (Cloud) account.\n\n\n\n\nType of Action\n\n\t\n\nSelect the action type for the bot:\n\nTrigger the Bot: deploys a bot on the user’s default device and doesn’t wait for the Bot execution results to proceed with the execution of the next Action Flow Apps.\n\nTrigger and Wait for Bot Result: deploys a bot on the user’s default device and waits for the Bot execution results to proceed with the execution of the Action Flow. The Bot execution results can be used as an input in the next Apps in the flow.\n\n\n\n\nBot\n\n\t\n\nSelect or map the bot (created and pre-configured in Automation Anywhere) you want to trigger and enter the details in the fields that auto-populate based on the selected bot.\n\nMap function allows a user to map a value from one of the previous modules instead of selecting a Bot from the dropdown list.\n\nFor example, to dynamically define which bot has to be triggered based on the conditions fulfilled or not in the previous apps of the flow.\n\nIf there are any input variables configured for the bot in your Automation Anywhere account, they would be shown in the app when you select the bot. Users can either enter the data manually or use the output values from the previous apps.\n\nOther\n\nYou can make API calls using the following module.\n\nMake an API Call\n\nPerforms an arbitrary authorized API call.\n\nConnection\n\n\t\n\nEstablish a connection to your Automation Anywhere account.\n\n\n\n\nURL\n\n\t\n\nEnter a path relative to https://<example>.my.automationanywhere.digital/. For example, /v2/devices/pools/list.\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET\n\nto retrieve information for an entry.\n\nPOST\n\nto create a new entry.\n\nPUT\n\nto update/replace an existing entry.\n\nPATCH\n\nto make a partial entry update.\n\nDELETE\n\nto delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter the desired request headers. You don't have to add authorization headers; we already did that for you.\n\n\n\n\nQuery String\n\n\t\n\nEnter the request query string.\n\n\n\n\nBody\n\n\t\n\nEnter the request query string.\n\nExample of Use - List Device Pools\n\nThe following API call returns the device pools from your Automation Anywhere (Cloud) account:\n\nURL\n\n/v2/devices/pools/list\n\nMethod\n\nPOST\n\nMatches of the search can be found in the module's Output under Bundle > Body > list.\n\nIn our example, 1 device pool is returned:\n\nAutomation Anywhere (Cloud)\nConnect Automation Anywhere (Cloud) with Make\nTrigger a Bot\nOther\nMake an API Call\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Beds24",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/beds24",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsBeds24\nBeds24\n\nThe Beds24 modules enable you to monitor bookings in your Beds24 account.\n\nGetting Started with Beds24\n\nPrerequisites\n\nA Beds24 account\n\nIn order to use Beds24 with Make, it is necessary to have a Beds24 account. If you do not have one, you can create a Beds24 account at beds24.com.\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Beds24 to Make\n\nTo connect your Beds24 account to Make, you need to create an API key in your Beds24 account and insert it to the Watch Bookings module's Create a connection dialog together with the Property ID.\n\nWatch Booking\n\nRetrieves booking details when a booking is added.\n\nFollow these steps to connect the module to your Beds24 account:\n\n1. Log in to your Beds24 account.\n\n2. Navigate to Settings > Guest Management > Auto Actions.\n\n3. Click the Create New Action and Edit.\n\n4. Set the Trigger Action option to Auto, configure the auto action if needed, and Save the dialog.\n\n5. Navigate to Settings > Apps and Integrations > Make.\n\n6. Select the auto action you want to use for Make in the Auto Action to specify bookings to send field.\n\n7. Enter at least 16 characters long API Key.\n\n8. Set Send strategy to Repeated , check the Bookings checkbox for the room you want to watch bookings for, and click Save.\n\n9. Go to Make and open the Beds24 > Watch Bookings module's Create a connection dialog.\n\n10. Enter the API Key you have specified in step 7 and Property ID (can be found, for example, in Settings > Properties in your Beds24 account) to the respective fields and click the Continue button to establish the connection.\n\nBeeminder\n\nBeds24\nGetting Started with Beds24\nConnecting Beds24 to Make\nWatch Booking\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Accelo",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps/accelo",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPsAccelo\nAccelo\n\nWith Accelo modules in Make, you can:\n\ncreate, update, search, retrieve, and delete contacts\n\ncreate, update, search, retrieve, and delete prospects\n\nwatch, create, update, search, and retrieve requests\n\ncreate, update, search, retrieve, start, pause, and delete timers\n\nwatch assigned tasks\n\nTo get started with Accelo, create an account at accelo.com\n\nConnect Accelo to Make\n\nTo connect Accelo app, you need to obtain the Subdomain, Client ID, and Client Secret values from your Accelo account and insert them into the Accelo module scenario.\n\nLog in to your Accelo account.\n\nClick Settings > API > Register API, enter the details as provided in the table, and click Save.\n\nApplication Name\n\n\t\n\nEnter the app name.\n\n\n\n\nApplication Email\n\n\t\n\nEnter the contact email address for the app.\n\n\n\n\nApplication Type\n\n\t\n\nSelect the application type. For example, web.\n\n\n\n\nRedirect URI\n\n\t\n\nEnter https://www.integromat.com/oauth/cb/accelo.\n\n\n\n\nIP Restriction\n\n\t\n\nEnter comma-separated IP addresses to which you want to restrict API access.\n\n\n\n\nDomain Restriction\n\n\t\n\nEnter comma-separated domains to which you want to restrict API access.\n\nCopy the Client ID and Client Secret to a safe place.\n\nLog in to your Make account, insert any Accelo module in to scenario, and click the Add button next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Subdomain field, enter the domain from your account URL address in the format, https://<subdomain>.accelo.com.\n\nIn the Client ID, and Client Secret fields, enter the details copied in step 4, and click Save.\n\nYou have successfully established the connection. You can now edit your scenario and add more Accelo modules. If your connection needs reauthorization at any point, follow the connection renewal steps here.\n\nFor module descriptions, visit the Accelo API Documentation.\n\nBuild Accelo Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nContacts\n\nSearch Contacts\n\nGet a Contact\n\nCreate a Contact\n\nUpdate a Contact\n\nDelete a Contact\n\nProspects\n\nSearch Prospects\n\nGet a Project\n\nCreate a Prospect\n\nUpdate a Prospect\n\nDelete a Prospect\n\nRequests\n\nWatch New Request\n\nSearch Requests\n\nGet a Request\n\nUpdate a Request\n\nTimers\n\nSearch Timers\n\nGet a Timer\n\nCreate a Timer\n\nUpdate a timer\n\nDelete a Timer\n\nStart a Timer\n\nPause a Timer\n\nOther\n\nWatch Task Assigned\n\nMake an API Call\n\nAccelo\nConnect Accelo to Make\nBuild Accelo Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Business Operations and ERPs",
      "url": "https://www.make.com/en/help/apps/business-operations-and-erps",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Operations and ERPs\nBusiness Operations and ERPs\nIn this section\nAccelo\nAfterShip\nAxosoft\nAutomation Anywhere (Cloud)\nBeds24\nBitrix24\nBoondManager\nCloud BOT\nCoupa\nDEAR Inventory\nDHL\neasybill\nEmporix Orchestration Engine\nFilestage\nFinolog\nFloat\nFlowlu\nInfor M3\nJobNimbus\nKatana Cloud Inventory\nKlickTipp\nMailchimp Transactional Email\nMaintainX\nMetabase\nMicrosoft Dynamics 365 Business Central\nMuleSoft\nNetSuite\nOracle Fusion Cloud ERP\nOrder Desk\nPrintify\nRentman\nSage Intacct\nSAP ECC Agent\nSAP S/4HANA Public Cloud\nServiceTitan\nShipday\nShippo\nToggl Plan\nUnleashed Software\nVend\nWello Solutions\nWeSupply\nWhen I Work\nWorkday\nWorkday Financial Management\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "ZoomInfo",
      "url": "https://www.make.com/en/help/apps/business-intelligence/zoominfo",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceZoomInfo\nZoomInfo\n\nWith ZoomInfo modules in Make, you can manage companies, contacts, scoops, hierarchies, and locations in your ZoomInfo account.\n\nTo use the ZoomInfo modules, you must have a ZoomInfo account. You can create an account at zoominfo.com.\n\nRefer to the ZoomInfo API documentation for a list of available endpoints.\n\nConnect ZoomInfo to Make\n\nTo connect your ZoomInfo account to Make, you can choose between two different connection methods:\n\nZoomInfo (PKI). This options requires that you first obtain your Client ID and Private key in ZoomInfo.\n\nZoomInfo (username and password)\n\nEstablish the connection with ZoomInfo in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a ZoomInfo module to your scenario, and click Create a connection.\n\nChoose a Connection type.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIf you choose ZoomInfo (PKI) in the Connection type field, enter your ZoomInfo username, Client ID, and Private Key values you obtained in ZoomInfo.\n\nIf you choose ZoomInfo (username and password) in the Connection type field, enter your ZoomInfo username and password.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more ZoomInfo modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nObtain your Client ID and Private key in ZoomInfo\nBuild ZoomInfo Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nCompany\n\nSearch Companies\n\nGet a Company\n\nEnrich Company\n\nContact\n\nSearch Contacts\n\nGet a Contact\n\nEnrich Contact\n\nNote: Enter the unique combination of parameters required to make a successful request. For example, to match a contact, you must use one of the following combinations of parameters to construct your input:\n\nPerson ID OR Email Address OR Phone. Because these values are unique to a single person, you can use any one of these values to search without providing any additional parameters. You can optionally combine one of these values with a Company ID / Company Name.\n\nFirst Name AND Last Name AND Company ID / Company Name. Combining these values effectively results in a unique person.\n\nFull Name AND Company ID / Company Name. Combining these values effectively results in a unique person.\n\nFor more information, see the ZoomInfo API documentation.\n\nHierarchy\n\nEnrich Hierarchy\n\nLocation\n\nEnrich Location\n\nScoops\n\nSearch Scoops\n\nGet a Scoop\n\nEnrich Scoop\n\nOther\n\nList Company's Enrich Fields\n\nGet Usage\n\nMake an API Call\n\nZoomInfo\nConnect ZoomInfo to Make\nEstablish the connection with ZoomInfo in Make\nObtain your Client ID and Private key in ZoomInfo\nBuild ZoomInfo Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Vincario VIN Decoder",
      "url": "https://www.make.com/en/help/apps/business-intelligence/vincario-vin-decoder",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceVincario VIN Decoder\nVincario VIN Decoder\n\nWith Vincario VIN Decoder modules in Make, you can perform VIN decode and VIN stolen check and get details for decoding and vehicle market value.\n\nTo get started with Vincario VIN Decoder, create an account at vindecoder.eu.\n\nNote\n\nRefer to the Vincario VIN Decoder API documentation for the list of available endpoints.\n\nThe latest API version returns 40 vehicle details on average (European market).\n\nConnect Vincario VIN Decoder to Make\n\nTo connect Vincario VIN Decoder app, you must obtain the API key and API secret values from your account.\n\nLog in to your Vincario VIN Decoder account.\n\nClick You Profile Name > API. Fill out the request form to receive the API key and secret values.\n\nLog in to your Make account, insert a Vincario VIN Decoder module in your scenario, and click the Add button next to the Connection field.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key and API Secret fields, enter the details received in Step 2 and click Save.\n\nYou have successfully established the connection. You can now edit your scenario and add more Vincario VIN Decoder modules. If your connection needs reauthorization at any point, follow the connection renewal steps here.\n\nBuild Vincario VIN Decoder Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nGet Available Details for Decoding\n\nReturns a list of vehicle details that can be decoded with the VIN Decoder API service. This endpoint is Free of charge.\n\nPerform a VIN Decode\n\nDecodes VIN (Vehicle Identification Number) and returns a full vehicle specification like Make, Model Year, Engine details etc.,\n\nPerform a VIN Stolen Check\n\nPerforms a real-time check of the entered VIN in national police databases of stolen vehicles of Czech Republic, Hungary, Lithuania, Romania, Slovenia, Slovakia, and Vincario's own database of stolen vehicles.\n\nGet a Vehicle Market Value\n\nReturns statistical data about price and odometer of the vehicles on the market. Response also contains input data used for computation.\n\nTypical Use Cases of Vincario VIN Decoder\n\nFleet Management\n\nIdentify all your vehicles in order to measure CO2 emissions, understand the ratio of electric vehicles to your fleet or expand your services globally. Automotive AftermarketDecode a vehicle identification number to get correct spare part identificati\n\nTelematics Solutions\n\nDecipher a VIN obtained from OBD2/CAN bus protocols to recognize a vehicle specification for further app communication and settings.\n\nCar Rental & Car Sharing\n\nSimplify a vehicle onboarding process with vehicle specification pre-filled based on a VIN code lookup.\n\nCar Insurance & Leasing Services\n\nVIN lookup vehicle type, make, model, model year, engine details and transmission to properly calculate vehicle insurance or leasing costs.\n\nAutomotive Aftermarket\n\nDecode a vehicle identification number to get correct spare part identification.\n\nData Automation and VIN Validation\n\nAutomate vehicle data submissions, save time, reduce human based errors and misspellings by pre-filling vehicle data into application form using a VIN lookup service.\n\nVincario VIN Decoder\nConnect Vincario VIN Decoder to Make\nBuild Vincario VIN Decoder Scenarios\nTypical Use Cases of Vincario VIN Decoder\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Userflow",
      "url": "https://www.make.com/en/help/apps/business-intelligence/userflow",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceUserflow\nUserflow\nGetting Started with Userflow\n\nThe Userflow modules allow you to monitor and manage jobs, tasks, and import&export files in your Userflow account.\n\nPrerequisites\n\nA Userflow account\n\nIn order to use Userflow with Make, it is necessary to have a Userflow account. If you do not have one, you can create a Userflow account at getuserflow.com/create-account.\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Userflow to Make\n\nTo connect your Userflow account to Make you need to obtain the API Key from your Userflow account and insert it in the Create a connection dialog in the Make module.\n\n1. Log in to your Userflow account and open your Dashboard.\n\n2. Click Settings > API.\n\n3. Click New API Key.\n\n4. Enter a name for the API Key and click Create API Key.\n\n5. Copy the API Key to your clipboard.\n\n6. Go to Make and open the Userflow module's Create a connection dialog.\n\n7. In the Connection name field, enter a name for the connection.\n\n8. In the API Key field, enter the API Key copied in step 5.\n\n9. Click Continue.\n\nThe connection has been established.\n\nUsers\nWatch Users\nCreate or Update a User\nEvents\nWatch Events\nTrack an Event\nOther\nMake an API Call\nExample of Use - List Users\nUserflow\nGetting Started with Userflow\nConnecting Userflow to Make\nUsers\nWatch Users\nCreate or Update a User\nEvents\nWatch Events\nTrack an Event\nOther\nMake an API Call\nExample of Use - List Users\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Segment",
      "url": "https://www.make.com/en/help/apps/business-intelligence/segment",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceSegment\nSegment\nGetting Started with Segment\n\nThe Segment modules allow you to identify users and track their actions in your Segment account.\n\nPrerequisites\n\nA Segment account\n\nIn order to use Segment with Make, it is necessary to have a Segment account. If you do not have one, you can create a Segment account at app.segment.com/signup.\n\nNotice\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Segment to Make\n\nTo connect your Segment account to Make, you need to create a token.\n\n1. Log in to your Segment account.\n\n2. Open Settings from the bottom-left corner.\n\n3. Navigate to the Access Management section, and click on the Tokens tab.\n\n4. Click on the Create Token button.\n\n5. Enter the token description, select the Workspace Owner option, and click the Create button.\n\n6. Copy the Created Token, and store it in a safe place.\n\n7. Go to Make, and open the Segment's module Create a connection dialog.\n\n8. Enter the token you have created in step 5, and click the Continue button to establish the connection.\n\nActions\nIdentify\n\nThis module lets you tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about them.\n\nNotice\n\nSegment recommends calling the Identify module a single time when the user’s account is first created, and only identifying again later when their traits change.\n\nConnection\n\n\t\n\nEstablish a connection to your Segment account.\n\n\n\n\nWrite Key\n\n\t\n\nObtain the Write Key from the Source. To find a write key, you first need to create a non-cloud Source, such as a website, server, or mobile source.\n\n1. Open Sources.\n\n2. Select the Segment Source you want to use. E.g., Autopilot.\n\n3. Copy the Write Key.\n\n4. Insert the write key in the respective field in Make.\n\n\n\n\nUser ID\n\n\t\n\nEnter (map) the user ID to identify a user from your source. A User ID is usually the unique identifier that you recognize a user by in your own database. For example, if you’re using the Autopilot app, it might look something like person_D97F88AD-E835-4565-AD1A-9F75C5C381F6.\n\n\n\n\nAnonymous ID\n\n\t\n\nEnter (map) the Anonymous ID. The Anonymous ID can be any pseudo-unique identifier. For example, on your servers, you can use a Session ID. If you don’t have any readily available identifier, you can always generate a new random one—e.g., UUIDs.\n\nFor more detailed information, please refer to the Segment documentation.\n\n\n\n\nTimestamp\n\n\t\n\nEnter the time in the ISO-8601 format, if you’re importing data from the past. If the event just happened, leave it out, and we’ll use the server’s time.\n\n\n\n\nTraits\n\n\t\n\nEnter the traits you know about the user.\n\nReference: Segment documentation.\n\nTrait\n\n\t\n\nDescription\n\n\n\n\naddress\n\n\t\n\nStreet address of the user, optionally containing: city, country, postalCode, state or street\n\n\n\n\nage\n\n\t\n\nAge of the user\n\n\n\n\navatar\n\n\t\n\nURL to an avatar image for the user\n\n\n\n\nbirthday\n\n\t\n\nUser’s birthday\n\n\n\n\ncompany\n\n\t\n\nCompany the user represents, optionally containing: name (a String), id (a String or Number), industry (a String), employee_count (a Number), or plan (a String)\n\n\n\n\ncreatedAt\n\n\t\n\nDate the user’s account was first created\n\nWe recommend ISO-8601 date strings.\n\n\n\n\ndescription\n\n\t\n\nDescription of the user\n\n\n\n\nemail\n\n\t\n\nEmail address of the user\n\n\n\n\nfirstName\n\n\t\n\nFirst name of the user\n\n\n\n\ngender\n\n\t\n\nGender of the user\n\n\n\n\nid\n\n\t\n\nUnique ID in your database for the user\n\n\n\n\nlastName\n\n\t\n\nLast name of the user\n\n\n\n\nname\n\n\t\n\nFull name of the user\n\nIf you only pass a first and last name, we’ll automatically fill in the full name for you.\n\n\n\n\nphone\n\n\t\n\nPhone number of the user\n\n\n\n\ntitle\n\n\t\n\nTitle of the user, usually related to their position at their specific company\n\nExample: “VP of Engineering”\n\n\n\n\nusername\n\n\t\n\nUser’s username\n\nThis should be unique to each user, like the usernames of Twitter or GitHub.\n\n\n\n\nwebsite\n\n\t\n\nWebsite of the user\n\n\n\n\nCustom Traits\n\n\t\n\nThe custom trait names should not match the reserved names, as listed in the official Segment documentation.\n\nTrack\n\nThe module allows you to record any actions your users perform, along with any properties that describe the action.\n\nConnection\n\n\t\n\nEstablish a connection to your Segment account.\n\n\n\n\nWrite Key\n\n\t\n\nObtain the Write Key from the Source. To find a write key, you first need to create a non-cloud Source such as a website, server, or mobile source.\n\n1. Open Sources.\n\n2. Select the Segment Source you want to use. E.g., Autopilot.\n\n3. Copy the Write Key.\n\n4. Insert the write key in the respective field in Make.\n\n\n\n\nEvent Name\n\n\t\n\nEnter the name of the action that the user has performed. For more detailed information about events, please refer to the Segment documentation.\n\n\n\n\nUser ID\n\n\t\n\nEnter (map) the user ID to identify the user from your source. A User ID is usually the unique identifier that you recognize a user by in your own database. For example, if you’re using the Autopilot app, it might look something like person_D97F88AD-E835-4565-AD1A-9F75C5C381F6.\n\n\n\n\nAnonymous ID\n\n\t\n\nEnter (map) the Anonymous ID. The Anonymous ID can be any pseudo-unique identifier. For example, on your servers you can use a Session ID. If you don’t have any readily available identifier, you can always generate a new random one—e.g., UUIDs.\n\nFor more detailed information please refer to the Segment documentation.\n\n\n\n\nTimestamp\n\n\t\n\nEnter the time in the ISO-8601 format if you’re importing data from the past. If the event just happened, leave it out, and we’ll use the server’s time.\n\n\n\n\nCurrency\n\n\t\n\nEnter the currency of the revenue an event resulted in.\n\nThis should be sent in the ISO 4127 format. If this is not set, we assume the revenue to be in US dollars.\n\n\n\n\nRevenue\n\n\t\n\nEnter the amount of revenue an event resulted in.\n\nThis should be a decimal value, so a shirt worth $19.99 would result in a revenue of 19.99.\n\n\n\n\nValue\n\n\t\n\nThis is an abstract “value” to associate with an event.\n\nThis is typically used in situations where the event doesn’t generate real-dollar revenue, but has an intrinsic value to a marketing team, like newsletter signups.\n\n\n\n\nCustom Properties\n\n\t\n\nAdd custom properties.\n\nProperties are extra pieces of information you can tie to events you track. They can be anything that will be useful while analyzing the events later. We recommend sending properties whenever possible, because they give you a more complete picture of what your users are doing.\n\nNote\n\nThe custom property names should not match the reserved names, as listed in the official Segment documentation.\n\nMake an API Call\n\nAllows you to perform a custom API call. Uses HTTP Tracking API.\n\nConnection\n\n\t\n\nEstablish a connection to your Segment account.\n\n\n\n\nURL\n\n\t\n\nEnter a path relative to https://api.segment.io. For example: /v1/group.\n\nNote\n\nFor the list of available endpoints, refer to the Segment HTTP API Documentation.\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET to retrieve information for an entry.\n\nPOST to create a new entry.\n\nPUT to update/replace an existing entry.\n\nPATCH to make a partial entry update.\n\nDELETE to delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter the desired request headers. You don't have to add authorization headers; we've already added these for you.\n\n\n\n\nQuery String\n\n\t\n\nEnter the request query string.\n\n\n\n\nBody\n\n\t\n\nEnter the body content for your API call.\n\nExample of Use - Associate a User With a Group\n\nThe following API call associates an identified user with a group in your Segment account:\n\nURL: /v1/group/\n\nMethod: POST\n\nHeaders:\n\nKey: Content-Type\n\nValue: application/json\n\nKey: authorization\n\nValue: Basic {{base64(\"your_Write_Key:\")}}\n\nBody:\n\n{\"userId\":\"User_id_of_the_user_you_want_to_associate_to_group\",\"groupId\":\"target_Group_id\"}\n\nIf the action is successfully completed, you can find the success: true information in the module's Output under Bundle > Body:\n\nSegment\nGetting Started with Segment\nConnecting Segment to Make\nActions\nIdentify\nTrack\nMake an API Call\nExample of Use - Associate a User With a Group\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Tableau",
      "url": "https://www.make.com/en/help/apps/business-intelligence/tableau",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceTableau\nTableau\n\nWith Tableau modules in Make, you can watch data sources and manage projects, extract refresh tasks, users, and data sources in your Tableau account.\n\nTo get started with Tableau, create a paid account at tableau.com. For subscription information, refer to the Tableau Pricing page.\n\nRefer to the Tableau API documentation for a list of available endpoints.\n\nConnect Tableau to Make\n\nTo establish the connection:\n\nLog in to your Make account, add a Tableau module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Choose Your Server field, select either Cloud or On Premise.\n\nIn the Server or Server URL field, enter the base URL of your Tableau server excluding tableau.com.\n\nFor Tableau Online, include the pod name when entering your base URL. For example, if your URL is https://10ay.online.tableau.com/#, enter 10ay.online.\n\nIn the Username and Password fields, enter your Tableau login credentials.\n\nIn the Site Name field, enter your Tableau site name. This field is not required for Tableau Server accounts.\n\nYour site name can be found in the URL of your Tableau server after site/. For example, if your URL is https://10ay.online.tableau.com/#/site/MarketingTeam/workbooks, enter MarketingTeam.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Tableau modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Tableau Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nData Sources\n\nWatch New Data Source\n\nWatch Data Source Updated\n\nWatch Data Source Deleted\n\nWatch Data Source Refresh Started\n\nWatch Data Source Refresh Failed\n\nWatch Data Source Refresh Succeeded\n\nWatch Data Sources\n\nSearch Data Sources\n\nGet a Data Source\n\nDownload a Data Source\n\nUpdate a Data Source\n\nAdd a Tag to a Data Source\n\nDelete a Tag from a Data Source\n\nDelete a Data Source\n\nProjects\n\nWatch Projects\n\nSearch Projects\n\nCreate a Project\n\nUpdate a Project\n\nDelete a Project\n\nExtract Refresh Tasks\n\nList Extract Refresh Tasks\n\nGet an Extract Refresh Task\n\nDelete an Extract Refresh Task\n\nUsers\n\nSearch Users\n\nGet a User\n\nCreate a User\n\nUpdate a User\n\nDelete a User\n\nOther\n\nMake an API Call\n\nTableau\nConnect Tableau to Make\nBuild Tableau Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "SegMetrics",
      "url": "https://www.make.com/en/help/apps/business-intelligence/segmetrics",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceSegMetrics\nSegMetrics\n\nWith the SegMetrics modules, you can add, update and delete the contact, tag, order, and subscription in your SegMetrics account.\n\nTo get started with the SegMetrics, create an account at segmetrics.io\n\nNote\n\nThe module dialog fields that are displayed in bold (in the Make ,scenario not in this documentation article) are mandatory!\n\nConnect Segmetrics with Make\n\nTo connect the SegMetrics app with the Make:\n\nLog in to your SegMetrics account.\n\nClick Settings > Account Settings. Copy the Account ID to a safe place.\n\nClick Integrations.\n\nSelect the kind of integration you want to make either custom payments or custom Ads.\n\nEnter a name for the integration and click Create Your Custom Integration.\n\nCopy the Account ID, Integration ID, and API Key details to a safe place.\n\nLog in to your Make and add a module from the SegMetrics into a Make scenario.\n\nClick Add next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the API Key, Account ID, and Integration ID fields, enter the details copied in steps 2 and 6 respectively, and click Save.\n\nYou have successfully connected the SegMetrics app with Make and can now build scenarios.\n\nContacts and Tags\n\nYou can add, update, and delete the contacts, and contact tags using the following modules.\n\nAdd/Update a Contact\nDelete a Contact\nAdd Tag to Contact\nDelete a Tag\nOrders\n\nYou can add, update, and delete the order using the following modules.\n\nAdd/Update an Order\nDelete an Order\nSubscriptions\n\nYou can add, update, and delete the subscriptions.\n\nAdd/Update a Subscription\nDelete a Subscription\nOther\n\nYou can call APIs and record ad performance using the following modules.\n\nRecord Ad Performance\nMake an API Call\nSegMetrics\nConnect Segmetrics with Make\nContacts and Tags\nAdd/Update a Contact\nDelete a Contact\nAdd Tag to Contact\nDelete a Tag\nOrders\nAdd/Update an Order\nDelete an Order\nSubscriptions\nAdd/Update a Subscription\nDelete a Subscription\nOther\nRecord Ad Performance\nMake an API Call\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "RocketReach",
      "url": "https://www.make.com/en/help/apps/business-intelligence/rocketreach",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceRocketReach\nRocketReach\n\nWith RocketReach modules in Make, you can monitor lookups, search for profiles and look for profiles in your RocketReach account.\n\nTo use the RocketReach modules, you must have a You can create an account at rocketreach.co.\n\nRefer to the RocketReach API documentation for a list of available endpoints.\n\nConnect RocketReach to Make\n\nTo establish the connection, you must:\n\nObtain your API key in RocketReach.\n\nEstablish the connection in Make.\n\nObtain your API key in RocketReach\n\nTo obtain your API key from your RocketReach account:\n\nLog in to your RocketReach account.\n\nIn the left sidebar, click Integrations.\n\nIn the My Account section, click API Usage & Settings.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with RocketReach in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a RocketReach module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more RocketReach modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nSet Up RocketReach Webhooks\n\nThis app uses webhooks to trigger a scenario when an event occurs instantly. All webhook modules have an instant tag next to their name.\n\nTo set up a webhook, follow these steps:\n\nAdd an RocketReach instant module to your scenario and click Create a webhook.\n\nOptional: Enter a name for the webhook in the Webhook name field.\n\nSelect the corresponding connection for the webhook in the Connection field.\n\nClick Save > Copy address to clipboard.\n\nLog in to your RocketReach account.\n\nIn the left sidebar, click Integrations.\n\nIn the My Account section, click API Usage & Settings.\n\nIn the Web Hook section, paste the address copied in step 4 into the Webhook URL field.\n\nIn the Enabled Endpoints section, enable LookupProfile.\n\nClick Create.\n\nRocketReach will now send data to Make through the webhook when the selected event occurs.\n\nBuild RocketReach Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nProfiles\n\nWatch Lookups\n\nSearch Profiles\n\nLookup a Profile\n\nOther\n\nMake an API Call\n\nRocketReach\nConnect RocketReach to Make\nObtain your API key in RocketReach\nEstablish the connection with RocketReach in Make\nSet Up RocketReach Webhooks\nBuild RocketReach Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Robolytix",
      "url": "https://www.make.com/en/help/apps/business-intelligence/robolytix",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceRobolytix\nRobolytix\n\nRobolytix is the key online analytic and monitoring tool for Robotic Process Automation using Sonar technology to evaluate, audit, monitor and improve performance of robots operating on any application or RPA platform.\n\nGetting started with Robolytix\n\nPrerequisites\n\nA Robolytix account\n\nTo use Robolytix with Make, it is necessary to have a Robolytix account. If you do not have one, you can create a Robolytix account at Robolytix.com\n\nConnecting the Robolytix service to Make\n\nTo connect your Robolytix account to Make, follow the general instructions for Connecting to services.\n\nWhen creating a connection, you are asked to provide an API key. To get your key, log in to your Robolytix account and follow the instructions. Generating API key is in more detail described in Robolytix documentation.\n\nThere are two main steps.\n\n1. From the left navigation menu, select Settings. On the Settings page, select API keys in the menu and then click on New API key button.\n\n2. Copy the unique key and add a new connection to Make with this key:\n\nOverview\nProcess monitoring\n\nProcess monitoring is performing by using Sonar checkpoints. The Sonars are at the beginning of the process, the end(s) of the process, and any other points in the process between start and end(s).\n\nSonar Technology\n\nThe Sonar Technology allows you to place Sonars in any process, including hybrid solutions, processes that use a variety of tools and applications, including possible interaction with people.\n\nSonars can be located in the Make process, but also in parts of the process outside of Make. So you can watch the whole process online, not just the robotic part.\n\nRobolytix collects real-time data from all Sonars (including those outside Make) and represents them as KPIs in dashboards.\n\nActions\nSonar\n\nEach Sonar embedded in the process contains the following settings:\n\nConnection\n\n\t\n\nEstablish a connection to your Robolytix account.\n\n\n\n\nName\n\n\t\n\nThe name of the Sonar should reflect the state of the process that indicates passing through this checkpoint.\n\n\n\n\nProcess\n\n\t\n\nSelect a process from the list. The list contains all processes from your Robolytix account. If you don't see your process in the list, make sure the process you want is existing in your Robolytix account.\n\n\n\n\nType\n\n\t\n\nThe type of sonar determines its location within the process:\n\nStart is the first checkpoint in the process\n\nContinuous are checkpoints anywhere in the process. Of course, more continuous Sonars means more powerful statistics\n\nEnd is the last checkpoint in the process. The process can have one or more \"end\" Sonars in different branches of the process\n\nError is a special type designed to receive error information for specific modules in the Make scenario. It is inserted by the \"Add error handler\" function of the module\n\nProcess run identification\n\nThe process run begins with its start, which is the first pass of “start” Sonar this process. It continues through “continuous” sonars to “end” Sonar(s). For advanced reporting, we recommend identifying each separate run process by a unique identifier.\n\nNotice\n\nThe unique identifier must be a variable generated by “start” Sonar and passed to all other Sonars in the process.\n\nIf the process starts in Make, we recommend using the “runid” variable of the starting sonar. Use the following trick to do this:\n\nWhile editing the scenario, run this scenario to pass Sonar \"start” successfully, whereby Make creates the \"runid\" variable for this scenario. Then edit all remaining sonars in the process. The “runid” variable that you add as a unique identifier is available in their settings.\n\nIf your hybrid process continues with sonars in other tools and applications outside of Make, you need to ensure that this variable is transmitting.\n\nImportant\n\nIf run identification is not set, Robolytix stores the total number of Sonar passes. There are no extended outputs about the time course of such a process. However, in some cases, this is entirely sufficient. Therefore, run identification is an optional setting.\n\nRobolytix\nGetting started with Robolytix\nConnecting the Robolytix service to Make\nOverview\nProcess monitoring\nSonar Technology\nActions\nSonar\nProcess run identification\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "MonkeyLearn",
      "url": "https://www.make.com/en/help/apps/business-intelligence/monkeylearn",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceMonkeyLearn\nMonkeyLearn\n\nThe MonkeyLearn modules allow you to create, update, and delete the classifiers, and extractors in your MonkeyLearn account.\n\nGetting Started with MonkeyLearn\n\nPrerequisites\n\nA MonkeyLearn account\n\nIn order to use MonkeyLearn with Make, it is necessary to have a MonkeyLearn account. If you do not have one, you can create a MonkeyLearn account at app.monkeylearn.com/accounts/register.\n\nNotice\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting MonkeyLearn to Make\n\nTo connect your MonkeyLearn account to Make you need to obtain the API Key from your MonkeyLearn account and insert it in the Create a connection dialog in the Make module.\n\n1. Log in to your MonkeyLearn account.\n\n2. Open the model you want to create or use and then click API. Copy the API Key to your clipboard.\n\n3. Go to Make and open the MonkeyLearn module's Create a connection dialog.\n\n4. In the Connection name field, enter the name of the connection.\n\n5. In the API Key field, enter the API key copied in step 2 and click Continue.\n\nThe connection has been established.\n\nClassifiers\nList Classifiers\nGet a Classifiers\nClassify Text\nUpload Classifier Data\nCreate a Classifier\nUpdate a Classifier\nDelete a Classifier\nExtractors\nList Extractors\nGet an Extractor\nExtract Text\nOther\nMake an API Call\nExample of Use - List Classifiers\nMonkeyLearn\nGetting Started with MonkeyLearn\nConnecting MonkeyLearn to Make\nClassifiers\nList Classifiers\nGet a Classifiers\nClassify Text\nUpload Classifier Data\nCreate a Classifier\nUpdate a Classifier\nDelete a Classifier\nExtractors\nList Extractors\nGet an Extractor\nExtract Text\nOther\nMake an API Call\nExample of Use - List Classifiers\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Mixpanel",
      "url": "https://www.make.com/en/help/apps/business-intelligence/mixpanel",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceMixpanel\nMixpanel\n\nThe Mixpanel modules enable you to track events, import old events, export data, create and merge identities, query top events properties, list, create, retrieve, and delete pipelines, schemas, annotations, cohorts, and perform JQL queries.\n\nTo get started with the Mixpanel app, create an account at Mixpanel.com.\n\nRefer to the Mixpanel Ingestion API Documentation for the list of available endpoints.\n\nConnecting Mixpanel to Make\n\nTo connect your Mixpanel account to Make, you need to obtain the token.\n\nLog in to your Mixpanel account.\n\nClick on the cog wheel icon in the top-right corner, and then on your project name in the Project Settings section.\n\nFind and copy your Token or API Secret (depending on the module you want to use) in the Access Keys section.\n\nIf you are using Query an Insights Report module, enter the Service Account Username and secret values that you can find in Your Profile Icon > Project Settings > Service Accounts > Add Service Account.\n\nLog in to your Make account, add any Mixpanel module to your scenario, and click Create a connection.\n\nIn the Token field, enter the value in Step 3.\n\nSelect if your account is in Mixpanel's EU Data Residency Program.\n\nNote\n\nMixpanel's EU Data Residency Program enables the storage of user data on Europe Servers. This allows you to protect from where your information is held and processed.\n\nClick Save.\n\nThe connection has been established. You can now proceed with setting up the module.\n\nBuild Mixpanel Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nEvents\n\nAggregate Event Counts\n\nQuery Today's Top Events\n\nQuery Top Events\n\nAggregate Event Property Values\n\nQuery Tope Event Properties\n\nQuery Top Event Property Values\n\nTrack an Event\n\nTrack Multiple Events\n\nImport an Old Event\n\nExport Data\n\nIdentities\n\nCreate an Identity\n\nCreate an Alias\n\nMerge Identities\n\nUser Profiles\n\nCreate or Update a User Profile\n\nDelete a User Profile\n\nGroup Profiles\n\nCreate or Update a Group Profile\n\nDelete a Group Profile\n\nReports\n\nQuery an Insights Report\n\nQuery a Funnels Report\n\nQuery a Retention Report\n\nQuery a Frequency Report\n\nQuery a Segmentation Report\n\nQuery Segmentation Report in Buckets\n\nAggregate a Segmentation Report\n\nQuery an Activity Feed\n\nQuery Profiles\n\nList Cohorts\n\nAnnotations\n\nList Annotations\n\nCreate an Annotation\n\nUpdate an Annotation\n\nDelete an Annotation\n\nLexicon Schemas\n\nList Schemas\n\nCreate or Update a Schema\n\nDelete Schemas\n\nData Pipelines\n\nList Pipelines\n\nList Pipeline Logs\n\nCreate a Pipeline\n\nGet a Pipeline\n\nDelete a Pipeline\n\nOther\n\nMake a JQL Query\n\nMake a Query API Call\n\nMake an Ingestion API Call\n\nMixpanel\nConnecting Mixpanel to Make\nBuild Mixpanel Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Microsoft Power BI",
      "url": "https://www.make.com/en/help/apps/business-intelligence/microsoft-power-bi",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceMicrosoft Power BI\nMicrosoft Power BI \n\nWith Microsoft Power BI modules in Make, you can manage the apps, dashboards, and reports in your Microsoft Power BI account.\n\nTo use the Microsoft Power BI modules, you must have a Microsoft Power BI account. You can create an account at signup.microsoft.com/create-account/signup.\n\nRefer to the Microsoft Power BI API documentation for a list of available endpoints.\n\nConnect Microsoft Power BI to Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Microsoft Power BI module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Click Show advanced settings and enter your custom app client credentials. For more information, refer to the Microsoft Power BI custom credentials documentation.\n\nIf requested, use the following Redirect URI when creating your custom app: https://www.integromat.com/oauth/cb/microsoft-power-bi\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Microsoft Power BI modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Microsoft Power BI Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nDashboard\n\nList Dashboards\n\nList Dashboard Tiles\n\nGet a Dashboard\n\nGet a Dashboard Tile\n\nCreate a Dashboard\n\nReport\n\nList Reports\n\nGet a Report\n\nCopy a Report\n\nDelete a Report\n\nDataset\n\nList Datasets\n\nList Dataset Users\n\nGet a Dataset\n\nCreate a Dataset\n\nAdd/Delete Rows in a Dataset Table\n\nRefresh a Dataset\n\nDelete a Dataset\n\nApp\n\nWatch Apps\n\nList Apps\n\nList App's Reports\n\nList App's Dashboards\n\nGet an App\n\nGet an App Report\n\nGet an App's Dashboard\n\nOther\n\nMake an API Call\n\nPermissions Information for Microsoft Power BI\nMicrosoft Power BI\nConnect Microsoft Power BI to Make\nBuild Microsoft Power BI Scenarios\nPermissions Information for Microsoft Power BI\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "QuickCapture",
      "url": "https://www.make.com/en/help/apps/business-intelligence/quickcapture",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceQuickCapture\nQuickCapture\nGetting Started with QuickCapture\n\nThe QuickCapture module allows you to monitor record submissions from the mobile app. ArcGIS QuickCapture requires an ArcGIS Online account with either the Creator, Field Worker, or GIS Professional user types. For more information see Requirements in QuickCapture.\n\nPrerequisites\n\nAn ArcGIS Online account\n\nThe ArcGIS QuickCapture app installed on your device\n\nIn order to use QuickCapture with Make, it is necessary to have an ArcGIS account. If you do not have one, you can create an ArcGIS account at www.arcgis.com/home/createaccount.html.\n\nNotice\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting QuickCapture to Make\n\nTo connect your QuickCapture account to Make follow the general instructions for Connecting to services.\n\nAfter you click the Continue button, Make will redirect you to the QuickCapture website where you will sign in using your ArcGIS credentials.\n\nTriggers\nWatch Project\n\nTriggers when a record is submitted to a project.\n\nWebhook name\n\n\t\n\nEnter a name for the webhook.\n\n\n\n\nConnection\n\n\t\n\nEstablish a connection to your QuickCapture account.\n\n\n\n\nProject\n\n\t\n\nSelect a project you want to retrieve information and responses for.\n\n\n\n\nFeature layer\n\n\t\n\nSelect the collection of layers you want to retrieve information and responses for.\n\n\n\n\nLayer\n\n\t\n\nSelect the individual layer you want to retrieve information and responses for.\n\n\n\n\nEvent data options (advanced settings)\n\n\t\n\nSelect the information you want to include in the returned payload.\n\nTo process information retrieved by this module, connect the module to another module (e.g. Gmail > Send an Email, or Google Sheets > Add a Row) and map the desired fields from your record.\n\nNotice\n\nGo to Settings > Autosend to define when the data from your device should be sent to Make.\n\nFor more information see Webhooks in QuickCapture.\n\nQuickCapture\nGetting Started with QuickCapture\nConnecting QuickCapture to Make\nTriggers\nWatch Project\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "REST Countries",
      "url": "https://www.make.com/en/help/apps/business-intelligence/rest-countries",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceREST Countries\nREST Countries\n\nWith REST Countries in Make you can get detailed country information including geography, language, flag, population, technical information, and much more.\n\nSearch\nSearch by Country Code\n\nSearch country info by country code.\n\nCountry Code\n\n\t\n\nEnter the ISO 3166-1 2-letter or 3-letter country code. For example, CZ.\n\n\n\n\nLimit\n\n\t\n\nEnter the maximum number of results Make returns during one scenario execution cycle.\n\nREST Countries\nSearch\nSearch by Country Code\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Plotly",
      "url": "https://www.make.com/en/help/apps/business-intelligence/plotly",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligencePlotly\nPlotly\n\nThe Plotly modules allow you to create, update, and/or delete graphs in your Plotly account.\n\nPrerequisites\n\nA Plotly account\n\nIn order to use Plotly with Make, it is necessary to have a Plotly account. If you do not have one, you can create a Plotly account at https://chart-studio.plot.ly/Auth/login/?action=signup#/.\n\nNotice\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Plotly to Make\n\nTo connect your Plotly account to Make, you need to obtain your Username and API Key.\n\n1. Log into your Plotly Account.\n\n2. Click the Profile icon -> Settings -> API Keys.\n\n3. Copy the Username and API Key.\n\n4. Go to Make and open the Plotly module's Create a connection dialog.\n\n5. Enter the Username and API Key you copied in step 3.\n\n6. Click Continue.\n\nThe Connection has been established.\n\nActions\nCreate a Graph\n\nCreates a new Plotly graph.\n\nConnection\n\n\t\n\nEstablish a connection to your Plotly account.\n\n\n\n\nFile Name\n\n\t\n\nEnter the graph name.\n\n\n\n\nFile Options\n\n\t\n\nSelect the file options for the graph:\n\nNew\n\nOverwrite\n\nAppend\n\nExtend\n\n\n\n\nGraph Type\n\n\t\n\nSelect the type of graph you want to create:\n\nScatter plot\n\nHistogram\n\nBar Chart\n\n\n\n\nX Axis Title\n\n\t\n\nEnter a name for X-Axis.\n\n\n\n\nX Axis Type\n\n\t\n\nSelect the X-Axis type:\n\nLinear\n\nLogarithmic\n\n\n\n\nY-Axis Title\n\n\t\n\nEnter a name for Y-Axis.\n\n\n\n\nY Axis Type\n\n\t\n\nSelect the Y-Axis type:\n\nLinear\n\nLogarithmic\n\nDelete a Graph\n\nDeletes an existing graph.\n\nConnection\n\n\t\n\nEstablish a connection to your Plotly account.\n\n\n\n\nGraph ID\n\n\t\n\nSelect the Graph ID you want to delete.\n\nCreate a Graph Image\n\nCreates a graph image based on specified parameters.\n\nConnection\n\n\t\n\nEstablish a connection to your Plotly account.\n\n\n\n\nFormat of the graph figure you want to generate\n\n\t\n\nSelect the format of the graph image you want to create:\n\njpeg\n\npng\n\npdf\n\neps\n\nwebp\n\n\n\n\nFigure Width\n\n\t\n\nEnter the image width in pixels.\n\n\n\n\nFigure Height\n\n\t\n\nEnter the image height in pixels\n\n\n\n\nGraph Type\n\n\t\n\nSelect the type of graph you want to create:\n\nScatter plot\n\nHistogram\n\nBar Chart\n\n\n\n\nX Axis Title\n\n\t\n\nEnter a name for X-Axis.\n\n\n\n\nX Axis Type\n\n\t\n\nSelect the X-Axis type:\n\nLinear\n\nLogarithmic\n\n\n\n\nY Axis Title\n\n\t\n\nEnter a name for X-Axis.\n\n\n\n\nY Axis Type\n\n\t\n\nSelect the Y-Axis type:\n\nLinear\n\nLogarithmic\n\nPlotly\nConnecting Plotly to Make\nActions\nCreate a Graph\nDelete a Graph\nCreate a Graph Image\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Infinity",
      "url": "https://www.make.com/en/help/apps/business-intelligence/infinity",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceInfinity\nInfinity\n\nWith Infinity modules in Make, you can manage the comments, boards, items, folders, and users in your Infinity account.\n\nTo use the Infinity modules, you must have You can create an account at startinfinity.com.\n\nRefer to the Infinity API documentation for a list of available endpoints.\n\nConnect Infinity to Make\n\nTo establish the connection, you must:\n\nLog in to your Make account, add a Infinity module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Click Show advanced settings and enter your custom app client credentials. For more information, refer to Infinity Authentication Guide.\n\nIf requested, use the following Redirect URI when creating your custom app: https://www.integromat.com/oauth/cb/infinity.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Infinity modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Infinity Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nComments\n\nCreate a Comment\n\nUpdate a Comment\n\nGet a Comment\n\nSearch Comments\n\nDelete a Comment\n\nBoards\n\nCreate a Board\n\nGet a Board\n\nSearch Boards\n\nItems\n\nWatch Item Created\n\nWatch Item Updated\n\nCreate an Item\n\nUpdate an Item\n\nGet an Item\n\nSearch Items\n\nDelete an Item\n\nNote\n\nThis app uses webhooks to trigger a scenario when an event occurs instantly. All webhook modules have an instant tag next to their name.\n\nWhen you create an Infinity webhook in Make, it is attached automatically and requires no additional set up.\n\nFolders\n\nCreate a Folder\n\nUpdate a Folder\n\nGet a Folder\n\nList Folders\n\nDelete a Folder\n\nUsers\n\nWatch New User\n\nSearch Users\n\nOther\n\nMake an API Call\n\nInfinity\nConnect Infinity to Make\nBuild Infinity Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Looker Studio",
      "url": "https://www.make.com/en/help/apps/business-intelligence/google-data-studio",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceLooker Studio\nLooker Studio\nGetting Started with Looker Studio\nPrerequisites:\n\nTo access Looker Studio, a Google account is needed. You can log into Looker Studio or create an account on the Looker Studio page.\n\nA Make Data Source created and authorized in Looker Studio.\n\nA created (and executed) scenario\n\nWarning\n\nTo establish a connection to Looker Studio you must create and run your scenario beforehand! See the instructions below.\n\nNote\n\nMake's use and transfer of information received from Google APIs to any other app will adhere to Google API Services User Data Policy.\n\nCreating a Make Data Source in Looker Studio\n\nCreate your scenario.\n\nNote\n\nYou must run the scenario before you connect to the Make data source in Looker Studio.\n\nEach Looker Studio scenario in Make must have at least two modules: the webhook, New Request (the first module in the scenario) and the responder/aggregator, New Response (the last module in the scenario in which you must specify a structure for your data). Between these two modules, you should place other modules.\n\nUse the New Request module to generate a webhook URL.\n\nCopy the Webhook URL to use it in step 6.\n\nSave the scenario and Run it by clicking the Run Once button\n\nClick the following link to add the Make data source to Looker Studio:\n\nhttps://datastudio.google.com/datasources/create?connectorId=AKfycbwUsUqXSVNBmjwrv90WcFjLR41NMIyEus4xuwl9DvQ_wCESH4IKxxrge8eoOF012AvD\n\nTo confirm the action click on the AUTHORIZE button.\n\nSign-in using your Google account credentials and grant access rights by clicking on the ALLOW button.\n\nPaste the Make webhook URL - use the webhook URL from step 1.\n\nClick on the CONNECT button in the top-right corner.\n\nRename the Data Source if needed:\n\nAdd the data source to your report.\n\nAggregators\nNew response\n\nThis module must be the last module in your scenario. It sends collected data to Looker Studio.\n\nSource module\n\n\t\n\nSelect the source module you want to collect the data from.\n\n\n\n\nSchema\n\n\t\n\nSet Name and Data type.\n\nNotice\n\nThe Name field will be used as a unique identifier. Only alphanumeric characters and underscores are allowed. E.g. instead of \"Campaign ID\" enter \"Campaign_ID\".\n\nYou can set a more user-friendly name in the Label field under the Show advanced settings option.\n\n\n\n\nGroup by\n\n\t\n\nHere you can define an expression containing one or more mapped items. The aggregated data will be then separated under Groups with the same expression's value. Each Group outputs as a separate bundle and contains a Key with the evaluated expression and the aggregated text. By doing this, you can use the Key as a filter in subsequent modules.\n\n\n\n\nStop processing after an empty aggregation\n\n\t\n\nEnable this option to stop the scenario when no data is received.\n\n\n\n\nValues\n\n\t\n\nEnter Name and Value.\n\nWarning\n\nThe name of the Name field in the Schema section must be the same as the name of the Name field in the Values section.\n\nData Set Configuration Error\n\nIf you get this error message, make sure that:\n\nYou run your Make scenario before performing an action in Looker Studio.\n\nThe webhook in your active New Request module matches the webhook URL used in the Make Looker Studio data source.\n\nSample scenario\n\nThe following scenario will collect data from the Weather > Get Daily Weather Forecast module and will create a chart in the Looker Studio.\n\nLooker Studio > New Request module\nWeather > Get Daily Weather Forecast module\nLooker Studio > New Response module\nLooker Studio\nGetting Started with Looker Studio\nPrerequisites:\nCreating a Make Data Source in Looker Studio\nAggregators\nNew response\nData Set Configuration Error\nSample scenario\nLooker Studio > New Request module\nWeather > Get Daily Weather Forecast module\nLooker Studio > New Response module\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Google Analytics 4",
      "url": "https://www.make.com/en/help/apps/business-intelligence/google-analytics-4",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceGoogle Analytics 4\nGoogle Analytics 4\n\nWith Google Analytics 4 modules in Make, you can generate reports and pivot reports, create events, and make API calls.\n\nTo get started with Google Analytics 4, you must have a Google Analytics account and an existing Universal Analytics property. You can create an account at google.com/analytics.\n\nRefer to the Google Analytics 4 API documentation for the list of available endpoints.\n\nNote\n\nMake's use and transfer of information received from Google APIs to any other app will adhere to Google API Services User Data Policy.\n\nConnect Google Analytics 4 to Make\n\nTo establish the connection in Make you must:\n\nObtain your Property ID in your Google Analytics 4 account.\n\nEstablish the connection to Google Analytics 4 in Make.\n\nObtain your Property ID in Google Analytics 4\n\nLog in to your Google Analytics 4 account.\n\nIn the left sidebar, click Admin.\n\nIn the left menu, click Property > Property details.\n\nIn the upper-right corner, click the  button to copy the Property ID.\n\nEstablish the connection with Google Analytics 4 in Make\n\nLog in to your Make account, add a Google Analytics 4 module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Property ID field, enter the Property ID value.\n\nOptional: Switch on the Show advanced settings toggle and enter your Google Cloud Console project client credentials. For more information, see the Create and configure a Google Cloud Console project for Google Analytics 4 section below. You also can add other scopes if needed.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Google Analytics 4 modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nCreate and configure a Google Cloud Console project for Google Analytics 4\nBuild Google Analytics 4 Scenarios\n\nReports\n\nGenerate a Report\n\nGenerate a Pivot Report (Advanced)\n\nOther\n\nMake an API Call\n\nCreate an Event\n\nGoogle Analytics 4\nConnect Google Analytics 4 to Make\nCreate and configure a Google Cloud Console project for Google Analytics 4\nBuild Google Analytics 4 Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Google Cloud Vision",
      "url": "https://www.make.com/en/help/apps/business-intelligence/google-cloud-vision-2336929",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceGoogle Cloud Vision\nGoogle Cloud Vision\n\nWith Google Cloud Vision modules in Make, you can run a localizer for object detection within an image and iterate the result array.\n\nTo use the Google Cloud Vision modules, you must have a Google Cloud Vision AI account with billing enabled. You can create an account at cloud.google.com/vision.\n\nRefer to the Google Cloud Vision API documentation for a list of available endpoints.\n\nConnect Google Cloud Vision to Make\n\nTo establish the connection, you must:\n\nCreate and configure a Google Cloud Console project for Google Cloud Vision. \n\nEstablish the connection with Google Cloud Vision in Make. \n\nCreate and configure a Google Cloud Console project for Google Cloud Vision\n\nBefore you establish the connection in Make, you must create and configure a project in the Google Cloud Console to obtain your API key.\n\nCloud Billing\n\nYour Google account must have Cloud Billing set up in order to enable the required APIs in your project. For information regarding how to create and manage Cloud Billing, see Google's Manage your Cloud Billing account guide.\n\nCreate a Google Cloud Console project for Google Cloud Vision\n\nTo create a Google Cloud Console project:\n\nLog in to the Google Cloud Console using your Google credentials.\n\nIn the top menu, click Select a project > New project.\n\nEnter a Project name and select the Location for your project.\n\nClick Create.\n\nIn the top menu, check if your new project is selected in the Select a project dropdown. If not, select the project you just created.\n\nEnable APIs for Google Cloud Vision\n\nTo enable the required API:\n\nOpen the left navigation menu and go to APIs & Services > Library.\n\nSearch for and enable the following API: Cloud Vision API\n\nObtain your Google Cloud Vision API key\n\nTo obtain your API key:\n\nIn the left sidebar, click Credentials.\n\nClick + Create Credentials > API key.\n\nCopy Your API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with Google Cloud Vision in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Google Cloud Vision module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the value you copied in the Obtain your Google Cloud Vision API key section above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Google Cloud Vision modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Google Cloud Vision Scenarios\n\nAfter connecting the app, you can perform the following action:\n\nImages\n\nRun Handwriting Detection within an Image\n\nRun Label Detection within an Image\n\nRun Text Detection (OCR) within an Image\n\nRun Localizer for Object Detection within an Image and Iterate the Result Array\n\nRun Landmark Detection within an Image and Iterate the Results\n\nRun Face Detection within an Image and Iterate the Result Array\n\nCompute Image Dominate Colors and Iterate the Result Array\n\nDetect Potentially Unsafe or Undesirable Content within an Image\n\nRun Text Detection (OCR) within a File and Iterate the Result Array\n\nGoogle Cloud Vision\nConnect Google Cloud Vision to Make\nCreate and configure a Google Cloud Console project for Google Cloud Vision\nEstablish the connection with Google Cloud Vision in Make\nBuild Google Cloud Vision Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Holded",
      "url": "https://www.make.com/en/help/apps/business-intelligence/holded",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceHolded\nHolded\n\nWith Holded modules in Make, you can create and manage all your contacts, products, payments, leads, projects, tasks, and employees in your Holded account.\n\nTo get started with Holded, create an account at holded.com.\n\nConnecting Holded to Make\n\nTo make a connection you need to obtain an API key from your Holded account.\n\nLog in to your Holded account.\n\nClick your username in the top-right corner, then click Settings, then Developers.\n\nClick + New Api Key.\n\nCopy your new API key to your clipboard.\n\nGo to your Make scenario and select the Holded module you want to use.\n\nUnder Connection, click Add.\n\nGive your new connection a name, then paste the API key in the field below.\n\nClick Save.\n\nYou have successfully established the connection.\n\nHolded\nConnecting Holded to Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Google Analytics",
      "url": "https://www.make.com/en/help/apps/business-intelligence/google-analytics",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceGoogle Analytics\nGoogle Analytics\n\nWith Google Analytics modules in Make, you can retrieve analytics reports from your Google Analytics account.\n\nTo use the Google Analytics modules, you must have a Google Analytics account and an existing property in your Google Analytics account. You can create an account at https://analytics.google.com.\n\nRefer to the Google Analytics API documentation for a list of available endpoints.\n\nNote\n\nMake's use and transfer of information received from Google APIs to any other app will adhere to Google API Services User Data Policy.\n\nConnect Google Analytics to Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Google Analytics module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Switch on the Show advanced settings toggle and enter your Google Cloud Console project client credentials. For more information, see the Create and configure a Google Cloud Console project for Google Analytics section below.\n\nClick Sign in with Google.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Google Analytics modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nCreate and configure a Google Cloud Console project for Google Analytics\nBuild Google Analytics Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nActions\n\nMake an API Call\n\nSearches\n\nGet Analytics Report\n\nNote: You must have an existing property in your Google Analytics account to use this module. This module requires a View ID. Follow the steps below to locate it in your Google Analytics property.\n\nLog in to your Google Analytics account.\n\nClick All accounts, go to the property you created in the UA-*********-* format, select the view, and click Open.\n\nIn the left menu, click Admin.\n\nIn the View pane, click View Settings. Locate and copy the View ID value.\n\nGoogle Analytics\nConnect Google Analytics to Make\nCreate and configure a Google Cloud Console project for Google Analytics\nBuild Google Analytics Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Gong",
      "url": "https://www.make.com/en/help/apps/business-intelligence/gong",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceGong\nGong\n\nWith Gong modules in Make, you can watch, create, retrieve, and list calls, add call media, and report events of a custom action, content share, and content view.\n\nTo get started with Gong, create an account at gong.io.\n\nNote\n\nRefer to the Gong API documentation for the list of available endpoints.\n\nConnect Gong to Make\n\nYou can establish a connection to Make using either the Gong OAuth option (with or without OAuth client credentials) or the Gong Basic option (manually retrieving your credentials).\n\nNote\n\nYou must have Technical Administrator permissions in Gong to retrieve the Gong Basic connection Access Keys and Access Key Secrets.\n\nCreate a Gong OAuth Connection\n\nTo create a Gong OAuth connection:\n\nLog in to your Make account, add a Gong module to your scenario, and click Create a connection.\n\nChoose Gong in the Connection type dropdown.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Click the Show advanced settings toggle, enter your custom app Client ID and Client Secret credentials, or add additional Scopes for making custom requests.\n\nFollow these steps to create a custom app and credentials:\n\nLog in to your Gong developer account and go to the Integrations page.\n\nFollow Step 1: Initial setup in Gong & get OAuth keys in Gong's Create an App for Gong documentation.\n\nUse the following redirect URI: https://www.integromat.com/oauth/cb/gong.\n\nClick Save.\n\nClick Allow in the access window.\n\nYou have successfully established the connection. You can now begin editing your scenario and adding more Gong modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nNote\n\nIf you receive an error in the module that you do not have permissions to use a specific scope in your app, for example api:worksapces:read, return to your Gong Integrations page, click Edit next to your custom app, and add the noted scope to the Required authorization scopes.\n\nBuild Gong Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nCalls\n\nWatch New Calls\n\nCreate a Call\n\nAdd a Call Media\n\nGet a Call\n\nList Calls\n\nReports\n\nReport Events of a Custom Action\n\nReport Events of a Content Share\n\nReport Events of a Content View\n\nOther\n\nMake an API Call\n\nGong\nConnect Gong to Make\nCreate a Gong OAuth Connection\nBuild Gong Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Geckoboard",
      "url": "https://www.make.com/en/help/apps/business-intelligence/geckoboard",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceGeckoboard\nGeckoboard\n\nThe Geckoboard modules allow you to create, add records in the datasets, and delete the datasets in your Geckoboard account.\n\nGetting Started with Geckoboard\n\nPrerequisites\n\nA Geckoboard account\n\nIn order to use Geckoboard with Make, it is necessary to have a Geckoboard account. If you do not have one, you can create a Geckoboard account at geckoboard.com/try-geckoboard.\n\nNotice\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting Geckoboard to Make\n\nTo connect your Geckoboard account to Make you need to obtain the API Key from your Geckoboard account and insert it in the Create a connection dialog in the Make module.\n\nLog in to your Geckoboard account.\n\nClick Your Profile Icon > Account.\n\nCopy the API Key to your clipboard.\n\nGo to Make and open the Geckoboard module's Create a connection dialog.\n\nIn the Connection name field, enter the name of the connection.\n\nIn the API Key field, enter the API key copied in step 3 and click Continue.\n\nThe connection has been established successfully.\n\nGeckoboard\nGetting Started with Geckoboard\nConnecting Geckoboard to Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Cyfe",
      "url": "https://www.make.com/en/help/apps/business-intelligence/cyfe",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceCyfe\nCyfe\n\nThe Cyfe module allows you to create and analyze metrics to study the performance of your domain traffic in your Cyfe account.\n\nGetting Started with Cyfe\n\nPrerequisites\n\nA Cyfe account\n\nIn order to use Cyfe with Make, it is necessary to have a Cyfe account. If you do not have one, you can create a Cyfe account at cyfe.com.\n\nNotice\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nNotice\n\nThere is no connection required for pushing value to your Cyfe account from Make. You can directly use the widget's API End Point and push a value from Make.\n\nAccessing Cyfe Widget's API Endpoint\n\nLogin to your Cyfe account.\n\nOn the widget for which you want to push value, click the Setting icon (), and copy the API Endpoint value to your clipboard.\n\nActions\nPush Value\n\nPushes your data into a push API widget.\n\nAPI Endpoint\n\n\t\n\nEnter the API Endpoint of the widget whose event data you want to push. See Accessing Cyfe Widget's API Endpoint above.\n\n\n\n\nMetric\n\n\t\n\nEnter the metric to which you want to push the value.\n\n\n\n\nDate\n\n\t\n\nEnter the date in YYYY-MM-DD format.\n\n\n\n\nValue\n\n\t\n\nEnter a JSON string containing the data you want to push.\n\n\n\n\nReplace\n\n\t\n\nSelect whether to replace the value if during subsequent calls a data is pushed in with the same element name, existing values are added to the new value by default:\n\nYes\n\nNo\n\nNot defined\n\n\n\n\nColor\n\n\t\n\nSelect the color for the metric.\n\n\n\n\nCumulative\n\n\t\n\nSelect whether you would like to see cumulate values for the specified metrics in the widget header:\n\nYes\n\nNo\n\nNot defined\n\n\n\n\nAverage\n\n\t\n\nSelect whether to display averages for the specified metrics in the widget header:\n\nYes\n\nNo\n\nNot defined\n\n\n\n\nReverse\n\n\t\n\nSelect whether high values are good or bad for particular metrics:\n\nYes\n\nNo\n\nNot defined\n\nFor example, large number of unlikes count on Facebook is bad.\n\n\n\n\nReverse Graph\n\n\t\n\nSelect whether you want to display a graph upside down:\n\nYes\n\nNo\n\nNot defined\n\nFor example, when displaying ranking information.\n\n\n\n\nY-axis\n\n\t\n\nBy default, each metric you add to the widget falls on its own y-axis.\n\nYou can enable a single y-axis across all your metrics in the widget thereby syncing the data.\n\nChoose the value true for all metrics to sync them.\n\n\n\n\nY-axis Minimum\n\n\t\n\nEnter the minimum value of the Y-axis.\n\n\n\n\nY-axis Maximum\n\n\t\n\nEnter the maximum value of the Y-axis.\n\n\n\n\nShow Y-axis\n\n\t\n\nSelect whether to turn on the Y-axis for the metric:\n\nYes\n\nNo\n\nNot defined\n\n\n\n\nShow Labels\n\n\t\n\nSelect whether to turn on the data labels for the metric:\n\nYes\n\nNo\n\nNot defined\n\nCyfe\nGetting Started with Cyfe\nAccessing Cyfe Widget's API Endpoint\nActions\nPush Value\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Custify",
      "url": "https://www.make.com/en/help/apps/business-intelligence/custify",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceCustify\nCustify\n\nWith Custify modules in Make, you can manage the people, companies, notes, tags, tickets, tasks, events, requests, comments, deals, invoices, subscriptions, files, and custom data objects in your Custify account.\n\nTo use the Custify modules, you must have a Custify account. You can create an account at custify.com.\n\nRefer to the Custify API documentation for a list of available endpoints.\n\nConnect Custify to Make\n\nTo establish the connection, you must:\n\nObtain your API key in Custify.\n\nEstablish the connection in Make.\n\nObtain your API key in Custify\n\nTo obtain your API key from your Custify account:\n\nLog in to your Custify account.\n\nIn the upper right corner, click your Account name > My Account.\n\nIn the left sidebar, click API access.\n\nClick Generate API key.\n\nIn the Description field, enter a name for the API key and click Generate.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with Custify in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Custify module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Custify modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Custify Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nPeople\n\nWatch People\n\nAdd People\n\nUpdate People\n\nGet People\n\nSearch People\n\nDelete People\n\nAdd a Tag to the People\n\nRemove a Tag from the People\n\nCompanies\n\nWatch Companies\n\nCreate a Company\n\nUpdate a Company\n\nGet a Company\n\nSearch Companies\n\nList Company People\n\nDelete a Company\n\nNotes\n\nWatch Notes\n\nCreate a Note\n\nUpdate a Note\n\nList Notes\n\nTags\n\nWatch Tags\n\nCreate a Tag\n\nGet a Tag\n\nUpdate a Tag\n\nList Tags\n\nDelete a Tag\n\nAdd a Tag to the Entity\n\nRemove a Tag from the Entity\n\nTickets\n\nCreate a Ticket\n\nUpdate a Ticket\n\nDelete a Ticket\n\nAdd a Reply to the Ticket\n\nTasks\n\nCreate a Task\n\nUpdate a Task\n\nGet a Task\n\nSearch Tasks\n\nGet Available Filter Values\n\nEvents\n\nInsert an Event\n\nRequests\n\nSend a Batch Request\n\nComments\n\nWatch Comments\n\nCreate a Comment\n\nUpdate a Comment\n\nList Comments\n\nDeals\n\nWatch Deals\n\nCreate a Deal\n\nUpdate a Deal\n\nList Deals\n\nDelete a Deal\n\nInvoices\n\nWatch Invoices\n\nCreate an Invoice\n\nUpdate an Invoice\n\nList Invoices\n\nDelete an Invoice\n\nSubscriptions\n\nWatch Subscriptions\n\nCreate a Subscription\n\nUpdate a Subscription\n\nList Subscriptions\n\nDelete a Subscription\n\nOther\n\nMake an API Call\n\nUpload a File\n\nList Files\n\nUnlink a File\n\nAdd or Update a Custom Data Object\n\nDelete a Custom Data Object\n\nCustify\nConnect Custify to Make\nObtain your API key in Custify\nEstablish the connection with Custify in Make\nBuild Custify Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Checkr",
      "url": "https://www.make.com/en/help/apps/business-intelligence/checkr",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceCheckr\nCheckr\n\nWith Checkr modules in Make, you can create candidates and background check invitations, watch for events, and retrieve and/or search for candidates, invitations, nodes, packages, and reports.\n\nTo use Checkr with Make, you must have a verified Checkr account. For more information, refer to the Welcome to Checkr guide. You can connect to both Checkr staging accounts and production accounts.\n\nRefer to the Checkr API documentation for a list of available endpoints.\n\nConnect Checkr to Make\n\nTo establish the connection:\n\nLog in to your Make account, add a Checkr module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nSelect whether or not to connect to the Sandbox environment.\n\nOptional: Click Show advanced settings and enter your client credentials. Refer to the Partnering with Checkr guide for more information. When creating a custom app, use the following Redirect URI: https://www.integromat.com/oauth/cb/checkr.\n\nClick Save.\n\nIf prompted, log in to your customer account, select the customer account to connect to, and confirm access.\n\nNote: If you receive Error: Account can't connect to itself, Account can't connect a partner to another partner account when connecting using client credentials, go to your Checkr Partner dashboard, ensure that you are logged out, and try to establish the connection again.\n\nYou have successfully established the connection. You can now edit your scenario and add more Checkr modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Checkr Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nEvents\n\nWatch Events\n\nNote: This module triggers when an invitation or report event is sent via API. It is not possible to trigger this module when invitation or report events are created within your Checkr Dashboard.\n\nCheckr imposes a limit of two webhook URLs per test or production environment. See more information in the Checkr Webhook documentation.\n\nCandidates\n\nCreate a Candidate\n\nNote: If you receive the following error: The operation failed with an error. [404] work location doesn't exist, ensure that the location input in the module's Country fields matches the location selected when creating the candidate's package.\n\nGet a Candidate\n\nSearch Candidates\n\nInvitations\n\nCreate a Background Check Invitation\n\nGet an Invitation\n\nSearch Invitations\n\nNodes\n\nList Nodes\n\nNote: The Order by - Created at option can only be used with nodes created via API. It is not possible to do so with nodes created within your Checkr Dashboard.\n\nPackages\n\nList Packages\n\nReports\n\nGet a Report's ETA\n\nGet a Report\n\nCheckr\nConnect Checkr to Make\nBuild Checkr Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Experian Aperture",
      "url": "https://www.make.com/en/help/apps/business-intelligence/experian-aperture",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceExperian Aperture\nExperian Aperture\n\nWith Experian Aperture modules in Make , you can validate email addresses, phone numbers, addresses, and call APIs.\n\nTo get started with Experian Aperture, create an account at experian.com.\n\nConnect Experian Aperture to Make \n\nTo connect Experian Aperture app, you have to create a token in your Experian Aperture account and add it in Make scenario .\n\nLog in to your Experian Aperture account.\n\nClick Deployments > Get Token.\n\nCopy the token to a safe place.\n\nLog in to your Make account, insert any Experian Aperture module to scenario , and click the Add button next to the Connection field.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Token field, enter the token copied in step 3 and click Save.\n\nYou have successfully established the connection. You can now edit your scenario and add more Experian Aperture modules. If your connection needs reauthorization, follow the connection renewal steps here.\n\nFor information on modules, refer to Experian Aperture API documentation.\n\nExperian Aperture\nConnect Experian Aperture to Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "ChartMogul",
      "url": "https://www.make.com/en/help/apps/business-intelligence/chartmogul",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceChartMogul\nChartMogul\n\nWith ChartMogul modules in Make, you can create, update, list, retrieve, and delete customers, plans, plan groups, data sources, invoices, and subscriptions in your ChartMogul account.\n\nTo use ChartMogul in Make, you must have a ChartMogul account. You can create an account at chartmogul.com.\n\nRefer to the ChartMogul API documentation. for a list of available endpoints.\n\nConnect ChartMogul to Make\n\nTo connect your ChartMogul account to Make, you must obtain the Access Token and Secret Key from your ChartMogul account.\n\nLogin to your ChartMogul account.\n\nIn the left sidebar, click on your Profile icon, then View Profile under your profile name.\n\nIn the left User panel, click on the API keys tab.\n\nClick on New API Key, enter a Name for your key, select the desired Access Level, and click Add.\n\nCopy the Key value and store it in a safe place. You will use this value in both the Token and Secret Key fields when creating the connection in Make.\n\nLog in to your Make account, add a ChartMogul module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn both the Token and Secret Key fields, enter the key value copied in step 5. The same key value is used in both.\n\nClick Save.\n\nYou have successfully established the connection. You can now edit your scenario and add more Chartmogul modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild ChartMogul Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nCustomer\n\nList Customers\n\nGet a Customer\n\nCreate a Customer\n\nAdd a Custom Attribute to a Customer\n\nUpdate a Customer\n\nDelete a Customer\n\nPlan\n\nList Plans\n\nGet a Plan\n\nCreate a Plan\n\nUpdate a Plan\n\nDelete a Plan\n\nPlan Group\n\nGet a Plan Group\n\nCreate a Plan Group\n\nUpdate a Plan Group\n\nDelete a Plan Group\n\nData Source\n\nList Data Sources\n\nGet a Data Source\n\nCreate a Data Source\n\nDelete a Data Source\n\nInvoice\n\nList Invoices\n\nGet an Invoice\n\nImport an Invoice\n\nDelete an Invoice\n\nImport an Invoice Transaction\n\nSubscriptions\n\nList Customer's Subscriptions\n\nCancel a Customer's Subscription\n\nOther\n\nMake an API Call\n\nChartMogul\nConnect ChartMogul to Make\nBuild ChartMogul Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "CallTrackingMetrics",
      "url": "https://www.make.com/en/help/apps/business-intelligence/calltrackingmetrics",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceCallTrackingMetrics\nCallTrackingMetrics\n\nWith CallTrackingMetrics modules in Make, you can watch call events, calls ended, delayed, started, and sessions associated with the activity records.\n\nTo get started with CallTrackingMetrics, create an account at calltrackingmetrics.com.\n\nNote\n\nRefer to the CallTrackingMetrics API documentation for the list of available endpoints.\n\nConnect CallTrackingMetrics to Make\n\nTo connect CallTrackingMetrics app:\n\nLog in to your Make account, insert a CallTracking Metrics module in your scenario, and click Create a Connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Username and Password fields, enter your CallTrackingMetrics account credentials.\n\nClick Save.\n\nIf prompted, authenticate by logging in to your account and confirming access.\n\nYou have successfully established the connection. You can now edit your scenario and add more CallTrackingMetrics modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild CallTrackingMetrics Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nWatch Call/Activity Started\n\nWatch Call Ended\n\nWatch Call Ended (Delayed)\n\nWatch Session Associated with the Activity Record\n\nWatch Call Events\n\nCallTrackingMetrics\nConnect CallTrackingMetrics to Make\nBuild CallTrackingMetrics Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "BizMachine",
      "url": "https://www.make.com/en/help/apps/business-intelligence/bizmachine",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceBizMachine\nBizMachine\n\nEnjoy access to the richest source of company information, dynamic market mapping and lead generation, all tailored to your specific needs, processes and systems.\n\nBizMachine modules enable you to search companies, or retrieve company details, company embed links, or company custom data and retrieve tags, assign tags, or remove tags from a company in your BizMachine account.\n\nGetting Started with BizMachine\n\nA BizMachine account\n\nIn order to use BizMachine with Make, it is necessary to have a BizMachine account. If you do not have one, you can create a BizMachine account at bizmachine.com.\n\nConnecting BizMachine to Make\n\nTo connect your MakeBizMachine account to you have to obtain the API token.\n\nGet your API Key. Currently (12/2019), you can request your API Key via email (info@bizmachine.com) only.\n\nOpen the BizMachine module Create a connection dialog.\n\nEnter the API Key into the respective field.\n\nClick on the Continue button.\n\nThe connection to your BizMachine account is now established.\n\nBizMachine\nGetting Started with BizMachine\nConnecting BizMachine to Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Bookafy",
      "url": "https://www.make.com/en/help/apps/business-intelligence/bookafy",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceBookafy\nBookafy\n\nWith Bookafy modules in Make, you can create, manage, and monitor all your appointments and customers in your Bookafy account.\n\nTo get started with Bookafy, create an account at bookafy.com.\n\nConnecting Bookafy to Make\n\nLog in to your Bookafy account.\n\nClick the cog icon in the top-right icon, then click Settings.\n\nClick Integrations.\n\nClick API.\n\nCopy your API key to your clipboard.\n\nGo to your Make scenario and select the Bookafy module you want to use.\n\nUnder Connection, click Add.\n\nGive your new connection a name.\n\nPaste your API key into the field provided.\n\nClick Save.\n\nYou have successfully established the connection.\n\nBookafy\nConnecting Bookafy to Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Apollo",
      "url": "https://www.make.com/en/help/apps/business-intelligence/apollo",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceApollo\nApollo\n\nWith Apollo modules in Make, you can manage the accounts, contacts, opportunities, and tasks in your Apollo account.\n\nTo use the Apollo modules, you must have an Apollo account. To can create an account at apollo.io.\n\nRefer to the Apollo API documentation for a list of available endpoints.\n\nConnect Apollo to Make\n\nTo establish the connection, you must:\n\nObtain your API key in Apollo\n\nEstablish the connection inMake\n\nObtain your API key in Apollo\n\nTo obtain your API key from your Apollo account:\n\nLog in to your Apollo account.\n\nIn the left sidebar, click Settings > Integrations.\n\nUnder the API option. click Connect.\n\nClick API Keys > Create New Key.\n\nEnter values for the Name, Description, and APIs to be associated with this API key.\n\nClick Create API Key.\n\nCopy the API key and store it in a safe place.\n\nYou will use this value in the API key field in Make\n\nNote\n\nAt the time of this publication, all steps for Obtain your API key in Apollo were checked and verified to be accurate. However this may have changed, so please see the Apollo Knowledge Base for the most up-to-date directions.\n\nEstablish the connection with Apollo in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add an Apollo module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Apollo modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Apollo Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nAccounts\n\nWatch New Accounts\n\nCreate an Account\n\nUpdate an Account\n\nList Accounts\n\nContacts\n\nWatch New Contacts\n\nWatch Updated Contacts\n\nCreate a Contact\n\nUpdate a Contact\n\nList Contacts\n\nOpportunities\n\nCreate an Opportunity\n\nUpdate an Opportunity\n\nList Opportunities\n\nTasks\n\nCreate a Task\n\nList Tasks\n\nOther\n\nMake an API Call\n\nApollo\nConnect Apollo to Make\nObtain your API key in Apollo\nEstablish the connection with Apollo in Make\nBuild Apollo Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Google Cloud Vision",
      "url": "https://www.make.com/en/help/apps/business-intelligence/google-cloud-vision",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceGoogle Cloud Vision\nGoogle Cloud Vision\n\nWith Google Cloud Vision modules in Make, you can run a localizer for object detection within an image and iterate the result array.\n\nTo use the Google Cloud Vision modules, you must have a Google Cloud Vision AI account with billing enabled. You can create an account at cloud.google.com/vision.\n\nRefer to the Google Cloud Vision API documentation for a list of available endpoints.\n\nConnect Google Cloud Vision to Make\n\nTo establish the connection, you must:\n\nCreate and configure a Google Cloud Console project for Google Cloud Vision. \n\nEstablish the connection with Google Cloud Vision in Make. \n\nCreate and configure a Google Cloud Console project for Google Cloud Vision\n\nBefore you establish the connection in Make, you must create and configure a project in the Google Cloud Console to obtain your API key.\n\nCloud Billing\n\nYour Google account must have Cloud Billing set up in order to enable the required APIs in your project. For information regarding how to create and manage Cloud Billing, see Google's Manage your Cloud Billing account guide.\n\nCreate a Google Cloud Console project for Google Cloud Vision\n\nTo create a Google Cloud Console project:\n\nLog in to the Google Cloud Console using your Google credentials.\n\nIn the top menu, click Select a project > New project.\n\nEnter a Project name and select the Location for your project.\n\nClick Create.\n\nIn the top menu, check if your new project is selected in the Select a project dropdown. If not, select the project you just created.\n\nEnable APIs for Google Cloud Vision\n\nTo enable the required API:\n\nOpen the left navigation menu and go to APIs & Services > Library.\n\nSearch for and enable the following API: Cloud Vision API\n\nObtain your Google Cloud Vision API key\n\nTo obtain your API key:\n\nIn the left sidebar, click Credentials.\n\nClick + Create Credentials > API key.\n\nCopy Your API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nEstablish the connection with Google Cloud Vision in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Google Cloud Vision module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the value you copied in the Obtain your Google Cloud Vision API key section above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Google Cloud Vision modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Google Cloud Vision Scenarios\n\nAfter connecting the app, you can perform the following action:\n\nImages\n\nRun Handwriting Detection within an Image\n\nRun Label Detection within an Image\n\nRun Text Detection (OCR) within an Image\n\nRun Localizer for Object Detection within an Image and Iterate the Result Array\n\nRun Landmark Detection within an Image and Iterate the Results\n\nRun Face Detection within an Image and Iterate the Result Array\n\nCompute Image Dominate Colors and Iterate the Result Array\n\nDetect Potentially Unsafe or Undesirable Content within an Image\n\nRun Text Detection (OCR) within a File and Iterate the Result Array\n\nGoogle Cloud Vision\nConnect Google Cloud Vision to Make\nCreate and configure a Google Cloud Console project for Google Cloud Vision\nEstablish the connection with Google Cloud Vision in Make\nBuild Google Cloud Vision Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "BigQuery",
      "url": "https://www.make.com/en/help/apps/business-intelligence/bigquery",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceBigQuery\nBigQuery\n\nWith BigQuery modules in Make, you can monitor tables and completed query jobs, and create, retrieve, update, or delete datasets and tables in your BigQuery account.\n\nTo use the BigQuery modules, you must have a Google account and a project created. You can create an account at Google Cloud Platform.\n\nRefer to the BigQuery API Documentation for a list of available endpoints.\n\nNote\n\nMake's use and transfer of information received from Google APIs to any other app will adhere to Google API Services User Data Policy.\n\nConnect BigQuery to Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a BigQuery module to your scenario, and click Create a connection.\n\nNote: If you add a module with an instant tag, click Create a webhook, then Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Switch on the Show advanced settings toggle and enter your Google Cloud Console project client credentials. For more information, see the Create and configure a Google Cloud Console project for BigQuery section below.\n\nClick Sign in with Google.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more BigQuery modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nCreate and configure a Google Cloud Console project for BigQuery\nBuild BigQuery Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nDataset\n\nList Datasets\n\nGet a Dataset\n\nCreate a Dataset\n\nUpdate a Dataset\n\nDelete a Dataset\n\nTable\n\nWatch Tables\n\nList Tables\n\nGet a Table\n\nCreate a Table\n\nUpdate a Table\n\nDelete a Table\n\nTable Data\n\nWatch Rows\n\nList Table Data\n\nUpload Data (Streaming)\n\nUpdate a File\n\nQuery Job\n\nWatch Query Jobs Completed\n\nList Jobs\n\nGet Query Results by Job ID\n\nRun a Query\n\nOther\n\nMake an API Call\n\nBigQuery\nConnect BigQuery to Make\nCreate and configure a Google Cloud Console project for BigQuery\nBuild BigQuery Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Amplitude",
      "url": "https://www.make.com/en/help/apps/business-intelligence/amplitude",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness IntelligenceAmplitude\nAmplitude\n\nWith Amplitude modules in Make, you can create and manage all your cohorts, annotations, releases, events, and other elements in your Amplitude account.\n\nTo get started with Amplitude, create an account at amplitude.com.\n\nConnecting Amplitude to Make\n\nLog in to your Amplitude account.\n\nClick Settings in the bottom-left corner.\n\nClick Projects, then select the project you want to use in your automation.\n\nCopy the API key to your clipboard.\n\nReveal the secret key below, then copy that to your clipboard.\n\nGo to your Make scenario and select the Amplitude module you want to use.\n\nUnder Connection, click Add.\n\nGive your new connection a name.\n\nSelect the server you want to use.\n\nPaste your API key and secret key in the fields provided.\n\nClick Save.\n\nYou have successfully set up the connection.\n\nNote\n\nSee the Amplitude API documentation for further information.\n\nAmplitude\nConnecting Amplitude to Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Business Intelligence",
      "url": "https://www.make.com/en/help/apps/business-intelligence",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBusiness Intelligence\nBusiness Intelligence\nIn this section\nGoogle Cloud Vision\nAmplitude\nApollo\nBigQuery\nBizMachine\nBookafy\nCallTrackingMetrics\nChartMogul\nCheckr\nCommCare\nCyfe\nCustify\nDatabox\nExperian Aperture\nGeckoboard\nGong\nGoogle Analytics\nGoogle Analytics 4\nGoogle Cloud Vision\nLooker Studio\nHolded\nInfinity\nMicrosoft Power BI\nMixpanel\nMonkeyLearn\nPlotly\nQuickCapture\nREST Countries\nRobolytix\nRocketReach\nSegment\nSegMetrics\nTableau\nUserflow\nVincario VIN Decoder\nZoomInfo\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "XMP",
      "url": "https://www.make.com/en/help/apps/built-in-apps/xmp",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsXMP\nXMP\n\nThe XMP modules allow you to add, update and remove the tags for the images and videos.\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nNote\n\nYou do not need to establish a connection to use the XMP app.\n\nFor more information on the XMP, see the XMP website.\n\nActions\nGet Tags\n\nReturns tags.\n\nFile Name\n\n\t\n\nEnter (map) the file name including the extension whose tag details you want to retrieve.\n\n\n\n\nData\n\n\t\n\nEnter (map) the file data.\n\nSet Tags\n\nUpdates tags.\n\nFile Name\n\n\t\n\nEnter (map) the file name including the file extension whose tags you want to update. The supported file formats are 360, 3g2, 3gp2, 3gp, 3gpp, aax, ai, ait, arq, arw, avif, cr2, cr3, crm, crw, ciff, cs1, dcp, dng, dvb, eps, epsf, ps, erf, exv, f4a, f4b, f4p, f4v, fff, flif, gif, gpr, hdp, wdp, jxr, heic, heif, hif, iiq, ind, indd, indt, insp, jp2, jpf, jpm, jpx, jpeg, jpg, jpe, jxl, lrv, m4a, m4b, m4p, m4v, mef, mie, mos, mov, qt, mp4, mpo, mqv, mrw, nef, nrw, orf, ori, pdf, pef, png, jng, mng, psd, psb, psdt, qtif, qti, qif, raf, raw, rw2, rwl, sr2, srw, thm, tiff, tif, vrd, x3f, xmp.\n\n\n\n\nData\n\n\t\n\nEnter (map) the file data.\n\n\n\n\nTags\n\n\t\n\nAdd the new tags or keywords for the file you want to update.\n\nName\n\nSelect or map the tag name.\n\nValue\n\nEnter (map) the value. For example, relationship to other documents.\n\nAppend\n\nSelect Yes if you want to add the new value to the existing value.\n\nRemove Tags\n\nRemoves tags.\n\nFile Name\n\n\t\n\nEnter (map) the file name with the extension whose tags you want to remove.\n\n\n\n\nData\n\n\t\n\nEnter (map) the file data.\n\n\n\n\nTags\n\n\t\n\nAdd the file tags you want to remove.\n\nXMP\nActions\nGet Tags\nSet Tags\nRemove Tags\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "HTTP Agent",
      "url": "https://www.make.com/en/help/apps/built-in-apps/http-agent",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsHTTP Agent\nHTTP Agent\n\nWith HTTP Agent modules in Make, you can connect to your On-prem agent and make HTTP(S) requests, including for resources that require HTTP Basic and API Key authorizations.\n\nNote\n\nTo use HTTP Agent modules in Make, you must have the Make Enterprise plan.\n\nHTTP Agent modules are only used with the On-prem agent. The On-prem agent must be installed with a connected system configured to use HTTP Agent modules. Refer to the Using the On-premise agent documentation for instructions on how to do so.\n\nThe HTTP Agent module you should use depends upon the authentication/authorization mechanism of the resource you wish to access:\n\nMake a Request - universal module, best to use for resources that do not require authentication.\n\nMake an API Key Auth Request - for resources that require API key authentication.\n\nMake a Basic Auth Request - for resources that require basic authentication.\n\nConnect HTTP Agent to Make\n\nEstablishing a connection to the HTTP Agent in Make differs for each HTTP Agent module, depending on the authorization type. Follow the connection procedure below and insert the specific information for the HTTP Agent module you want to connect to.\n\nNote\n\nYou must already have a connected system configured in your On-prem agent to establish a connection to the HTTP Agent modules in Make.\n\nLog in to your Make account, add the HTTP Agent module with the desired authorization type to your scenario, and click Create a Connection.\n\nOptional: In the Connection Name field, enter a name for the connection.\n\nIn the Connected System dropdown, select the relevant connected system from your On-prem agent.\n\nTip\n\nYou can always check which connected system is associated with the specific On-prem agent in the On-prem agents section, on the Organization dashboard.\n\nDepending on the HTTP Agent module you have selected, input the following:\n\nModule\n\n\t\n\nField\n\n\t\n\nInput\n\n\n\n\nMake a Request\n\n\t\n\n-\n\n\t\n\n-\n\n\n\n\nMake an API Key Auth Request\n\n\t\n\nAPI Key\n\n\t\n\nPaste your API key from the 3rd party account of the connected system you chose. Refer to the specific system's documentation on how to generate an API key.\n\n\n\n\nPlacement\n\n\t\n\nSelect whether the API key will be placed as a header or as a query parameter.\n\n\n\n\nAPI Key Parameter Name\n\n\t\n\nEnter a name for the API key parameter.\n\n\n\n\nMake a Basic Auth Request\n\n\t\n\nUsername\n\n\t\n\nEnter your account username for your 3rd party account of the connected system you chose.\n\n\n\n\nPassword\n\n\t\n\nEnter your account password for your 3rd party account of the connected system you chose.\n\nClick Save.\n\nYou have successfully established the connection. You can now edit your scenario and add more HTTP Agent modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nUse HTTP Agent Modules\n\nWith HTTP Agent Modules in Make, you can send HTTP(S) requests to specified URLs, including those that require Basic Auth and API Key Auth authorizations, and process the responses.\n\nMake a Request\nMake an API Key Auth Request\nMake a Basic Auth Request\nHTTP Agent\nConnect HTTP Agent to Make\nUse HTTP Agent Modules\nMake a Request\nMake an API Key Auth Request\nMake a Basic Auth Request\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Archive",
      "url": "https://www.make.com/en/help/apps/built-in-apps/archive",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsArchive\nArchive \nActions\nExtract an archive\n\nThis action module extracts files from an archive. These files can be further processed using other apps/modules.\n\nSource file\n\n\t\n\nSelect the file you want to extract. It can be retrieved from a previous module (e.g. Dropbox, email, etc.)\n\nExample\n\nGet the ZIP file from the defined Dropbox folder (e.g. Archives), extract it using the Archive module and send extracted files to the desired email address as attachments with the email or gmail module.\n\nAggregators\nCreate an archive\n\nAdds the desired files to a ZIP or TAR archive.\n\nSource module\n\n\t\n\nSelect the module you want to retrieve the files from.\n\n\n\n\nType\n\n\t\n\nSelect whether you want to add files to a ZIP archive or a TAR archive.\n\n\n\n\nArchive name\n\n\t\n\nEnter a name for the created archive. Do not add an extension.\n\n\n\n\nSource file\n\n\t\n\nMap the source file or select the radiobutton with the file source.\n\nExample\n\nWatch incoming emails using the Gmail Watch emails module. If an email is received, its attachments are iterated into individual bundles then archived to the ZIP file and saved to the defined Dropbox folder.\n\nTransformers\nInflate\n\nData\n\n\t\n\nEnter the data you want to decompress using the inflate function.\n\nDeflate\n\nData\n\n\t\n\nEnter the data you want to compress using the deflate function.\n\nArchive\nActions\nExtract an archive\nExample\nAggregators\nCreate an archive\nExample\nTransformers\nInflate\nDeflate\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Encryptor",
      "url": "https://www.make.com/en/help/apps/built-in-apps/encryptor",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsEncryptor\nEncryptor\nGetting started with Encryptor\n\nEncryptor by Make allows you to encrypt any text data. It currently supports message encryption via AES256 and PGP (OpenPGP).\n\nMessage encryption and decryption using PGP\n\nThere are two actions at disposal for message encryption and decryption via PGP. In both cases, it is necessary to use a keychain and to create a private or public key (or both). More information on working with keychain.\n\nIf you wish to decrypt a message, you need to enter the recipient´s private key that shall be used for decryption. Optionally, you can also enter the sender´s public key so that the sender´s identity is also authenticated.\n\nIf you wish to encrypt a message, you need to enter the recipient´s public key that shall be used for encryption. Optionally, you can also enter the sender´s private key so that the recipient can authenticate the identity of the sender.\n\nEncryptor\nGetting started with Encryptor\nMessage encryption and decryption using PGP\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Barcodes",
      "url": "https://www.make.com/en/help/apps/built-in-apps/barcodes",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsBarcodes\nBarcodes\n\nThe Make Barcodes module enable you to generate a desired barcode file in the PNG format.\n\nGenerate barcode\nNote\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nBarcode type\n\n\t\n\nSelect the barcode type you want to generate.\n\nCode 39\n\n\t\n\nCode 39 is a variable length, discrete barcode symbology. The '*' charecter is used as start/stop delimiter. It must contain only digits, capital letters, spaces and the symbols -.$/+%\n\n\n\n\nCode 128\n\n\t\n\nCode 128 is an arbitrarily long, high-density barcode symbology that can be used to encode any extended ASCII data. It is used for alphanumeric or numeric-only barcodes.\n\n\n\n\nEAN-13 and EAN-8\n\n\t\n\nEAN is the most commonly recognized barcode in Europe, used in supermarkets and other retail establishments for basic product identification. The EAN-13 code is comprised of 13 digits. The EAN-8 is derived from the EAN-13 and is comprised of 8 digits.\n\n\n\n\nQR Code\n\n\t\n\nThe type of matrix barcode, which consists of black modules (square dots) arranged in a square grid on a white background, which can be read by an imaging device and processed using Reed–Solomon error correction until the image can be appropriately interpreted.\n\n\n\n\nUPC-A a UPC-E\n\n\t\n\nUPC is the most commonly recognized barcode in US. The data field for a UPC-A may contain eleven or twelve digits, optionally followed by a space then two or five digits. The data field for a UPC-E takes either seven or eight digits, optionally followed by a space then two or five digits.\n\nIf you need more types of barcodes, please let us know and we will upgrade our app.\n\n\n\n\nCalculate the check digit\n\n\t\n\nEnable this option to calculate the check digit for your barcode according to Modulo 43.\n\n\n\n\nAdd calculated checksum to text\n\n\t\n\nEnable this option to display the calculated check digit in the text.\n\n\n\n\nInclude text\n\n\t\n\nEnable this option to display the text below the barcode.\n\n\n\n\nSuppresses asterisks\n\n\t\n\nEnable this option to exclude asterisks before and after the text.\n\n\n\n\nWhitespace guard marks\n\n\t\n\nAdds whitespace guard marks \"<\" and \">\" before and after the barcode.\n\n\n\n\nText\n\n\t\n\nEnter the text for the barcode.\n\n\n\n\nFile name\n\n\t\n\nEnter the name of the generated PNG file.\n\n\n\n\nPadding Width\n\n\t\n\nEnter the padding width in pixels.\n\n\n\n\nPadding Height\n\n\t\n\nEnter the padding height in pixels.\n\n\n\n\nScale\n\n\t\n\nSpecify the final size of the barcode. E.g. value of 10 means 10x magnification.\n\n\n\n\nRotate\n\n\t\n\nSelect the rotation of the generated image.\n\nBarcodes\nGenerate barcode\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Phone number",
      "url": "https://www.make.com/en/help/apps/built-in-apps/phone-number",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsPhone number\nPhone number\nParse a phone number\n\nChecks the phone number validity and converts the entered phone number to normalized formats. Useful when users enter phone numbers in different formats.\n\nThe module returns the following information:\n\nCountry\n\nCountry Calling Code\n\nNumber\n\nExtension\n\nNational Format\n\nInternational Format\n\nNumber in E.164 format\n\nNumber in RFC 3966 format\n\nValidity\n\nType (fixed line or mobile)\n\nSample output for a US phone number:\n\nPhone number\nParse a phone number\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Currency",
      "url": "https://www.make.com/en/help/apps/built-in-apps/currency",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in appsCurrency\nCurrency\n\nThe Currency converter by Make lets you quickly get current exchange rates and convert an amount between two selected currencies. The European Central Bank exchange rates are applied to the conversion.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Built-in apps",
      "url": "https://www.make.com/en/help/apps/built-in-apps",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsBuilt-in apps\nBuilt-in apps\nIn this section\nArchive\nBarcodes\nCurrency\nEncryptor\nHTTP Agent\nPhone number\nXMP\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "watsonx.ai",
      "url": "https://www.make.com/en/help/apps/ai/watsonx-ai",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAIwatsonx.ai\nwatsonx.ai\n\nWith watsonx.ai modules in Make, you can infer the next tokens using a selected model and set of parameters in your watsonx.ai account.\n\nTo use the watsonx.ai modules, you must have an IBM watsonx.ai account. You can create an account at ibm.com/products/watsonx-ai.\n\nRefer to the IBM watson.ai API documentation for a list of available endpoints.\n\nConnect watsonx.ai to Make\n\nTo establish the connection, you must:\n\nObtain your API key in watsonx.ai.\n\nEstablish the connection in Make.\n\nObtain your API key in watsonx.ai\n\nTo obtain your API key from your watsonx.ai account:\n\nLog in to your watsonx.ai account using cloud.ibm.com.\n\nClick Manage > Access (IAM) > API keys.\n\nEnter a Name and Description for your API key and click Create.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nNote\n\nAt the time of this publication, all steps for Obtain your API key in watsonx.ai were checked and verified to be accurate. However this may have changed, so please see the IBM watsonx.ai documentation for the most up-to-date directions.\n\nEstablish the connection with watsonx.ai in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a watsonx.ai module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the IBM Cloud Region field, select a region.\n\nIn the Connection Level field, select Space or Project.\n\nIf you selected Space for your Connection Level, enter your Space ID. If you selected Project for your Connection Level, enter your Project ID.\n\nYour Project ID and Space ID can be found in your watsonx.ai account.\n\nProject ID\n\n\t\n\nSelect the 4-bar menu in the upper-left corner, click Projects, and then click View all projects.\n\nSelect your project and click the Manage tab. Your Project ID is listed in your project details.\n\n\n\n\nSpace ID\n\n\t\n\nThe Space ID is shown in the model's URL in your browser’s address bar. Copy the part of the URL that follows &space_id=.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild watsonx.ai Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nText Generation\nInfer Text\nOther\nMake an API Call\nwatsonx.ai\nConnect watsonx.ai to Make\nObtain your API key in watsonx.ai\nEstablish the connection with watsonx.ai in Make\nBuild watsonx.ai Scenarios\nText Generation\nOther\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Leonardo.Ai",
      "url": "https://www.make.com/en/help/apps/ai/leonardo-ai",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAILeonardo.Ai\nLeonardo.Ai\n\nWith Leonardo.Ai modules in Make, you can generate images, upload images, or make an API call in your Leonardo.Ai account.\n\nTo use the Leonardo.Ai modules, you must have a Leonardo.Ai account. You can create an account at app.leonardo.ai/auth/login.\n\nRefer to the Leonardo.Ai API documentation for a list of available endpoints.\n\nConnect Leonardo.Ai to Make\n\nTo establish the connection, you must:\n\nObtain your API key in Leonardo.Ai.\n\nEstablish the connection in Make.\n\nObtain your API key in Leonardo.Ai\n\nTo obtain your API key from your Leonardo.Ai account:\n\nLog in to your Leonardo.Ai account.\n\nClick API Access > Subscribe to API Plan.\n\nAfter subscribing to a plan, you will see the API Access Page.\n\nClick Create New Key.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API key field in Make.\n\nNote\n\nAt the time of this publication, all steps for Obtain your API Key in Leonardo.Ai were checked and verified to be accurate. However this may have changed, so please see the Leonardo.Ai Create your API key documentation for the most up-to-date directions.\n\nEstablish the connection with Leonardo.Ai in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Leonardo.Ai module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Leonardo.Ai modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Leonardo.Ai Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nGenerations\n\nGenerate an Image\n\nInit Images\n\nUpload an Image\n\nOther\n\nMake an API Call\n\nLeonardo.Ai\nConnect Leonardo.Ai to Make\nObtain your API key in Leonardo.Ai\nEstablish the connection with Leonardo.Ai in Make\nBuild Leonardo.Ai Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Cohere",
      "url": "https://www.make.com/en/help/apps/ai/cohere",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAICohere\nCohere\n\nWith Cohere modules in Make, you can create a conversation, classify a text, or make an API all in your Cohere account.\n\nTo use the Cohere modules, you must have a Cohere account. You can create an account at cohere.com.\n\nRefer to the Cohere API documentation for a list of available endpoints.\n\nConnect Cohere to Make\n\nTo establish the connection, you must:\n\nObtain your API key in Cohere.\n\nEstablish the connection in Make.\n\nObtain your API key in Cohere\n\nTo obtain your API key from your Cohere account:\n\nLog in to your Cohere account.\n\nIn the left sidebar, click API Keys.\n\nClick +New Trial Key.\n\nNote: If you wish to use an API key for production-grade performance, you must have a paid plan to obtain a Production API key.\n\nEnter a Key Name and click Generate Trial Key.\n\nCopy the API key value shown and store it in a safe place.\n\nYou will use this value in the API Key field in Make.\n\nNote\n\nAt the time of this publication, all steps for Obtain your API key in Cohere were checked and verified to be accurate. However this may have changed, so please see the Cohere documentation for the most up-to-date directions.\n\nEstablish the connection with Cohere in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add a Cohere module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the API Key field, enter the API key copied above.\n\nClick Save.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Cohere modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Cohere Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nActions\n\nCreate a Conversation\n\nClassify a Text\n\nMake an API Call\n\nCohere\nConnect Cohere to Make\nObtain your API key in Cohere\nEstablish the connection with Cohere in Make\nBuild Cohere Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "AX Semantics",
      "url": "https://www.make.com/en/help/apps/ai/ax-semantics",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAIAX Semantics\nAX Semantics\n\nThe AX Semantics modules allow you to monitor, create, update, send, retrieve, list, and delete the documents from your AX Semantics account.\n\nGetting Started with AX Semantics\n\nPrerequisites\n\nAn AX Semantics account - create an account at en.ax-semantics.com/.\n\nNote\n\nThe module dialog fields that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nConnecting AX Semantics to Make\n\nTo connect your AX Semantics account to Make you need to obtain the Refresh Token from your AX Semantics account and insert it in the Create a connection dialog in the Make module.\n\nLog in to your AX Semantics account.\n\nClick API Access.\n\nCopy the Refresh Token to your clipboard.\n\nLog in to your Make account, add a module from the AX Semantics app into an Make scenario.\n\nClick Add next to the Connection field.\n\nIn the Connection name field, enter a name for the connection.\n\nIn the Refresh Token field, enter the token details copied in step 3 and click Continue.\n\nThe connection has been established.\n\nTriggers\nWatch Generated Content\nActions\nAdd a Document\nUpdate a Document\nGet Details of a Document\nDelete a Document\nMake an API Call\nExample of Use - List Collections\nSearches\nSearch Documents\nSetting Up AX Semantics Webhooks\nAX Semantics\nGetting Started with AX Semantics\nConnecting AX Semantics to Make\nTriggers\nWatch Generated Content\nActions\nAdd a Document\nUpdate a Document\nGet Details of a Document\nDelete a Document\nMake an API Call\nExample of Use - List Collections\nSearches\nSearch Documents\nSetting Up AX Semantics Webhooks\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Azure OpenAI",
      "url": "https://www.make.com/en/help/apps/ai/azure-openai",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAIAzure OpenAI\nAzure OpenAI\n\nWith Azure OpenAI modules in Make, you can generate an image, create a transcription, create a translation, create a chat completion, and make an API call in your Azure OpenAI account.\n\nTo use the Azure OpenAI modules, you must have an Azure account with billing enabled. You can create an account at azure.microsoft.com.\n\nRefer to the Azure Open API documentation for a list of available endpoints.\n\nConnect Azure OpenAI to Make\n\nTo establish the connection, you must:\n\nSet up a subscription in Azure.\n\nAdd a resource group in Azure.\n\nCreate an Azure OpenAI resource.\n\nObtain your Azure OpenAI key.\n\nEstablish the connection in Make\n\nSet up a subscription in Azure\n\nTo set up a subscription in your Azure account:\n\nLog in to portal.azure.com.\n\nUnder Azure services, click Subscriptions.\n\nClick + Add.\n\nUnder Basics, enter a Subscription name.\n\nSelect your Billing account, Billing profile, and Invoice section.\n\nSelect your Plan.\n\nNote: Select your Azure Plan to determine the subscription type to create.\n\nClick Next.\n\nOptional: Enter additional subscription information under Advanced, Budget, and Tags, and click Next.\n\nClick Review + create to review your choices, then click Create.\n\nAdd a resource group in Azure\n\nTo add a resource group in your Azure account:\n\nOn the Azure portal home page, under Azure services, click Resource groups.\n\nClick + Create.\n\nIn the Subscription field, select the subscription that you created.\n\nIn the Resource group field, enter a name.\n\nSelect your Region and click Next.\n\nNote: The region you choose will affect the actions that can be performed within this app. Not all capabilities are available in all regions. For more information, see the Azure OpenAI Service models documentation.\n\nOptional: Enter Tags for your resource group and click Next.\n\nClick Review + create to review your choices, then click Create.\n\nCreate an Azure OpenAI resource\n\nTo create an Azure OpenAI resource in your Azure account:\n\nOn the Azure portal home page, under Azure services, click Azure OpenAI.\n\nClick + Create.\n\nIn the Subscription field, select the subscription that you created.\n\nIn the Resource group field, select the resource group you created.\n\nUnder Instance Details, select a Region.\n\nNote: The region you choose will affect the actions that can be performed within this app. Not all capabilities are available in all regions. For more information, see the Azure OpenAI Service models documentation.\n\nIn the Name field, enter a name for your Azure OpenAI Resource.\n\nNote: This will also be your custom domain in your endpoint.\n\nSelect a Pricing tier.\n\nNote: The pricing tier you select determines how much you will be billed each month.\n\nClick Next.\n\nSelect the Type of network security you wish to configure for this resource and click Next.\n\nOptional: Enter Tags for your resource group and click Next.\n\nClick Review + submit to review your choices, then click Create.\n\nObtain your Azure OpenAI key\n\nTo obtain your Azure OpenAI key:\n\nOn the Azure portal home page, under Azure services, click All resources.\n\nClick the name of the resource that you created.\n\nIn the left navigation, click Keys and Endpoint.\n\nCopy the Key 1 or Key 2 value shown and store it in a safe place.\n\nNote: Either value can be used when creating the connection in Make.\n\nNote\n\nAt the time of this publication, all steps for Set up a subscription in Azure, Add a resource group in Azure, Create an Azure OpenAI resource, and Obtain your Azure OpenAI key were checked and verified to be accurate. However this may have changed, so please see the Microsoft Azure OpenAI documentation for the most up-to-date directions.\n\nEstablish the connection with Azure OpenAI in Make\n\nTo establish the connection in Make:\n\nLog in to your Make account, add an Azure OpenAI module to your scenario, and click Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nClick Create an Azure Management Connection.\n\nOptional: In the Connection name field, enter a name for the Azure Management Connection.\n\nOptional: Click Show advanced settings and enter your custom app client credentials. For more information, refer to the Microsoft documentation on setting up a client application.\n\nIf requested, use the following Redirect URI when creating your custom app: https://www.make.com/oauth/cb/azure-openai\n\nClick Save.\n\nSelect your Subscription ID that you created in the previous steps.\n\nThis is a unique identifier, Subscription name, associated with the Azure account that has been granted access to Azure OpenAI services. You created this name under Set up a subscription in Azure.\n\nSelect your Resource Group Name that you created in the previous steps.\n\nThis is the name of the Azure resource group where Azure OpenAI resources will be organized. You created this name under Add a resource group in Azure.\n\nSelect Your Azure OpenAI Resource Name that you created in the previous steps.\n\nYou created this name under Create an Azure OpenAI resource.\n\nIn the Your Azure OpenAI API Key field, enter the OpenAI key copied above.\n\nIf prompted, authenticate your account and confirm access.\n\nYou have successfully established the connection. You can now edit your scenario and add more Azure OpenAI modules. If your connection requires reauthorization at any point, follow the connection renewal steps here.\n\nBuild Azure OpenAI Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nActions\n\nCreate a Chat Completion\n\nCreate a Transcription (Whisper)\n\nCreate a Translation (Whisper)\n\nGenerate an Image (DALL-E 3)\n\nMake an API Call\n\nAzure OpenAI\nConnect Azure OpenAI to Make\nSet up a subscription in Azure\nAdd a resource group in Azure\nCreate an Azure OpenAI resource\nObtain your Azure OpenAI key\nEstablish the connection with Azure OpenAI in Make\nBuild Azure OpenAI Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Apps",
      "url": "https://www.make.com/en/help/apps",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterApps\nApps\n\nIn this section\nIntroduction to Make apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Introduction to Make apps",
      "url": "https://www.make.com/en/help/apps/introduction-to-make-apps",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nWhat are Make apps?\nTypes of Make apps\nVerified apps\nCommunity apps\nCustom apps\nAI\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsIntroduction to Make apps\nIntroduction to Make apps\n\nMake is a no-code integration platform that allows you to connect multiple apps and transfer data between them. With the modules in these apps, you can create scenarios that can be scheduled to fit your workflows.\n\nThe advantage of Make is that you don't need to be a coder to share data across apps. Read more about how Make works.\n\nWhat are Make apps?\n\nMake apps are integrations of third-party APIs or Make built-in tools. Each app consists of modules.\n\nTypes of Make apps\n\nMake divides apps into app types based on their origin and availability:\n\nverified apps: apps verified by Make developers,\n\ncommunity apps: apps shared on the Apps Marketplace.\n\ncustom apps: apps made by Make users in the Apps Platform,\n\nVerified apps\n\nVerified apps are developed either by Make developers or by other Make users. Verified apps made by a third party have to pass the Make app review process and have to be actively maintained.\n\nVerified apps further differ in their availability in Make pricing plans:\n\nstandard apps: All Make users can use standard apps,\n\nenterprise apps: Users in organizations with the Enterprise plan can use enterprise apps.\n\nThe enterprise apps are in the scenario editor marked with a label:\n\nCommunity apps\n\nCommunity apps are developed by Make partners and power users who have taken dedicated training. In contrast to verified apps, the community apps don't go through the app reviews to be approved by Make.\n\nThe community apps are shared as part of the Apps Marketplace. You can check all the community apps on the Make Apps & services page when you filter to show the community apps only. In the scenario editor, you can identify the community apps by the \"Community\" label:\n\nCommunity apps may require an additional purchase to use. Make does not earn money or commission on these purchases. You purchase the community apps directly from the developer.\n\nNote\n\nThe Apps Marketplace is currently in the beta stage. Support, maintenance, and monetization of a community app is the responsibility of the community app developer.\n\nFor further information, check the following sections of the Apps Marketplace documentation:\n\nCommunity apps monetization\n\nCommunity apps support\n\nCustom apps\n\nCustom apps are developed by other Make users. You can create a custom app anytime. To learn more about creating custom apps, check the custom apps documentation.\n\nCustom apps are available to Make users based on their visibility:\n\nprivate apps: The custom app developer and users in all organizations they are part of can use the app,\n\ninvite-only apps: Access to the app is on an invite-only basis. The app developer has to share an invite link with you.\n\nIn this section\nWhat are Make apps?\nTypes of Make apps\nVerified apps\nCommunity apps\nCustom apps\nIntroduction to Make apps\nWhat are Make apps?\nTypes of Make apps\nVerified apps\nCommunity apps\nCustom apps\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "ArtiBot.ai",
      "url": "https://www.make.com/en/help/apps/ai/artibot-ai",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAIArtiBot.ai\nArtiBot.ai\n\nWith ArtiBot.ai modules in Make, you can monitor the leads in your ArtiBot.ai account.\n\nTo use the ArtiBot.ai modules, you must have a ArtiBot.ai account. You can create an account at artibot.ai.\n\nRefer to the ArtiBot.ai API documentation for a list of available endpoints.\n\nSet Up ArtiBot.ai Webhooks\n\nThis app uses webhooks to trigger a scenario when an event occurs instantly. All webhook modules have an instant tag next to their name.\n\nTo establish the webhook connection, you must:\n\nObtain your webhook URL in Make.\n\nSetup your webhook in ArtiBot.ai.\n\nObtain your webhook URL in Make\n\nTo obtain your webhook URL:\n\nLog in to your Make account, add an ArtiBot.ai instant module to your scenario and click Create a webhook.\n\nOptional: Enter a name for the webhook in the Webhook name field.\n\nClick Save > Copy address to clipboard.\n\nYou will use this value in the Payload URL field in ArtiBot.ai.\n\nSetup your webhook in ArtiBot.ai\n\nTo setup your webhook in ArtiBot.ai:\n\nLog in to your ArtiBot.ai account.\n\nIn the top left corner, click Add ArtiBot.\n\nChoose a template for the new ArtiBot.\n\nClick Notifications.\n\nIn the Send New Leads To section, click Webhooks > Add Webhook\n\nEnter a name for the webhook.\n\nPaste the copied webhook URL in the Payload URL field.\n\nIn the Secret field, enter a unique password to secure and verify webhook connections.\n\nClick Save.\n\nArtiBot.ai will now send data to Make through the webhook when the selected event occurs.\n\nBuild ArtiBot.ai Scenarios\n\nAfter connecting the app, you can perform the following actions:\n\nTriggers\n\nWatch Leads\n\nArtiBot.ai\nSet Up ArtiBot.ai Webhooks\nObtain your webhook URL in Make\nSetup your webhook in ArtiBot.ai\nBuild ArtiBot.ai Scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "AI",
      "url": "https://www.make.com/en/help/apps/ai",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nIntroduction to Make apps\nAI\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nBuilt-in apps\nBusiness Intelligence\nBusiness Operations and ERPs\nCommerce\nCommunication\nCRM and Sales tools\nCustomer Support\nDatabase\nEducation\nFile and Document Management\nHR management\nInternet of Things\nIT and Development\nLanguage Tools\nLifestyle\nMarketing\nProductivity\nProcess Management\nSurveys and Forms\nTravel\nWebsite Building\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterAppsAI\nAI\nIn this section\nAX Semantics\nArtiBot.ai\nAzure OpenAI\nCohere\nGoogle Vertex AI (Gemini)\nLeonardo.Ai\nwatsonx.ai\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Devices",
      "url": "https://www.make.com/en/help/devices",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nAdding the Device Using a QR Code\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterDevices\nDevices\n\nTo use Make for Apple iOS or Make Android apps, it is necessary to add your iOS or Android device to your Make account.\n\nYou can add your device to Make by opening the mobile app and scanning a QR code generated on the Devices page.\n\nPrerequisites:\n\nMake for Apple iOS app or Make for Android app installed on your device\n\nAdding the Device Using a QR Code\n\nLog in to your Make account.\n\nGo to Devices, and click + Add device.\n\nUnder Device name, enter the name of your device and click Continue.\n\nOpen the Make app on your iPhone or Android device, and tap Scan QR Code.\n\nScan the QR code that appears after step 3.\n\nClick Save.\n\nYour mobile device now displays your account settings. Your browser now lists your device on the Devices page.\n\nYou can now proceed with setting up the Make for the iOS app or Make for the Android app.\n\nIn this section\nAdding the Device Using a QR Code\nDevices\nAdding the Device Using a QR Code\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Throw",
      "url": "https://www.make.com/en/help/errors/throw",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nAlternate solution\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsThrow\nThrow\nImportant\n\nThis article describes alternatives and workarounds to mimic the Throw error handling directive.\n\nMake does not offer the Throw error handling directive. This feature implementation is being analyzed and evaluated.\n\nAlternate solution\n\nTo conditionally throw an error you may configure a module to make it optionally purposely fail during its operation. One possibility is to employ JSON > Parse JSON module configured to optionally throw an error (BundleValidationError in this case):\n\nYou can then attach one of the error handling directives to the error handling route to:\n\nforce the scenario execution to stop and perform the rollback phase: Rollback\n\nforce the scenario execution to stop and perform the commit phase: Commit\n\nstop the processing of a route: Ignore\n\nstop the processing of a route and storing it in the queue of incomplete executions: Break\n\nThe following example shows the use of the Rollback directive:\n\nWorkaround - Using HTTP Module\n\nUsecase - Retry after some time if there is no record found using Break Directive. Usually, this is crucial when your record doesn't update instantly and you would like to process it later on in automation. Using this Break directive could be handy with the lesser complexity of the setup.\n\nCurrent Barrier - Make does not offer a module that would enable you to easily conditionally generate (throw) errors.\n\nTo give you a better understanding here is the current setup without modification: This scenario search in Zendesk if there is no use it won’t throw an error forcefully to search it again you would need to implement a complex procedure by saving the record.\n\nSolution - To conditionally throw an error you may replace the module where you want to throw an error, with an HTTP module then perform the search in a second scenario linking the HTTP module using webhook with a second scenario. If no result found you can customize the module to throw an error\n\nScenario One - \n\nReplace the Module where you want to throw an error with HTTP > Make a Request module\n\nConfigure the URL within the query parameter that you will get from the Custom Webhook module and add an optional query parameter to search for the email\n\nEnable the advanced settings and check the evaluate all the states as errors.\n\nAdd a Break handler in that HTTP module and configure the setup to run later.\n\nScenario 2 -\n\nSetup Webhooks > Custom Webhooks as a trigger and copy the URL use it in the HTTP module as shown in the previous steps.\n\nHere use the Zendesk > Search for a User module use the parameter from the HTTP module to perform a query. Enable Continue the execution of the route even if the module returns no results\n\nAdd a Router and create two routes\n\nSetup the first filter for Record Exist\n\nThe second one for Record Doesn’t exist\n\nConsecutively setup the webhook response module\n\nIf result found - send 200 status along with the required body in JSON format.\n\nIf no result found - Send 4xx/404 and in the JSON no record found\n\nThe following example returning the result - You will notice when the Zendesk module executes the API it doesn’t send any error message but in the action, we’re replicating the error using the HTTP module.\n\nIn this section\nAlternate solution\nThrow\nAlternate solution\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Exponential backoff",
      "url": "https://www.make.com/en/help/errors/exponential-backoff",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsExponential backoff\nExponential backoff\n\nMake uses exponential backoff to automatically schedule scenario reruns with increasing time delays. The scenario reruns trigger when a module in the scenario outputs:\n\nConnectionError\n\nModuleTimeoutError\n\nThe time delays between the scenario reruns are:\n\n1 minute\n\n2 minutes\n\n5 minutes\n\n10 minutes\n\n1 hour\n\n3 hours\n\n12 hours\n\n24 hours\n\nThis means that when a module in your scenario outputs the ConnectionError because the third-party service is unavailable, Make schedules the rerunning of the scenario one minute after the error occurs.\n\nIf a module during the rerun outputs the ConnectionError again, Make schedules another rerun after 2 minutes and so on. If the 8th attempt fails, Make disables scheduling of the scenario.\n\nNote\n\nUntil Make disables scheduling the scenario, the scenario follows the run schedule in addition to the exponential backoff reruns.\n\nIf you want Make to wait with scheduling the next scenario runs until the reruns finish, enable sequential processing in scenario settings.\n\nNote\n\nIf you enable the option to store incomplete executions in the scenario settings, Make stores the scenario run in incomplete executions.\n\nMake then schedules scenario reruns from the incomplete execution data. If all rerun attempts fail, Make keeps the scenario incomplete execution for you to resolve manually.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Types of errors in Make",
      "url": "https://www.make.com/en/help/errors/types-of-errors-in-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nAccountValidationError\nBundleValidationError\nConnectionError\nDataError\nDataSizeLimitExceededError\nDuplicateDataError\nIncompleteDataError\nInconsistencyError\nMaxFileSizeExceededError\nModuleTimeoutError\nOperationsLimitExceededError\nRateLimitError\nRuntimeError\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsTypes of errors in Make\nTypes of errors in Make\n\nWithin a scenario, you can have numerous modules and item mappings. Together, they create your scenario. Each of these elements can create an unexpected event -- an error. Make categorizes errors based on their origin and their cause.\n\nFor example, the ConnectionError happens when the app is unavailable because of maintenance or downtime on the third-party side and Make can’t connect to the app servers.\n\nWhen a module returns an error, Make highlights the module with the \"Caution\" sign. To check the error type, click the thought bubble above the module:\n\nNote\n\nMake follows the standard error codes and their definitions. Note that it is possible that the third party may not fully comply with the standard.\n\nAccountValidationError\n\nA module outputs the AccountValidationError when Make cannot authenticate you in the third-party app. For example, when you change your credentials in the app or your credentials expire and you don't update them in the connection, the app module will output the AccountValidationError.\n\nThe AccountValidationError appears also with the HTTP status codes 401 and 403.\n\nIf a module outputs the AccountValidationError, the scenario ends with an error. Because the AccountValidationError is a fatal error, Make immediately disables the scenario scheduling, regardless of the number of consecutive errors.\n\nCaution\n\nIt is not possible to handle the AccountValidationError with an error handler, because the error happens during the initialization of the scenario.\n\nTo fix the AccountValidationError, review your credentials in the app and the connection in Make. If necessary, create a new connection for the app. If you are getting the AccountValidationError frequently, contact our Support.\n\nBundleValidationError\n\nA module outputs the BundleValidationError when the bundle entering the module doesn't pass validation. Validation means that before processing a bundle in a module, Make checks whether data types match in the module mappings and whether there are no missing values in the module required fields.\n\nThe BundleValidationError appears also with the HTTP status codes 400 and 404.\n\nFor example, you get the BundleValidationError when you map text to a module settings field that requires a date, or when you map an empty value to a required field in the module settings.\n\nIf a module outputs the BundleValidationError with no error handling, the scenario ends with an error. When your scenario finishes with an error for the number of consecutive errors in a row, Make disables the scheduling of your scenario.\n\nThe best way to handle this error is to review your mapping in the module settings.\n\nFor tips on how to handle missing data in a scenario check out the article about how to fix missing data errors.\n\nConnectionError\n\nA module outputs the ConnectionError when the third-party app is unavailable. For example, the third-party service might be offline because of maintenance. This error uses the HTTP 502, 503 and 504 status codes.\n\nIf a module outputs the ConnectionError with no error handling, the scenario ends with an error. Make repeats the scenario run with increasing time delays.\n\nTo fix the ConnectionError, check the article about fixing ConnectionErrors.\n\nDataError\n\nA module outputs the DataError when data sent by the module doesn't pass validation on the third-party side. For example, when you try to create a tweet with the Twitter > Create a Tweet module that has more than 280 characters, the Create a Tweet module outputs the DataError because tweets have a maximum length of 280 characters.\n\nAnother situation when you get the DataError is when you map an incorrect data type to a function. For example, when you map data with the text data type to the parseDate function.\n\nIf a module outputs the DataError with no error handling, the scenario ends with an error. When your scenario finishes with an error for the number of consecutive errors in a row, Make disables the scheduling of your scenario.\n\nTo fix the DataError, review your mapping and identify the reason why the error happens. If you cannot fix the error with different mapping, you can use the Resume and Ignore error handlers.\n\nDataSizeLimitExceededError\n\nA module outputs the DataSizeLimitExceededError when you run out of data transfer quota. Your data transfer limit is calculated from the operations limit. You can check the limit calculation in the pricing plans overview.\n\nIf a module outputs the DataSizeLimitExceededError with no error handling, the scenario ends with an error. Because the DataSizeLimitExceededError is a fatal error, Make immediately disables the scenario scheduling, regardless of the number of consecutive errors.\n\nTo fix the DataSizeLimitExceededError, consider purchasing extra operations or upgrading your organization's subscription plan.\n\nDuplicateDataError\n\nA module outputs the DuplicateDataError when you send the same data to a module that doesn't allow duplicates. For example, when you try to create a new user in an app and the user's e-mail address has to be unique, but the e-mail address is used already. The module outputs the DuplicateDataError, because the e-mail address is registered with another user already.\n\nIf a module outputs the DuplicateDataError with no error handling, the scenario ends with an error. When your scenario finishes with an error for the number of consecutive errors in a row, Make disables the scheduling of your scenario.\n\nIf you get the DuplicateDataError in your scenario, you should review your scenario design. For example, if you are using a database, you could first check if the database record exists with a search module. Or with the tweet example, you could just ignore the error with the Ignore error handler.\n\nIncompleteDataError\n\nA module outputs the IncompleteDataError when the module can get only part of the data from the third-party app.\n\nFor example, when you are uploading new photos to Google Photos and you have a scenario that downloads the photos at the same time. Make tries to download the photo that you are currently uploading. The photo file won't be complete and the Google Photos module will output the IncompleteDataError.\n\nIf a module outputs the IncompleteDataError with no error handling, the scenario ends with an error. Make pauses the scenario for 20 minutes and then runs the scenario again until the scenario succeeds or reaches the number of consecutive errors.\n\nIf you want to handle the IncompleteDataError, you can use the Break error handler.\n\nInconsistencyError\n\nA module outputs the InconsistencyError when an error happens during the scenario rollback. This error can occur when you make changes to a data store with two scenarios that run at the same time. If one scenario encounters an error and attempts to undo the changes in the rollback phase, but the other scenario already finished making changes, the changes cannot be safely undone and you get the InconsistencyError from the data store module in the first scenario.\n\nFor example, imagine two people making changes in the same part of a file. One of them saves changes before the other. What happens with the changes from the other person?\n\nIf a module outputs the InconsistencyError with no error handling, the scenario ends with an error. Because the InconsistencyError is a fatal error, Make immediately disables the scenario scheduling, regardless of the number of consecutive errors.\n\nTo fix the InconsistencyError, check your data and fix the data if necessary. If you are getting the InconsistencyError frequently, check the scenarios that use the database.\n\nMaxFileSizeExceededError\n\nA module outputs the MaxFileSizeExceededError when you try to process a file that exceeds the maximum file size. The maximum file size differs based on your organization's subscription. You can check the maximum file sizes in the pricing plans overview.\n\nFor example, if you use the Google Drive > Move a file module in an organization with the Core plan to move a file larger than 100 MB, you would get the MaxFileSizeExceededError.\n\nIf a module outputs the MaxFileSizeExceededError with no error handling, the scenario ends with an error. When your scenario finishes with an error for the number of consecutive errors in a row, Make disables the scheduling of your scenario.\n\nTo fix the MaxFileSizeError, you have to either make the file smaller (compress or split the file) or upgrade your organization's subscription plan.\n\nModuleTimeoutError\n\nA module outputs the ModuleTimeoutError when the module is requesting or processing data for more than 40 seconds. For example, this error can happen when you are retrieving a large amount of data from the app or when the app has reduced availability.\n\nIf a module outputs the ModuleTimeoutError with no error handling, the scenario ends with an error. Make repeats the scenario run with increasing time delays.\n\nTo fix the ModuleTimeoutError with search modules, set the Limit in module settings to a lower number. To deal with reduced availability, check the article about fixing ConnectionError.\n\nOperationsLimitExceededError\n\nA module outputs the OperationsLimitExceededError when you run out of operations. Your operations limit is set with your organization's subscription. You can check your operations limit in the pricing plans overview.\n\nIf a module outputs the OperationsLimitExceededError, the scenario ends with an error. Because the OperationsLimitExceededError is a fatal error, Make immediately disables the scenario scheduling, regardless of the number of consecutive errors.\n\nTo fix the OperationsLimitExceededError, consider purchasing extra operations or upgrading your organization's subscription plan.\n\nRateLimitError\n\nA module outputs the RateLimitError when you make too many requests over a time period to the app API. This error uses the HTTP 429 status code and follows the rate-limiting rules of the third party.\n\nFor example, the Make app modules output the RateLimitError when you reach the number of API calls per minute based on your subscription.\n\nIf a module outputs the RateLimitError with no error handling, the scenario ends with an error. Make pauses the scenario for 20 minutes and then runs the scenario again until the scenario succeeds.\n\nTo fix the RateLimitError, check the article about fixing the rate-limit errors.\n\nRuntimeError\n\nA module outputs the RuntimeError when the error reported by the third-party app doesn't meet the criteria for any other error type. For example, you get the RuntimeError when you use up all your tokens with the OpenAI > Create a Completion module.\n\nIf a module outputs the RuntimeError with no error handling, the scenario ends with an error. When your scenario finishes with an error for the number of consecutive errors in a row, Make disables the scheduling of your scenario.\n\nThere's no general rule to fixing the RuntimeError. Check the error message in the scenario history or try to reproduce the error with the Make DevTool.\n\nThe overview of error handling can help you create your error handling strategy.\n\nIn this section\nAccountValidationError\nBundleValidationError\nConnectionError\nDataError\nDataSizeLimitExceededError\nDuplicateDataError\nIncompleteDataError\nInconsistencyError\nMaxFileSizeExceededError\nModuleTimeoutError\nOperationsLimitExceededError\nRateLimitError\nRuntimeError\nTypes of errors in Make\nAccountValidationError\nBundleValidationError\nConnectionError\nDataError\nDataSizeLimitExceededError\nDuplicateDataError\nIncompleteDataError\nInconsistencyError\nMaxFileSizeExceededError\nModuleTimeoutError\nOperationsLimitExceededError\nRateLimitError\nRuntimeError\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Types of warnings in Make",
      "url": "https://www.make.com/en/help/errors/types-of-warnings-in-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExecutionInterruptedError\nOutOfSpaceError\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsTypes of warnings in Make\nTypes of warnings in Make\n\nWithin a scenario, you can have numerous modules and item mappings. Together, they create your scenario. Each of these elements can create an event that might need your attention -- a warning.\n\nA warning can also be the result of handling an error with the Break error handler. With the warning Make informs you that the Break error handler created an incomplete execution of your scenario.\n\nThe main difference between a warning and an error is, that a warning doesn't disable the scheduling of your scenario and warnings don't count into the number of consecutive errors.\n\nWhen a module returns a warning, Make highlights the module with the \"Warning\" sign. To check the error type, click the thought bubble above the module.\n\nWhen you use error handling, you will see a warning when the error handler activates. In the example, the Break error handler handled the BundleValidationError. The error handler activation turned the original error into a warning.\n\nExecutionInterruptedError\n\nA module outputs the ExecutionInterruptedError when the scenario runs for more than 40 minutes (5 minutes for the Free subscription). The module that is currently processing data outputs the warning.\n\nWhen a module outputs the ExecutionInterruptedError the scenario ends with a warning. The scenario doesn't process the remaining bundles. Make will keep scheduling further scenario runs.\n\nTo fix the ExecutionInterruptedError, consider strategies to optimize your scenario:\n\nSplit your scenario. You can use the combination of the following modules:\n\nMake > Run a scenario module and send your data as scenario inputs to the next scenario.\n\nNote\n\nYou need the Core plan to use the Make app and the Pro plan to use the scenario inputs.\n\nCheck the Make pricing.\n\nHTTP app to send relevant data to a webhook in the next scenario.\n\nFor example, if you are processing a lot of bundles in a scenario with 20 modules and the scenario ends with the ExecutionInterruptedError, you can split the scenario into two scenarios with 10 modules each.\n\nSet the search modules' Limit to a lower number to reduce the amount of data processed by the scenario.\n\nCheck the API documentation of the apps you use in the scenario. If the app’s API has a suitable endpoint that supports batch requests, you can use the JSON aggregator and the HTTP app to send your data in batches. In addition, you save on operation consumption.\n\nOutOfSpaceError\n\nData store modules output the OutOfSpaceError when Make cannot store any more data in the data store. You also get the OutOfSpaceError when you fill your incomplete execution storage.\n\nIf a module outputs the OutOfSpaceError with no error handling, the scenario ends with a warning. The scenario doesn't process the remaining bundles. Make will keep scheduling further scenario runs.\n\nTo fix the OutOfSpaceError in a scenario, you can use a backup data store with the Resume error handler. You should also check the data in the data store or your incomplete execution storage. You can also review the Make pricing.\n\nIn this section\nExecutionInterruptedError\nOutOfSpaceError\nTypes of warnings in Make\nExecutionInterruptedError\nOutOfSpaceError\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Resume error handler",
      "url": "https://www.make.com/en/help/errors/error-handlers/resume-error-handler",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlersResume error handler\nResume error handler\n\nThe Resume error handler replaces the module output with a substitute output when an error happens. You define the substitute output in the Resume error handler settings. The rest of the scenario uses the substitute output. Make processes the rest of the bundles in the scenario flow normally.\n\nFor example: This demo scenario contains five modules. The scenario is useful for tests and showing the effect of an error handler:\n\nJSON - Parse JSON provides test data in the form of an array of three record IDs.\n\nIterator splits the array into individual bundles.\n\nData store - Update a record: Updates the data in the data store.\n\nData store - Update a record: This module updates the data again. This time the module works differently. In the module mapping, there is a mapping that intentionally creates an error:\n\nThe mapping inserts a null value into the required Key field, which always creates the BundleValidationError.\n\nSlack - Send a message: Sends a message to a private testing channel.\n\nThis is how the example scenario looks:\n\nWhen we would run the example scenario, we would get the BundleValidationError:\n\nIf we added the Resume error handler to the Update a record module, the Resume error handler would replace the bundle with the substitute mapping. When the module outputs an error, Make would use the substitute bundle instead. The third bundle runs through the scenario:\n\nYou can use the Resume error handler when you have a substitute mapping that fixes the bundle and allows the data bundle to continue in the scenario flow. You can also use the Resume error handler to add a placeholder that marks the data bundle to check later.\n\nFor more information about error handling strategies check the overview of error handling.\n\nChange the bundle when it causes an error\n\nWith the Resume error handler, you can substitute the bundle that causes an error with your custom data. The custom data continue the rest of the scenario flow instead of the erroring bundle.\n\nIn the Resume error handler settings, you get the same fields as in the handled module settings. In the error handler fields, you can provide custom data that Make uses instead of the bundle that caused the error.\n\nFor example, the following scenario outputs an error in the Update a record module:\n\nTo change the erroring bundle for custom data and use them in the rest of the scenario, follow the steps:\n\nRight-click the module that is causing the error. In the menu, select Add error handler.\n\nSelect the Resume error handler.\n\nFill in the Resume handler settings with your custom mapping.\n\nSave your scenario.\n\nYou added the Resume error handler to your scenario. When an error occurs in the Data store module, the Resume error handler replaces the bundle with your custom mapping.\n\nResume error handler\nChange the bundle when it causes an error\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Rollback error handler",
      "url": "https://www.make.com/en/help/errors/error-handlers/rollback-error-handler",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlersRollback error handler\nRollback error handler\n\nThe Rollback error handler stops the scenario run and reverts changes made by modules that support transactions. They always use a database app, like MySQL or Data store. Make cannot undo actions made by modules that don't support transactions, like Gmail > Send an email or Dropbox > Delete a file.\n\nThe bundle that caused the error doesn't continue in the scenario flow. In addition, Make doesn't process any remaining bundles.\n\nMake marks the scenario run as an error in the scenario history. Make won't disable the scenario because of consecutive errors.\n\nNote\n\nModules that support transactions are labeled with the \"ACID\" label.\n\nBefore you use the Rollback or Commit error handlers, take a look at the auto commit scenario setting first.\n\nFor example: This demo scenario contains five modules. The scenario is useful for tests and showing the effect of an error handler:\n\nJSON - Parse JSON provides test data in the form of an array of three record IDs.\n\nIterator splits the array into individual bundles.\n\nData store - Update a record: Updates the data in the data store.\n\nData store - Update a record: This module updates the data again. This time the module works differently. In the module mapping, there is a mapping that intentionally creates an error:\n\nThe mapping inserts a null value into the required Key field, which always creates the BundleValidationError.\n\nHaving two data store modules doing the same thing, but one of them failing, will make a good example for the Commit and Rollback error handlers.\n\nSlack - Send a message: Sends a message to a private testing channel.\n\nThis is how the example scenario looks:\n\nWhen we would run the example scenario, we would get the BundleValidationError:\n\nIf we added the Rollback error handler to the Update a record module, the Rollback error handler would stop processing the bundle in the scenario. Make wouldn't process the remaining bundles.\n\nLet's check the data in the data store as well.\n\nBefore running the scenario, the data store contained the following data:\n\nThe mappings for the Update a record modules. The first module updates the ID column to the number 4 and the Name column to the text Test 4.\n\nThe second module updates the ID column to the number 5 and the Name column to the text Test 5.\n\nIf you disable the Auto-commit option in the scenario settings, Make reverts the changes that happened when Make was processing the bundle in modules that support transactions.\n\nThe first bundle of data gets through the scenario flow successfully and updates the first row of data in the data store both times. The first row contains the update from the second Update a record module: ID = 5, Name = Test 5.\n\nThe second bundle gets to the first Update a record module successfully, but causes an error in the second module. The Rollback error handler reverts the update from the second bundle and stops the scenario.\n\nThe first row now contains the update from the first module only: ID = 4, Name = Test 4.\n\nThe second row contains the original data: ID = 2, Name = Test 2.\n\nMake doesn't update the third row because the Rollback error handler stopped the scenario run already. The data in the third row remain the same: ID = 3, Name = Test 3.\n\nIf you keep the Auto-commit option enabled, Make reverts the changes made by the module that output the error if the module supports transactions.\n\nThe first bundle of data gets through the scenario flow successfully and updates the first row of data in the data store both times. Make commits all changes and they cannot be rolled back later.\n\nThe first row contains the update from the second Update a record module: ID = 5, Name = Test 5.\n\nThe second bundle gets to the first Update a record module successfully. Make commits all changes and they cannot be rolled back later. The second bundle causes an error in the second module.\n\nThe Rollback error handler prevents the update in the second module and stops the scenario. The second row contains the update from the first module only: ID = 4, Name = Test 4.\n\nMake doesn't update the third row because the Rollback error handler stopped the scenario run already. The data in the third row remain the same: ID = 3, Name = Test 3.\n\nYou can use the Rollback error handler to stop the scenario run and undo changes when the module outputs an error.\n\nFor more information about error handling strategies check the overview of error handling.\n\nUndo changes to your data when an error happens\n\nWith the Rollback error handler, you can stop the scenario and undo changes when the module outputs an error. You can only undo changes in modules that support transactions.\n\nNote\n\nModules that support transactions are labeled with the \"ACID\" label.\n\nBefore you use the Rollback or Commit error handlers, take a look at the auto commit scenario setting first.\n\nFor example, the following scenario outputs an error in the Data Store app module:\n\nTo stop the scenario and undo changes where possible when an error happens, follow the steps:\n\nRight-click the module that is causing the error. In the menu, select Add error handler.\n\nSelect the Rollback error handler.\n\nOptional: Go to scenario settings and disable the Auto-commit option.\n\nWhen an error happens, the module that outputs the error reverts changes if the module supports transactions. If you disable the Auto-commit option, all modules in the scenario that support transactions undo changes.\n\nSave your scenario.\n\nYou added the Rollback error handler to your scenario. When an error occurs in the Data store module, the scenario stops and Make reverts changes made by the erroring bundle in modules that support transactions.\n\nRollback error handler\nUndo changes to your data when an error happens\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Ignore error handler",
      "url": "https://www.make.com/en/help/errors/error-handlers/ignore-error-handler",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlersIgnore error handler\nIgnore error handler\n\nThe Ignore error handler ignores the error and removes the bundle from the scenario flow. The scenario run continues with the next bundle.\n\nYou can use the Ignore error handler when you know that there can be incorrect data in your scenario and they don't have an impact on your processes. The Ignore error handler prevents turning off the scenario when there's an error and marks the scenario run as a success even in case of errors.\n\nFor example: This demo scenario contains five modules. The scenario is useful for tests and showing the effect of an error handler:\n\nJSON - Parse JSON provides test data in the form of an array of three record IDs.\n\nIterator splits the array into individual bundles.\n\nData store - Update a record: Updates the data in the data store.\n\nData store - Update a record: This module updates the data again. This time the module works differently. In the module mapping, there is a mapping that intentionally creates an error:\n\nThe mapping inserts a null value into the required Key field, which always creates the BundleValidationError.\n\nSlack - Send a message: Sends a message to a private testing channel.\n\nThis is how the example scenario looks:\n\nWhen we would run the example scenario, we would get the BundleValidationError:\n\nIf we added the Ignore error handler to the Update a record module, the Ignore error handler would remove the bundle from the scenario flow. The bundle doesn't enter the fifth (Send a message) module. The third bundle runs through the scenario:\n\nFor more information about error handling strategies check the overview of error handling.\n\nKeep your scenarios running regardless of errors\n\nWith the Ignore error handler, you can remove the bundle that causes an error from the scenario flow and process the rest of the bundles in the scenario. In addition, Make will keep running your scenario on schedule instead of disabling scheduling because of an error.\n\nFor example, the following scenario outputs an error in the Update a record module:\n\nTo ignore the error and keep your scenario running regardless of errors, follow the steps:\n\nRight-click the module that is causing the error. In the menu, select Add error handler.\n\nSelect the Ignore error handler.\n\nSave your scenario.\n\nYour scenario keeps running regardless of errors. When an error occurs in the Data store module, the Ignore error handler removes the bundle from the scenario flow.\n\nIgnore error handler\nKeep your scenarios running regardless of errors\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Commit error handler",
      "url": "https://www.make.com/en/help/errors/error-handlers/commit-error-handler",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlersCommit error handler\nCommit error handler\n\nThe Commit error handler stops the scenario run and commits changes in your database apps. If your scenario is not using apps that support transactions, like MySQL or Data store, the Commit error handler just stops the scenario.\n\nNote\n\nModules that support transactions are labeled with the \"ACID\" label.\n\nBefore you use the Rollback or Commit error handlers, take a look at the auto commit scenario setting first.\n\nThe bundle that caused the error doesn't go through the rest of the scenario flow. Make doesn't process the rest of the bundles.\n\nFor example: This demo scenario contains five modules. The scenario is useful for tests and showing the effect of an error handler:\n\nJSON - Parse JSON provides test data in the form of an array of three record IDs.\n\nIterator splits the array into individual bundles.\n\nData store - Update a record: Updates the data in the data store.\n\nData store - Update a record: This module updates the data again. This time the module works differently. In the module mapping, there is a mapping that intentionally creates an error:\n\nThe mapping inserts a null value into the required Key field, which always creates the BundleValidationError.\n\nHaving two data store modules doing the same thing, but one of them failing, will make a good example for the Commit and Rollback error handlers.\n\nSlack - Send a message: Sends a message to a private testing channel.\n\nThis is how the example scenario looks:\n\nWhen we would run the example scenario, we would get the BundleValidationError:\n\nIf we added the Commit error handler to the Update a record module, the Commit error handler would stop processing the bundle in the scenario and save changes to your data in database apps. Make wouldn't process the remaining bundles.\n\nLet's check the data in the data store as well.\n\nBefore running the scenario, the data store contained the following data:\n\nThe mappings for the Update a record modules. The first module updates the ID column to the number 4 and the Name column to the text Test 4.\n\nThe second module updates the ID column to the number 5 and the Name column to the text Test 5.\n\nAfter running the scenario, Make would update the data in the data store:\n\nThe first bundle of data gets through the scenario flow successfully and updates the first row of data in the data store both times. The first row contains the update from the second Update a record module: ID = 5, Name = Test 5.\n\nThe second bundle gets to the first Update a record module successfully, but causes an error in the second module.\n\nThe Commit error handler saves the update in the first module, but prevents the update in the second module and stops the scenario. The second row contains the update from the first module only: ID = 4, Name = Test 4.\n\nMake doesn't update the third row because the Commit error handler stopped the scenario run already. The data in the third row remain the same: ID = 3, Name = Test 3.\n\nFor more information about error handling strategies check the overview of error handling.\n\nStop the scenario when an error happens\n\nWith the Commit error handler, you can stop the scenario when an error happens. Make saves changes in the database apps in your scenario and doesn't process the rest of the bundles in the scenario flow.\n\nNote\n\nModules that support transactions are labeled with the \"ACID\" label.\n\nBefore you use the Rollback or Commit error handlers, take a look at the auto commit scenario setting first.\n\nFor example, the following scenario outputs an error in the Data Store app module:\n\nTo stop the scenario and save changes, follow the steps:\n\nRight-click the module that is causing the error. In the menu, select Add error handler.\n\nSelect the Commit error handler.\n\nSave your scenario.\n\nYou added the Commit error handler to your scenario. When an error occurs in the Data store module, the scenario stops and Make saves changes in modules that support transactions.\n\nCommit error handler\nStop the scenario when an error happens\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Break error handler",
      "url": "https://www.make.com/en/help/errors/error-handlers/break-error-handler",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlersBreak error handler\nBreak error handler\n\nThe Break error handler removes the erroring bundle from the scenario flow. Make stores the error message, mappings and the remaining scenario flow as an incomplete execution. Depending on the Break error handler settings, Make finishes the incomplete scenario runs automatically or stores them until you resolve them yourself.\n\nNote\n\nAutomatic resolution of errors is most effective for temporary errors or errors where another attempt might be successful. For example, the ConnectionError or RateLimitError are temporary errors.\n\nThe Break error handler with automatic finishing of incomplete executions is similar to the \"Retry\" functionality.\n\nMake processes the rest of the bundles in the scenario flow.\n\nTo use the Break error handler in your scenario, you have to enable incomplete executions in scenario settings.\n\nFor example: This demo scenario contains five modules. The scenario is useful for tests and showing the effect of an error handler:\n\nJSON - Parse JSON provides test data in the form of an array of three record IDs.\n\nIterator splits the array into individual bundles.\n\nData store - Update a record: Updates the data in the data store.\n\nData store - Update a record: This module updates the data again. This time the module works differently. In the module mapping, there is a mapping that intentionally creates an error:\n\nThe mapping inserts a null value into the required Key field, which always creates the BundleValidationError.\n\nSlack - Send a message: Sends a message to a private testing channel.\n\nThis is how the example scenario looks:\n\nWhen we would run the example scenario, we would get the BundleValidationError:\n\nIf we added the Break error handler to the Update a record module, the Break error handler would remove the bundle from the scenario flow. The bundle that caused the error doesn't continue through the rest of the scenario. Instead, Make creates an incomplete execution to store the error type, mappings and the remaining scenario flow.\n\nMake would then process the remaining bundles in the scenario flow.\n\nFor more information about error handling strategies check the overview of error handling.\n\nStore the scenario when an error happens\n\nWith the Break error handler, you can store the remaining scenario flow in the scenario incomplete executions when an error happens. Make also stores the error message, scenario mappings and data.\n\nYou can finish the scenario run in the incomplete executions tab manually or Make can finish the run automatically.\n\nFor example, the following scenario outputs an error in the Data Store app module:\n\nTo store the scenario as an incomplete execution, follow the steps:\n\nRight-click the module that is causing the error. In the menu, select Add error handler.\n\nSelect the Break error handler.\n\nOptional: In the error handler settings, select if you want to automatically finish the incomplete executions. For automatic completions, you can set the number of attempts and the time delay between them.\n\nConfirm the Break handler settings with the OK button.\n\nEnable storing of incomplete executions in scenario settings.\n\nSave your scenario.\n\nYou added the Break error handler to your scenario. When an error occurs in the Data store module, Make creates an incomplete execution. The scenario incomplete execution contains the error message, scenario mappings and data.\n\nIf you use the automatic scenario completion, Make attempts to finish the scenario automatically.\n\nBreak error handler\nStore the scenario when an error happens\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Overview of error handling in Make",
      "url": "https://www.make.com/en/help/errors/how-to-handle-errors-in-make/overview-of-error-handling-in-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nOverview of error handling in Make\nFixing rate limit errors\nFixing connection errors\nFixing missing data errors\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsHow to handle errors in MakeOverview of error handling in Make\nOverview of error handling in Make\n\nWhen you are creating scenarios, you might encounter unexpected data or unexpected circumstances. Make notifies you about these events with an error to keep your scenarios reliable and functioning.\n\nYou can use error handlers to deal with errors or unexpected events in your scenario. An error handler connects to a module with the error handling route. When the module outputs an error, the error handling route activates and runs the error handler.\n\nIf an error occurs that is handled by an error handler, Make keeps scheduling your scenario because Make can assume that you anticipated the situation and prepared for it.\n\nThere are 5 error handlers in Make:\n\nIgnore\n\nResume\n\nCommit\n\nRollback\n\nBreak\n\nThe error handling route\n\nAn error handler is always at the end of the error handling route. The error handling route has a transparent filling:\n\nWhen an error handler activates, it doesn't consume operations. Make doesn't bill you for handling unexpected events in your scenario.\n\nThe error handling route doesn't have to have an error handler. For example, in the error handling route, there can be only a Slack > Create a message module to send you a Slack notification when an error happens.\n\nIf no module outputs an error in the error handling route, Make ignores the error. That means that the two error handling routes on the pictures work the same:\n\nIf a module in the error handling route outputs an error, the scenario run ends with an error.\n\nHow to identify errors\n\nWhen you are building or checking your scenario in the scenario editor, Make highlights the module that caused the error with a warning sign in front of the module name and in the list of bundles.\n\nWhen you click the bubble with the warning sign, you can check the bundle that caused the error in the module:\n\nShows the error type and the error message.\n\nThe red fields are quick action buttons. You can click the buttons to connect the Ignore error handler to the module.\n\nThe first button connects the Ignore error handler with the module, to ignore all errors the module outputs.\n\nThe second button inserts the Ignore error handler with a filter. The filter only allows errors that match the current error type to pass through. With the example on the pictures above, Make would ignore only the DataError.\n\nThe purple action button opens the Make Help Center in a pop-up window.\n\nHow to approach error handling\n\nYou have multiple options on how to handle errors in Make. To determine the right error handling strategy, you should consider:\n\nHow important are the data the scenario processes?\n\nFor really important scenarios, Make can store partial scenario runs in incomplete executions. You can resolve the incomplete scenario runs manually or automatically.\n\nWhat type of error does the module output and how frequently?\n\nIf the error occurs rarely and it's a temporary error, like the RateLimitError, you can rely on the default scenario pausing or the backoff. But if the error is critical, like the InvalidAccessTokenError or the InconsistencyError, you should set up error handling.\n\nWhat is the impact of the error?\n\nIf the error has no impact on your data or your processes, you could ignore the error with the Ignore error handler. If the error has a high impact on your processes, you should consider enabling incomplete executions in scenario settings.\n\nFor ideas about specific error handling strategies, you can check the list of dedicated articles.\n\nScenario settings that impact error handling\n\nThe scenario settings play a key role in error handling. The following list focuses on how some scenario settings influence error handling. For more info about scenario settings, check the dedicated article.\n\nAllow storing of incomplete executions\n\nEnable this option to store the incomplete scenario run when a module in the scenario outputs an error.\n\nWith incomplete executions enabled, Make stores the scenario state when the error happened as an incomplete execution. You can then check the scenario run, investigate why the error happened, and fix it to finish the scenario run successfully. In addition, all scenario errors turn into warnings.\n\nYou can resolve the incomplete scenario run anytime.\n\nThere is a maximum size of the incomplete executions storage. The maximum size depends on the pricing plan of your organization. The incomplete executions storage is shared for all scenarios in your organization.\n\nWhen you use the Break error handler in your scenario, you have to enable incomplete executions.\n\nMake doesn't store the incomplete scenario run in these conditions:\n\nWhen the error happens on the first module in the scenario.\n\nHowever, you can add the Break error handler to the first module in the scenario. With the Break error handler, Make stores the incomplete execution even when the first module in the scenario outputs an error.\n\nWhen your incomplete executions storage is full. If your incomplete executions storage is full, Make checks the enable data loss setting:\n\nIf the data loss is disabled, Make disables the scenario.\n\nIf the data loss is enabled, Make keeps scheduling scenario runs and discards the incomplete execution if it cannot be stored in your account.\n\nYou can read more about incomplete executions in the dedicated article.\n\nSequential processing\n\nEnable this option to postpone running the scenario until the previous run finishes and until all scenario incomplete executions are resolved. Sequential processing makes sure that:\n\nThe scenario runs finish in the same order as they were triggered.\n\nThere is only one scenario execution running at the same time.\n\nSequential processing has the highest impact on scenarios that start with an instant trigger (a webhook) or on scenarios that have incomplete executions enabled.\n\nScenarios that start with an instant trigger run in parallel by default. For example:\n\nIf you have a scenario that starts with a webhook that runs for 5 minutes and you receive a webhook bundle at 12:00 and another one at 12:03, then from 12:03 to 12:05 there will be two instances of the scenario running at the same time in parallel.\n\nIn addition, if the scenario instance that started at 12:00 runs longer than usual, for example, until 12:12, the scenario instance that started at 12:03 finishes sooner (at 12:08), even though it started later.\n\nIf you want to make sure that the scenario doesn’t start before the previous run finishes, enable the sequential processing.\n\nSee webhooks for more information.\n\nNote\n\nThe same applies to scenarios with the incomplete executions enabled. When there is an error and Make creates an incomplete execution, Make postpones the next scenario run until you resolve the incomplete execution or until it’s resolved automatically with the Break error handler.\n\nYou can read more in the scenario settings.\n\nEnable data loss\n\nThe enable data loss scenario setting influences the scenario incomplete executions storage. Enable this option to keep scheduling scenario runs regardless of not having enough space to store incomplete executions.\n\nIf you enable data loss, Make discards the data that doesn't fit into the size limits and continues running the scenario on schedule. Otherwise, Make disables the scenario scheduling instead.\n\nMake sets the size limits based on your organization plan. Check the Make pricing breakdown or read more about the scenario settings.\n\nNumber of consecutive errors\n\nThis setting allows you to set how many times in a row the scenario can finish with an error and still keep being scheduled by Make for subsequent runs. When the scenario finishes with an error the specified number of times in a row, Make disables the scenario.\n\nTo access the setting of the number of consecutive errors, switch the advanced settings toggle in scenario settings. The default number of consecutive errors is 3.\n\nThe number of consecutive errors doesn't apply:\n\nWhen the scenario is triggered with an instant trigger (webhook). Make disables instantly triggered scenarios immediately if an error happens.\n\nWhen an error happens with one of the following types:\n\nAccountValidationError\n\nOperationsLimitExceededError\n\nDataSizeLimitExceededError\n\nMake disables the scenario scheduling immediately after the error happens.\n\nWhen an error with one of the following types happens on the first module in the scenario:\n\nDataError\n\nMaxFileSizeLimitExceededError\n\nMake disables the scenario scheduling immediately after the error happens.\n\nWhen you get a warning. If a scenario finishes with a warning, Make will keep scheduling subsequent scenario runs.\n\nAuto-commit\n\nEnable this option to commit changes right after they happen. For example, when a user triggers a scenario that updates their details.\n\nIf you disable this option, Make commits the changes after all modules finish successfully.\n\nThe setting affects only modules that support transactions. The modules supporting transactions are labeled with the \"ACID\" tag. They use a database app most of the time, like the Data Store or MySQL apps.\n\nThe modules that don't support transactions make changes immediately and don't provide the rollback functionality.\n\nYou can read more about the auto-commit option in the scenario settings article.\n\nCommit trigger last\n\nEnable this option to commit changes made by the first module in the scenario last. Otherwise, Make commits the changes in the same order as they happen.\n\nThe setting affects only modules that support transactions. The modules supporting transactions are labeled with the \"ACID\" tag. They use a database app most of the time, like the Data Store or MySQL apps.\n\nThe modules that don't support transactions make changes immediately and don't provide the rollback functionality.\n\nYou can read more about the commit trigger last option in the scenario settings article.\n\nOverview of error handling in Make\nThe error handling route\nHow to identify errors\nHow to approach error handling\nScenario settings that impact error handling\nAllow storing of incomplete executions\nSequential processing\nEnable data loss\nNumber of consecutive errors\nAuto-commit\nCommit trigger last\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Fixing rate limit errors",
      "url": "https://www.make.com/en/help/errors/how-to-handle-errors-in-make/429-errors",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nOverview of error handling in Make\nFixing rate limit errors\nFixing connection errors\nFixing missing data errors\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsHow to handle errors in MakeFixing rate limit errors\nFixing rate limit errors\n\nApp modules return the RateLimitError when you reach the API rate limit for the app. The rate limit is the number of requests you can send to an app over a period of time, typically over a second or a minute. The RateLimitError corresponds to the HTTP error code 429.\n\nNote\n\nMake follows the standard error codes and their definitions. Note that it is possible that the third party may not fully comply with the standard.\n\nWhen you reach the app rate limit, the app will block further requests until the limiting time period passes. For example, these are the API rate limits for the Google Sheets app.\n\nWhen a module returns the RateLimitError in a scheduled scenario run and you don't use any error handling, Make automatically schedules rerunning the scenario after 20 minutes.\n\nNote\n\nKeep in mind that a third-party app tracks the rate limiting in your account in the app. The rate limiting of the app is shared between all your scenarios.\n\nIf your scenario has a third-party app module that consumes a lot of operations or if you use an app module in your scenarios frequently, consider checking the rate-limiting of the third-party API or using the following error handling strategies preemptively to avoid frequent reruns of your scenario.\n\nHow to handle rate limit errors\n\nYou can use the following strategies to handle the RateLimitError:\n\nAdd a delay with the Sleep module before the app module to delay the requests.\n\nAdd the Break error handler to the module to handle errors and prevent turning off the scenario schedule.\n\nCombine both of the options together.\n\nIn the following steps, we combine a delay with the Sleep module and the Break error handler to handle the error if it occurs even after the delay.\n\nIf your scenario triggers with an instant trigger (for example, a custom webhook module), consider enabling sequential processing in scenario settings. With sequential processing, the trigger module processes incoming data one by one in the order they arrive.\n\nOtherwise, skip this step.\n\nNote\n\nIf a scenario has incomplete executions and sequential processing enabled, Make pauses the scenario until the incomplete executions are processed to keep the order of incoming data.\n\nAdd the Sleep module before the module that is causing the error. Set the delay to fit into the number of requests in the time limit. For example, if the app is limited to 10 requests per minute, set the delay to 6 seconds.\n\nLook into the advanced strategies if you want to have finer control over the delays.\n\nAdd the Break error handler to the module that is causing the errors.\n\nIf the Sleep module delay doesn’t prevent the error, the Break handler runs the module with the rest of the scenario flow again after another delay. Set the number of retries and the retry delay in the handler settings.\n\nEnable incomplete executions in the scenario settings. Make will save bundles that caused the error.\n\nFor example, if you would use the Webhook trigger to send data with the OpenAI module, but the OpenAI module is causing errors, your scenario and scenario settings with error handling would look like this:\n\nAdvanced rate limit error handling strategies\n\nWhen the strategies we mentioned above don't fit your use case or don't work for you, you can find more information in the following section. Here, we share advanced approaches to handling the rate limit errors in a scenario.\n\nFine-tuning the Sleep delay\n\nThis strategy can help you if you want to trigger the delay after the module processes a specific number of bundles.\n\nIf the modules you use in your scenario output a value you can use to number them, you can have a \"delay route.\" You set the frequency of the delay with a filter and the duration of the delay with the Sleep module.\n\nOptions to enumerate bundles include:\n\nIf you create bundles with an Iterator module, you can use the meta-variable Bundle order position.\n\nYou can convert incoming bundles to an array with the Array aggregator module and then use the Iterator.\n\nYou can use the Increment function module.\n\nCaution\n\nEvery bundle that goes through the Increment function module uses 1 operation. If you need to count a lot of bundles, consider a different option.\n\nIn the following example, we create a scenario with the Array aggregator and Iterator modules, because it's universal and uses just a few operations.\n\nSet up your scenario. In our example, we will use the Data Store > Search Records and HTTP > Make a request modules. The Make a request module returns the RateLimitError.\n\nAdd the Array aggregator after the Data Store > Search Records module.\n\nSet the Source module to the Search Records module.\n\nSelect any data from the data store to create the array.\n\nAdd the Iterator module after the Array aggregator. Iterate the array output from the aggregator.\n\nWith the Array aggregator -> Iterator flow, we create an array that we iterate to get the Bundle order position meta-variable in the Iterator output. In the next steps, we use this variable to delay the Make a request module to avoid the RateLimitError.\n\nAdd a Router after the Iterator module.\n\nAdd the Sleep module to the first route from the router. This route will be your \"delay route.\". Set the time delay in the Sleep module settings.\n\nCreate a filter between the Router and Sleep modules.\n\nSet the filter condition to use the Bundle order position variable output from the Iterator module.\n\nUse the mod mathematic operator to set the frequency of the delay.\n\nSet the filter operator to Numeric: Equals to and the other number to 0.\n\nFor example, the following filter triggers the delay with every 60th bundle:\n\nAfter processing 60 bundles, the Sleep delay triggers. If the app API has a rate limit of 60 requests per second, adding a 1 second delay with the Sleep module prevents the RateLimitError.\n\nAdd the HTTP > Make a request module to the second route from the Router\n\nYou can add the Break error handler for the Make a request module too.\n\nOur finished example scenario looks like this:\n\nWhen you run the scenario, every 60th bundle triggers the Sleep module delay. The setup consumes only two extra operations to count the bundles.\n\nFixing rate limit errors\nHow to handle rate limit errors\nAdvanced rate limit error handling strategies\nFine-tuning the Sleep delay\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to handle errors in Make",
      "url": "https://www.make.com/en/help/errors/how-to-handle-errors-in-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nOverview of error handling in Make\nFixing rate limit errors\nFixing connection errors\nFixing missing data errors\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsHow to handle errors in Make\nHow to handle errors in Make\n\nIn this section\nOverview of error handling in Make\nFixing rate limit errors\nFixing connection errors\nFixing missing data errors\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Fixing missing data errors",
      "url": "https://www.make.com/en/help/errors/how-to-handle-errors-in-make/fixing-missing-data-errors",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nOverview of error handling in Make\nFixing rate limit errors\nFixing connection errors\nFixing missing data errors\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsHow to handle errors in MakeFixing missing data errors\nFixing missing data errors\n\nApp modules output the BundleValidationError when the input bundle is missing the required data. For example, if you map data from a search module that didn't return any results.\n\nWhen a module in your scenario outputs the BundleValidationError, you should check the reason for the error. You should consider redesigning your scenario if you can avoid the error to make your automation more robust. You can use the if or ifempty functions or use Filtering.\n\nOtherwise, you will have to handle the error to keep your scenario active.\n\nIn the following examples, we will consider two situations:\n\nIgnore the missing data or use a placeholder.\n\nThe missing data are not a problem. You just want to keep your scenario enabled.\n\nGet notified about errors and store the scenario run.\n\nThe missing data are not acceptable. If you get the BundleValidationError, you want to check what happened in detail.\n\nTo learn more about how to approach error handling in Make you can check the error handling overview.\n\nIgnore the missing data or use a placeholder\n\nYou might work with data that sometimes contain missing values. You don't need to fix them or investigate why they are missing. Your main goal is to avoid disabling your scenario.\n\nWe will use the following scenario for testing:\n\nThe scenario reads data, modifies them and uses them for search in the data store. One piece of data is empty, which causes the BundleValidationError in the search module.\n\nTo keep your scenario running even when the error happens, you can use the Ignore or Resume error handlers.\n\nRight-click the module that is causing the error.\n\nSelect Add an error handler.\n\nA pop-up appears. From the list of error handlers, select the Ignore error handler.\n\nOptional: Select the Resume error handler instead. Map a placeholder into the missing bundle.\n\nYou can use the placeholder to tag the problematic data. For example, if a user is missing an email, you could substitute the missing email address with a tag noemail and check it later.\n\nThe final scenario should look like this:\n\nGet notified about errors and store the scenario run\n\nThere might be scenarios you want to check closely when an error happens. You can do that with a custom error handling setup. If an error occurs in your scenario, you get an email with the error description and a link to the scenario. In addition, you store the error bundle as incomplete execution to resolve it manually.\n\nWe will use the following scenario for testing:\n\nThe scenario reads data, modifies them and uses them for search in the data store. One piece of data is empty, which causes the BundleValidationError in the search module.\n\nTo store unfinished scenario runs and get a custom email notification when an error occurs, follow these steps:\n\nRight-click the module that is causing the error.\n\nSelect Add an error handler.\n\nA pop-up appears. From the list of error handlers, select the Break error handler.\n\nA pop-up appears with the Break error handler settings. Set automatic completion to No to always resolve the error manually. Confirm the settings with the OK button. To learn more about the Break error handler settings, check the dedicated article.\n\nClick the scenario settings icon  and enable storing of incomplete executions.\n\nRight-click the connection between the erroring module and the Break error handler. Choose Add a module. Make inserts a gray module placeholder between the erroring module and the Break error handler.\n\nClick the gray module placeholder and search for the Gmail app. Insert the Send an email module into the module placeholder.\n\nSet up the Send an email module. In the Content field, add the notification message you want to receive when an error happens. Use the Make system variables to get the metadata. For example:\n\nYou set up error handling in your scenario to create an incomplete execution and notify you with an email when an error happens.\n\nThe example scenario with error handling looks like this:\n\nFixing missing data errors\nIgnore the missing data or use a placeholder\nGet notified about errors and store the scenario run\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Fixing connection errors",
      "url": "https://www.make.com/en/help/errors/how-to-handle-errors-in-make/fixing-connection-errors",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nOverview of error handling in Make\nFixing rate limit errors\nFixing connection errors\nFixing missing data errors\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsHow to handle errors in MakeFixing connection errors\nFixing connection errors\n\nApp modules output the ConnectionError when the app is unavailable. For example, the app might be offline for maintenance.\n\nMake uses the HTTP 503 and 504 status codes to identify the ConnectionError.\n\nNote\n\nMake follows the standard error codes and their definitions. Note that it is possible that the third party may not fully comply with the standard.\n\nWhen a module in your scenario outputs the ConnectionError, you should check the status page of the module app. Chances are that the status page will have the URL https://status.domain, for example https://status.make.com.\n\nWhen Make recognizes the module output as the ConnectionError and you don't use any error handling, Make automatically schedules rerunning the scenario.\n\nHow to handle the ConnectionError\n\nTo handle the ConnectionError, you can use the strategies for handling the RateLimitError. The most efficient strategy is to use the Break error handler to rerun the scenario after a delay:\n\nIf your scenario triggers with an instant trigger (for example, a custom webhook module), consider enabling sequential processing in scenario settings. With sequential processing, the trigger module processes incoming data one by one in the order they arrive.\n\nOtherwise, skip this step.\n\nNote\n\nIf a scenario has incomplete executions and sequential processing enabled, Make pauses the scenario until the incomplete executions are processed to keep the order of incoming data.\n\nAdd the Break error handler to the module that is causing the errors.\n\nConsider setting the delay and the number of attempts according to the importance and the schedule of your scenario.\n\nFor example, if the app has occasional downtime for maintenance for a few hours with no availability, it might be best to set a lower number of attempts with longer time periods between them.\n\nOn the other hand, if the app is occasionally unavailable because it's overloaded, and the scenario is important for you, it might be best to use a short time period (a few minutes) with a higher number of attempts.\n\nEnable incomplete executions in the scenario settings. Make will save bundles that caused the error.\n\nFor example, if you would use the Webhook trigger to ask questions to ChatGPT, but the ChatGPT app is sometimes overloaded with requests and sending back errors, your scenario and scenario settings with error handling could look like this:\n\nWhenever the Create a completion module outputs the ConnectionError because the OpenAI servers are overloaded or unavailable, Make creates an incomplete execution with the Create a completion module.\n\nAfter the delay set in the Break error handler, Make reruns the Create a completion module. If the rerun succeeds, Make will continue scheduling new scenario runs.\n\nIf the rerun fails, Make reruns the module again after the delay, up to the number of attempts set in the Break error handler settings.\n\nFixing connection errors\nHow to handle the ConnectionError\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Quick error handling reference",
      "url": "https://www.make.com/en/help/errors/error-handlers/directives-for-error-handling",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlersQuick error handling reference\nQuick error handling reference\n\nThe following table provides a quick reference to working with error handlers in Make.\n\nIf you want to learn more about individual error handlers, check the dedicated articles in this section of the Help Center. If you want to learn more about error handling, you can start with the introduction.\n\nBreak\n\n\t\n\n\t\n\nMake stores the subsequent modules as an incomplete execution. Set the automatic completion to Yes to get similar functionality as a Retry. Otherwise, you have to resolve incomplete executions manually.\n\nMake processes the rest of the bundles in the scenario flow normally.\n\nThe scenario ends with the \"warning\" status.\n\nCheck the Break error handler for further information.\n\n\n\n\nCommit\n\n\t\n\n\t\n\nMake stops the scenario run and commits all changes.\n\nMake doesn't process the rest of the modules in the scenario flow.\n\nThe scenario ends with the \"success\" status.\n\nCheck the Commit error handler for further information.\n\n\n\n\nIgnore\n\n\t\n\t\n\nMake ignores the error. The bundle doesn't continue in the scenario flow. \n\nMake processes the rest of the bundles in the scenario flow normally.\n\nThe scenario ends with the \"success\" status.\n\nCheck the Ignore error handler for further information.\n\n\n\n\nResume\n\n\t\n\t\n\nSpecify a substitute mapping for when the module outputs an error. The substitute data continue through the rest of the scenario.\n\nMake processes the rest of the bundles in the scenario flow normally.\n\nThe scenario ends with the \"success\" status.\n\nCheck the Resume error handler for further information.\n\n\n\n\nRollback\n\n\t\n\t\n\nMake stops the scenario run and reverts changes in all modules that support transactions (ACID modules).\n\nMake doesn't process the rest of the modules in the scenario flow.\n\nMake stops scheduling the scenario after the Rollback activates for the number of consecutive errors in a row.\n\nThe scenario ends with the \"error\" status.\n\nNote\n\nThe Rollback is the default error handling if you don't set any error handling and when you keep incomplete executions disabled.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Error handlers",
      "url": "https://www.make.com/en/help/errors/error-handlers",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsError handlers\nError handlers\n\nIn this section\nQuick error handling reference\nBreak error handler\nCommit error handler\nIgnore error handler\nResume error handler\nRollback error handler\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Introduction to errors and warnings in Make",
      "url": "https://www.make.com/en/help/errors/introduction-to-errors-and-warnings-in-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nErrors in Make\nError notifications\nWarnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrorsIntroduction to errors and warnings in Make\nIntroduction to errors and warnings in Make\n\nSometimes, automation doesn't go the way you planned and takes a wrong turn. When this happens, Make gives you a warning or an error based on the situation.\n\nYou can also assume another point of view on errors and warnings: They protect your scenarios by preventing the processing of unexpected data, and therefore saving operations usage.\n\nErrors in Make\n\nErrors notify you that your scenario encountered an unexpected event that is not handled by an error handler. Because of the situation, you should check the scenario.\n\nA module outputs an error when the module receives incorrect data from the previous modules or the module app. When you open your scenario in the scenario editor, Make highlights the module that outputs the error with the \"Caution\" sign:\n\nWhen a module outputs an error, Make stops the current scenario run and starts the rollback scenario phase. The rollback phase reverts changes if possible and puts back the polling trigger epoch to the time before the scenario run.\n\nWhen there are consecutive scenario runs that end with an error, Make disables further scheduling of the scenario. Disabling the scenario allows you to check the error and prevents consuming operations on scenario runs that finish with an error.\n\nThe most common situations when a module outputs an error include:\n\nMapping a value to a required field in a module when the value is sometimes empty and causes missing required data.\n\nWhen you exhaust your resources in the third-party app. For example, when you can't store more data in the app.\n\nWhen the app is unavailable. For example, when the app is down for maintenance.\n\nWhen there is a change to your authentication or authorization in the app and you don't update your connection. For example, when your API key expires or when you change teams and lose access to some of the app features.\n\nThe best way to deal with errors in your scenario is to use an error handler. An error handler connects to a module with the error handling route. When the module outputs an error, the error handling route activates and runs the error handler.\n\nWhen all errors are handled, Make keeps scheduling scenario runs instead of disabling the scenario.\n\nFor more information, check the Overview of error handling in Make or pages about error types, error handlers or specific error handling strategies.\n\nError notifications\n\nWhen an error happens and the error is not handled by any error handler, Make sends you an email notification:\n\nMake also sends out a notification when your scenario gets disabled because of repeated errors.\n\nYou can learn more about Make email notifications and their settings here.\n\nWarnings in Make\n\nWarnings alert you that there was an issue during the scenario run, but not as serious as an error. Also, scenarios can have the warning status when there were errors handled with your error handling.\n\nWhen a module in a scenario returns a warning, your scenario keeps running and stays enabled. But it's a good idea to check the scenario execution history for the cause of the warning.\n\nThe situations when you get a warning include:\n\nWhen a module outputs an error, but you have enabled the storing of incomplete executions in the scenario settings.\n\nWhen you use up all of the capacity of a data store in your scenario.\n\nWhen the duration of the scenario run exceeds the time limit for your subscription.\n\nLearn more about warnings here.\n\nIn this section\nErrors in Make\nError notifications\nWarnings in Make\nIntroduction to errors and warnings in Make\nErrors in Make\nError notifications\nWarnings in Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Variables",
      "url": "https://www.make.com/en/help/functions/variables",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nTypes of variables\nSystem variables\nCustom variables\nUser permissions for custom variables\nUsing variables in a scenario\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsVariables\nVariables\n\nVariables are containers for storing data. You can think of a variable as a “box” for data, with a uniquely-named sticker on it. \n\nImagine you are moving to a new home and you need to pack up all the things in your house into boxes. You might want a box for clothes, one for books, and one for the dishes. When you pack the boxes, it would be good to add a label to each box - that way, you know what is inside the specific box.\n\nA variable is like a box - it is just a way to store your data.\n\nVariables store data as boxes store items.\n\nUnlike a box, you can store exactly one thing in a variable. Variables have a fixed name and a value that can change. You can reference the name in your scenarios. The name is then replaced by the current value of your variable.\n\nWhen using Make, you might need to save certain bits of information and assign a label to the information so that you can retrieve that information later. A user name, the day of the week, or available inventory left in your e-shop - these are just some examples of data that can be stored in variables.\n\nVariables are reusable elements that can be mapped to any module in the module's input fields.\n\nTypes of variables\n\nMake offers two types of variables:\n\nSystem variables \n\nCustom variables\n\nBoth system and custom variables can be used in scenarios. System variables are available to all Make users.\n\nCustom variables are available only on Pro, Teams, and Enterprise plans. See Make pricing.\n\nYou can define custom variables for your organization and for your team.\n\nSystem variables\nWatch the video\n\nSystem variables are default options provided by Make. You cannot modify or delete system variables. You can use system variables in\n\nModules with input fields\n\nFilters within the scenario editor\n\nTemplates\n\nSystem variables are available to all Make users and on all pricing plans.\n\nSystem variables include information about:\n\nthe scenario itself (scenario ID, scenario name, scenario URL)\n\nthe specific scenario execution (execution ID, operations consumed, data consumed, execution start date/time)\n\nthe team the scenarios is in (team ID, team name)\n\nthe organization the scenario is in (organization ID, organization name, operations left, data left, domain)\n\nWith system variables, you can see more information about your scenario, current execution, team, and organization. Variables can be useful with error handling and scenario activity tracking. For example, when there is an error in your scenario, you can use scenario ID or organization name variables to pinpoint the exact scenario execution and organization in which the error occurred.\n\nSome other cases in which you might use system variables:\n\nCreate a slack message, email, or support ticket that contains a link to the scenario that created the message\n\nSet email notifications to notify you once the operations left value reaches a certain number\n\nYou can also reuse variables and map them to any module in the module's input fields.\n\nThe screenshot below shows the organization, team, and scenario information got as the module output in bundle 1 using system variables. You can use this output in the subsequent module.\n\nExample, Bundle 1 output using system variables\n\nYou can find System variables under the Variables tab in the mapping dialog.\n\nCustom variables\nWatch the video\n\nCustom variables are available only on Pro, Teams, and Enterprise pricing plans. Custom variables are not available on the Legacy plan. See Make pricing for more information.\n\nYou can create, edit and delete custom variables.\n\nCustom variables are useful when you need to reuse the same information multiple times. Instead of writing it all over again from scratch every time, just use a custom variable instead.\n\nSome cases where you might want to use custom variables:\n\nSending emails with a consistent email signature \n\nSet a number of outreach attempts before you stop contacting a potential customer\n\nEmail addresses\n\nCompany name or address\n\nBenefits of using custom variables include:\n\nSaving time - You don’t have to make manual changes in many different scenarios when the key information changes. \n\nAccuracy - You don’t have to double-check every time whether the information is incorrect due to a human error.\n\nStandardization – More people can use the same variables so your business can be more consistent.\n\nCustom variables make scenarios easier to manage and maintain.\n\nYou can define custom variables at the organization level and the team level. For each variable, you need to identify the following:\n\nName (permanent variable name)\n\nData type (text, number, Boolean, or date)\n\nValue (the actual value of the variable)\n\nCreate a custom variable\n\nYou can create custom variables at the organization level and at the team level.\n\nDecide if you want to create an organization variable or a team variable. \n\nFor organization variables, go to the organization dashboard and click Variables > Add organization variable.\n\nFor team variables, go to the team dashboard and click Variables > Add team variable.\n\nFill in the information.\n\nName\n\nThis field is mandatory and you cannot change it after you save it.\n\nThe name is the identifier of the variable.\n\nThe name must contain only letters, digits, or the symbols $ and _.\n\nThe name cannot start with a digit.\n\nThe name must contain a maximum of 128 characters.\n\nData type\n\nChoose the variable data type from the dropdown menu\n\nNumber\n\nText\n\nBoolean\n\nDate\n\nValue\n\nEnter the value for your variable.\n\nYou can use letters, digits, spaces, and special characters.\n\nValue cannot be empty.\n\nWarning\n\nVariables are not meant to store secrets. Don’t use them for anything sensitive!\n\nVariable values are not encrypted as they are stored in plain text. Don’t use variables to store passwords or any other sensitive data. Beware that other team members and organization admins can access variables.\n\nClick Save to save your custom variable.\n\nYour new variable will appear on the list of variables.\n\nTo preview the variable value, hover over the individual value field.\n\nEdit a custom variable\nWarning\n\nIf your other team members or organization admins use the same variable in their scenarios, the changes will affect them too.\n\nGo to the variable you want to edit.\n\nFor organization variables, go to the organization dashboard and click Variables.\n\nFor team variables, go to the team dashboard and click Variables.\n\nIn the list of your custom variables find the one you want to edit and click Edit next to it.\n\nEdit the variable as you see fit. You can edit the variable data type and value.\n\nClick Save to save your changes.\n\nYour changes are saved and your updated variable will appear on the list of variables. Hover over the individual value field to preview the variable value.\n\nThe changes automatically update in the scenarios that already use the variable.\n\nDelete a custom variable\nWarning\n\nDeleting a variable that you already use in one or more scenarios can affect other users who use the same variable in their scenarios. After you delete a variable, the variable becomes inactive in all scenarios where it is used and it stops returning expected values.\n\nDecide if you want to edit an organization variable or a team variable.\n\nFor organization variables, go to the organization dashboard and click Variables.\n\nFor team variables, go to the team dashboard and click Variables.\n\nIn the list of your custom variables find the one you want to delete and click Delete next to it.\n\nIf the variable you want to delete is already used in a scenario, a modal pops up asking for your confirmation to delete the variable. Click OK to delete the variable.\n\nThe variable is deleted and disappears from your list of custom variables.\n\nCheck custom variable history\n\nYou can see who changed the custom variable, when, and what the changes are.\n\nGo to the custom variable whose history you want to check.\n\nFor organization variables, go to the organization dashboard and click Variables.\n\nFor team variables, go to the team dashboard and click Variables.\n\nClick the dropdown menu next to Edit. Select Show history.\n\nA new window opens where you can see the variable history. The last change appears on the top.\n\nUser permissions for custom variables\nOrganization variables\nTable 1. Organization custom variables user permissions\n\n\t\n\nOwner\n\n\t\n\nAdmin\n\n\t\n\nMember\n\n\t\n\nAccountant\n\n\t\n\nApp Developer\n\n\n\n\nCan access organization variables\n\n\t\n\t\n\t\n\t\n\n\t\n\n\n\nCan edit organization variables\n\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\n\nCan add organization variables\n\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\n\nCan delete organization variables\n\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\n\nTeam variables\nTable 2. Team custom variables user permissions\n\n\t\n\nTeam Admin\n\n\t\n\nTeam Member\n\n\t\n\nTeam Monitoring\n\n\t\n\nTeam Operator\n\n\t\n\nTeam Restricted Member\n\n\n\n\nCan access organization variables\n\n\t\n\t\n\t\n\n\t\n\t\n\n\n\nCan add organization variables\n\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\nCan edit organization variables\n\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\nCan delete organization variables\n\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\nUsing variables in a scenario\n\nYou can use variables in all scenarios within your Make account.\n\nSystem variables are available to all Make users and custom variables are available only on some paid plans (Pro, Teams, and Enterprise). See Make pricing.\n\nWe prepared two simple examples which show how you can use system and custom variables in your scenarios. Click the plus icon to see the examples.\n\nExample with system variables\nGet notified before you reach your operations limit\nExample with custom variables\nEmails with consistent email signature\nIn this section\nTypes of variables\nSystem variables\nCustom variables\nUser permissions for custom variables\nUsing variables in a scenario\nVariables\nTypes of variables\nSystem variables\nWatch the video\nCustom variables\nWatch the video\nCreate a custom variable\nEdit a custom variable\nDelete a custom variable\nCheck custom variable history\nUser permissions for custom variables\nOrganization variables\nTeam variables\nUsing variables in a scenario\nExample with system variables\nExample with custom variables\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Errors",
      "url": "https://www.make.com/en/help/errors",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterErrors\nErrors\nIn this section\nIntroduction to errors and warnings in Make\nHow to handle errors in Make\nError handlers\nTypes of errors in Make\nTypes of warnings in Make\nExponential backoff\nThrow\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Math variables",
      "url": "https://www.make.com/en/help/functions/math-variables",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nrandom\nExamples\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsMath variables\nMath variables\n\nUse math variables to insert a random number in your functions.\n\nrandom\n\nReturns a floating-point, pseudo-random number in the range [0, 1) (inclusive of 0, but not 1).\n\nUse the following formula to generate an integer pseudo-random number in the range [min, max] (inclusive of both, min and max):\n\nYou may copy and paste the formula's code into a field:\n\n{{floor(random * (1.max - 1.min + 1)) + 1.min}}\nExamples\nRolling the dice\n\nLet's say chatbot enthusiasts and such would like to create a dice game. They can employ the random variable to randomly pick a number, say between 1 and 6, and then message that number to a user in the respective Chatbot platform as a response.\n\nIn the mapping panel, head over to the Math functions tab:\n\nUnder the Math functions tab, select the floor function.\n\nInsert the random variable in between the brackets followed by * (multiplication operator) and number 6.\n\nAdd + (addition operator) after the bracket and number 1.\n\nAlternatively, you may copy and paste the formula's code into a field:\n\n{{floor(random * 6) + 1}}\nRandom String/Text\n\nThis template demonstrates how to generate a string (text) of a given length composed of characters chosen randomly from a predefined set.\n\nIn this section\nrandom\nExamples\nMath variables\nrandom\nExamples\nRolling the dice\nRandom String/Text\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Tokens for date/time formatting",
      "url": "https://www.make.com/en/help/functions/tokens-for-date-time-formatting",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nYear, month, and day tokens\nWeek year, week, and weekday tokens\nHour, minute, second, millisecond, and offset tokens\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsTokens for date/time formatting\nTokens for date/time formatting\n\nUse date/time formatting tokens to change the format of date/time data. For example, you can convert a timestamp to a quarter of the year or day of the week. The following tables present the tokens supported for changes in formatting.\n\nYear, month, and day tokens\n\nToken\n\n\t\n\nOutput\n\n\t\n\nDescription\n\n\n\n\nYY\n\n\t\n\n70 71 ... 29 30\n\n\t\n\n2 digit year\n\n\n\n\nYYYY\n\n\t\n\n1970 1971 ... 2029 2030\n\n\t\n\n4 digit year\n\n\n\n\nY\n\n\t\n\n1970 1971 ... 9999 +10000 +10001\n\n\t\n\nYear with any number of digits and sign\n\n\n\n\nQ\n\n\t\n\n1 2 3 4\n\n\t\n\nQuarter of year\n\n\n\n\nQo\n\n\t\n\n1st 2nd 3rd 4th\n\n\t\n\nQuarter of year with ordinal\n\n\n\n\nM\n\n\t\n\n1 2 ... 11 12\n\n\t\n\nMonth number\n\n\n\n\nMo\n\n\t\n\n1st 2nd ... 11th 12th\n\n\t\n\nMonth with ordinal\n\n\n\n\nMM\n\n\t\n\n01 02 ... 11 12\n\n\t\n\nMonth number with leading zero\n\n\n\n\nMMM\n\n\t\n\nJan Feb ... Nov Dec\n\n\t\n\nMonth abbreviation\n\n\n\n\nMMMM\n\n\t\n\nJanuary February ... November December\n\n\t\n\nMonth name\n\n\n\n\nD\n\n\t\n\n1 2 ... 30 31\n\n\t\n\nDay of month\n\n\n\n\nDo\n\n\t\n\n1st 2nd ... 30th 31st\n\n\t\n\nDay of month with ordinal\n\n\n\n\nDD\n\n\t\n\n01 02 ... 30 31\n\n\t\n\nDay of month with leading zero\n\n\n\n\nDDD\n\n\t\n\n1 2 ... 364 365\n\n\t\n\nDay of year\n\n\n\n\nDDDo\n\n\t\n\n1st 2nd ... 364th 365th\n\n\t\n\nDay of year with ordinal\n\n\n\n\nDDDD\n\n\t\n\n001 002 ... 364 365\n\n\t\n\nDay of year with leading zero\n\nWeek year, week, and weekday tokens\n\nToken\n\n\t\n\nOutput\n\n\t\n\nDescription\n\n\n\n\nd\n\n\t\n\n0 1 ... 5 6\n\n\t\n\nDay of week\n\n\n\n\ndo\n\n\t\n\n0th 1st ... 5th 6th\n\n\t\n\nDay of week with ordinal\n\n\n\n\ndd\n\n\t\n\nSu Mo ... Fr Sa\n\n\t\n\nDay abbreviation\n\n\n\n\nddd\n\n\t\n\nSun Mon ... Fri Sat\n\n\t\n\nDay abbreviation\n\n\n\n\ndddd\n\n\t\n\nSunday Monday ... Friday Saturday\n\n\t\n\nDay name\n\n\n\n\nE\n\n\t\n\n1 2 ... 6 7\n\n\t\n\nDay of week (ISO)\n\n\n\n\nw\n\n\t\n\n1 2 ... 52 53\n\n\t\n\nWeek of year\n\n\n\n\nwo\n\n\t\n\n1st 2nd ... 52nd 53rd\n\n\t\n\nWeek of year with ordinal\n\n\n\n\nww\n\n\t\n\n01 02 ... 52 53\n\n\t\n\nWeek of year with leading zero\n\n\n\n\nW\n\n\t\n\n1 2 ... 52 53\n\n\t\n\nWeek of year (ISO)\n\n\n\n\nWo\n\n\t\n\n1st 2nd ... 52nd 53rd\n\n\t\n\nWeek of year with ordinal (ISO)\n\n\n\n\nWW\n\n\t\n\n01 02 ... 52 53\n\n\t\n\nWeek of year with leading zero (ISO)\n\n\n\n\ngg\n\n\t\n\n70 71 ... 29 30\n\n\t\n\nWeek year\n\n\n\n\ngggg\n\n\t\n\n1970 1971 ... 2029 2030\n\n\t\n\nWeek year\n\n\n\n\nGG\n\n\t\n\n70 71 ... 29 30\n\n\t\n\nWeek year (ISO\n\n\n\n\nGGGG\n\n\t\n\n1970 1971 ... 2029 2030\n\n\t\n\nWeek year (ISO)\n\nHour, minute, second, millisecond, and offset tokens\n\nToken\n\n\t\n\nOutput\n\n\t\n\nDescription\n\n\n\n\nH\n\n\t\n\n0 1 ... 22 23\n\n\t\n\n24 hour time\n\n\n\n\nHH\n\n\t\n\n00 01 ... 22 23\n\n\t\n\n24 hour time with leading zero\n\n\n\n\nh\n\n\t\n\n1 2 ... 11 12\n\n\t\n\n12 hour time\n\n\n\n\nhh\n\n\t\n\n01 02 ... 11 12\n\n\t\n\n12 hour time with leading zero\n\n\n\n\nk\n\n\t\n\n1 2 ... 23 24\n\n\t\n\n24 hour time\n\n\n\n\nkk\n\n\t\n\n01 02 ... 23 24\n\n\t\n\n24 hour time with leading zero\n\n\n\n\nA\n\n\t\n\nAM PM\n\n\t\n\nPost or ante meridiem (upper case)\n\n\n\n\na\n\n\t\n\nam pm\n\n\t\n\nPost or ante meridiem (lower case)\n\n\n\n\nm\n\n\t\n\n0 1 ... 58 59\n\n\t\n\nMinutes\n\n\n\n\nmm\n\n\t\n\n00 01 ... 58 59\n\n\t\n\nMinutes with leading zero\n\n\n\n\ns\n\n\t\n\n0 1 ... 58 59\n\n\t\n\nSeconds\n\n\n\n\nss\n\n\t\n\n00 01 ... 58 59\n\n\t\n\nSeconds with leading zero\n\n\n\n\nS\n\n\t\n\n0 1 ... 8 9\n\n\t\n\nFractional seconds\n\n\n\n\nSS\n\n\t\n\n00 01 ... 98 99\n\n\t\n\nFractional seconds with leading zero\n\n\n\n\nSSS\n\n\t\n\n000 001 ... 998 999\n\n\t\n\nFractional seconds with two leading zeros\n\n\n\n\nSSSS ... SSSSSSSSS\n\n\t\n\n000[0..] 001[0..] ... 998[0..] 999[0..]\n\n\t\n\nFractional seconds\n\n\n\n\nZ\n\n\t\n\n-07:00 -06:00 ... +06:00 +07:00\n\n\t\n\nTime zone\n\n\n\n\nZZ\n\n\t\n\n-0700 -0600 ... +0600 +0700\n\n\t\n\nTime zone\n\n\n\n\nX\n\n\t\n\n1360013296\n\n\t\n\nUnix Timestamp\n\n\n\n\nx\n\n\t\n\n1360013296123\n\n\t\n\nUnix Millisecond Timestamp\n\nIn this section\nYear, month, and day tokens\nWeek year, week, and weekday tokens\nHour, minute, second, millisecond, and offset tokens\nTokens for date/time formatting\nYear, month, and day tokens\nWeek year, week, and weekday tokens\nHour, minute, second, millisecond, and offset tokens\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Tokens for date/time parsing",
      "url": "https://www.make.com/en/help/functions/tokens-for-date-time-parsing",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nYear, month, and day tokens\nWeek year, week, and weekday tokens\nHour, minute, second, millisecond, and offset tokens\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsTokens for date/time parsing\nTokens for date/time parsing\n\nDate/time parsing tokens are special combinations of letters you can use to read and extract date/time data. The following tables list the tokens you can use to parse data in your functions:\n\nYear, month, and day tokens\n\nInput\n\n\t\n\nExample\n\n\t\n\nDescription\n\n\n\n\nYYYY \n\n\t\n\n2014\n\n\t\n\n4 or 2 digit year\n\n\n\n\nYY\n\n\t\n\n14\n\n\t\n\n2 digit year\n\n\n\n\nY\n\n\t\n\n-25\n\n\t\n\nYear with any number of digits and sign\n\n\n\n\nQ\n\n\t\n\n1..4\n\n\t\n\nQuarter of year\n\nNote\n\nSets month to first month in quarter\n\n\n\n\nM MM\n\n\t\n\n1..12\n\n\t\n\nMonth number\n\n\n\n\nMMM MMMM\n\n\t\n\nJan..December\n\n\t\n\nMonth name\n\n\n\n\nD DD\n\n\t\n\n1..31\n\n\t\n\nDay of month\n\n\n\n\nDo\n\n\t\n\n1st..31st\n\n\t\n\nDay of month with ordinal numbers\n\n\n\n\nDDD DDDD\n\n\t\n\n1..365\n\n\t\n\nDay of year\n\n\n\n\nX\n\n\t\n\n1410715640.579\n\n\t\n\nUnix timestamp\n\n\n\n\nx\n\n\t\n\n1410715640579\n\n\t\n\nUnix ms timestamp\n\nWeek year, week, and weekday tokens\n\nInput\n\n\t\n\nExample\n\n\t\n\nDescription\n\n\n\n\nddd dddd\n\n\t\n\nMon...Sunday\n\n\t\n\nDay name\n\n\n\n\nGGGG\n\n\t\n\n2014\n\n\t\n\nISO 4 digit week year\n\n\n\n\nGG\n\n\t\n\n14\n\n\t\n\nISO 2 digit week year\n\n\n\n\nW WW\n\n\t\n\n1..53\n\n\t\n\nISO week of year\n\n\n\n\nE\n\n\t\n\n1..7\n\n\t\n\nISO day of week\n\nHour, minute, second, millisecond, and offset tokens\n\nInput\n\n\t\n\nExample\n\n\t\n\nDescription\n\n\n\n\nH HH\n\n\t\n\n0..23\n\n\t\n\nHours (24 hour time)\n\n\n\n\nh hh\n\n\t\n\n1..12\n\n\t\n\nHours (12 hour time used with a A)\n\n\n\n\nk kk\n\n\t\n\n1..24\n\n\t\n\nHours (24 hour time from 1 to 24)\n\n\n\n\na A\n\n\t\n\nam pm\n\n\t\n\nPost or ante meridiem (Note the one character a p are also considered valid)\n\n\n\n\nm mm\n\n\t\n\n0..59\n\n\t\n\nMinutes\n\n\n\n\ns ss\n\n\t\n\n0..59\n\n\t\n\nSeconds\n\n\n\n\nS SS SSS\n\n\t\n\n0..999\n\n\t\n\nFractional seconds\n\n\n\n\nZ ZZ\n\n\t\n\n+12:00\n\n\t\n\nOffset from UTC as +-HH:mm, +-HHmm, or Z\n\nIn this section\nYear, month, and day tokens\nWeek year, week, and weekday tokens\nHour, minute, second, millisecond, and offset tokens\nTokens for date/time parsing\nYear, month, and day tokens\nWeek year, week, and weekday tokens\nHour, minute, second, millisecond, and offset tokens\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Certificates and keys",
      "url": "https://www.make.com/en/help/functions/certificates-and-keys",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nDirect inserting\nExtracting from the file\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsCertificates and keys\nCertificates and keys\n\nThere are two ways of inserting a key or certificate.\n\nDirect inserting\n\nExtracting from the file (P12, PFX or PEM)\n\nDirect inserting\nExtracting from the file\nIn this section\nDirect inserting\nExtracting from the file\nCertificates and keys\nDirect inserting\nExtracting from the file\nExample of use - key extraction\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Custom functions",
      "url": "https://www.make.com/en/help/functions/custom-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCreate and manage custom functions\nBasic structure of custom functions\nSupported languages\nValidation of custom functions\nLimitations of custom functions\nCustom functions version history\nWorking with dates inside custom functions\nCalling built-in functions from inside of your custom functions\nDebugging custom functions\nDeleting custom functions\nExamples of custom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsCustom functions\nCustom functions\nNote\n\nCustom functions are available only on Enterprise plans.\n\nNote\n\nMake supports the infrastructure and system behavior that takes care of managing and using custom functions. However, our customer care team cannot provide support on how to write and debug your own custom functions.\n\nFunctions in Make allow you to transform data. You use functions when mapping data from one module to another. Make offers a variety of built-in functions. On top of that, you can create your own custom functions.\n\nCustom functions allow you to enhance the built-in data transformation capabilities available in the scenario designer.\n\nCustom functions are created using JavaScript.\n\nCreate and manage custom functions\n\nYou create and manage custom functions in the Functions section, which is accessible from the left menu.\n\nCustom functions belong to a team. All users with the role Team Member can view and use custom functions. To create and edit custom functions, you need to have the Team Admin role.\n\nTo create a new custom function:\n\nIn the left menu, click Functions.\n\nClick Add a function.\n\nEnter a name and description. The name and description will appear in the list of functions available in the scenario designer.\n\nImportant\n\nRequirements for the name:\n\nMust contain only letters and digits.\n\nCannot start with a digit.\n\nCannot contain the following words (JavaScript reserved words): do, if, in, for, let, new, try, var, case, else, enum, eval, null, this, true, void, with, await, break, catch, class, const, false, super, throw, while, yield, delete, export, import, public, return, static, switch, typeof, default, extends, finally, package, private, continue, debugger, function, arguments, interface, protected, implements, instanceof.\n\nAfter you save the function in step 4 below, you won't be able to change it.\n\nClick Save.\n\nThis creates a function header and an empty function body.\n\nWrite the code of the function. Use the keyword return to define the return value.\n\nSee the example functions to get an idea of how to write them.\n\nWhen done, click Save.\n\nWhen you save the function for the first time, it immediately becomes available in the scenario designer. Custom functions are marked with an icon to distinguish them from the built-in functions.\n\nBasic structure of custom functions\n\nThe structure of custom functions reflects the structure of regular JavaScript functions. Each function must contain the following:\n\nFunction header - the name of the function and the parameters it accepts.\n\nFunction body enclosed in curly brackets.\n\nExactly one return statement.\n\nSee examples for more information.\n\nSupported languages\n\nCustom functions support JavaScript ES6. No 3rd party libraries are supported.\n\nThe code runs on Make's back end. This means that we do not support functionality that only makes sense in the context of writing browser-executed JavaScript.\n\nValidation of custom functions\n\nMake does not validate the code of your functions. If there are errors in your code, they will appear as errors in the execution of scenarios that use these functions. Invalid functions will cause your scenarios to fail.\n\nLimitations of custom functions\n\nThe following limits apply to all custom functions that you create:\n\nA single custom function can not run for more than 300 milliseconds.\n\nThe code of a custom function cannot have more than 5000 characters.\n\nFunctions must be synchronous. You can't run asynchronous code in your functions.\n\nYou can not make HTTP requests from your functions.\n\nYou can not call other custom functions from inside of a custom function.\n\nYou can not use recursion in your custom functions.\n\nIn order to use a custom variable with an iterator, you need to:\n\nSet the value with the custom function in a Set Variable module before the Iterator.\n\nMap the output of Set Variable to the Iterator.\n\nCustom functions version history\n\nEvery time you save a custom function, the system creates a new history record. This allows you to compare versions and revert your function to a previous version.\n\nSelect a history record to compare the function with the previous version. You can only compare two consecutive versions.\n\nClick Restore this version to revert to the version that you're currently viewing. This creates a new version of the function with the content of the restored version.\n\nWorking with dates inside custom functions\n\nCustom functions are executed on Make's servers. Therefore, whenever you work with dates inside a function, the dates will take into account the time zone set for your organization. Read more about how Make handles time zones.\n\nCalling built-in functions from inside of your custom functions\n\nYou can use Make's built-in functions in your custom function code.\n\nBuilt-in functions are available as methods of the iml object.\n\nThe following example uses the Length built-in function.\n\nfunction useBuiltInFunction(text){\n    return iml.length(text);\n}\nDebugging custom functions\n\nYou can execute your custom function code in the debug console, which is located under the code editor.\n\nDeleting custom functions\n\nYou can delete your custom functions in the list in the Functions section.\n\nBefore you delete a function, click Edit next to it and then switch to the Scenarios tab. Here, you can check in which scenarios the function is used. When you delete a function that is used in a scenario, the scenario will fail to execute on its next run.\n\nThe scenario that uses the deleted function will fail with the following error message:\n\nFailed to map '<field name>': Function '<function name>' not found!\nExamples of custom functions\n\nThe following functions were written by our developer to help you understand how to write them.\n\nEXAMPLE: HELLO WORLD\n\nReturns the string \"Hello world.\"\n\nfunction helloWorld()\n{\n    return \"Hello world!\";\n}\nEXAMPLE: COUNT THE NUMBER OF WORKING DAYS IN A MONTH\n\nCalculates how many working days there are in the month specified by the month's number and a year in the function's arguments. Does not take into account local holidays.\n\nfunction numberOfWorkingDays(month, year) {\n  let counter = 0;\n  let date = new Date(year, month - 1, 1);\n  const endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  while (date.getTime() < endDate.getTime()) {\n    const weekDay = date.getDay();\n    if (weekDay !== 0 && weekDay !== 6) {\n      counter += 1;\n    }\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);\n  }\n  return counter;\n}\nEXAMPLE: CALCULATE THE NUMBER OF DAYS BETWEEN TWO DATES\n\nCalculates the number of days between two dates passed to the function as arguments.\n\nfunction numberOfDays(start, end) {\n  const startDate = new Date(start);\n  const endDate = new Date(end);\n  return Math.abs((startDate.getTime() - endDate.getTime()) / (1000 * 60 * 60 * 24));\n}\nEXAMPLE: RANDOMIZATION - RETURN A RANDOM GREETING FROM AN ARRAY OF GREETINGS\n\nAccepts an array as an argument. Returns a random item from the array.\n\nfunction randomGreeting(greetings) {\n  const index = Math.floor(Math.random() * greetings.length);\n  return greetings[index];\n}\nIn this section\nCreate and manage custom functions\nBasic structure of custom functions\nSupported languages\nValidation of custom functions\nLimitations of custom functions\nCustom functions version history\nWorking with dates inside custom functions\nCalling built-in functions from inside of your custom functions\nDebugging custom functions\nDeleting custom functions\nExamples of custom functions\nCustom functions\nCreate and manage custom functions\nBasic structure of custom functions\nSupported languages\nValidation of custom functions\nLimitations of custom functions\nCustom functions version history\nWorking with dates inside custom functions\nCalling built-in functions from inside of your custom functions\nDebugging custom functions\nDeleting custom functions\nExamples of custom functions\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Math functions",
      "url": "https://www.make.com/en/help/functions/math-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\naverage ([array of values]) average(value1; [value2], ...)\nceil (number)\nfloor (number)\nformatNumber (number; decimalPOINTS; [decimalSeparator]; [thousandsSeparator])\nmax ([array of values]), max(value1;value2; ...)\nmin ([array of values]), min(value1;value2; ...)\nparseNumber (number; decimal separator)\nround (number)\nsum ([array of values]), sum(value1;value2; ...)\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsMath functions\nMath functions\n\nUse a math function to apply mathematical operations to data. For example, math functions let you get an average of an array, round a value up or down, or change the format of a number (1 000 000 to 1,000,000 or 1.000.000). Below is a list of supported math functions and a brief description of each one.\n\naverage ([array of values]) average(value1; [value2], ...)\n\nReturns the average value of the numeric values in a specific array, or the average value of numerical values entered individually.\n\nceil (number)\n\nReturns the smallest integer greater than or equal to a specified number.\n\nceil( 1.2 )\n\n= 2\n\nceil( 4 )\n\n= 4\n\nfloor (number)\n\nReturns the largest integer less than or equal to a specified number.\n\nfloor( 1.2 )\n\n= 1\n\nfloor( 1.9 )\n\n= 1\n\nfloor( 4 )\n\n= 4\n\nformatNumber (number; decimalPOINTS; [decimalSeparator]; [thousandsSeparator])\n\nReturns a number in the requested format. Decimal point is `,` by default, Thousands separator is `.` by default.\n\nformatNumber( 123456789 ; 3 ; , ; . )\n\n= 123.456.789,000\n\nmax ([array of values]), max(value1;value2; ...)\n\nReturns the largest number in a specified array, or the largest number among numbers entered individually.\n\nmin ([array of values]), min(value1;value2; ...)\n\nReturns the smallest number in a specified array, or the smallest number among numbers entered individually.\n\nparseNumber (number; decimal separator)\n\nParses a string with a number and returns the number.\n\nExample: parseNumber( 1 756,456 ; , )\n\nround (number)\n\nRounds a numeric value to the nearest integer.\n\nround( 1.2 )\n\n= 1\n\nround( 1.5 )\n\n= 2\n\nround( 1.7 )\n\n= 2\n\nround( 2 )\n\n= 2\n\nsum ([array of values]), sum(value1;value2; ...)\n\nReturns the sum of the values in a specified array, or the sum of numbers entered individually.\n\nIn this section\naverage ([array of values]) average(value1; [value2], ...)\nceil (number)\nfloor (number)\nformatNumber (number; decimalPOINTS; [decimalSeparator]; [thousandsSeparator])\nmax ([array of values]), max(value1;value2; ...)\nmin ([array of values]), min(value1;value2; ...)\nparseNumber (number; decimal separator)\nround (number)\nsum ([array of values]), sum(value1;value2; ...)\nMath functions\naverage ([array of values]) average(value1; [value2], ...)\nceil (number)\nfloor (number)\nformatNumber (number; decimalPOINTS; [decimalSeparator]; [thousandsSeparator])\nmax ([array of values]), max(value1;value2; ...)\nmin ([array of values]), min(value1;value2; ...)\nparseNumber (number; decimal separator)\nround (number)\nsum ([array of values]), sum(value1;value2; ...)\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Date and time functions",
      "url": "https://www.make.com/en/help/functions/date---time-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nformatDate (date; format; [timezone])\nparseDate (text; format; [timezone])\naddDays (date; number)\naddHours (date; number)\naddMinutes (date; number)\naddMonths (date; number)\naddSeconds (date; number)\naddYears (date; years)\nsetSecond (date; number)\nsetMinute (date; number)\nsetHour (date; number)\nsetDay (date; number/name of the day in english)\nsetDate (date; number)\nsetMonth (date; number/name of the month in English)\nsetYear (date; number)\nExamples\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsDate and time functions\nDate and time functions\n\nUse date and time functions to convert and transform date and time data. For example, you can change the date format, convert time based on timezones, convert text to date or time data, and more. Below is a list of supported date and time functions with descriptions and details for each.\n\nformatDate (date; format; [timezone])\n\nWhen to use it: You have a Date value that you wish to convert (format) to a Text value (textual human-readable representation) like 12-10-2019 20:30 or Aug 18, 2019 10:00 AM\n\nParameters\n\nThe second column indicates the expected type. If different type is provided, Type Coercion is applied.\n\ndate\n\n\t\n\nDate\n\n\t\n\nDate value to be converted to a Text value.\n\n\n\n\nformat\n\n\t\n\nText\n\n\t\n\nFormat specified using Tokens for date/time formatting.\n\nExample: DD.MM.YYYY HH:mm\n\n\n\n\ntimezone\n\n\t\n\nText\n\n\t\n\nOptional. The timezone used for the conversion.\n\nSee List of tz database time zones, column \"TZ database name\" for the list of recognized timezones.\n\nIf omitted, Make uses the organization's timezone. You can view and edit this timezone by going to Profile > Time zone options > Scenarios.\n\nExamples: Europe/Prague, UTC\n\nNote\n\nOnly the values listed in the \"TZ database name\" column are recognized by the function as a valid timezone. Any other value will be ignored and the Organization's timezone specified in your Profile will be used instead.\n\nReturn value and type\n\nText representation of the given Date value according to the specified format and timezone. Type is Text.\n\nExamples\n\nThe Organization's and Web's timezone were both set to Europe/Prague in the following examples.\n\nFunction example\n\n\t\n\nResult\n\n\n\n\nformatDate(1. Date created; MM/DD/YYYY )\n\n\t\n\n10/01/2018\n\n\n\n\nformatDate(1. Date created; YYYY-MM-DD hh:mm A )\n\n\t\n\n2018-10-01 09:32 AM\n\n\n\n\nformatDate(1. Date created; DD.MM.YYYY HH:mm ; UTC )\n\n\t\n\n01.10.2018 07:32\n\n\n\n\nformatDate(now; MM/DD/YYYY HH:mm )\n\n\t\n\n19/03/2019 15:30\n\nparseDate (text; format; [timezone])\n\nWhen to use it: You have a Text value representing a date (e.g. 12-10-2019 20:30 or Aug 18, 2019 10:00 AM) and you wish to convert (parse) it to a Date value (binary machine-readable representation).\n\nParameters\n\nThe second column indicates the expected type. If different type is provided, Type Coercion is applied.\n\ntext\n\n\t\n\nText\n\n\t\n\nText value to be converted to a Date value.\n\n\n\n\nformat\n\n\t\n\nText\n\n\t\n\nFormat specified using Tokens for date/time parsing.\n\nExample: DD.MM.YYYY HH:mm\n\n\n\n\ntimezone\n\n\t\n\nText\n\n\t\n\nOptional. The timezone used for the conversion.\n\nSee List of tz database time zones, column \"TZ database name\" for the list of recognized timezones.\n\nIf omitted, Make uses the organization's timezone. You can view and edit this timezone by going to Profile > Time zone options > Scenarios.\n\nExamples: Europe/Prague, UTC\n\nNote\n\nOnly the values listed in the \"TZ database name\" column are recognized by the function as a valid timezone. Any other value will be ignored and the Organization's timezone specified in your Profile will be used instead.\n\nReturn value and type\n\nDate representation of the given Text value according to the specified format and timezone. Type is Date.\n\nExamples\n\nPlease note that in the following examples the returned Date value is expressed according to ISO 8601, but the actual resulting value is of type Date.\n\nExample 6. parseDate( 2016-12-28 ; YYYY-MM-DD )\n\n= 2016-12-28T00:00:00.000Z\n\n\n\n\nExample 7. parseDate( 2016-12-28 16:03 ; YYYY-MM-DD HH:mm )\n\n= 2016-12-28T16:03:00.000Z\n\n\n\n\nExample 8. parseDate( 2016-12-28 04:03 pm ; YYYY-MM-DD hh:mm a )\n\n= 2016-12-28T16:03:06.000Z\n\n\n\n\nExample 9. parseDate( 1482940986 ; X )\n\n= 2016-12-28T16:03:06.000Z\n\n\n\n\naddDays (date; number)\n\nReturns a new date as a result of adding a given number of days to a date. To subtract days, enter a negative number.\n\naddDays( 2016-12-08T15:55:57.536Z ; 2 )\n\n= 2016-12-10T15:55:57.536Z\n\naddDays( 2016-12-08T15:55:57.536Z ; -2 )\n\n= 2016-12-6T15:55:57.536Z\n\naddHours (date; number)\n\nReturns a new date as a result of adding a given number of hours to a date. To subtract hours, enter a negative number.\n\naddHours( 2016-12-08T15:55:57.536Z ; 2 )\n\n= 2016-12-08T17:55:57.536Z\n\naddHours( 2016-12-08T15:55:57.536Z ; -2 )\n\n= 2016-12-08T13:55:57.536Z\n\naddMinutes (date; number)\n\nReturns a new date as a result of adding a given number of minutes to a date. To subtract minutes, enter a negative number.\n\naddMinutes( 2016-12-08T15:55:57.536Z ; 2 )\n\n= 2016-12-08T15:57:57.536Z\n\naddMinutes( 2016-12-08T15:55:57.536Z ; -2 )\n\n= 2016-12-08T15:53:57.536Z\n\naddMonths (date; number)\n\nReturns a new date as a result of adding a given number of months to a date. To subtract months, enter a negative number.\n\naddMonths( 2016-12-08T15:55:57.536Z ; 2 )\n\n= 2016-10-08T15:55:57.536Z\n\naddMonths( 2016-12-08T15:55:57.536Z ; -2 )\n\n= 2016-06-08T15:55:57.536Z\n\naddSeconds (date; number)\n\nReturns a new date as a result of adding a given number of seconds to a date. To subtract seconds, enter a negative number.\n\naddSeconds( 2016-12-08T15:55:57.536Z ; 2 )\n\n= 2016-12-08T15:55:59.536Z\n\naddSeconds( 2016-12-08T15:55:57.536Z ; -2 )\n\n= 2016-12-08T15:55:55.536Z\n\naddYears (date; years)\n\nReturns a new date as a result of adding a given number of years to a date. To subtract years, enter a negative number.\n\naddYears( 2016-12-08T15:55:57.536Z ; 2 )\n\n= 2018-08-08T15:55:57.536Z\n\naddYears( 2016-12-08T15:55:57.536Z ; -2 )\n\n= 2014-08-08T15:55:57.536Z\n\nsetSecond (date; number)\n\nReturns a new date with the seconds specified in parameters. Accepts numbers from 0 to 59. If a number is given outside of this range, it will return the date with the seconds from the previous or subsequent minute(s), accordingly.\n\nsetSecond( 2015-10-07T11:36:39.138Z ; 10 )\n\n= 2015-10-07T11:36:10.138Z\n\nsetSecond( 2015-10-07T11:36:39.138Z ; 61 )\n\n= 2015-10-07T11:37:01.138Z\n\nsetMinute (date; number)\n\nReturns a new date with the minutes specified in parameters. Accepts numbers from 0 to 59. If a number is given outside of this range, it will return the date with the minutes from the previous or subsequent hour(s), accordingly.\n\nsetMinute( 2015-10-07T11:36:39.138Z ; 10 )\n\n= 2015-10-07T11:10:39.138Z\n\nsetMinute( 2015-10-07T11:36:39.138Z ; 61 )\n\n= 2015-10-07T12:01:39.138Z\n\nsetHour (date; number)\n\nReturns a new date with the hour specified in parameters. Accepts numbers from 0 to 59. If a number is given outside of this range, it will return the date with the hour from the previous or subsequent day(s), accordingly.\n\nsetHour( 2015-10-07T11:36:39.138Z ; 10 )\n\n= 2015-08-07T06:36:39.138Z\n\nsetHour( 2015-10-07T11:36:39.138Z ; 61 )\n\n= 2015-08-06T18:36:39.138Z\n\nsetDay (date; number/name of the day in english)\n\nReturns a new date with the day specified in parameters. It can be used to set the day of the week, with Sunday as 1 and Saturday as 7. If the given value is from 1 to 7, the resulting date will be within the current (Sunday-to-Saturday) week. If a number is given outside of the range, it will return the day from the previous or subsequent week(s), accordingly.\n\nsetDay( 2018-06-27T11:36:39.138Z ; monday )\n\n= 2018-06-25T11:36:39.138Z\n\nsetDay( 2018-06-27T11:36:39.138Z ; 1 )\n\n= 2018-06-24T11:36:39.138Z\n\nsetDay( 2018-06-27T11:36:39.138Z ; 7 )\n\n= 2018-06-30T11:36:39.138Z\n\nsetDate (date; number)\n\nReturns a new date with the day of the month specified in parameters. Accepts numbers from 1 to 31. If a number is given outside of the range, it will return the day from the previous or subsequent month(s), accordingly.\n\nsetDate( 2015-08-07T11:36:39.138Z ; 5 )\n\n= 2015-08-05T11:36:39.138Z\n\nsetDate( 2015-08-07T11:36:39.138Z ; 32 )\n\n= 2015-09-01T11:36:39.138Z\n\nsetMonth (date; number/name of the month in English)\n\nReturns a new date with the month specified in parameters. Accepts numbers from 1 to 12. If a number is given outside of this range, it will return the month in the previous or subsequent year(s), accordingly.\n\nsetMonth( 2015-08-07T11:36:39.138Z ; 5 )\n\n= 2015-05-07T11:36:39.138Z\n\nsetMonth( 2015-08-07T11:36:39.138Z ; 17 )\n\n= 2016-05-07T11:36:39.138Z\n\nsetMonth( 2015-08-07T11:36:39.138Z ; january )\n\n= 2015-01-07T12:36:39.138Z\n\nsetYear (date; number)\n\nReturns a new date with the year specified in parameters.\n\nsetYear( 2015-08-07T11:36:39.138Zv ; 2017 )\n\n= 2017-08-07T11:36:39.138Z\n\nExamples\nHow to calculate n-th day of week in month\nNote\n\nAdapted for Make from this original source\n\nIf you need to calculate a date corresponding to n-th day of week in month (e.g. 1st Tuesday, 3rd Friday, etc.), you may use the following formula:\n\nYou may copy and paste the formula's code into a field:\n\n{{addDays(setDate(1.date; 1); 1.n * 7 - formatDate(addDays(setDate(1.date; 1); \"-\" + 1.dow); \"E\"))}}\n\nThe formula contains the following items:\n\n1.n\n\n\t\n\nn-th day:\n\n1 for 1st Tuesday\n\n2 for 2nd Tuesday\n\n3 for 3rd Tuesday\n\netc.\n\n\n\n\n2.dow\n\n\t\n\nday of the week\n\n1 for Monday\n\n2 for Tuesday\n\n3 for Wednesday\n\n4 for Thursday\n\n5 for Friday\n\n6 for Saturday\n\n7 for Sunday\n\n\n\n\n1.date\n\n\t\n\nThe date determines the month. To calculate n-th day of week in current month use the now variable.\n\nIn case you wish to calculate only one specific case, e.g. 2nd Wednesday, you may replace the items 1.n and 2.dow in the formula with corresponding numbers. For 2nd Wednesday in current month you would use the following values:\n\n1.n = 2\n\n1.dow = 3\n\n1.date = now\n\nExplanation:\n\nsetDate(now;1) returns first of current month\n\nformatDate(....;E) returns day of week (1, 2, ... 6)\n\nsee the original source for the rest\n\nHow to calculate days between dates\n\nOne possibility is to employ the following expression:\n\nYou can copy and paste the following code:\n\n{{round((2.value - 1.value) / 1000 / 60 / 60 / 24)}}\nNote\n\nValues of D1 and D2 have to be of type Date. If they are of type String (e.g. \"20.10.2018\"), use parseDate() function to convert them to type Date.\n\nNote\n\nThe round() function is used for cases when one of the dates falls within the daylight savings time period and the other not. In these cases, the difference in hours is by one hour less/more and dividing it by 24 gives a non-integer results.\n\nHow to calculate last day/millisecond of month\n\nWhen specifying a date range (e.g. in a search module) spanning the whole previous month as closed interval (the interval that includes both its limit points), it is necessary to calculate last day of month.\n\n2019-09-01 ≤ D ≤ 2019-09-30\n\nThe formula below shows one way how to calculate last day of the previous month:\n\nYou can copy and paste the following code:\n\n{{addDays(setDate(now; 1); -1)}}\n\nIn some cases, it is necessary to calculate not only the last day of month, but literally its last millisecond:\n\n2019-09-01T00:00:00.000Z ≤ D ≤ 2019-09-30T23:59:59.999Z\n\nThe formula below shows one way how to calculate last millisecond of the previous month:\n\nYou can copy and paste the following code:\n\n{{parseDate(parseDate(formatDate(now; \"YYYYMM01\"); \"YYYYMMDD\"; \"UTC\") - 1; \"x\")}}\n\nIf the result should respect your timezone settings, simply omit the UTC argument:\n\n{{parseDate(parseDate(formatDate(now; \"YYYYMM01\"); \"YYYYMMDD\") - 1; \"x\")}}\n\nHowever, it is preferable to use half-open interval instead (the interval that excludes one of its limit points), specifying the first day of the following month instead and replacing the less or equal than operator with less than:\n\n2019-09-01 ≤ D < 2019-10-01\n\n2019-09-01T00:00:00.000Z ≤ D < 2019-10-01T00:00:00.000Z\n\nHow to transform seconds into hours, minutes and second\n\nOne possibility is to use the following expression shown below:\n\nYou can copy and paste the following code:\n\n{{floor(1.seconds / 3600)}}:{{floor((1.seconds % 3600) / 60)}}:{{((1.seconds % 3600) % 60)}}\nNote\n\nValues of Second should be number type. This function is suited only if the second value is less than 86400 ( less than a day ).\n\nIn this section\nformatDate (date; format; [timezone])\nparseDate (text; format; [timezone])\naddDays (date; number)\naddHours (date; number)\naddMinutes (date; number)\naddMonths (date; number)\naddSeconds (date; number)\naddYears (date; years)\nsetSecond (date; number)\nsetMinute (date; number)\nsetHour (date; number)\nsetDay (date; number/name of the day in english)\nsetDate (date; number)\nsetMonth (date; number/name of the month in English)\nsetYear (date; number)\nExamples\nformatDate (date; format; [timezone])\nParameters\nReturn value and type\nExamples\nparseDate (text; format; [timezone])\nParameters\nReturn value and type\nExamples\naddDays (date; number)\naddHours (date; number)\naddMinutes (date; number)\naddMonths (date; number)\naddSeconds (date; number)\naddYears (date; years)\nsetSecond (date; number)\nsetMinute (date; number)\nsetHour (date; number)\nsetDay (date; number/name of the day in english)\nsetDate (date; number)\nsetMonth (date; number/name of the month in English)\nsetYear (date; number)\nExamples\nHow to calculate n-th day of week in month\nHow to calculate days between dates\nHow to calculate last day/millisecond of month\nHow to transform seconds into hours, minutes and second\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Array functions",
      "url": "https://www.make.com/en/help/functions/array-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nadd (array; value1; value2; ...)\ncontains (array; value)\ndeduplicate (array)\ndistinct (array; [key])\nfirst (array)\nflatten (array)\njoin (array; separator)\nkeys (object)\nlast (array)\nlength (array)\nmap (complex array; key;[key for filtering];[possible values for filtering separated by a comma])\nmerge (array1; array2; ...)\nremove (array; value1; value2; ...)\nreverse (array)\nshuffle (array)\nslice (array; start; [end])\nsort (array; [order]; [key])\ntoArray (collection)\ntoCollection (array; key; value)\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsArray functions\nArray functions\n\nYou can use array functions to transform array data. Array functions can, for example, search and sort the items in an array, perform mathematical operations, convert arrays to collections, reorder the items in an array, and more. Below is a list of supported array functions and a description what of each function does.\n\nadd (array; value1; value2; ...)\n\nAdds values specified in parameters to an array and returns that array.\n\ncontains (array; value)\n\nVerifies if an array contains the value.\n\ndeduplicate (array)\n\nRemoves duplicates from an array.\n\ndistinct (array; [key])\n\nRemoves duplicates inside an array. Use the key argument to access properties inside complex objects. To access nested properties, use dot notation. The first item in an array is index 1.\n\ndistinct( Contacts[] ; name )\n\n= Removes duplicates inside an array of contacts by comparing the name property.\n\nfirst (array)\n\nReturns the first element of an array.\n\nflatten (array)\n\nCreates a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\nMore details about flatten function can be found at the Array.prototype.flat documentation.\n\njoin (array; separator)\n\nConcatenates all the items of an array into a string, using a specified separator between each item.\n\nkeys (object)\n\nReturns an array of a given object's or array's properties.\n\nlast (array)\n\nReturns the last element of an array.\n\nlength (array)\n\nReturns the number of items in an array.\n\nmap (complex array; key;[key for filtering];[possible values for filtering separated by a comma])\n\nReturns a primitive array containing values of a complex array. Allows filtering values. Use raw variable names for keys.\n\nmap( Emails[] ; email )\n\n= Returns a primitive array with emails.\n\nmap( Emails[] ; email ; label ; work,home )\n\n= Returns a primitive array with emails that have a label equal to work or home.\n\nSee also Mapping: Accessing array's elements by a key and our Extract an item and/or its value from an array of collections video tutorial.\n\nmerge (array1; array2; ...)\n\nMerges two or more arrays into one array.\n\nremove (array; value1; value2; ...)\n\nRemoves values specified in the parameters of an array. Effective only in case of primitive arrays of text or numbers.\n\nreverse (array)\n\nThe first element of the array becomes the last element and vice versa.\n\nshuffle (array)\n\nShuffles (randomly reorders) elements of an array.\n\nslice (array; start; [end])\n\nReturns a new array containing only selected items. The first item in the array has an index of 0.\n\nsort (array; [order]; [key])\n\nSorts values of an array. The valid values of the order parameter are:\n\nasc (default) - ascending order: 1, 2, 3, ... for type Number. A, B, C, a, b, c, ... for type Text.\n\ndesc - descending order: ..., 3, 2, 1 for type Number. ..., c, b, a, C, B, A for type Text.\n\nasc ci - case insensitive ascending order: A, a, B, b, C, c, ... for type Text.\n\ndesc ci - case insensitive descending order: ..., C, c, B, b, A, a for type Text.\n\nUse the key parameter to access properties inside complex objects. Use raw variable names for keys. To access nested properties, use dot notation. The first item in an array is index 1.\n\nExample 2. sort( Contacts[] ; name )\n\nSorts an array of contacts by the name property in default ascending order.\n\n\n\n\nExample 3. sort( Contacts[] ; desc ; name )\n\nSorts an array of contacts by the name property in descending order.\n\n\n\n\nExample 4. sort( Contacts[] ; asc ci ; name )\n\nSorts an array of contacts by the name property in case insensitive ascending order.\n\n\n\n\nExample 5. sort( Emails[] ; sender.name )\n\nSorts an array of emails by the sender.name property.\n\n\n\n\ntoArray (collection)\n\nConverts a collection into an array of key-value collections.\n\ntoCollection (array; key; value)\n\nConverts an array containing objects with key-value pairs into a collection.\n\nIn this section\nadd (array; value1; value2; ...)\ncontains (array; value)\ndeduplicate (array)\ndistinct (array; [key])\nfirst (array)\nflatten (array)\njoin (array; separator)\nkeys (object)\nlast (array)\nlength (array)\nmap (complex array; key;[key for filtering];[possible values for filtering separated by a comma])\nmerge (array1; array2; ...)\nremove (array; value1; value2; ...)\nreverse (array)\nshuffle (array)\nslice (array; start; [end])\nsort (array; [order]; [key])\ntoArray (collection)\ntoCollection (array; key; value)\nArray functions\nadd (array; value1; value2; ...)\ncontains (array; value)\ndeduplicate (array)\ndistinct (array; [key])\nfirst (array)\nflatten (array)\njoin (array; separator)\nkeys (object)\nlast (array)\nlength (array)\nmap (complex array; key;[key for filtering];[possible values for filtering separated by a comma])\nmerge (array1; array2; ...)\nremove (array; value1; value2; ...)\nreverse (array)\nshuffle (array)\nslice (array; start; [end])\nsort (array; [order]; [key])\ntoArray (collection)\ntoCollection (array; key; value)\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Flow control",
      "url": "https://www.make.com/en/help/tools/flow-control",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nRepeater\nIterator\nArray aggregator\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsFlow control\nFlow control\nRepeater\n\nRepeater is used in cases where you wish to repeat a task a given number of times. Let us assume you would like to send five emails with subjects \"Hello 1\", \"Hello 2\", ... \"Hello 5\". This could be accomplished with connecting Email > Send me an email module after the Repeater module:\n\nWith modules configured as follows:\n\nYou can imagine the Repeater module as a generator of bundles outputting one bundle after another. Each bundle contains one item named i of type Number. The initial value of the i item is specified in the Initial value field. The number of repetitions (= number of outputted bundles) is specified in the Repeats field. The value of the i item is increased in each repetition by the value specified in the Step field, which is 1 by default (tick the Show advanced settings checkbox to reveal it).\n\nIterator\n\nIterator is a special type of module that converts an array into a series of bundles. Each array item will output as a separate bundle.\n\nSetting up an iterator\n\nSetting up an iterator is done in the same way as setting any other module. The Array field contains the array to be converted/split into separate bundles.\n\nExamples:\nSAVE EMAIL ATTACHMENTS TO GOOGLE DRIVE\n\nThe scenario below shows how to retrieve emails with attachments and save the attachments as single files in a selected Google Drive folder.\n\nEmails can contain an array of attachments. The Iterator module inserted after the first module enables you to handle each attachment separately. The Iterator splits the array of attachments into single bundles, each bundle with one attachment will then save one at a time in a selected Google Drive folder. The Iterator module set up is shown above - the Array field should contain the Attachments[] array.\n\nSPECIALIZED ITERATORS\n\nFor your convenience, many Make apps offer specialized iterator modules with a simplified setup. For example, the Email app contains the special iterator Email > Iterate attachments that will produce the same results as the general Iterator without having to specify the array, just the source module.\n\nLearn when to use an Iterator in your scenarios\n\nThe video below is module 1 of the 3 part lesson titled Iterator and Array Aggregator. It explains the purpose of the Iterator and the Array Aggregator and with the help of a sample scenario, explains when to use an Iterator and what to do with the output.\n\nTroubleshooting: Mapping panel does not display mappable items under the Iterator module\n\nWhen an Iterator does not have information about the structure of the array's items, the mapping panel in the modules following the Iterator will display only two items under the Iterator: Total number of bundles and Bundle order position:\n\nThe reason for this is that in Make each module is responsible for providing information about items it outputs so these items can be properly displayed in the mapping panel in the following modules. However, there are several modules that might be unable to provide this information in some cases, e.g. JSON > Parse JSON or Webhooks > Custom Webhook modules with missing data structure.\n\nThe solution is to manually execute the scenario to make the module learn about the items it outputs so it can provide the information to the following modules.\n\nFor example, if you have a JSON > Parse JSON module without a data structure as below:\n\nAnd then if you connect an Iterator module to it, you will not be able to map the output of the module to the Array field in the setup panel of the Iterator:\n\nTo resolve this, just manually start the scenario in the Scenario editor. You can un-link the modules after the JSON > Parse JSON module to prevent the flow from proceeding further or right-click the JSON > Parse JSON module and choose \"Run this module only\" from the context menu to execute only the JSON > Parse JSON module.\n\nOnce the JSON > Parse JSON has been executed, it learns about the items it outputs and provides this information to all the following modules including the Iterator. The mapping panel in the Iterator's setup will then display the items:\n\nMoreover, the mapping panel in the modules connected after the Iterator will display the items contained in the array's items:\n\nIn summary: if you cannot see some items in a module's mapping panel, simply run the scenario once so all the modules can learn about the items they output and provide this information to the following modules.\n\nArray aggregator\n\nArray aggregator is an aggregator module, which allows to merge several bundles into one single bundle. The following image shows a typical setup of the Array aggregator module.\n\nSource Module\n\n\t\n\nThe module from which the bundle aggregation will start. The source module is usually an iterator or a search module that outputs a series of bundles. Once you setup the aggregator's Source Module (and close the aggregator's setup), the route between the source module and the aggregator will be wrapped in a grey area to visualize the start and the end of the aggregation.\n\n\n\n\nTarget structure type\n\n\t\n\nThe target structure into which the data shall be aggregated. The default option is Custom that enables you to choose items that should be aggregated into the Array aggregator's output bundle's Array item:\n\nOnce you connect more modules after the Array aggregator module and get back to the module's setup, the Target structure type dropdown will contain all the following modules and their fields that are of type Array of Collections, like e.g. Attachments field of the Slack > Create a Message module:\n\nThe video below explains how the modules connected after an Array aggregator affects the content of Target structure type dropdown:\n\n\n\n\nGroup by\n\n\t\n\nThe aggregator's output can be split into several groups with the help of the Group by field. The Group by field can contain a formula that is evaluated for each aggregator's input bundle. The aggregator then outputs one bundle per each distinct formula's value. Each bundle contains two items:\n\nKey contains the distinct value.\n\nArray contains the aggregated data from the bundles for which the formula evaluated to the Key value.\n\n\n\n\nStop processing after an empty aggregation\n\n\t\n\nBy default, the aggregator outputs the result of the aggregation even in case no bundles reached the aggregator (e.g. because they have been all filtered out on their way). If the Stop processing after an empty aggregation option is enabled, the aggregator will not produce any output bundle in this case and the flow will stop.\n\nCaution\n\nBundles outputted from the source module and any other modules between the source module and the aggregator module are not outputted by the aggregator and thus items in these bundles are not accessible by the modules in the flow after the aggregator.\n\nIf you need to access items from bundles outputted from the source module and any other modules between the source module and the aggregator module, make sure to include them in the Aggregated fields field in the setup of the Array aggregator module.\n\nIf items are nested (i.e. contained in a collection item) they currently cannot be easily selected in the Array aggregator's Aggregated fields field. For example, if bundles contain collection item User with two items Name and Email:\n\nThen only the User collection item can be selected:\n\nThis setup will produce the following output:\n\nCustomizing the output\n\nIf you wish to fully customize the Array aggregator's output structure, proceed as follows:\n\nInsert the JSON > Create JSON module after the Array aggregator module:\n\nOpen the JSON > Create JSON module's setup.\n\nSetup a Data structure for the items you want to be outputted from the Array aggregator. The Data structure should be an array of collections and the collections should contain the items you want to include in the output. Here is a sample Data structure with two text items Name and Email:\n\nOpen the Array aggregator module's setup.\n\nIn the Target structure type field, choose the JSON > Create JSON module's array field:\n\nFields corresponding to the Data structure created in step 3 will appear in the setup of the Array aggregator module. Map any items into the fields as you see fit. You can now easily map nested items using the mapping panel and even use formulas:\n\nThe Array aggregator module's output will now look like this:\n\nIf you wish to save the operation performed by the dummy JSON > Create JSON module, just put it on a disabled route after a Router:\n\nIf you wish to conditionally omit an item from the module's output, use a formula that evaluates to ignore keyword:\n\nIf the 4. User: Email is empty then the Email item will be completely omitted from the output:\n\nLearn when to use an Array Aggregator in your scenarios\n\nThe video below is module 2 of the 3 part lesson titled Iterator and Array Aggregator. It is a continuation of module 1 (video link) and using a sample scenario, explains when to use an Array aggregator and what to do with the output.\n\nIn this section\nRepeater\nIterator\nArray aggregator\nFlow control\nRepeater\nIterator\nSetting up an iterator\nLearn when to use an Iterator in your scenarios\nArray aggregator\nCustomizing the output\nLearn when to use an Array Aggregator in your scenarios\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "String functions",
      "url": "https://www.make.com/en/help/functions/string-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nascii (text; [remove diacritics])\nbase64 (text)\ncapitalize (text)\ncontains (text; search string)\ndecodeURL (text)\nencodeURL (text)\nescapeHTML (text)\nindexOf (string; value; [start])\nlength (text or buffer)\nlower (text)\nmd5 (text)\nreplace (text; search string; replacement string)\nsha1 (text; [encoding]; [key])\nsha256 (text; [encoding]; [key]; [key encoding])\nsha512 (text; [output encoding]; [key]; [key encoding])\nsplit (text; separator)\nstartcase (text)\nstripHTML (text)\nsubstring (text; start; end)\ntoBinary (value)\ntoString (value)\ntrim (text)\nupper (text)\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsString functions\nString functions\n\nString functions let you modify and transform string data, also known as text. Use a string function to, for example, change capitalization, remove diacritics and accent marks, combine, split, encode, or decode text. Below is a list of supported string functions and a description of each.\n\nascii (text; [remove diacritics])\n\nRemoves all non-ascii characters from a text string.\n\nascii( ěMščařžkýáeíé)\n\n= Make\n\nascii( ěščřž ; true )\n\n= escrz\n\nbase64 (text)\n\nTransforms text to base64.\n\nbase64( Make )\n\n=TWFrZQ==\n\nTip\n\nCombine the toBinary() and toString() functions to transform base64 encoded text to plain text, as seen below:\n\ntoString( toBinary( TWFrZQ== ; base64 ) )\n\n= Make\n\ncapitalize (text)\n\nConverts the first character in a text string to uppercase.\n\ncapitalize(make)\n\n= Make\n\ncontains (text; search string)\n\nVerifies if text contains the search string.\n\ncontains( Hello World ; Hello )\n\n= true\n\ncontains( Hello World ; Bye )\n\n= false\n\ndecodeURL (text)\n\nDecodes special characters in URL to text.\n\ndecodeURL( Automate%20your%20workflow )\n\n= Automate your workflow\n\nencodeURL (text)\n\nEncodes special characters in a text to a valid URL address.\n\nescapeHTML (text)\n\nEscapes all HTML tags in text.\n\nescapeHTML( <b>Hello</b> )\n\n= &lt;b&gt;Hello&lt;/b&gt;\n\nindexOf (string; value; [start])\n\nReturns the position of the first occurrence of a specified value in a string. This method returns '-1' if the value searched for never occurs.\n\nindexOf(Make; k )\n\n= 2\n\nindexOf(We love Make ; x )\n\n= -1\n\nindexOf(We love Make; e ; 7 )\n\n= 11\n\nlength (text or buffer)\n\nReturns the length of text string (number of characters) or binary buffer (buffer size in bytes).\n\nlength( hello )\n\n= 5\n\nlower (text)\n\nConverts all alphabetical characters in a text string to lowercase.\n\nlower( Hello )\n\n= hello\n\nmd5 (text)\n\nCalculates the md5 hash of a string.\n\nmd5(Make)\n\n= 529a05ca6c1263aab080ec4f20754411\n\nreplace (text; search string; replacement string)\n\nReplaces the search string with the new string.\n\nreplace( Hello World ; Hello ; Hi )\n\n= Hi World\n\nRegular expressions (enclosed in /.../) can be used as search string with a combination of flags (like g, i, m) appended:\n\n= All these numbers X X X X will be replaced with X\n\nThe replacement string can include the following special replacement patterns:\n\n$&\n\n\t\n\nInserts the matched substring\n\n\n\n\n$n\n\n\t\n\nWhere n is a positive integer less than 100, inserts the nth parenthesized submatch string. Note that this is 1-indexed\n\n= Phone number is +420777111222\n\n= Phone number: +420777111222\n\nWarning\n\nDo not use named capture groups like / is (?<number>\\d+)/ in the replacement string argument as this will throw an error.\n\nsha1 (text; [encoding]; [key])\n\nCalculates the sha1 hash of a string. If the key argument is specified, sha1 HMAC hash is returned instead. Supported encodings: hex (default), base64 or latin1.\n\nsha1(Make)\n\n= a94431ee22f05f141107f9355ed3127d0f0c4d5a\n\nsha256 (text; [encoding]; [key]; [key encoding])\n\nCalculates the sha256 hash of a string. If the key argument is specified, sha256 HMAC hash is returned instead. Supported encodings: hex (default), base64 or latin1.\n\nsha256(Make)\n\n= ccdd25d4230fb997a7ee1166f8afabd157248eb812ea55ec7c3d1b7c8af7fa11\n\nsha512 (text; [output encoding]; [key]; [key encoding])\n\nCalculates the sha512 hash of a string. If the key argument is specified, sha512 HMAC hash is returned instead. Supported encodings: hex (default), base64 or latin1. Supported key encodings: text (default), hex, base64 or binary. When using binary key encoding, a key must be a buffer, not a string.\n\nsha512( Make )\n\n= e8000cd0fb8fae18caa8daa677269b0034380d3ec549e0113a0722d8b8dc05b0f7037f33f32fa09f906b2f1d7c43f2689a55d79aadf6bf09dd93f79407424d34\n\nsplit (text; separator)\n\nSplits a string into an array of strings by separating the string into substrings.\n\nsplit( John, George, Paul ; , )\n\nstartcase (text)\n\nCapitalizes the first letter of every word and lower cases all other letters.\n\nstartcase( hello WORLD )\n\n= Hello World\n\nstripHTML (text)\n\nRemoves all HTML tags from text.\n\nstripHTML( <b>Hello</b> )\n\n= Hello\n\nsubstring (text; start; end)\n\nReturns a portion of a text string between the \"start\" position and \"the end\" position.\n\nsubstring( Hello ; 0 ; 3 )\n\n= Hel\n\nsubstring( Hello ; 1 ; 3 )\n\n= el\n\ntoBinary (value)\n\nConverts any value to binary data. You can also specify encoding as a second argument to apply binary conversions from hex or base64 to binary data.\n\ntoBinary(Make)\n\n= 4d 61 6b 65\n\ntoString(toBinary(TWFrZQ==;base64)\n\n= Make\n\ntoString (value)\n\nConverts any value to a string.\n\ntrim (text)\n\nRemoves space characters at the start or end of the text.\n\nupper (text)\n\nConverts all alphabetical characters in a text string to uppercase.\n\nupper( Hello )\n\n= HELLO\n\nIn this section\nascii (text; [remove diacritics])\nbase64 (text)\ncapitalize (text)\ncontains (text; search string)\ndecodeURL (text)\nencodeURL (text)\nescapeHTML (text)\nindexOf (string; value; [start])\nlength (text or buffer)\nlower (text)\nmd5 (text)\nreplace (text; search string; replacement string)\nsha1 (text; [encoding]; [key])\nsha256 (text; [encoding]; [key]; [key encoding])\nsha512 (text; [output encoding]; [key]; [key encoding])\nsplit (text; separator)\nstartcase (text)\nstripHTML (text)\nsubstring (text; start; end)\ntoBinary (value)\ntoString (value)\ntrim (text)\nupper (text)\nString functions\nascii (text; [remove diacritics])\nbase64 (text)\ncapitalize (text)\ncontains (text; search string)\ndecodeURL (text)\nencodeURL (text)\nescapeHTML (text)\nindexOf (string; value; [start])\nlength (text or buffer)\nlower (text)\nmd5 (text)\nreplace (text; search string; replacement string)\nsha1 (text; [encoding]; [key])\nsha256 (text; [encoding]; [key]; [key encoding])\nsha512 (text; [output encoding]; [key]; [key encoding])\nsplit (text; separator)\nstartcase (text)\nstripHTML (text)\nsubstring (text; start; end)\ntoBinary (value)\ntoString (value)\ntrim (text)\nupper (text)\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Webhooks",
      "url": "https://www.make.com/en/help/tools/webhooks",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nCreating app-specific webhooks\nCreating custom webhooks\nScheduling webhooks processing\nHow Make processes webhooks\nWebhook settings\nError Handling\nSupported incoming data formats\nWebhook headers\nResponding to webhooks\nHTML Response example\nRedirect example\nCustom mailhook\nWebhook rate limit\nTroubleshooting Webhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsWebhooks\nWebhooks \n\nWebhooks allow you to send data to Make over HTTP. Webhooks create a URL that you can call from an external app or service, or from another Make scenario. Use webhooks to trigger the execution of scenarios.\n\nWebhooks usually act as instant triggers. Contrary to scheduled triggers, which periodically ask a given service for new data to be processed, webhooks execute the scenario immediately after the webhook URL receives a request.\n\nMake supports the following types of webhooks:\n\nApp-specific webhooks listen for data coming out of a specific app, also called instant triggers.\n\nCustom webhooks allow you to create a URL to which you can send any data.\n\nCreating app-specific webhooks\n\nMany apps provide webhooks to execute scenarios whenever a certain change occurs in the app. These are called instant triggers. Instant triggers are marked with the label \"INSTANT\" in the list of an app's modules:\n\nIf an app does not provide webhooks, use polling triggers to periodically poll the service for new data.\n\nCreating custom webhooks\n\nTo create a webhook, you must insert the Custom webhook module to a scenario.\n\nNote\n\nEach scenario must use its own webhook. You can not use one webhook in multiple scenarios.\n\nInserting webhooks to scenarios\n\nInsert the Custom Webhook module from the Webhooks app.\n\nIn the module's settings, click Add.\n\nSet the webhook's name and other settings, then click Save.\n\nMake generates a URL and starts listening for requests to this URL. Send a request to this URL to have Make automatically determine the data structure for this webhook. See setting up webhook data structure below for more details.\n\nNote\n\nYou can access the webhook's details and change the webhook's settings in the Webhooks section in the left menu.\n\nSetting up webhook data structure\n\nOptionally, you can let Make know what data structure to expect in the webhook request payload. Make can use data structures to validate the incoming data. If you do not set up a data structure, Make will pass the incoming data to subsequent modules in your scenario without any validation.\n\nTo enable validating incoming data, set up the webhook's data structure in one of the following ways:\n\nCreate a new data structure manually in the Data structures section.\n\nUse an existing data structure.\n\nYou can also use the following methods to let Make know what data structure to expect.\n\nNotice\n\nNote that these methods do not enable data validation. The data structure set up in this way only helps with mapping the webhook data to subsequent modules in your scenario.\n\nCreate a data structure immediately after creating the webhook by calling the webhook URL with sample data in the request body.\n\nRe-determine the data structure of an existing webhook going to the Webhook module settings, clicking Re-determine data structure, and calling the webhook URL with sample data in the request body.\n\nIf you call the webhook URL to automatically determine or re-determine the data structure, Make does not create a reusable data structure in the Data structures section. The data structure determined in this way is stored internally with the particular webhook. In this case, Make does not validate incoming data.\n\nScheduling webhooks processing\n\nBy default, when Make receives data on a webhook, your scenario executes immediately. If you don't want to run your scenario immediately after a webhook receives data, you can schedule your scenario to process all webhook requests periodically.\n\nEdit the scenario which is triggered by your webhook.\n\nEdit the scenario schedule settings.\n\nOR\n\nEdit the schedule settings of the webhook module.\n\nSet up your desired schedule.\n\nWhen a scheduled webhook receives data, Make stores the data in the webhook's queue. The whole queue is then processed every time your schedule criteria are met.\n\nHow Make processes webhooks\n\nWhen a webhook receives a request, the system stores the request in the webhook's queue. Each webhook has its own queue. Go to the Webhooks section in the left menu to view all webhooks and their queues.\n\nParallel vs. sequential processing\n\nIf you are using instant webhooks, Make starts processing each request immediately as the request is received. By default, scenarios with instant webhooks are processed in parallel. Even if a previous scenario execution is still being processed, Make does not wait for its processing to complete.\n\nYou can inspect all running executions in the scenario detail. Click an item in the list of running executions to view the graphical representation of that particular execution. The execution that is currently displayed is marked with an eye icon.\n\nTo turn off parallel processing, open the settings of your scenario and select Sequential processing. With sequential processing enabled, Make waits until the previous execution is complete before starting the next one. Also, use sequential processing when you need to process your webhook requests in the order that they came in.\n\nProcessing scheduled webhooks\n\nIf you are using scheduled webhooks, requests accumulate in the queue until the schedule criteria are met. When schedule criteria are met, Make processes the queued requests based on the Maximum number of results that you set for the webhook.\n\nFor example, if your scenario is scheduled to run every hour and your Maximum number of results is set to the default value of 2, Make processes two items from the queue every hour. If your webhook queue is filling up with requests, increase the Maximum number of results or adjust the schedule to execute the scenario more often.\n\nNote\n\nInstant trigger modules have the Maximum number of cycles parameter instead of the Maximum number of results.\n\nSet the Maximum number of cycles in the instant trigger modules to get the same data processing behavior as is with webhooks and the Maximum number of results parameter.\n\nWebhook queue details\n\nWhen data arrives to a webhook and the call is not processed instantly, Make stores it in the webhook processing queue.\n\nThe limit for the number of webhook queue items depends on your usage allowance, which is a part of your subscription. For every 10,000 operations licensed per month, you can have up to 667 items in each webhook's queue. The maximum number is 10,000 items in the webhook's queue.\n\nWhen the webhook queue is full, Make rejects all incoming webhook data which is over the limit.\n\nIncoming webhook data is always stored in the queue regardless of the data is confidential option settings. As soon as the data is processed in a scenario, it is permanently deleted.\n\nView webhook queue\n\nTo view the content of the queue, follow the steps below.\n\nGo to the Webhooks section in the left menu.\n\nFind the webhook whose queue you want to view.\n\nClick the specific webhook on the list to inspect its details.\n\nYou can see:\n\nWebhook status\n\nWebhook URL and webhook UDID (unique webhook identifier)\n\nStatus of your scenario\n\nScenario ID and scenario URL\n\nTo see the webhook's queue, click Queue.\n\nYou can also click the button with the truck icon on the Webhooks page.\n\nThe webhook's queue displays.\n\nClick Detail by the webhook you want to inspect.\n\nYou can see the parsed items.\n\nExpiration of inactive webhooks\n\nMake automatically deactivates webhooks that are not connected to any scenario for more than 5 days (120 hours). The hook return 410 Gone status code.\n\nDelete webhook item from a queue\n\nGo to the Webhooks section in the menu on the left.\n\nClick the button with the truck icon to see the webhook's queue.\n\nThe webhook's queue displays.\n\nTick the box on the left in front of the entries you want to delete.\n\nClick Delete selected to delete the chosen webhook(s).\n\nTo delete all, tick the first box on the left and then Delete all.\n\nClick OK to confirm.\n\nYou have deleted the incoming webhook item(s) from the queue.\n\nWebhook logs\n\nMake stores webhook logs for 3 days. For the organizations on the Enterprise plan,Make keeps the webhook logs for 30 days. Make deletes logs older than other retention limit.\n\nTo view webhook logs, follow the steps below.\n\nGo to the Webhooks section in the menu on the left.\n\nClick the specific webhook on the list to inspect its details.\n\nClick Logs.\n\nYou can see:\n\nStatus of the webhook call (success, warning, error, or all)\n\nTo filter the webhook logs by status, click the filter icon.\n\nDate and time of the incoming webhook\n\nTo sort the webhook log by date and time, click the arrow.\n\nWebhook execution log size\n\nTo see the detail of the specific webhook log, click Detail.\n\nYou can see:\n\nWebhook request (timestamp, URL, method, headers, query, body)\n\nWebhook response (status, headers, body)\n\nParsed items\n\nParsed items combine the query parameters and body of the webhook request in one bundle.\n\nWebhook settings\n\nTo adjust a webhook's settings, click Webhooks in the left menu and Edit a webhook.\n\nSetting\n\n\t\n\nDescription\n\n\n\n\nIP restrictions\n\n\t\n\nA whitelist of IP addresses delimited by comma. Only webhook requests that come from the specified IPs will be processed. Use CIDR notation to whitelist a subnet. Leave empty if you want to allow requests from all IPs.\n\n\n\n\nData structure\n\n\t\n\nSelect an existing data structure or create a new data structure for the webhook. Make will use the data structure to validate the incoming data. Requests that don't pass validation will be rejected with HTTP status code 400.\n\n\n\n\nGet request headers\n\n\t\n\nExtracts headers data from the webhook request and makes the data available for mapping in the scenario.\n\n\n\n\nGet request HTTP method\n\n\t\n\nExtracts the HTTP method from the request and makes the method available for mapping in the scenario.\n\n\n\n\nJSON pass-through\n\n\t\n\nPasses JSON payloads to subsequent modules in the scenario as a text string, as opposed to breaking the payload down into mappable fields.\n\nError Handling\n\nWhen there is an error in your scenario with a webhook, the scenario:\n\nstops immediately - when the scenario is set to run Immediately.\n\nstops after 3 unsuccessful attempts (3 errors) - when the scenario is set to run as scheduled.\n\nIf your scenario contains a Webhook response module, the error is sent to the Webhook response. The webhook response module is always executed last, unless you enable auto commit in scenario settings.\n\nSupported incoming data formats\n\nMake supports the following formats of incoming data:\n\nQuery string\n\nForm data\n\nJSON\n\nIf a webhook receives data in both the query string and either form data or JSON data at the same time, the system combines the data into a single bundle. If the request contains duplicate data in different formats, the query string takes precedence and overwrites the data that was received in the other formats. We recommend you do not duplicate data in query strings, form data, and JSON.\n\nQuery String\nGET \nhttps://hook.make.com/yourunique32characterslongstring?name=Make&amp;job=automate\nForm Data\nPOST \nhttps://hook.make.com/yourunique32characterslongstring\nContent-Type: application/x-www-form-urlencoded\n\nname=Integrobot&job=automate\nMultipart\nPOST \nhttps://hook.make.com/yourunique32characterslongstring\nContent-Type: multipart/form-data; boundary=---generatedboundary\n\n---generatedboundary\nContent-Disposition: form-data; name=\"file\"; filename=\"file.txt\"\nContent-Type: text/plain\n\nContent of file.txt\n---generatedboundary\nContent-Disposition: form-data; name=\"name\"\nMake\n---generatedboundary\n\nIn order to receive files encoded with multipart/form-data, it is necessary to configure a data structure with a  collection type field that contains the nested fields   name, mime and data. The field name is a text type and contains the name of the uploaded file. The mime is a text type and contains a file in the [MIME] format. The field data is a buffer type and contains binary data for the file being transferred.\n\nJSON\nPOST \nhttps://hook.make.com/yourunique32characterslongstring\nContent-Type: application/json\n\n{\"name\": \"Integrobot\", \"job\": \"automate\"}\n\nTo access the original JSON, open the webhook's settings and enable the JSON pass-through option:\n\nThe maximum allowed webhook's payload size (Content-Length) is 5 MB (5.242.880 bytes) regardless of the subscription tier.\n\nWebhook headers\n\nTo access the webhook's headers, enable the Get request headers option in the webhook's setup:\n\nYou can then extract a particular header value with the combination of map() & get() functions. The example below shows a formula that extracts the value of the authorization header from the Headers[] array. The formula is used in a filter that compares the extracted value with the given text to pass only webhooks if there is a match.\n\nResponding to webhooks\n\nThe default response to a webhook call contains just a simple text, \"Accepted\". The response is returned to the webhook's caller right away during the execution of the Custom Webhook module. You can easily test it like this:\n\nPlace the Custom Webhook module in your scenario.\n\nAdd a new webhook in the module's configuration.\n\nCopy the webhook's URL to your clipboard.\n\nRun the scenario - the Custom Webhook module should be waiting for the webhook call (see on the right)\n\nOpen a new browser window, paste the copied URL in the address bar and press Enter.\n\nThe Custom Webhook module will be triggered and the browser will display the following page:\n\nThese are default responses when the scenario does not contain the Webhook Response module:\n\n\t\n\nHTTP status code\n\n\t\n\nBody\n\n\n\n\nWebhook accepted in the queue\n\n\t\n\n200\n\n\t\n\nAccepted\n\n\n\n\nWebhook queue full\n\n\t\n\n400\n\n\t\n\nQueue is full.\n\nIf you wish to customize the webhook's response, employ the module Webhook Response. The configuration of the module contains two fields: Status and Body. The Status field should contain HTTP response status codes like 2xx for Success (e.g.200 for OK), 3xx for Redirection (e.g.307 for Temporary Redirect), 4xx for Client errors (e.g. 400 for Bad Request), etc. The Body field should contain anything that will be accepted by the webhook's call. It can be a simple text, HTML, XML, JSON, etc. It is advisable to set the Content-Type header to the corresponding mime type: text/plain for plain text, text/html for HTML, application/json for JSON, application/xml for XML, etc.\n\nThese are additional default responses when the scenario does contain the Webhook Response module:\n\n\t\n\nHTTP status code\n\n\t\n\nBody\n\n\n\n\nScenario encounters an error\n\n\t\n\n500\n\n\t\n\nScenario failed to complete.\n\nThe timeout for sending a response is 40 seconds. If the response is not available within that period, Make returns a '200 Accepted' status.\n\nHTML Response example\n\nConfigure the Webhook Response module as follows:\n\nStatus\n\n\t\n\n2xx success HTTP status code, e.g. 200\n\n\n\n\nBody\n\n\t\n\nHTML code, e.g.:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Thank you!</title>\n</head>\n<body>Thank you, {{1.name}}, for your request!\n</body>\n</html>\n\n\n\nCustom headers\n\n\t\n\nKey\n\n\t\n\nContent-type\n\n\n\n\nValue\n\n\t\n\ntext/html\n\nIt will produce an HTML response that will be displayed like this in a web browser:\n\nRedirect example\n\nConfigure the Webhook Response module as follows:\n\nStatus\n\n\t\n\n3xx redirection HTTP status code, e.g. 303\n\n\n\n\nCustom headers\n\n\t\n\nKey\n\n\t\n\nLocation\n\n\n\n\nValue\n\n\t\n\nThe URL you would like to redirect to.\n\nCustom mailhook\n\nMailhook is an instant trigger module that can be triggered by sending an email to the email address generated by this module.\n\nMailhook attachment size limit\n\nThe maximum size of an email, including its attachments, that you send to a mailhook is 25 MB.\n\nExample Of Use\n\nMailhook will monitor your incoming emails without the need to have a scheduled run of the scenario.\n\nAdd the Custom mailhook to your scenario (Webhooks > Custom mailhook).\n\nGenerate a mailhook email address, and copy the address to the clipboard.\n\nSave and run the scenario.\n\nOpen your email account settings, and configure forwarding. Use the email address generated by the Custom mailhook module in step 2 (above) as the forwarding address.\n\nFor Gmail:\n\nClick the cogwheel () in the top-right corner, and then click See all settings.\n\nOpen the Forwarding and POP/IMAP tab.\n\nClick the Add a forwarding address button.\n\nEnter the email address you have generated and copied in step 2 above, and click Next.\n\nAfter that, a popup window will appear. Click Proceed.\n\nA confirmation link has been sent to your mailhook. Run the custom mailhook module to see this code in the output under Bundle > Text.\n\nNote\n\nIf you use Gmail for work or school, you don't need to verify the forwarding address.\n\nEnable the forwarding, and save changes.\n\nAdd other desired modules to the scenario. Then save and activate the scenario\n\nNow, every time a new email is received in your email account, the Custom mailhook module in your Make scenario is triggered and receives the email message data.\n\nTip\n\nThe sender and various recipient addresses (To: CC: and BCC:) are resolved in the data structure of the incoming mail. Reply-To: can be found in the Header section.\n\nWebhook rate limit\n\nMake can process up to 30 incoming webhook requests per second.\n\nIf you send more than 30 requests per second, the system returns an error with status code 429.\n\nTroubleshooting Webhooks\nMissing items in the mapping panel\n\nIf some items are missing in the mapping panel in the setup of the modules following the Webhooks > Custom Webhook module, click the Webhooks > Custom Webhook module to open its setup and click Re-determine data structure:\n\nThen follow the steps described in the section Determine the webhook's data structure.\n\nIn this section\nCreating app-specific webhooks\nCreating custom webhooks\nScheduling webhooks processing\nHow Make processes webhooks\nWebhook settings\nError Handling\nSupported incoming data formats\nWebhook headers\nResponding to webhooks\nHTML Response example\nRedirect example\nCustom mailhook\nWebhook rate limit\nTroubleshooting Webhooks\nWebhooks\nCreating app-specific webhooks\nCreating custom webhooks\nInserting webhooks to scenarios\nSetting up webhook data structure\nScheduling webhooks processing\nHow Make processes webhooks\nParallel vs. sequential processing\nProcessing scheduled webhooks\nWebhook queue details\nWebhook settings\nError Handling\nSupported incoming data formats\nQuery String\nForm Data\nMultipart\nJSON\nWebhook headers\nResponding to webhooks\nHTML Response example\nRedirect example\nCustom mailhook\nExample Of Use\nWebhook rate limit\nTroubleshooting Webhooks\nMissing items in the mapping panel\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Using functions",
      "url": "https://www.make.com/en/help/functions/using-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nInserting functions into fields\nExample: shortening a tweet\nUsing Google Sheets functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsUsing functions\nUsing functions\n\nWhen mapping items, you can use functions to create complex formulas. The functions available in Make are similar to functions in Excel or those in other programming languages. The functions let you perform various transformations of item values, such as converting a text to uppercase, trimming a text, converting a date into a different format, and many others.\n\nInserting functions into fields\n\nFunctions can be inserted into fields the same way as items. If you click into a field, the mapping panel pops up.\n\nThe mapping panel contains several tabs:\n\nThe first tab (shown upon opening the panel) displays the items that you can map from other modules.\n\nThe other tabs contain various functions:\n\nGeneral functions - see General functions\n\nMath functions - see Math functions\n\nText and binary functions - see String functions\n\nDate and time - see Date & time functions\n\nTokens for date/time formatting\n\nTokens for date/time parsing\n\nFunctions for working with arrays - see Array functions\n\nCustom functions\n\nCustom and system variables\n\nTo insert a function into a field, click the function name or drag it to the field.\n\nExample: shortening a tweet\n\nWhen posting a new tweet with the Twitter > Create a tweet module, you should not exceed Twitter's 280-character limit. Otherwise, the module throws an error. If you map a text item that can contain more than 280 characters into the module's Status field, you can use the substring() function to limit the tweet to 280 characters:\n\nUsing Google Sheets functions\n\nIf you miss a function, but it is featured by Google Sheets, you may use it like this:\n\nIn Google Sheets, create a new empty spreadsheet.\n\nIn Make, open your scenario.\n\nInsert the Google Sheets > Update a cell module.\n\nConfigure the module:\n\nChoose the newly created spreadsheet in the Spreadsheet field.\n\nInsert your formula containing the Google Sheets function(s) into the Value field.\n\nNote that you can use the output of the preceding modules as usual.\n\nInsert the Google Sheets > Get a cell module to obtain the calculated result.\n\nConfigure the module. Fill in the same Cell ID as you filled in step 4.\n\nIn this section\nInserting functions into fields\nExample: shortening a tweet\nUsing Google Sheets functions\nUsing functions\nInserting functions into fields\nExample: shortening a tweet\nUsing Google Sheets functions\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Tools",
      "url": "https://www.make.com/en/help/tools/tools",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nTriggers\nIncrement function\nSleep\nSet Variable\nSet Multiple Variables\nGet Variable\nGet Multiple Variables\nAggregators\nTransformers\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsTools\nTools\n\nOur Tools section includes several useful modules that can enhance your scenario.\n\nTriggers\nBasic trigger\n\nAllows you to create a custom trigger and define its input bundles.\n\nBundle\n\n\t\n\nCreate custom bundles by adding array items.\n\nThe array consists of the name-value pairs.\n\nYou can use it, for example, for contacts or any other list that is scheduled to be sent to a specified email address (Email > Send an Email, Gmail > Send an Email modules), or as a simple reminder to be triggered whenever you want.\n\nIncrement function\nNote\n\nSee our scenario template for the Controlled distribution of data flow.\n\nReturns a value incremented by 1 after each module's operation. It is possible to configure the module to reset the value:\n\nAfter one cycle\n\nAfter one scenario run\n\nNever\n\nExample\n\nOne of the module's uses is to implement a so-called Round robin assignment of tasks/leads/emails/etc. to users in a group. The algorithm chooses the assignees from a group in some rational order, usually going from the top to the bottom of a list and then starting again at the top of the list and continuing until finished (like you would deal a deck of cards).\n\nThe following scenario sends an email to the first recipient after every odd scenario run, and to the second recipient after every even scenario run.\n\nConfigure the module to never reset the value:\n\nThere are two conditions used after the router module:\n\n1. Odd – set the condition using the modulus math function that equals 1:\n\nDo not forget to change the Equal to operator from the default Text operator to the Numeric operator!\n\n2. Even – set the condition using the modulus math function that equals 0:\n\nSleep\n\nAllows you to delay the scenario flow for up to 300 seconds (5 minutes).\n\nDelay\n\n\t\n\nEnter the number of seconds the scenario will be paused for.\n\nThis function can be useful, for example, if you want to lower the target service server load or to simulate more human behavior when sending bulk SMS or emails.\n\nIf you wish to pause the flow for longer periods of time, we suggest splitting your scenario into two scenarios:\n\nThe first scenario would contain the part before the pause\n\nThe second scenario would contain the part after it\n\nThe first scenario would end up storing all the necessary information in a data store together with the current timestamp. The second scenario would periodically check the Data store for records with a timestamp older than the intended delay, retrieve the records, finalize the processing of the data, and remove the records from the Data store.\n\nSet Variable\n\nCreates a variable that can be mapped by other modules in the route or by the Get Variable module for every route in the scenario.\n\nVariable name\n\n\t\n\nEnter the variable name. This name will be displayed when mapping the variable in other modules.\n\n\n\n\nVariable lifetime\n\n\t\n\nOne cycle\n\nThe variable is valid only for one cycle. Useful when multiple webhooks in one scenario run are received (more webhooks = more cycles).\n\nOne execution\n\nThe variable is valid for one execution. One execution can contain more cycles.\n\n\n\n\nVariable value\n\n\t\n\nEnter the value of the variable.\n\nSet Multiple Variables\n\nCreates multiple variables that can be mapped by other modules in the route or by the Get Multiple Variables module for every route in the scenario within a single operation.\n\nThe main benefits of the Set multiple variables module are:\n\none Set multiple variables module can replace a whole series of Set variable modules\n\none Set multiple variables module consumes just a single operation\n\nVariables\n\n\t\n\nAdd multiple variables you want to set.\n\nVariable name\n\n\t\n\nEnter the variable name. This name will be displayed when mapping the variable in other modules.\n\n\n\n\nVariable value\n\n\t\n\nEnter the value of the variable.\n\n\n\n\nVariable lifetime\n\n\t\n\nOne cycle\n\nThe variable is valid only for one cycle. Useful when multiple webhooks in one scenario run are received (more webhooks = more cycles).\n\nOne execution\n\nThe variable is valid for one execution. One execution can contain more cycles.\n\nPossible uses of the Set/Get (multiple) variable(s) modules:\n\nTo store a calculated value for later use, even in a different route. Especially in cases when the value is used in multiple modules and the formula to calculate the value is overly complex.\n\nTo debug a formula. If a formula used in a module does not seemingly provide a correct result, copy the formula and paste it into a Set Variable module that you insert before the relevant module. Disconnect the module(s) after the Set Variable module and execute the scenario. Verify the Set Variable module's output, adjust/simplify the formula, execute the scenario again, and continue to do so until the issue has been resolved.\n\nGet Variable\n\nRetrieves a value that was previously created by the Set Variable module.\n\nNote that this module can read a variable that was set anywhere in the scenario. The only requirement is that the Tools > Set Variable is executed before (in time) the Tools > Get Variable module. See the documentation for the Router module for information about the order in which routes are processed.\n\nGet Multiple Variables\n\nRetrieves values that were previously created by the Set Multiple Variables module within a single operation.\n\nThe main benefits of the Set multiple variables module are:\n\none Get multiple variables module can replace a whole series of Get variable modules\n\none Get multiple variables module consumes just a single operation\n\nVariables\n\n\t\n\nAdd multiple variables you want to get.\n\nVariable name\n\n\t\n\nMap the variable name of the variable you want to get.\n\nPossible uses of the Set/Get (multiple) variable(s) modules:\n\nTo store a calculated value for later use, even in a different route. Especially in cases when the value is used in multiple modules and the formula to calculate the value is overly complex.\n\nTo debug a formula. If a formula used in a module does not seemingly provide a correct result, copy the formula and paste it into a Set Variable module that you insert before the relevant module. Disconnect the module(s) after the Set Variable module and execute the scenario. Verify the Set Variable module's output, adjust/simplify the formula, execute the scenario again, and continue to do so until the issue has been resolved.\n\nAggregators\nTable Aggregator\n\nMerges values from the selected fields of received bundles into a single bundle using a specified column and row separator (which allows you to create a table).\n\nSource module\n\n\t\n\nSelect the module you want to aggregate fields from.\n\n\n\n\nAggregated fields\n\n\t\n\nSelect the fields from the module selected above whose values you want to aggregate into one bundle.\n\n\n\n\nColumn separator\n\n\t\n\nSelect or enter the type of separator that will separate the field value columns in the resulting bundle.\n\n\n\n\nRow separator\n\n\t\n\nSelect or enter the type of separator that will separate the field value rows in the resulting bundle.\n\n\n\n\nGroup by\n\n\t\n\nDefine an expression containing one or more mapped items. The aggregated data will then be separated into Groups with the same expression's value. Each Group outputs a separate bundle containing a Key with the evaluated expression and the aggregated text. By doing this, you can use the Key as a filter in subsequent modules.\n\nText Aggregator\n\nMerges values from the selected fields of received bundles into a single bundle.\n\nExample\n\nYou can use the text aggregator tool to insert more values (e.g. customer names or notes) into a single bundle and send an email containing all the values in the email body or the email subject.\n\nNumeric Aggregator\n\nThis module allows you to retrieve numerical values, then apply one of the selected functions (SUM, AVG, COUNT, MAX,...), and return the result in one bundle.\n\nExample\n\nThe module sums up values under the number parameter.\n\nTransformers\nCompose a String\n\nConverts any value to a string data type (text). It makes the mapping easier when mapping e.g. binary data.\n\nConvert the Encoding of the Text\n\nConverts entered input text (or binary data) to the selected encoding.\n\nInput data\n\n\t\n\nEnter the content you want to convert.\n\n\n\n\nInput data codepage\n\n\t\n\nEnter the input data encoding type. This is important for the binary form of data.\n\n\n\n\nOutput data codepage\n\n\t\n\nSelect the target encoding of your data.\n\nSwitch\n\nChecks the input value for a match with the provided list of values. Returns output based on the result.\n\nInput\n\n\t\n\nEnter the expression you want to evaluate.\n\n\n\n\nCases\n\n\t\n\nIf the input contains a value entered to the Pattern field, then the value entered to the Output field is returned. If the condition is not met, then no output is returned OR the value from the Else field (below) is returned.\n\n\n\n\nElse\n\n\t\n\nEnter the value that is returned when the criteria set in the Cases field are not met.\n\nExecute a Scenario\n\nStatus: PLANNED - see the Workaround section below.\n\nWorkaround\n\nEmploy the HTTP > Make a request module in the main scenario to call the other scenario. Employ the Webhooks > Custom webhook module in the other scenario to receive the call. Employ the Webhooks > Webhook response module in the other scenario to return the response.\n\nStop / Throw (an error)\n\nIn some cases, you may want to forcibly stop the scenario execution after the rollback or commit phase or to stop the processing of a route and optionally store it in the queue of incomplete executions.\n\nIn this section\nTriggers\nIncrement function\nSleep\nSet Variable\nSet Multiple Variables\nGet Variable\nGet Multiple Variables\nAggregators\nTransformers\nTools\nTriggers\nBasic trigger\nIncrement function\nSleep\nSet Variable\nSet Multiple Variables\nGet Variable\nGet Multiple Variables\nAggregators\nTable Aggregator\nText Aggregator\nNumeric Aggregator\nTransformers\nCompose a String\nConvert the Encoding of the Text\nSwitch\nExecute a Scenario\nWorkaround\nStop / Throw (an error)\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Email",
      "url": "https://www.make.com/en/help/tools/email",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nConnect Your Email Account to Make\nTriggers\nActions\nIterators\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsEmail\nEmail\n\nWith the Email modules in Make, you can send, copy, delete, and retrieve emails and/or drafts, move emails between folders, mark emails as read or unread, and create drafts.\n\nImportant\n\nOn October 1, 2022, Microsoft began a gradual deprecation of its current basic authorization protocol. Full deprecation of the basic authorization protocol will happen as of 1st of January, 2023. To solve this issue, we have upgraded our Email app to support a new type of connection: Microsoft SMTP/IMAP OAuth. By using this new selection choice, you can create new connections to existing Microsoft email accounts.\n\nAction required: if you use Microsoft as an Email provider in the Email app, update your connections using Microsoft SMTP/IMAP OAuth before the 1st of January, 2023.\n\nConnect Your Email Account to Make\n\nTo create a connection, you can authorize Make to interact with a third-party application or use advanced settings with client credentials.\n\nYou can use the following types of email accounts:\n\nPersonal account (not recommended):\n\nPersonal accounts are a set of credentials used by an individual person and only that person. They provide the appropriate security context for that user, and actions done by the account can be attributed only to that user under normal circumstances. For example, most companies provide a personal account for each employee to manage their own email.\n\nService Accounts:\n\nAdministrators of third-party applications commonly create service accounts that represent another application or process instead of a specific person to provide the appropriate security context. Credentials for such an account may be stored and managed by a select group of people rather than being maintained privately by only one person. All actions done by a service account (for example, accessing, editing, or creating a record in a third-party application) can be attributed to that service account and anyone who has access to the account. For example, a large corporation may create a special email account, corp_support@acme.com, with a password shared by multiple people.\n\nYou can connect your Email account to Make using the following methods:\n\nConnect using a Gmail account\n\nConnect using IMAP for other email types\n\nConnect using Microsoft SMTP/IMAP OAuth\n\nConnect using a Gmail account\n\nTo connect using your Gmail account:\n\nLog in to your Make account, add an Email module to a scenario, click Create a connection, and select Google Restricted as the Connection type.\n\nOptional: In the Connection name field, enter a name for the connection. See the Connecting Gmail to Make page for any issues you might encounter when connecting Gmail.\n\nClick Save.\n\nClick Allow to confirm access.\n\nThe connection has been established.\n\nConnect using IMAP for other email types\n\nTo connect using IMAP:\n\nLog in to your Make account, add an Email module to a scenario, click Create a connection, and select Others IMAP as the Connection type.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn the Email provider field, do one of the following:\n\nSelect your provider from the Email provider options and enter the following:\n\nUser name: Enter your email address.\n\nPassword: Enter your password.\n\nIf your provider is not listed in the options, select Other and enter the following:\n\nIMAP Server\n\n\t\n\nEnter the incoming mail server address (IMAP). Contact your email service provider if you do not have this information available.\n\n\n\n\nPort\n\n\t\n\nEnter the port number. It must be between 1 and 65535.\n\n\n\n\nUse Secure Connection (TLS) \n\n\t\n\nSelect to establish a secure connection between the servers.\n\n\n\n\nUse explicit TLS\n\n\t\n\nSelect to keep your connection encrypted.\n\n\n\n\nUser name\n\n\t\n\nEnter your email address.\n\n\n\n\nPassword\n\n\t\n\nEnter your password.\n\n\n\n\nReject unauthorized certificates\n\n\t\n\nAvailable as an advanced setting.\n\nIf Yes, the server certificate is verified against the list of supplied CAs. For self-signed certificates, as they will not be matched with the built-in CAs, either set this option to Yes and upload your certificate in the Certificate Authority field or set this option to No (this will cause all certificate validations to be skipped).\n\n\n\n\nCertificate authority\n\n\t\n\nAvailable as an advanced setting.\n\nAdd your certificate authority to this configuration. A self-signed certificate can also be used as a Certificate Authority. Makewill be using this to verify the identity of your SMTP server. This ensures the bi-directional certificate-based identity verification of the mTLS protocol.\n\nNote\n\nTo use TLS, you may need to allowlist the IP Addresses of Make in addition to providing the above files. Reach out to your IT team for more information.\n\nClick Save.\n\nThe connection has been established.\n\nConnect using Microsoft SMTP/IMAP OAuth\n\nMicrosoft has deprecated Basic authentication in Exchange Online. Use this connection method if your basic authentication is unsuccessful.\n\nYou can connect the app using the Microsoft SMTP/IMAP basic authentication or client credentials.\n\nConnect using your Microsoft Account\n\nTo connect using your personal or work account:\n\nLog in to your Make account, add an Email module to a scenario, click Create a connection, and select Microsoft SMTP/IMAP OAuth as the Connection type.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nOptional: Click Show Advanced Settings and enter the client credentials from your custom application. See the section Obtain Client Credentials for details on how to create your credentials.\n\nClick Save.\n\nConfirm your account to complete the connection.\n\nIf you need to replace the connection in multiple modules in your scenario, please use the DevTool plugin.\n\nObtain Client Credentials\n\nTo connect using client credentials, you must create a custom application in your Microsoft Azure Portal.\n\nNote\n\nAzure app setup must be done by the user. Make suggests consulting with your IT team when doing this. The instructions provided below are only guidance.\n\nGo to Azure portal > Azure Active Directory > App registrations > New Registration.\n\nEnter the details of the app.\n\nName\n\n\t\n\nName of the app.\n\n\n\n\nSupported account types\n\n\t\n\nSelect the account type based on your preferences. If you are selecting a multitenant option, Accounts in any organizational directory (<your service> - Single tenant), then the user establishing the connection:\n\nMust use the Tenant ID during the connection creation\n\nMust be in the same Tenant ID\n\n\n\n\nRedirect URI (Optional)\n\n\t\n\nSelect the following options:\n\nPlatform: Web\n\nRedirect URI: https://www.integromat.com/oauth/cb/microsoft-smtp-imap\n\nThe Client ID and Tenant ID details appear on the app screen. To add a client secret, click Add a certificate or secret.\n\nClick New client secret, enter a description, select the expiry period for the client secret, and click Add.\n\nNote\n\nWhen the set up expiry date passes, the connection will give an error.\n\nCopy the Value, this is the client secret.\n\nIn the left menu, click API permissions to add the app permissions.\n\nSelect the Microsoft 365 Email app and add the below permissions:\n\nFor the Email app, select the Microsoft Graph app and add the below permissions:\n\nYou now have the client credentials to connect to the Email app using Microsoft.\n\nFor more information, you can refer to the following Microsoft documentation.\n\nMicrosoft Oauth service\n\nAzure Admin Consent Workflow\n\nTriggers\nWatch Emails\nActions\nSend an Email\nCreate a Draft\nMark an Email as Read\nMark an Email as Unread\nMove an Email\nCopy an Email\nDelete an Email\nGet Emails\nSend an Email to a Team Member\nThe Unique Email ID in IMAP protocol\n\nThe Unique Email ID known as 'Email ID (UID)' is the email's identifier. The Email ID is specific for each of the email's folders.\n\nTip\n\nFor getting and deleting the same email from the same folder, you can see below:\n\nGetting an email from your Inbox\n\nDeleting the email from your Inbox\n\nIterators\nIterate Attachments\n\nIterates received attachments one by one.\n\nThe email iterator module lets you manage email attachments separately. For example, you can set up to watch emails to iterate the emails with attachments and receive alerts.\n\nFor more information about iterators, see Iterator.\n\nIn this section\nConnect Your Email Account to Make\nTriggers\nActions\nIterators\nEmail\nConnect Your Email Account to Make\nConnect using a Gmail account\nConnect using IMAP for other email types\nConnect using Microsoft SMTP/IMAP OAuth\nTriggers\nWatch Emails\nActions\nSend an Email\nCreate a Draft\nMark an Email as Read\nMark an Email as Unread\nMove an Email\nCopy an Email\nDelete an Email\nGet Emails\nSend an Email to a Team Member\nThe Unique Email ID in IMAP protocol\nIterators\nIterate Attachments\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "General functions",
      "url": "https://www.make.com/en/help/functions/general-functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nVariables\nFunctions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctionsGeneral functions\nGeneral functions\n\nGeneral functions let you fine-tune your mapping in a scenario. For example, you can select or leave out items in an array or apply conditional criteria to your mapping. Below is a list of general functions you can use in your scenarios.\n\nVariables\nexecutionId\n\nReturns the ID of the current execution. Useful for logging and monitoring purposes.\n\nFunctions\nget (object or array; path)\n\nReturns the value path of an object or array. To access nested objects, use dot notation. The first item in an array is index 1.\n\nget(array;1+1)\nget(array;5.raw_name)\nget(object;raw_name)\nget(object;raw_name.sub_raw_name)\nif (expression; value1; value2)\n\nReturns value 1 if the expression is evaluated to be true. Otherwise, it returns value 2.\n\nif(1=1;A;B)\n= A\nif(1=2;A;B)\n= B\nifempty (value1; value2)\n\nReturns value 1 if this value is not empty. Otherwise, it returns value 2.\n\nifempty(A;B)\n= A\nifempty(unknown;B)\n= B\nifempty(\"\";B)\n= B\nswitch (expression; value1; result1; [value2; result2; ...]; [else])\n\nEvaluates one value (called the expression) against a list of values, and returns the result corresponding to the first matching value.\n\nswitch(B;A;1;B;2;C;3)\n= 2\nswitch(C;A;1;B;2;C;3)\n= 3\nswitch(X;A;1;B;2;C;3;4)\n= 4\n\nomit (collection; key1; [key2; ...])\n\nRemoves elements with the given keys from a collection. Returns a collection with the remaining elements. Useful when you want to pass a collection to an API, which expects an exact number of elements in the collection. Using this function, you can make sure your collection meets the requirements of the API.\n\npick (collection; key1; [key2; ...])\n\nPicks elements with the given keys from a collection. Returns a collection that contains only the picked elements. Useful when you want to pass a collection to an API, which expects an exact number of elements in the collection. Using this function, you can make sure your collection meets the requirements of the API.\n\nIn this section\nVariables\nFunctions\nGeneral functions\nVariables\nexecutionId\nFunctions\nget (object or array; path)\nif (expression; value1; value2)\nifempty (value1; value2)\nswitch (expression; value1; result1; [value2; result2; ...]; [else])\nomit (collection; key1; [key2; ...])\npick (collection; key1; [key2; ...])\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Text Parser",
      "url": "https://www.make.com/en/help/tools/text-parser",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nGetting Started with Text Parser\nData Scraping\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsText Parser\nText Parser\nGetting Started with Text Parser\nTransformers\nCaution\n\nThe module's dialog field names that are displayed in bold (in the Make scenario, not in this documentation article) are mandatory!\n\nGet Elements from HTML\n\nRetrieves the desired elements from an HTML code.\n\nContinue the execution of the route even if the module returns no results\n\n\t\n\nIf enabled, the scenario will not be stopped by this module.\n\n\n\n\nElement type\n\n\t\n\nSelect the type of element you want to retrieve from the HTML code such as image, link, or iframe element(s).\n\n\n\n\nHTML\n\n\t\n\nEnter the HTML code you want to retrieve the specified element types from.\n\nMatch Pattern\n\nThe Match pattern module enables you to find and extract string elements matching a search pattern from a given text. The search pattern is a regular expression (aka regex or regexp), which is a sequence of characters in which each character is either a metacharacter, having a special meaning, or a regular character that has a literal meaning.\n\nThe complete list of metacharacters can be found on the MDN web docs website.\n\nFor a tutorial on how to create regular expressions, we recommend the RegexOne website.\n\nFor an easy, quick regex generator, try the Regular Expressions generator.\n\nFor experimenting with regular expressions, we recommend the regular expressions 101 website. Just make sure to tick the ECMAScript (JavaScript) FLAVOR in the left panel:\n\nPattern\n\n\t\n\nEnter the regular expression pattern. For example, [+-]?(\\d+(\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)? extracts all numerals in the provided text.\n\nNote\n\nThe pattern will contain at least one capture group in parenthesis () for the output bundle to contain some items. If the pattern does not contain any capture groups, the output bundle will be empty:\n\n\n\n\nGlobal match\n\n\t\n\nIf enabled, then the module retrieves all matches in the text. If disabled, then the module retrieves only the first entry.\n\n\n\n\nCase sensitive\n\n\t\n\nYou can disable the case sensitivity by disabling this option (default=case sensitive).\n\n\n\n\nMultiline\n\n\t\n\nIf checked, beginning and end metacharacters (^ and $) will match the beginning or end of each line, not just the very beginning or end of the whole input string.\n\n\n\n\nContinue the execution of the route even if the module returns no results\n\n\t\n\nIf enabled, the scenario will not be stopped by this module.\n\n\n\n\nText\n\n\t\n\nEnter the text you want to match the pattern.\n\nReplace\n\nSearches the entered text for a specified value or regular expression, and replaces the result with the new value.\n\nPattern\n\n\t\n\nEnter the search term. You can also use a regular expression. For more details about the regular expression, refer to the Match Pattern module.\n\n\n\n\nNew value\n\n\t\n\nEnter a value that will replace the search term.\n\n\n\n\nGlobal Match\n\n\t\n\nIf this option is enabled, the module will find all matches rather than stopping after the first match. Each match will be output in a separate bundle.\n\n\n\n\nCase sensitive\n\n\t\n\nIf this option is enabled, the search will be case sensitive.\n\n\n\n\nMultiline\n\n\t\n\nIf checked, the beginning and end metacharacters (^ and $) will match the beginning or end of each line, not just the very beginning or end of the whole input string.\n\n\n\n\nText\n\n\t\n\nEnter the text to be searched.\n\nData Scraping\n\nData scraping, sometimes called web scraping, data extraction, or web harvesting is simply the process of collecting data from websites and storing it in your local database or spreadsheets. If you wish to scrape data from a website and you are not familiar with regular expressions, you may use a data scraping tool:\n\nApify is an excellent tool, and we already have it integrated\n\nBest Data Scraping Tools for 2021\n\nWeb Data Extractors 2022\n\nIf the data scraping tool provides a REST API, you can connect to it via our universal HTTP and Webhooks modules. You can also implement an app on your own using the Make App SDK.\n\nIn this section\nGetting Started with Text Parser\nData Scraping\nText Parser\nGetting Started with Text Parser\nTransformers\nData Scraping\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Functions",
      "url": "https://www.make.com/en/help/functions",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nFunctions\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterFunctions\nFunctions\n\nIn this section\nUsing functions\nGeneral functions\nString functions\nArray functions\nDate and time functions\nMath functions\nCustom functions\nCertificates and keys\nTokens for date/time parsing\nTokens for date/time formatting\nVariables\nMath variables\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Image",
      "url": "https://www.make.com/en/help/tools/image",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nGetting started with Image\nPossible problems\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsImage\nImage\nGetting started with Image\n\nImage by Make lets you get information about a specific image (dimensions, type, and etc.), and directly change the size of the image.\n\nPossible problems\nAction terminated with an error\n\nThere are three cases when an action can terminate with an error:\n\nReceived data was not in the JPG/GIF/PNG/BMP format\n\nThe maximum width/height limit had been exceeded while changing the image dimensions. The image size must not exceed 3840 px width and 2160 px height\n\nThe maximum allowable size of an image had been exceeded while changing the dimensions or format of the image. Learn more about working with files.\n\nIn this section\nGetting started with Image\nPossible problems\nImage\nGetting started with Image\nPossible problems\nAction terminated with an error\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "JSON",
      "url": "https://www.make.com/en/help/tools/json",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nCreate JSON\nConvert JSON to XML\nParse JSON\nTransforming data records to JSON\nSimulating module output using Parse JSON\nAggregate to JSON\nTroubleshooting JSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsJSON\nJSON\nGetting started with JSON\n\nThe JSON app provides modules to process data in JSON format so that Make can further work with the data content or create new JSON content.\n\nCreate JSON\n\nThis module helps you create JSON. The fields in this module depends on your data structure.\n\nThe data structure describes how the JSON data is organized and enables mapping individual JSON items to other modules in your scenario.\n\nSelect the data structure, and enter the field details to create JSON. The data provided in the module returns in the JSON format in the output.\n\nConvert JSON to XML\n\nConverts the given JSON data to XML format.\n\nParse JSON\nData structure\n\nThe data structure describes how the JSON data is organized and enables mapping individual JSON items to other modules in your scenario. If you don't provide the Data structure, you may manually execute the module and Make will build the structure from the provided JSON:\n\nFill the JSON String field in the Parse JSON module.\n\nDo not yet connect the other following modules. Because Makedoes not know the structure of the JSON data, it will not be possible to map data from the Parse JSON module to other modules in your scenario.\n\nManually run the scenario. The Parse JSON module will identify the JSON structure from your provided JSON.\n\nYou can now connect the following modules. The items from the Parse JSON module will now be available for mapping.\n\nCollection vs. Array\n\nJSON string field can contain a collection\n\n{ ... }\n\n{ \"name\" : \"Peter\", \"ID\" : 1}\n\nIn which case, the output will be a single bundle containing the items of the collection:\n\nOr it can contain an array.\n\n[ ... ]\n\n:\n\n[ { \"name\" : \"Peter\", \"ID\" : 1 }, { \"name\" : \"Mike\", \"ID\" : 2 }]\n\nIn which case the output will be a series of bundles, each bundle containing one array's item:\n\nTransforming data records to JSON\n\nLet us assume that the data records you wish to transform to JSON format reside in a Google spreadsheet. Here is the procedure on how to transform the data records to JSON format described in ten steps:\n\nPlace the Google Sheets > Select rows module in your scenario to fetch the data. Set up the module to retrieve rows from your Google spreadsheet and set the Maximum number of returned rows to a small number but larger than one for testing purposes (e.g., three). Execute the Google Sheets module (right-click it and choose \"Run this module only\") and verify its output.\n\nConnect the Array Aggregator module after the Google Sheets module. In the module's setup, choose the Google Sheets module in the Source node field. Leave the other fields as they are for the moment.\n\nConnect JSON > Create JSON module after the Array Aggregator module. The module's setup requires a data structure that describes the JSON format. Click the Add button to open the Data structure setup. The easiest way to create this Data structure is to generate it automatically from a JSON sample. Click the Generator button and paste your JSON sample to the Sample data field:\n\n{ \"books\": [ { \"id\": \"ID\", \"title\": \"Title\", \"author\": \"Author\" } ]}\n\nClick Save. The Specification field in the Data structure setup should now contain the generated structure.\n\nChange the name of your Data structure to something more specific (e.g., \"Books\") and click Save. If everything goes well, a field corresponding to the root array attribute should appear mappable in the JSON module's setup.\n\nClick the Map button next to the field and map the\n\nArray[]\n\nitem outputted from the Array aggregator module to it:\n\nClick OK to close the JSON module's setup.\n\nOpen the setup of the Array Aggregator module. Change the Target structure from Custom to the JSON module's field corresponding to the root array attribute. Map items outputted from the Google Sheets module to the appropriate fields:\n\nClick OK to close the Array Aggregator module's setup.\n\nRun the scenario. If everything goes well, the JSON module should output the correct JSON format. Open the setup of the Google Sheets module and increase the Maximum number of returned rows number to be larger than the number of rows in your spreadsheet to process all the data. The resulting JSON can then be used as a body of an HTTP request, returned as a Webhook's response, etc.\n\nSimulating module output using Parse JSON\n\nMake allows you to mock the data from the existing module and perform testing for your scenario. You can execute this operation using the Parse JSON tool from the Apps section.\n\nExecute the module whose output data you want to mock using the Parse JSON.\n\nClick the resulting output above the module.\n\nClick Download output bundles from the dropdown menu.\n\nA window containing the original module's output bundles in JSON format pops up.\n\nCopy the window's content and click Close.\n\nInsert the Tools > Parse JSON module after the original module, open its configuration, and paste the copied JSON data in Step 4 into the JSON string field.\n\nUnlink the original module from the scenario.\n\nDo not delete the original module.\n\nExecute the mock-up JSON module and use its output instead of the original module's output in your scenario.\n\nBuild and test your scenario.\n\nOnce you are done with the testing, change the mapping from the mock-up module to the original module across the whole scenario with the DevTool's Remap Source tool.\n\nPut back the original module before the mock-up JSON module and remove the JSON module.\n\nIn the Remap Source section, it is not necessary to fill the Module to Edit field unless you do not want to remap all values from the original module in the whole scenario.\n\nAggregate to JSON\n\nConverts the multiple output bundles to a single bundle.\n\nYou need to attach this aggregator module to the source module whose output you want to convert to a single module; for example, the Parse JSON modules give the output in multiple bundles.\n\nAfter selecting the source module, select the data structure, and the remaining fields are populated from the source module.\n\nSave the scenario and execute it. You can see the output is only one bundle.\n\nTroubleshooting JSON\n\nCannot map data from the Parse JSON module\n\nEnsure the JSON content is properly mapped into the Parse JSON module and the data structure is correctly defined. See the above section, JSON processing, for more details.\n\nIn this section\nCreate JSON\nConvert JSON to XML\nParse JSON\nTransforming data records to JSON\nSimulating module output using Parse JSON\nAggregate to JSON\nTroubleshooting JSON\nJSON\nCreate JSON\nConvert JSON to XML\nParse JSON\nCollection vs. Array\nTransforming data records to JSON\nSimulating module output using Parse JSON\nAggregate to JSON\nTroubleshooting JSON\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "XML",
      "url": "https://www.make.com/en/help/tools/xml",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nGetting started with XML\nParsing XML\nCreating XML\nTroubleshooting XML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsXML\nXML\nGetting started with XML\n\nThe XML app enables you to:\n\nparse an XML formatted text via the XML > Parse XMLmodule and convert it to a bundle to make the data available to other modules\n\nconvert a bundle to an XML formatted text via the XML > Create XML module\n\nParsing XML\n\nThe XML > Parse XML module parses an XML formatted text and outputs a single bundle containing all the information extracted from the XML.\n\nData structure\n\n\t\n\nThe Data structure describes the structure of the XML to make the output of the module available in the mapping panel for the following modules.\n\nIf you have a sample of the XML you would like to parse, you can use it to generate the Data structure:\n\nClick on Add\n\nClick on Generator\n\nCopy and paste the XML sample into the Sample data field.\n\nClick on Save\n\nVerify that the Data structure has been successfully generated.\n\nClick on Save to save the Data structure.\n\nNote\n\nYou may skip the steps 2-5 to supply an empty Data structure. This way the output of the module will not be available in the mapping panel until the module has been executed at least once to process an XML input.\n\n\n\n\nXML\n\n\t\n\nThe XML formatted text you would like to parse.\n\nCaution\n\nIf you use a formula, make sure its result value type is (or can be automatically coerced to) Text type. If the result value type is Buffer (binary data) then use toString() function to convert it to the Text type.\n\nExample of parsing an XML\n\nA typical use case is to download an XML file from a URL and parse its content. Here is a step by step guide how to achieve this:\n\nCreate a new scenario\n\nInsert HTTP > Get a file module\n\nOpen the module's configuration and configure it as follows:\n\nURL\n\n\t\n\nURL of the XML file (e.g.https://siftrss.com/f/rqLy05ayMBJ)\n\nClose the module's configuration.\n\nAdd XML > Parse XML module, connect it after the HTTP > Get a file module and configure it as follows:\n\nData structure\n\n\t\n\nClick on Add.\n\nClick on Generator\n\nIn your web browser, open a new tab/window.\n\nPut the URL you used in the third step in the address bar and fetch the XML file.\n\nSelect all the XML text and copy it into the clipboard.\n\nClose the tab/window and get back to your scenario\n\nPaste the copied XML text into the Sample data field.\n\nClick on Save.\n\nVerify that the Data structure has been successfully generated.\n\nClick on Save to save the Data structure.\n\nNote\n\nYou may skip the steps 2-9 to supply an empty data structure. This way the output of the module will not be available in the mapping panel until the module has been executed at least once to process an XML input.\n\n\n\n\nXML\n\n\t\n\nMap the Data item from the output of the HTTP > Get a file into the field. Use the toString() function to convert its value from Buffer (binary data) type to Text type.\n\nYou may copy and paste the formula's code into the field: {{toString(1.data)}}\n\nParsing XML attributes\n\nBy default, the  XML > Parse XML module will put attributes in a special collection _attributes as a child of the node, that has these attributes. If the node is a text node and it has attributes, then two special properties will be added: _attributes for attributes and _value for the text content of the node.\n\nExample\n\nThis XML:\n\n<root attr=\"1\">\n    <node attr=\"ABC\">Hello, World</node>\n</root>\n\nwill be converted into this bundle:\n\nCreating XML\n\nThe XML > Create XML module converts a bundle to an XML formatted text.\n\nData structure\n\n\t\n\nThe Data structure describes the structure of the resulting XML. If you have a sample of the XML you would like to create, you can use it to generate the Data structure:\n\nClick on Add.\n\nClink on Generator.\n\nCopy and paste the XML sample into the Sample data field.\n\nClick on Save.\n\nVerify that the Data structure has been successfully generated.\n\nClick on Save to save the Data structure.\n\nExample\n\nA typical use case is to transform data from a Google spreadsheet into XML. Here is the procedure on how to transform the data to an XML file in ten steps:\n\nPlace the Google Sheets > Select rows module in your scenario to fetch the data. Setup the module to retrieve rows from your Google spreadsheet and set the Maximum number of returned rows to a small number, but larger than one for testing purposes (e.g. three). Execute the Google Sheets module (right-click it and choose \"Run this module only\") and verify the output of the module.\n\nConnect the Array Aggregator module after the Google Sheets module. In the module's setup choose the Google Sheets module in the Source node field. Leave the other fields as they are for the moment.\n\nConnect XML > Create XML module after the Array Aggregator module. The module's setup requires a Data structure that describes the structure of the XML output. Click on Add to open the Data structure setup. The easiest way to create this Data structure is to generate it automatically from an XML sample. Click on Generator and paste your XML sample to the Sample data field:\n\nClick on Save. The specification field in the Data structure setup should now contain the generated structure.\n\nChange the name of your Data structure to something more specific (e.g. \"My XML data structure\") and click on the Save. If everything goes well, a field corresponding to the root XML element should appear as a mappable field in the XML module's setup.\n\nClick on Map next to the field and map the Array[] item outputted from the Array aggregator module to it:\n\nClick on OK to close the XML module's setup.\n\nOpen the setup of the Array Aggregator module. Change the target structure from Custom to a XML module's field corresponding to the parent XML element. Map items outputted from the Google Sheets module to appropriate fields:\n\nClick on the OK to close the Array Aggregator module's setup.\n\nRun the scenario. If everything goes well, the XML module should output the correct XML file. Open the setup of the Google Sheets module and increase the Maximum number of returned rows number to be larger than the number of rows in your spreadsheet to process all the data. The resulting XML can be then saved to Dropbox, sent as an attachment via email, uploaded via FTP to a server, etc.\n\nAdding XML attributes\n\nIf you want to add attributes to a complex node (a node, that will contain other nodes), you have to add a collection with the name _attributes for this node in your custom Data structure, and this collection will be mapped to node attributes\n\nIf you want to add attributes to a text node (example: <node attr=\"1\">abc</node>), you have to add a collection _attributes for attributes and a text property _value for the node value for this node in your custom Data structure.\n\nExample\n{\n    \"name\": \"node\",\n    \"type\": \"collection\",\n    \"spec\": [\n        {\n            \"name\": \"_attributes\",\n            \"type\": \"collection\"\n            \"spec\": [\n                 {\n                     \"name\": \"attr1\",\n                     \"type\": \"text\"\n                 }\n            ]\n        },\n        {\n            \"name\": \"_value\",\n            \"type\": \"text\"\n        }\n    ]\n}\nTroubleshooting XML\nCannot map data from the Parse XML module\n\nMake sure the Data structure is defined correctly. Alternatively you may use an empty data structure and execute the module at least once to process an XML input.\n\nIn this section\nGetting started with XML\nParsing XML\nCreating XML\nTroubleshooting XML\nXML\nGetting started with XML\nParsing XML\nExample of parsing an XML\nParsing XML attributes\nCreating XML\nExample\nAdding XML attributes\nTroubleshooting XML\nCannot map data from the Parse XML module\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Data store",
      "url": "https://www.make.com/en/help/tools/data-store",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nCreating a data store in Make\nManaging data structure of a data store\nActions\nManaging records in data stores\nTroubleshooting\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsData store\nData store\n\nData stores allow you to store data from scenario or transfer data between individual scenarios or scenario runs. You can use data stores to store data from apps during scenario execution. Data stores are similar to a simple database.\n\nThe data store app's modules allow you to add, replace, update, retrieve, delete, search, or count records in your Make data store.\n\nYou can view and manage your data stores and the data they contain in the data stores section of Make.\n\nNote\n\nThe various examples of use can be found here.\n\nCreating a data store in Make\n\nClick Data stores in the left menu.\n\nClick Add data store.\n\nEnter settings for the new data store.\n\nData store name\n\n\t\n\nEnter the name for the data store. E.g. Contacts\n\n\n\n\nData Structure\n\n\t\n\nA data structure is a list of the columns for a table that indicates the column name and data type.\n\nYou have three options:\n\nSelect the data structure that has been already created\n\nLeave the field empty\n\nIf you don't select a data structure, the database will only contain the primary key. Such a database type is useful if you only want to save keys and are only interested in knowing whether or not a specific key exists in the database.\n\nAdd a new data structure\n\nClick the Add button to create a new data structure.\n\nPlease see the Setting Up the Data Structure section of this article.\n\n\n\n\nData storage size in MB\n\n\t\n\nAllocate the size for the data store from your total Internal data storage.\n\nNote\n\nThe reserved amount can be changed at any time later on.\n\nThe total internal data storage capacity depends on the plan you have purchased.\n\nManaging data structure of a data store\nSetting up the data structure\n\nTo set up the data structure, open the Add data structure window.\n\nYou can access this dialog by clicking the Add button when creating or editing the data store:\n\nData structure name\n\n\t\n\nEnter the name for the data structure.\n\nThe data structure name is its unique identifier and cannot be changed later.\n\n\n\n\nSpecification\n\n\t\n\nThere are two options for how you can specify the data store columns.\n\nClick the Add item button to specify the properties of one column manually.\n\nEnter the Name and Type for the data store column and define the corresponding properties.\n\nNote\n\nEnabling the Advanced settings reveals the Label setting for every data structure item.\n\nConsider defining a label for every item in the data structure of your data store in order to avoid challenges when renaming data store columns.\n\nUse the Generator button to determine the columns from the sample data you provide.\n\nFor example, the following JSON sample data:\n\n{\n\n \"name\":\"John\",\n\n \"age\":30,\n\n \"phone number\": {\n\n \"mobile\":\"987654321\",\n\n \"landline\":\"123456789\"\n\n }\n\n }\n\ncreates three columns (name, age, phone number) with phone number as a collection of mobile and landline.\n\nThe empty columns in the data store view:\n\nYou can then add values to the data store manually or using the Make data store modules.\n\n\n\n\nStrict\n\n\t\n\nIf enabled, the data structure will be compared to the structure of the payload and if the payload contains extra items not specified in the data structure, the payload will be rejected.\n\nUpdating the data structure of a data store\nImportant\n\nTake good care when updating the data structure of a data store. Before updating the structure make a backup of the data in the data store.\n\nChanges in the data structure of a data store might lead to unexpected results. If you experience unexpected behavior check out the Troubleshooting section.\n\nWhen you want to update the data structure of a data store, you should keep in mind that:\n\nThe data structure field names are unique identifiers of the data store columns. When you rename a field of a data structure, Make cannot retrieve the original data in the data store column, because they use a different column identifier.\n\nYou can update the data structure field label anytime without the effects mentioned in the previous point.\n\nThe changes to the data store structure apply only to the new data you put in the data store. Make doesn't change or validate the original data to fit the updated structure.\n\nThe best approach to updating the data structure of a data store is to create temporary fields with copies of your data. Update the data in the temporary fields and make sure they conform to the final data structure.\n\nExample data store:\n\nIn the data store with 4 columns:\n\nKey: type number\n\nproductId: type number\n\nproductName: type text\n\ndateAdded: type date\n\nRenaming a field of the data store structure\n\nYou can update the Label of a data store structure field anytime.\n\nIf you want to change the data store structure field Name, follow the steps:\n\nCreate a backup of data in the data store.\n\nCreate a field in your data store with the new name.\n\nCopy all data from the original column to the new column.\n\nUpdate all data in the original column to empty fields. This step prevents storing the data in the original column alongside the data in the new column.\n\nYou have put the data from the original data store column into the new data store column. In addition, you have a data store backup to check that the update was successful.\n\nChanging the type of a field of the data store structure\n\nCreate a backup of data in the data store.\n\nEither create a temporary field for the updated data type, or you can skip this step and update the field type in place.\n\nUse a conversion function to update the type of all values in the data store column to the new type. For example, to convert text to date, use the parseDate function.\n\nYou have updated the type of the data store column. You have converted all data in the data store column to the new data type.\n\nActions\nAdd/Replace a Record\nUpdate a Record\nGet a Record\nCheck the Existence Of a Record\nDelete a Record\nDelete All Records\nSearch Records\nCount Records\nManaging records in data stores\n\nMake allows you to view, update, and delete the records in your data store.\n\nTo manage records in your data store, click Data stores in the left menu, then click Browse next to your data store.\n\nThis shows the editing interface for data store records.\n\nAdding and editing records\nDeleting records\nBacking up data in the data store\nTroubleshooting\nRestoring lost data from your data store\nUpdating data store structure\nOut of space error\n\nIn this section\nCreating a data store in Make\nManaging data structure of a data store\nActions\nManaging records in data stores\nTroubleshooting\nData store\nCreating a data store in Make\nManaging data structure of a data store\nSetting up the data structure\nUpdating the data structure of a data store\nActions\nAdd/Replace a Record\nUpdate a Record\nGet a Record\nCheck the Existence Of a Record\nDelete a Record\nDelete All Records\nSearch Records\nCount Records\nManaging records in data stores\nAdding and editing records\nDeleting records\nBacking up data in the data store\nTroubleshooting\nRestoring lost data from your data store\nUpdating data store structure\nOut of space error\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "HTTP",
      "url": "https://www.make.com/en/help/tools/http",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nOverview of the HTTP modules\nMake a request\nMake a Basic Auth request\nMake an API key Auth request\nMake an OAuth 2.0 request\nMake a client certificate authentication request\nGet a file\nResolve a target URL\nRetrieve Headers\nHow to generate JSON Web Tokens (JWT)\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsHTTP\nHTTP \n\nThe HTTP app provides modules for communication based on the Hypertext Transfer Protocol (HTTP). HTTP is the fundamental component of data transfer for the World Wide Web. As the backbone of information exchange between web servers and clients, HTTP allows you to download web pages, access files, make API calls, and trigger webhooks.\n\nOverview of the HTTP modules\n\nSelect a module of the HTTP app based on the authentication requirements of the resource you want to use. To use modules that require authentication, you have to create a connection first.\n\nMake a request: universal module, best to use for resources that do not require authentication.\n\nMake a basic auth request: for resources that require basic authentication.\n\nMake an API key Auth request: for resources that require API key authentication.\n\nMake an OAuth 2.0 request: for resources that require OAuth 2.0 authorization.\n\nMake a client certificate auth request: for resources that require client-side certificate authentication.\n\nGet a file: download a file from the URL.\n\nResolve a target URL: retrieve the target URL from a chain of HTTP redirects.\n\nRetrieve headers: to get headers from the HTTP request module in separate bundles.\n\nNote\n\nThe module dialog fields that are displayed in bold (in the Makescenario, not in this documentation article) are mandatory!\n\nMake a request\n\nThe Make a request module allows you to create an HTTP request and send it to a server. The output bundle contains the HTTP response.\n\nEvaluate all states as errors (except for 2xx and 3xx)\n\n\t\n\nUse the response status to detect errors. Otherwise, the module reports only Make related errors (like mapping errors or missing required values).\n\n\n\n\nURL\n\n\t\n\nEnter the request URL.\n\n\n\n\nSerialize URL\n\n\t\n\nEncodes the API call URL with the URL encoding (encoding special characters for example).\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET: to retrieve information for an entry.\n\nPOST: to create a new entry.\n\nPUT: to update/replace an existing entry.\n\nPATCH: to make a partial entry update.\n\nDELETE: to delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter request headers. For example, the response content type.\n\nCaution\n\nThe HTTP app requests do not have the Accept header. If the HTTP request returns an unexpected response, try adding the Accept: */* header.\n\n\n\n\nQuery String\n\n\t\n\nEnter the query key-value pairs.\n\n\n\n\nBody type\n\n\t\n\nHTTP body contains the data transferred in an HTTP request.\n\nRaw\n\n\t\n\nThe Rawbody type is suitable for most HTTP requests, even if the app documentation does not specify the data type.\n\nSpecify the data format of the body content in the Content type field.\n\n\n\n\nApplication/x-www-form-urlencoded\n\n\t\n\nThis body type is to POST data using application/x-www-form-urlencoded.\n\nFor application/x-www-form-urlencoded, the body of the HTTP request sent to the server is one query string. The keys and values are encoded in key-value pairs separated by & and with a = between the key and the value. For binary data, use the multipart/form-data body type instead.\n\nExample of the resulting HTTP request format: field1=value1&field2=value2\n\n\n\n\nMultipart/form-data\n\n\t\n\nUse the multipart/form-data content type to send files in the HTTP request.\n\nAdd fields to the request. Each field must contain a key-value pair:\n\nText: Enter the key and value to send in the request body.\n\nFile: Enter the key, and specify the source file you want to send in the request body. Map the file you want to upload from the previous module (for example: HTTP > Get a File or Google Drive > Download a File), or enter the file name and file data manually.\n\n\n\n\nParse response\n\n\t\n\nEnable to parse HTTP responses into bundles. With this option, you don't need to add the Parse JSON or Parse XML modules. Otherwise, the HTTP module returns the raw response data.\n\nBefore you can use parsed JSON or XML content, run the module once manually so that the module can recognize the response content and allow you to map it in subsequent modules.\n\n\n\n\nUser name\n\n\t\n\nEnter the user name to send the request with the basic auth.\n\n\n\n\nPassword\n\n\t\n\nEnter the password to send the request with the basic auth.\n\n\n\n\nTimeout\n\n\t\n\nSpecify the request timeout in seconds (1-300). Default: 40 seconds.\n\n\n\n\nShare cookies with other HTTP modules\n\n\t\n\nEnable to share cookies from the server with all HTTP modules in your scenario.\n\n\n\n\nSelf-signed certificate\n\n\t\n\nUpload your certificate if you want to use TLS using your self-signed certificate.\n\n\n\n\nReject connections that use unverified (self-signed) certificates\n\n\t\n\nEnable to reject connections that use unverified TLS certificates.\n\n\n\n\nFollow redirect\n\n\t\n\nEnable to follow URL redirects that return 3xx response statuses.\n\n\n\n\nFollow all redirect\n\n\t\n\nEnable to follow URL redirects regardless of response statuses.\n\n\n\n\nDisable serialization of multiple same query string keys as arrays\n\n\t\n\nMake handles multiple values for the same URL query string parameter key as arrays (e.g., www.test.com?foo=bar&amp;foo=baz will be converted to www.test.com?foo[0]=bar&amp;foo[1]=baz). Enable to deactivate this behavior.\n\n\n\n\nRequest compressed content\n\n\t\n\nEnable to request compression of the response data. Adds the Accept-Encoding header.\n\nExample HTTP request with the Make a request module\n\nCheck the following screenshot to see how to set up the Make a request module to send a POST request with the body in the JSON data format:\n\nTo make sure your JSON is valid, use a JSON validator (for example: https://jsonlint.com/) or use a Create JSON module to create the JSON.\n\nCaution\n\nBe careful when combining JSON data with mapping variables or function directly in the Request content field. Mixing JSON with mapping can lead to an invalid JSON structure.\n\nMake a Basic Auth request\n\nThe Make a Basic Auth request module allows you to send an HTTP request with the basic authentication. The output bundle contains the HTTP response.\n\nCredentials\n\n\t\n\nClick Add to add your credentials (user name and password) for basic authentication.\n\n\n\n\nEvaluate all states as errors (except for 2xx and 3xx)\n\n\t\n\nUse the response status to detect errors. Otherwise, the module reports only Make related errors (like mapping errors or missing required values).\n\n\n\n\nURL\n\n\t\n\nEnter the request URL.\n\n\n\n\nSerialize URL\n\n\t\n\nEncodes the API call URL with the URL encoding (encoding special characters for example).\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET - to retrieve information for an entry.\n\nPOST - to create a new entry.\n\nPUT - to update/replace an existing entry.\n\nPATCH - to make a partial entry update.\n\nDELETE - to delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter request headers. For example, the response content type.\n\nCaution\n\nThe HTTP app requests do not have the Accept header. If the HTTP request returns an unexpected response, try adding the Accept: */* header.\n\n\n\n\nQuery String\n\n\t\n\nEnter the query key-value pairs.\n\n\n\n\nBody type\n\n\t\n\nHTTP body contains the data transferred in an HTTP request.\n\nRaw\n\n\t\n\nThe Rawbody type is suitable for most HTTP requests, even if the service documentation does not specify the data type.\n\nSpecify the data format of the body content in the Content type field.\n\n\n\n\nApplication/x-www-form-urlencoded\n\n\t\n\nThis body type is to POST data using application/x-www-form-urlencoded.\n\nFor application/x-www-form-urlencoded, the body of the HTTP request sent to the server is one query string. The keys and values are encoded in key-value pairs separated by & and with a = between the key and the value. For binary data, use the multipart/form-data body type instead.\n\nExample of the resulting HTTP request format: field1=value1&field2=value2\n\n\n\n\nMultipart/form-data\n\n\t\n\nUse the multipart/form-data content type to send files in the HTTP request.\n\nAdd fields to the request. Each field must contain Key-Value pair:\n\nText: Enter the key and value to be sent within the request body.\n\nFile: Enter the key, and specify the source file you want to send in the request body. Map the file you want to upload from the previous module (for example: HTTP > Get a File or Google Drive > Download a File), or enter the file name and file data manually.\n\n\n\n\nParse response\n\n\t\n\nEnable to parse HTTP responses into bundles. With this option, you don't need to add the Parse JSON or Parse XML modules. Otherwise, the HTTP module returns the raw response data.\n\nBefore you can use parsed JSON or XML content, run the module once manually so that the module can recognize the response content and allow you to map it in subsequent modules.\n\n\n\n\nTimeout\n\n\t\n\nSpecify the request timeout in seconds (1-300). Default: 40 seconds.\n\n\n\n\nShare cookies with other HTTP modules\n\n\t\n\nEnable to share cookies from the server with all HTTP modules in your scenario.\n\n\n\n\nSelf-signed certificate\n\n\t\n\nUpload your certificate if you want to use TLS using your self-signed certificate.\n\n\n\n\nReject connections that use unverified (self-signed) certificates\n\n\t\n\nEnable to reject connections that use unverified TLS certificates.\n\n\n\n\nFollow redirect\n\n\t\n\nEnable to follow URL redirects that return 3xx response statuses.\n\n\n\n\nFollow all redirect\n\n\t\n\nEnable to follow URL redirects regardless of response statuses.\n\n\n\n\nDisable serialization of multiple same query string keys as arrays\n\n\t\n\nMake handles multiple values for the same URL query string parameter key as arrays (e.g., www.test.com?foo=bar&amp;foo=baz will be converted to www.test.com?foo[0]=bar&amp;foo[1]=baz). Enable to deactivate this behavior.\n\n\n\n\nRequest compressed content\n\n\t\n\nEnable to request compression of the response data. Adds the Accept-Encoding header.\n\nMake an API key Auth request\n\nThe Make an API key Auth request module allows you to send API calls to apps that require API key authorization. The module also supports \"Bearer\" authorization.\n\nThe output bundle contains the HTTP response.\n\nCreate an API key connection for the Make an API key Auth request module\n\nCheck out the following example if you want to set up a connection for the Make an API key Auth request module:\n\nIn the Make an API key Auth request module settings, click the Add button. The Add a new keychain window pops up.\n\nFill in:\n\nName: The label for your API key connection.\n\nKey: The API key to authorize the HTTP calls. If the API uses \"Bearer\" or \"Token\" authorization, add the word before the API key.\n\nExample: Bearer 1234-5678-abcd-efgh\n\nNote\n\nYou can use the eye icon at the edge of the box to reveal the API key and the text you add to it. If you do, make sure that you are the only one viewing the content.\n\nAPI key placement: Select if you want the authorization in the request header or query string.\n\nAPI key parameter name: The name of the parameter that contains the API key.\n\nClick Create to create the connection.\n\nYou created an API key connection. You can now use the connection in the Make an API key Auth request module.\n\nEvaluate all states as errors (except for 2xx and 3xx)\n\n\t\n\nUse the response status to detect errors. Otherwise, the module reports only Make related errors (like mapping errors or missing required values).\n\n\n\n\nURL\n\n\t\n\nEnter the request URL.\n\n\n\n\nSerialize URL\n\n\t\n\nEncodes the API call URL with the URL encoding (encoding special characters for example).\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET: to retrieve information for an entry.\n\nPOST: to create a new entry.\n\nPUT: to update/replace an existing entry.\n\nPATCH: to make a partial entry update.\n\nDELETE: to delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter request headers. For example, the response content type.\n\nCaution\n\nThe HTTP app requests do not have the Accept header. If the HTTP request returns an unexpected response, try adding the Accept: */* header.\n\n\n\n\nQuery String\n\n\t\n\nEnter the query key-value pairs.\n\n\n\n\nBody type\n\n\t\n\nHTTP body contains the data transferred in an HTTP request.\n\nRaw\n\n\t\n\nThe Raw body type is suitable for most HTTP requests, even if the app documentation does not specify the data type.\n\nSpecify the data format of the body content in the Content type field.\n\n\n\n\nApplication/x-www-form-urlencoded\n\n\t\n\nThis body type is to POST data using application/x-www-form-urlencoded.\n\nFor application/x-www-form-urlencoded, the body of the HTTP request sent to the server is one query string. The keys and values are encoded in key-value pairs separated by & and with a = between the key and the value. For binary data, use the multipart/form-data body type instead.\n\nExample of the resulting HTTP request format: field1=value1&field2=value2\n\n\n\n\nMultipart/form-data\n\n\t\n\nUse the multipart/form-data content type to send files in the HTTP request.\n\nAdd fields to the request. Each field must contain a key-value pair:\n\nText: Enter the key and value to be sent within the request body.\n\nFile: Enter the key, and specify the source file you want to send in the request body. Map the file you want to upload from the previous module (for example: HTTP > Get a File or Google Drive > Download a File), or enter the file name and file data manually.\n\n\n\n\nParse response\n\n\t\n\nEnable to parse HTTP responses into bundles. With this option, you don't need to add the Parse JSON or Parse XML modules. Otherwise, the HTTP module returns the raw response data.\n\nBefore you can use parsed JSON or XML content, run the module once manually so that the module can recognize the response content and allow you to map it in subsequent modules.\n\n\n\n\nTimeout\n\n\t\n\nSpecify the request timeout in seconds (1-300). Default: 40 seconds.\n\n\n\n\nShare cookies with other HTTP modules\n\n\t\n\nEnable to share cookies from the server with all HTTP modules in your scenario.\n\n\n\n\nSelf-signed certificate\n\n\t\n\nUpload your certificate if you want to use TLS using your self-signed certificate.\n\n\n\n\nReject connections that use unverified (self-signed) certificates\n\n\t\n\nEnable to reject connections that use unverified TLS certificates.\n\n\n\n\nFollow redirect\n\n\t\n\nEnable to follow URL redirects that return 3xx response statuses.\n\n\n\n\nFollow all redirect\n\n\t\n\nEnable to follow URL redirects regardless of response statuses.\n\n\n\n\nDisable serialization of multiple same query string keys as arrays\n\n\t\n\nMake handles multiple values for the same URL query string parameter key as arrays (e.g., www.test.com?foo=bar&amp;foo=baz will be converted to www.test.com?foo[0]=bar&amp;foo[1]=baz). Enable to deactivate this behavior.\n\n\n\n\nRequest compressed content\n\n\t\n\nEnable to request compression of the response data. Adds the Accept-Encoding header.\n\nMake an OAuth 2.0 request\n\nIn order to make HTTP(S) requests that require an OAuth 2.0 authorization, you need to create an OAuth connection first.\n\nCreate an OAuth 2.0 Connection\n\nTo configure the app inMake, you need to create OAuth 2.0 credentials in the app developer portal or settings and enter them in the HTTP module in scenarios.\n\nNote\n\nMake supports two flows:\n\nAuthorization code: enter an Authorize URL and Token URL from the app API documentation.\n\nImplicit: enter the Authorize URL from the app API documentation.\n\nPrerequisites\n\nAn app account\n\nAccess to a developer portal or settings\n\nA Redirect URL (sometimes called a Callback URL).\n\nObtaining credentials in the app\n\nCreate an OAuth client in the app that you want to connect with Make. To do this, enter the developer portal or settings.\n\nSpecify a Redirect URL: https://www.integromat.com/oauth/cb/oauth2\n\nObtain the Client ID and Client Secret. Sometimes the app calls them App Key and App Secret.\n\nSave the Client ID and Client Secret in a safe place. You will need them when building a scenario in Make.\n\nFind the Authorize URL and Token URL in the app API documentation. These are the addresses through which Make communicates with the app.\n\nEstablishing the connection in Make\n\nOnce you have your credentials from the app, you can enter them in the app's configuration in Make\n\nGo to a Make scenario.\n\nAdd the HTTP - Make an OAuth 2.0 request module.\n\nClick Create a connection.\n\nOptional: In the Connection name field, enter a name for the connection.\n\nIn Flow type, select the flow.\n\nIn Scopes, add API scopes. Refer to the app API documentation to get scopes.\n\nIn Client ID and Client Secret enter the credentials you saved previously.\n\nClick Save to create an OAuth 2.0 connection.\n\nYou have created an OAuth 2.0 connection. Now you can use the connection in the Make an OAuth 2.0 request module.\n\nCheck the advanced settings for creating a connection:\n\nScope separator\n\n\t\n\nSelect the separator for the list of scopes you entered above. Check the app API documentation for the format of the list of scopes.\n\nIf the separator is not set correctly, Make will be unable to create the connection, and you will receive an invalid scope error.\n\n\n\n\nAuthorize parameters\n\n\t\n\nEnter additional authorization request parameters as a key-value pair:\n\nresponse_type: code for the Authorization code flow and token for the Implicit flow.\n\nredirect_uri: https://www.integromat.com/oauth/cb/oauth2\n\nclient_id: The Client ID you entered when creating an account.\n\n\n\n\nAccess token parameters\n\n\t\n\nEnter additional access token request parameters as key-value pairs.\n\nStandard parameters:\n\ngrant_type: authorization_code\n\nclient_id: The Client ID you entered when creating an account.\n\nclient_secret: The Client Secret you entered when creating the account.\n\ncode: The code returned by the authorization request.\n\n\n\n\nRefresh token parameters\n\n\t\n\nEnter the additional refresh token request parameters as key-value pairs.\n\nStandard parameters:\n\ngrant_type: refresh_token\n\nrefresh_token: The Refresh token obtained together with the Access token.\n\nclient_id: The Client ID you entered when creating the account.\n\nclient_secret: The Client Secret you entered when creating the account.\n\n\n\n\nCustom Headers\n\n\t\n\nSpecify any custom headers to send in the request.\n\n\n\n\nToken placement\n\n\t\n\nSelect whether to send the token in the header, query string, or both.\n\n\n\n\nHeader token name\n\n\t\n\nEnter the name of the authorization token in the header. Default: Bearer.\n\n\n\n\nQuery string parameter name\n\n\t\n\nEnter the name of the authorization token in the query string. Default: access_token.\n\nModule settings\n\nEvaluate all states as errors (except for 2xx and 3xx)\n\n\t\n\nUse the response status to detect errors. Otherwise, the module reports only Make related errors (like mapping errors or missing required values).\n\n\n\n\nURL\n\n\t\n\nEnter the request URL.\n\n\n\n\nSerialize URL\n\n\t\n\nEncodes the API call URL with the URL encoding (encoding special characters for example).\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET: to retrieve information for an entry.\n\nPOST: to create a new entry.\n\nPUT: to update/replace an existing entry.\n\nPATCH: to make a partial entry update.\n\nDELETE: to delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter request headers. For example, the response content type.\n\nCaution\n\nThe HTTP app requests do not have the Accept header. If the HTTP request returns an unexpected response, try adding the Accept: */* header.\n\n\n\n\nQuery String\n\n\t\n\nEnter the query key-value pairs.\n\n\n\n\nBody type\n\n\t\n\nHTTP body contains the data transferred in an HTTP request.\n\nRaw\n\n\t\n\nThe Raw body type is suitable for most HTTP requests, even if the app documentation does not specify the data type.\n\nSpecify the data format of the body content in the Content type field.\n\n\n\n\nApplication/x-www-form-urlencoded\n\n\t\n\nThis body type is to POST data using application/x-www-form-urlencoded.\n\nFor application/x-www-form-urlencoded, the body of the HTTP request sent to the server is one query string. The keys and values are encoded in key-value pairs separated by & and with a = between the key and the value. For binary data, use the multipart/form-data body type instead.\n\nExample of the resulting HTTP request format: field1=value1&field2=value2\n\n\n\n\nMultipart/form-data\n\n\t\n\nUse the multipart/form-data content type to send files in the HTTP request.\n\nAdd fields to the request. Each field must contain a key-value pair:\n\nText: Enter the key and value to be sent within the request body.\n\nFile: Enter the key, and specify the source file you want to send in the request body. Map the file you want to upload from the previous module (for example: HTTP > Get a File or Google Drive > Download a File), or enter the file name and file data manually.\n\n\n\n\nParse response\n\n\t\n\nEnable to parse HTTP responses into bundles. With this option, you don't need to add the Parse JSON or Parse XML modules. Otherwise, the HTTP module returns the raw response data.\n\nBefore you can use parsed JSON or XML content, run the module once manually so that the module can recognize the response content and allow you to map it in subsequent modules.\n\n\n\n\nTimeout\n\n\t\n\nSpecify the request timeout in seconds (1-300). Default: 40 seconds.\n\n\n\n\nShare cookies with other HTTP modules\n\n\t\n\nEnable to share cookies from the server with all HTTP modules in your scenario.\n\n\n\n\nSelf-signed certificate\n\n\t\n\nUpload your certificate if you want to use TLS using your self-signed certificate.\n\n\n\n\nReject connections that use unverified (self-signed) certificates\n\n\t\n\nEnable to reject connections that use unverified TLS certificates.\n\n\n\n\nFollow redirect\n\n\t\n\nEnable to follow URL redirects that return 3xx response statuses.\n\n\n\n\nFollow all redirect\n\n\t\n\nEnable to follow URL redirects regardless of response statuses.\n\n\n\n\nDisable serialization of multiple same query string keys as arrays\n\n\t\n\nMake handles multiple values for the same URL query string parameter key as arrays (e.g., www.test.com?foo=bar&amp;foo=baz will be converted to www.test.com?foo[0]=bar&amp;foo[1]=baz). Enable to deactivate this behavior.\n\n\n\n\nRequest compressed content\n\n\t\n\nEnable to request compression of the response data. Adds the Accept-Encoding header.\n\nMake a client certificate authentication request\n\nSends an HTTP(S) request to apps that require a client certificate authorization.\n\nEvaluate all states as errors (except for 2xx and 3xx)\n\n\t\n\nUse the response status to detect errors. Otherwise, the module reports only Make related errors (like mapping errors or missing required values).\n\n\n\n\nURL\n\n\t\n\nEnter the request URL.\n\n\n\n\nSerialize URL\n\n\t\n\nEncodes the API call URL with the URL encoding (encoding special characters for example).\n\n\n\n\nMethod\n\n\t\n\nSelect the HTTP method you want to use:\n\nGET: to retrieve information for an entry.\n\nPOST: to create a new entry.\n\nPUT: to update/replace an existing entry.\n\nPATCH: to make a partial entry update.\n\nDELETE: to delete an entry.\n\n\n\n\nHeaders\n\n\t\n\nEnter request headers. For example, the response content type.\n\nCaution\n\nThe HTTP app requests do not have the Accept header. If the HTTP request returns an unexpected response, try adding the Accept: */* header.\n\n\n\n\nQuery String\n\n\t\n\nEnter the query key-value pairs.\n\n\n\n\nBody type\n\n\t\n\nHTTP body contains the data transferred in an HTTP request.\n\nRaw\n\n\t\n\nThe Raw body type is suitable for most HTTP requests, even if the app documentation does not specify the data type.\n\nSpecify the data format of the body content in the Content type field.\n\n\n\n\nApplication/x-www-form-urlencoded\n\n\t\n\nThis body type is to POST data using application/x-www-form-urlencoded.\n\nFor application/x-www-form-urlencoded, the body of the HTTP request sent to the server is one query string. The keys and values are encoded in key-value pairs separated by & and with a = between the key and the value. For binary data, use the multipart/form-data body type instead.\n\nExample of the resulting HTTP request format: field1=value1&field2=value2\n\n\n\n\nMultipart/form-data\n\n\t\n\nUse the multipart/form-data content type to send files in the HTTP request.\n\nAdd fields to the request. Each field must contain a key-value pair:\n\nText: Enter the key and value to be sent within the request body.\n\nFile: Enter the key, and specify the source file you want to send in the request body. Map the file you want to upload from the previous module (for example: HTTP > Get a File or Google Drive > Download a File), or enter the file name and file data manually.\n\n\n\n\nParse response\n\n\t\n\nEnable to parse HTTP responses into bundles. With this option, you don't need to add the Parse JSON or Parse XML modules. Otherwise, the HTTP module returns the raw response data.\n\nBefore you can use parsed JSON or XML content, run the module once manually so that the module can recognize the response content and allow you to map it in subsequent modules.\n\n\n\n\nTimeout\n\n\t\n\nSpecify the request timeout in seconds (1-300). Default: 40 seconds.\n\n\n\n\nShare cookies with other HTTP modules\n\n\t\n\nEnable to share cookies from the server with all HTTP modules in your scenario.\n\n\n\n\nSelf-signed certificate\n\n\t\n\nUpload your certificate if you want to use TLS using your self-signed certificate.\n\n\n\n\nReject connections that use unverified (self-signed) certificates\n\n\t\n\nEnable to reject connections that use unverified TLS certificates.\n\n\n\n\nFollow redirect\n\n\t\n\nEnable to follow URL redirects that return 3xx response statuses.\n\n\n\n\nFollow all redirect\n\n\t\n\nEnable to follow URL redirects regardless of response statuses.\n\n\n\n\nDisable serialization of multiple same query string keys as arrays\n\n\t\n\nMake handles multiple values for the same URL query string parameter key as arrays (e.g., www.test.com?foo=bar&amp;foo=baz will be converted to www.test.com?foo[0]=bar&amp;foo[1]=baz). Enable to deactivate this behavior.\n\n\n\n\nRequest compressed content\n\n\t\n\nEnable to request compression of the response data. Adds the Accept-Encoding header.\n\nGet a file\n\nDownloads a file from a URL.\n\nURL\n\n\t\n\nEnter the URL of the file you want to download. You can use the file (map the file data) in other modules in the scenario.\n\nResolve a target URL\n\nEnter the URL you want to resolve. The output bundle contains the link to which the original URL redirects in the location response header.\n\nThis module helps you to get a direct URL to a resource instead of a redirect URL. For example, links for sharing files in storage apps like Dropbox redirect you before you reach the target file. The module navigates through the redirect chain and returns the target URL.\n\nURL\n\n\t\n\nEnter the URL you want to resolve.\n\n\n\n\nMethod\n\n\t\n\nSelect the method you want to use.\n\nRetrieve Headers\n\nReturns each header (name and value) from the specified HTTP module in a separate bundle.\n\nSource Module\n\n\t\n\nSelect the module you want to retrieve headers from.\n\nHow to generate JSON Web Tokens (JWT)\n\nIf you need to connect to an API or send messages that requires JWT authentication, you can create a JWT via the HTTP module using the HS256 or HS512 algorithms. Make allows creating a JWT with the help of custom or built-in functions.\n\nGenerating a JWT via a custom function\n\nYou can create a HS256 or HS512 JWT with the help of Make custom functions.\n\nNote\n\nCustom functions are available to the Enterprise plan users only.\n\nFollow the steps to create a JWT:\n\nGo to Functions and create a custom function using the following body:\n\nfunction readableJWTencode(payload, secret, header = '{\"alg\":\"HS256\",\"typ\":\"JWT\"}') {\n    let formattedHeader = iml.replace(iml.replace(iml.replace(iml.base64(header), \"=\", \"\"), \"+\", \"-\"), \"/\", \"_\")\n    let formattedPayload = iml.replace(iml.replace(iml.replace(iml.base64(payload), \"=\", \"\"), \"+\", \"-\"), \"/\", \"_\")\n    let signature = iml.sha256(formattedHeader + \".\" + formattedPayload, \"base64\", secret)\n    let formattedSignature = iml.replace(iml.replace(iml.replace(signature, \"=\", \"\"), \"+\", \"-\"), \"/\", \"_\")\n    let jwt = formattedHeader + \".\" + formattedPayload + \".\" + formattedSignature\n    return jwt\n}\n\nNote\n\nReplace HS256 with HS512 and sha256 with sha512 in the custom function above to create a HS512 JWT.\n\nThe example custom function has the jwtEncode name embedded onto the function body. If you want to use another name, change it in the body too.\n\nStart your scenario with the Set multiple variables module and add three items:\n\nItem 1:\n\nIn Variable name, enter header.\n\nIn Variable value, enter the following function:\n\n{\"alg\":\"HS256\",\"typ\":\"JWT\"}\n\nNote\n\nReplace HS256 with HS512 to create a HS512 JWT.\n\nItem 2:\n\nIn Variable name, enter payload.\n\nIn Variable value, enter the following function:\n\n{\"var1\":1,\"var2\":\"text\"}\n\nItem 3:\n\nIn Variable name, enter secret.\n\nIn Variable value, enter your 256-bit or 512-bit secret.\n\nAdd another Set multiple variables module to generate the JWT.\n\nOptional: In Variable name, enter the name for the token.\n\nIn Variable value, enter the following function:\n\n{{jwtEncode(11.payload; 11.secret)}}\n\nNote\n\nMake sure to take into account the module number in the code. In the example above, the header, payload and secret are in the 11th module in the scenario. It may vary from one scenario to another.\n\nIf you run the scenario, you will receive the HS256 or HS512 JWT in the second module's output.\n\nYou can connect to an API or send messages that requires JWT authentication.\n\nGenerating a JWT via built-in functions\n\nTo generate a JWT with the help of built-in functions, do the following in your scenario:\n\nStart your scenario with the Set multiple variables module and add three items:\n\nItem 1:\n\nIn Variable name, enter header.\n\nIn Variable value, enter the following function:\n\n{{replace(replace(replace(base64(\"{\"\"alg\"\":\"\"HS256\"\",\"\"typ\"\":\"\"JWT\"\"}\"); \"=\"; emptystring); \"+\"; \"-\"); \"/\"; \"_\")}}\n\nNote\n\nReplace HS256 with HS512 to create a HS512 JWT.\n\nItem 2:\n\nIn Variable name, enter payload.\n\nIn Variable value, enter the following function:\n\n{{replace(replace(replace(base64(\"{\"\"var1\"\":1,\"\"var2\"\":\"\"text\"\"}\"); \"=\"; emptystring); \"+\"; \"-\"); \"/\"; \"_\")}}\n\nItem 3:\n\nIn Variable name, enter secret.\n\nIn Variable value, enter your 256-bit or 512-bit secret.\n\nAdd another Set multiple variables module to generate the HS256 or HS512 JWT.\n\nOptional: In Variable name, enter the name for the token.\n\nIn Variable value, enter the following function:\n\n{{5.header}}.{{5.payload}}.{{replace(replace(replace(sha256(5.header + \".\" + 5.payload; \"base64\"; 5.secret); \"=\"; emptystring); \"+\"; \"-\"); \"/\"; \"_\")}}\n\nNote\n\nUse the sha512 function to create a HS512 JWT.\n\nMake sure to take into account the module number in the code. In the example above, the header, payload and secret are in the 5th module in the scenario. It may vary from one scenario to another.\n\nIf you run the scenario, you will receive the HS256 or HS512 JWT in the second module's output.\n\nYou can connect to an API or send messages that requires JWT authentication.\n\nIn this section\nOverview of the HTTP modules\nMake a request\nMake a Basic Auth request\nMake an API key Auth request\nMake an OAuth 2.0 request\nMake a client certificate authentication request\nGet a file\nResolve a target URL\nRetrieve Headers\nHow to generate JSON Web Tokens (JWT)\nHTTP\nOverview of the HTTP modules\nMake a request\nExample HTTP request with the Make a request module\nMake a Basic Auth request\nMake an API key Auth request\nCreate an API key connection for the Make an API key Auth request module\nMake an OAuth 2.0 request\nCreate an OAuth 2.0 Connection\nModule settings\nMake a client certificate authentication request\nGet a file\nResolve a target URL\nRetrieve Headers\nHow to generate JSON Web Tokens (JWT)\nGenerating a JWT via a custom function\nGenerating a JWT via built-in functions\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Data structures",
      "url": "https://www.make.com/en/help/tools/data-structures",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nData structure generator\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterToolsData structures\nData structures\n\nA data structure is a document that describes in detail the format of the data being transferred to Make. Based on this document, the Scenario editor is able to figure out which module returns or receives which kind of data. The data structure documents are most commonly used for serializing/parsing data formats such as JSON, XML, CSV and others.\n\nYou can create a data structure when adding a new data store.\n\nRead more about all supported data types in the dedicated article.\n\nData structure generator\n\nData structures don't always have to be created. You can make it easier by using a template from our built-in generator. By providing a data sample, the generator will automatically create a data structure based off of the data sample you entered. The created data structure can then be manually modified.\n\nIn this section\nData structure generator\nData structures\nData structure generator\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Tools",
      "url": "https://www.make.com/en/help/tools",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nTools\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTools\nTools\n\nIn this section\nHTTP\nXML\nData store\nData structures\nJSON\nImage\nEmail\nFlow control\nText Parser\nWebhooks\nTools\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Working with files",
      "url": "https://www.make.com/en/help/mapping/working-with-files",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nMapping arrays\nItem data types\nType coercion\nExamples of date format:\nWorking with files\nHow to map a file\nMaximum file size\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMappingWorking with files\nWorking with files\n\nSome modules have the capability to process files. These modules can either return an output file to be sent for further processing or require a file to be passed to them for processing. For these modules to work together to process files they have to be mapped to each other.\n\nHow to map a file\n\nModules that have the ability to work with files require two pieces of information:\n\nFile name\n\nFile content (data)\n\nWhen you map a file, you choose from which module(s) in your scenario you want to obtain the data from. The file name and file content are then automatically mapped as they are.\n\nNote\n\nIf you need to process a file from a URL, we recommend to use the HTTP > Get a File module to download the file from the URL, and then map the file from the HTTP > Get a File module to the desired module's field in your scenario.\n\nExample: Mapping Facebook photos to Dropbox\n\nThe example below shows how to map photos (files) from Facebook to Dropbox. The facebook trigger Watch photos returns detailed information about each downloaded photo, including its name and content (data). To map this information to Dropbox so it can be uploaded, the Dropbox action Upload a file requires you to specify the source file that this information will be mapped from. By selecting the Facebook > Watch photos option under the source file, Make will automatically map the file name and file content. From now on, all photos from Facebook will be uploaded to the specified Dropbox folder.\n\nHowever, it can happen that you want to rename the file, but want to keep the data as it is. In such case, use the Map option (as seen in the image below) to map the file name and file content independently of each other.\n\nYou will have to enter the full file name, including the ending (e.g. invoice.xml). Both binary (photos, videos, PDF and the like) and text formats are supported.\n\nMaximum file size\n\nThe maximum file size depends on the plan you are subscribed to (FREE - 5 MB, CORE - 100 MB, PRO - 250 MB, TEAMS - 500 MB, ENTERPRISE - 1,000 MB). If it is exceeded, Make proceeds in accordance with the settings of the Enable data loss option.\n\nIn this section\nHow to map a file\nMaximum file size\nWorking with files\nHow to map a file\nExample: Mapping Facebook photos to Dropbox\nMaximum file size\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Examples of date format:",
      "url": "https://www.make.com/en/help/mapping/date-examples",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nMapping arrays\nItem data types\nType coercion\nExamples of date format:\nWorking with files\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMappingExamples of date format:\nExamples of date format:\n\n2016-06-20T17:26:44.356Z\n\n2016-06-20 19:26:44 GMT+02:00\n\n2016-06-20 19:26+0200\n\n2016-06-20 17:26:44\n\n2016-06-20\n\n2016/06/20 17:26:44\n\n2016/06/20 19:26:44+02:00\n\n2016/06/20 17:26\n\n2016/06/20 5:26 PM\n\n2016/06/20\n\n06/20/2016 17:26:44\n\n06/20/2016 19:26:44+02:00\n\n06/20/2016 17:26\n\n06/20/2016 5:26 PM\n\n06/20/2016\n\n20.6.2016 17:26:44\n\n20.6.2016 19:26:44+02:00\n\n20.6.2016 19:26:44+02:00\n\n20.6.2016\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Type coercion",
      "url": "https://www.make.com/en/help/mapping/type-coercion",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nMapping arrays\nItem data types\nType coercion\nWhen array is expected:\nWhen Boolean is expected:\nWhen Buffer is expected:\nWhen Collection is expected:\nWhen Date is expected:\nWhen Number is expected:\nWhen Text is expected:\nWhen Time is expected:\nExamples of date format:\nWorking with files\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMappingType coercion\nType coercion\n\nThis document describes how Make behaves in situations when it receives values in expected and unexpected data formats.\n\nWhen array is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\narray\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\nother\n\n\t\n\nIf the received value is not of the array type, Make will create an array and the first (and the only) element will be the received value.\n\nWhen Boolean is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\nboolean\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\nnumber\n\n\t\n\nThe value is converted to logical Yes, even if the value is 0\n\n\n\n\ntext\n\n\t\n\nIf the value is equal to false or the value is empty, it is converted to logical No. If not, it is converted to logical Yes\n\n\n\n\nother\n\n\t\n\nThe value is converted to logical Yes whenever the received value exists (is not null).\n\nWhen Buffer is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\nbuffer\n\n\t\n\nThe value is handed over unchanged only if the codepage is as expected. If the codepage differs, Make will try to convert the received value to the requested codepage. If this conversion is not supported, Make will return a validation error.\n\n\n\n\nboolean\n\n\t\n\nThe value is converted to text (true/false) and then to binary data following the steps mentioned above for converting to text.\n\n\n\n\ndate\n\n\t\n\nThe value is converted to ISO 8601 text and then to binary data following the steps mentioned for converting to text.\n\n\n\n\nnumber\n\n\t\n\nThe value is converted to text and then to binary data following the steps mentioned above for converting to text.\n\n\n\n\ntext\n\n\t\n\nThe value is converted to binary data and encoded as expected. If the expected encoding is not specified, utf8 encoding will be used.\n\n\n\n\nother\n\n\t\n\nMake returns a validation error.\n\nWhen Collection is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\ncollection\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\nother\n\n\t\n\nMake returns a validation error.\n\nWhen Date is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\ndate\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\ntext\n\n\t\n\nMake will try to convert the text to a date. If the conversion fails, it will return a validation error. Date must contain day, month and year. Date may contain time and time zone. Default time zone is based on your settings. See these examples.\n\n\n\n\nnumber\n\n\t\n\nMake will treat the number as milliseconds since Jan 01 1970 (UTC) and convert it to a corresponding date.\n\n\n\n\nother\n\n\t\n\nMake returns a validation error.\n\nWhen Number is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\nnumber\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\ntext\n\n\t\n\nMake will try to convert the text to a number. If the conversion fails, it will return a validation error.\n\n\n\n\nother\n\n\t\n\nMake returns a validation error.\n\nWhen Text is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\ntext\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\narray\n\n\t\n\nIf the given array supports conversion to text, the value will be converted. If not, Make will return a validation error.\n\n\n\n\nboolean\n\n\t\n\nThe value is converted to text (true/false).\n\n\n\n\nbuffer\n\n\t\n\nIf text encoding is specified for binary data, the value will be converted to text. If not, Make will return a validation error\n\n\n\n\ndate\n\n\t\n\nThe value is converted to ISO 8601 text.\n\n\n\n\nnumber\n\n\t\n\nThe value is converted to text.\n\n\n\n\nother\n\n\t\n\nMake returns a validation error.\n\nWhen Time is expected:\n\nReceived\n\n\t\n\nDescription\n\n\n\n\ntime\n\n\t\n\nThe value is handed over unchanged.\n\n\n\n\ntext\n\n\t\n\nMake will try to convert time to the hours:minutes:seconds format. If the conversion fails, it will return a validation error.\n\n\n\n\nother\n\n\t\n\nMake returns a validation error.\n\nIn this section\nWhen array is expected:\nWhen Boolean is expected:\nWhen Buffer is expected:\nWhen Collection is expected:\nWhen Date is expected:\nWhen Number is expected:\nWhen Text is expected:\nWhen Time is expected:\nType coercion\nWhen array is expected:\nWhen Boolean is expected:\nWhen Buffer is expected:\nWhen Collection is expected:\nWhen Date is expected:\nWhen Number is expected:\nWhen Text is expected:\nWhen Time is expected:\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Item data types",
      "url": "https://www.make.com/en/help/mapping/item-data-types",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nMapping arrays\nItem data types\nText\nNumber\nBoolean (Yes/No)\nDate\nTime\nBuffer (binary data)\nCollection\nArray\nValidation\nType coercion\nExamples of date format:\nWorking with files\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMappingItem data types\nItem data types\n\nEvery bundle contains several items. The type of item may differ. Make describes the different types of items below.\n\nTip\n\nDetailed information on which types of items Make allows for conversion between one other can be found in the Type coercion article.\n\nText\n\nAlso called string, text data contains characters such as letters, numbers, and special characters. Make validates text to make it meets any length requirements.\n\nNumber\n\nFor some numerical items, Make may validate the input for a specified range (the minimum or maximum allowed value).\n\nBoolean (Yes/No)\n\nThis type is used for items with only two possible values: true or false. An example is the Watch also subfolders option shown in the Dropbox > Watch files module.\n\nDate\n\nThe date is entered in the ISO 8601 date format, e.g. 2015-09-18T11:58Z\n\nThe time zone can be adjusted in the profile settings. If you fill in a field that requires entering a date, the pop-up calendar will be displayed in the module settings. The time is not required for some items.\n\nHow Make displays date values\n\nValues of Date items in bundle inspector are formatted using the locale and Web's timezone specified in your Profile in the Web section of the Time zone options tab.\n\nIt is possible to display a date item's value expressed according to ISO 8601 by hovering mouse cursor over the item.\n\nNote\n\nIf the ISO value does not show up, the item is not a date but probably text.\n\nTime\n\nThe time is entered in the hours:minutes:seconds format, e.g. 14:03:52\n\nBuffer (binary data)\n\nFile content is usually sent as Buffer type (image content, video file and others). In some cases, there is text data included in this type (e.g. text file). Make is able to automatically convert text data in binary code to text (and vice versa). For more information on working with files see the Working with files article.\n\nCollection\n\nA collection is an item consisting of several subitems. An example of a collection is the Sender item in an email message. It contains the sender name (text type) and the sender email address (text type).\n\nArray\n\nThe array type is used for working with several values of the same type, including collections. An example is the Email modules return an array of attachments and each attachment contains name, content, size, etc.\n\nFor more information about arrays please see the Working with arrays section.\n\nValidation\n\nMake may perform validation on each type of item. If an item does not pass the validation, the processing of the module will terminate because of the DataError. The Twitter modules, for example, do not allow a tweet (text type) that exceeds the maximum of 280 characters to be sent. If you try to send a tweet with more than 280 characters, your scenario will encounter this error and end.\n\nIn this section\nText\nNumber\nBoolean (Yes/No)\nDate\nTime\nBuffer (binary data)\nCollection\nArray\nValidation\nItem data types\nText\nNumber\nBoolean (Yes/No)\nDate\nHow Make displays date values\nTime\nBuffer (binary data)\nCollection\nArray\nValidation\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Replacing Google Sheets legacy Modules with New Modules",
      "url": "https://www.make.com/en/help/modules/replacing-google-sheets-legacy-modules-with-new-modules",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesReplacing Google Sheets legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nImportant\n\nThis documentation is specific to the Google Sheets app. For universal instructions for replacing legacy modules with new modules visit Replacing Legacy Modules with New Modules.\n\nA majority of Make apps rely on external services, particularly on their APIs (Application Programming Interfaces). As the services evolve, so do their APIs. New API versions are being regularly released and legacy versions are getting deprecated and eventually shut down.\n\nWe closely follow releases of new API versions and implement new app versions based on the latest APIs.\n\nTo keep your scenarios running even after the shutdown of a legacy API, make sure to replace all the legacy (old) modules with new modules.\n\nHere is a step by step guide:\n\nChoose one of your legacy scenarios that is using legacy modules, and clone it as a new scenario.\n\nGo to the Scenario diagram.\n\nOpen the Options drop-down menu in the top-right corner and select the Clone option.\n\nChange the name to distinguish between the legacy scenario and the new scenario and click the Clone button.\n\nThe new scenario (still with the legacy modules) is created.\n\nHave the legacy scenario and the new scenario open in two web browser tabs/windows to easily switch between them.\n\nThis step will make your copy-paste job faster and easier.\n\nOpen Scenarios in a new browser tab.\n\nOpen your legacy scenario.\n\nFor Google Sheets: adding new Google Sheets modules to the scenario (Step 3, Step 4, Step 5) can be easily performed using Make DevTool.\n\nIn the new scenario, choose the legacy module and click on the \"upgrade\" arrows.\n\nChoose the corresponding new module from the list of modules.\n\nThe new module is placed in the scenario (not connected).\n\nFor Google Sheets, check this table to find a new counterpart of your legacy module:\n\nLegacy Module\n\n\t\n\nNew Module\n\n\n\n\nAdd a Row\n\n\t\n\nAdd a Row\n\n\n\n\nUpdate a Row\n\n\t\n\nUpdate a Row\n\n\n\n\nDelete a Row\n\n\t\n\nDelete a Row\n\n\n\n\nSelect Rows\n\n\t\n\nSearch Rows\n\n\n\n\nUpdate a Cell\n\n\t\n\nUpdate a Cell\n\n\n\n\nAdd a Worksheet\n\n\t\n\nAdd a Sheet\n\n\n\n\nGet a Cell\n\n\t\n\nGet a Cell\n\n\n\n\nWatch a Worksheet\n\n\t\n\nWatch Rows\n\n\n\n\nList Worksheets\n\n\t\n\nList Sheets\n\n\n\n\nDelete a Worksheet\n\n\t\n\nDelete a Sheet\n\nDrag and drop the new module and connect it after the legacy module.\n\nFor triggers:\n\nSet the new module values in the same way as the legacy module values.\n\nReplace the legacy module with the new module.\n\nCopy and paste the module's values from the legacy module to the new one.\n\nOpen the configuration of the new module.\n\nSwitch to the tab with the legacy scenario and open the configuration of the legacy module.\n\nCopy and paste the content of each field from the legacy module to the new module by switching between the legacy scenario and the new scenario. If any items are missing in the mapping panel, please see Mapping.\n\nRepeat for every legacy module in the new scenario.\n\nReplace items that are mapped from the legacy module\n\nIn the new scenario, choose a module that uses the output from a legacy module and open its configuration.\n\nFor the fields of the proceeding module, replace the legacy items outputted from the legacy module with corresponding new items outputted from the corresponding new module.\n\nRepeat for every module that uses the output from the legacy module.\n\nReplace items that are mapped from legacy modules in filters.\n\nIn the new scenario, choose a filter that uses the output from a legacy module and open its configuration.\n\nFor the conditions of the proceeding filter, replace the legacy items outputted from the legacy module with the corresponding new items outputted from the corresponding new module.\n\nRepeat for every filter that uses the output from a legacy module.\n\nRemove all the legacy modules from your scenario.\n\nRepeat for every scenario using legacy modules.\n\nAdding New Google Sheets Modules to a Google Sheets Scenario with the Make DevTool\n\nAdd the Make DevTool extension to your Chrome browser.\n\nOpen your Google Sheets (legacy) scenario.\n\nPress Control+Shift+I (Windows) or Command+Option+I (Mac) on your keyboard to open Chrome Developer Tools.\n\nGo to the Make tab.\n\nOpen Tools.\n\nClick on the Migrate GS tile.\n\nClick the Run button.\n\nNew Google Sheets modules are placed in your scenario. Proceed to enter the values from the legacy modules to the new modules as described in steps above.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Replacing Legacy Modules with New Modules",
      "url": "https://www.make.com/en/help/modules/replacing-legacy-modules-with-new-modules",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesReplacing Legacy Modules with New Modules\nReplacing Legacy Modules with New Modules\n\nA majority of Make apps rely on external services, particularly on their APIs (Application Programming Interfaces). As the services evolve, so do their APIs. New API versions are being regularly released and legacy versions are getting deprecated and eventually shut down.\n\nWe closely follow releases of new API versions and implement new app versions based on the latest APIs.To keep scenarios running even after the shutdown of a legacy API, make sure to replace all the legacy (old) modules with new modules. Here is a step by step guide:\n\nChoose the Scenario that is using legacy modules, and clone it to make a copy - make the new Scenario.\n\nNavigate to the Scenario Diagram.\n\nOpen the Options drop-down menu in the top-right corner and select the Clone option.\n\nChange the name to distinguish between the legacy scenario and the new scenario and click the Clone button.\n\nThe new scenario (still with the legacy modules) is created.\n\nIn the new scenario you have created using the Clone function, choose the legacy module you want to upgrade to the new version, and click on the green upgrade arrows ().\n\nChoose the corresponding new module from the list of modules. The new module is placed in the scenario (not connected).\n\nFor Google Forms, check this table to find a new counterpart of your legacy module:\n\nLegacy Module\n\n\t\n\nNew Module\n\n\n\n\nWatch responses\n\n\t\n\nWatch Responses\n\n\n\n\nSelect responses\n\n\t\n\nSearch Responses\n\n\n\n\nAdd a response\n\n\t\n\nAdd a Response\n\n\n\n\nUpdate a response\n\n\t\n\nUpdate a Response\n\n\n\n\nDelete a response\n\n\t\n\nDelete a Response\n\n\n\n\n\t\n\nSearch Responses (Advanced)\n\nReplace modules.\n\nTriggers:\n\nSet the same field values in the new module as field values in the legacy module.\n\nMove the clock icon from the legacy module to the new module.\n\nUnlink the legacy module and link the new module to the desired module in your scenario.\n\nOther modules:\n\nAfter adding the new module to the scenario (step 3 above), connect it after the legacy module.\n\nSet values in new modules.\n\nNote\n\nWe recommend opening the legacy scenario in a new browser tab to switch between the module's configuration faster.\n\nOpen the configuration of the new module.\n\nSwitch to the tab with the legacy scenario and open the configuration of the legacy module.\n\nCopy and paste the content of each field from the legacy module to the new module (by switching between the legacy scenario and the new scenario tabs).\n\nMap needed values and select the options from drop-down menus.\n\nSet mapping in filters.\n\nIf any items are missing in the mapping panel, please see Mapping.\n\nRepeat this for every module.\n\nRemove all the legacy modules from your new scenario and click Save.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Mapping",
      "url": "https://www.make.com/en/help/mapping",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nMapping arrays\nItem data types\nType coercion\nExamples of date format:\nWorking with files\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMapping\nMapping\n\nIn this section\nMapping\nMapping arrays\nItem data types\nType coercion\nExamples of date format:\nWorking with files\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Mapping arrays",
      "url": "https://www.make.com/en/help/mapping/mapping-arrays",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nMapping arrays\nMapping an array's first element\nMapping an array's nth element\nMapping an array's element with a given key\nConverting elements to a series of bundles\nItem data types\nType coercion\nExamples of date format:\nWorking with files\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMappingMapping arrays\nMapping arrays\n\nAn array is a special type of item. A simple array contains one or more text values. A complex array contains one or more collections of the same type. An example of a complex array is the email attachment. The Watch emails module returns an array of attachments for every email. Every attachment represents a collection that may contain a name, content, size, etc.\n\nMapping an array's first element\n\nIf you map the array's Recipient name item, it will appear in the field like this:\n\nThe number between the square brackets is an index that determines which element of the array will be used. Leaving it empty defaults to the first element.\n\nMapping an array's nth element\n\nIf you wish to access another element, enter or map a value between the square brackets. In the below example, enter 2 to select the second element.\n\nMapping an array's element with a given key\n\nSome arrays contain several collections with key and value items. These are typically various metadata, attributes, etc.\n\nThe following example shows the output of the WooCommerce > Get a product module that contains the item Meta data, which is an array of collections. Each collection contains the key item Meta Data ID and the value item Value:\n\nThe typical requirement is to lookup an element by its given key value and to obtain the corresponding value from the value item. This can be achieved with a formula employing a combination of themap ()andget ()functions.\n\nThe following example shows how to obtain the value of the Value item of the element with key Meta data ID item value equal to 20642\n\nThe result of the formula will be \"no\".\n\nThe detailed breakdown of the formula follows:\n\nThe 1st parameter of the map() function is the whole array item.\n\nThe 2nd parameter is the raw name of the value item. To obtain the raw name, hover the mouse cursor over the item in the mapping panel:\n\nImportant\n\nAll parameters are case sensitive. Even though in this particular example the item's label differs from its raw name only in capitalization, it is necessary to use the raw name, which is all lowercase value in contrast to the label Value\n\nThe 3rd parameter is the raw name of the key item:\n\nThe 4th parameter is the given key value.\n\nBecause the map() function returns an array (as there could be more elements with the given key value), it is necessary to apply the get() function to get its first element:\n\nThe 1st parameter of the get() function is the result of the map() function.\n\nThe 2nd parameter is the element's index - one.\n\nSee also our Extract an item and/or its value from an array of collections video tutorial.\n\nConverting elements to a series of bundles\n\nArrays can be converted to a series of bundles using the Iterator module:\n\nImportant\n\nThe outputs from modules wrapped between an Iterator and Aggregator are not accessible beyond the Aggregator module.\n\nIn this section\nMapping an array's first element\nMapping an array's nth element\nMapping an array's element with a given key\nConverting elements to a series of bundles\nMapping arrays\nMapping an array's first element\nMapping an array's nth element\nMapping an array's element with a given key\nConverting elements to a series of bundles\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Mapping",
      "url": "https://www.make.com/en/help/mapping/mapping",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nMapping\nMapping\nWhat is mapping?\nWhat can I map?\nMapping to the target\nTips and solutions\nMapping arrays\nItem data types\nType coercion\nExamples of date format:\nWorking with files\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterMappingMapping\nMapping\nWhat is mapping?\n\nMapping is how Make knows what information to get from one app and which app to send it to. You can use mapping to tell Make how to transform data in your scenario. For example:\n\nYou want to automatically send information from emails to a colleague in a Slack message. In this case, map the subject or body of email messages to Slack.\n\nWhen a customer submits a form to request support, you want a Jira issue created automatically. Here, you can map the information from the form into Jira.\n\nYour business gets valuable leads from Facebook, so you want a database of this information and the same information entered into Pipedrive. Just map the data from Facebook leads to Airtable and Pipedrive.\n\nIn the same way that a map leads you from your starting point to your destination, mapping in Make tells your data where to go in your scenario.\n\nWhat can I map?\n\nYou can map any information that a module gets in a bundle. A bundle is like a box of information. Some boxes are large; some are small; some have just one thing inside them; some might have smaller boxes in them. Bundles are similar. Sometimes a bundle is just one piece of information, for example, a number or email address. Other times a bundle contains a variety of information.\n\nWhen bundles have a lot of information, you might see the data organized into an array or collection. An array is like a menu organized into different sections like soups, starters, desserts, and so on. There's a lot of information but it's the same kind of information: food. An array has information of only one kind. For example, it might have multiple dates or names but not both. Collections can have different kinds of information and are like a moving box. When you move, you might put various things into one box: books, small gadgets, a box of letters. Collections contain a similar variety of information, for example, dates, numbers, and text descriptions.\n\nGetting a bundle\n\nTo know what you can map from a module, you run only that module and look at its bundles. Once you know what you can map, you can start mapping. Let's use the first example above to explore how this works. We want to take information from emails and send them to a colleague. Before we do any mapping, we begin by finding what information we can get from the email module. Because the email module provides the information we want, we call it the source module.\n\nGo to the Scenario editor and add the module Email > Watch emails.\n\nCreate a connection.\n\nSelect a folder and criteria.\n\nClick OK.\n\nChoose where you want Make to start getting your emails and click OK.\n\nRight-click the module.\n\nSelect Run this module only.\n\nA small circle with 1 inside appears beside your module. Click inside the small circle.\n\nA window opens and shows you all of the information that your email module got. You can map anything that appears. Click + to expand items.\n\nWhat's in a bundle?\n\nLet's take a closer look at the information in the bundle window. In this example, we see the bundles from the Slack > Create a message module.\n\nInput - the information Make sends to the third-party app.\n\nIn this example, you can see:\n\nText - the content of the message sent. Click + to expand for further details.\n\nUser - the user ID of the person receiving your Slack message.\n\nOutput - the information Make gets back from the third-party app.\n\nIn this example, you can see:\n\nMessage - the text content of the sent message, similar to Text in the Input. Click + to expand for further details.\n\nChannel - the ID of the channel where the message was sent. In this case, it's the same as User from the input. That's because we sent a direct message to a specific user.\n\nMapping to the target\n\nNow we know what information we can send to other modules. Next, we map that information. To do that, we first add the module we want to receive the information. In our example, that's Slack > Create a message. If you're still in the Scenario editor, continue with these steps:\n\nAdd the module Slack > Create a message.\n\nCreate a connection.\n\nUnder Enter a channel ID or name, select Choose from a list.\n\nUnder Channel type, select IM channel.\n\nUnder User search or scroll to find your intended recipient.\n\nUnder Text, click inside the empty field. A new window appears.\n\nIn the new window, click Text content. A red box labeled Text content appears in the Text field.\n\nClick OK.\n\nYour data is now mapped so that Slack automatically receives email content and sends it in a message.\n\nTips and solutions\nFind the source module\n\nWhile mapping a scenario, you can find the source module by hovering over the mapped data. As you keep your mouse on a mapped item, the source module pulses.\n\nWhen there's no info for an instant trigger\n\nWhen you click Run once or Run this module only, an instant trigger waits to receive information. The instant trigger needs incoming info to run. So the trigger waits until it receives incoming data. To run the module, you need to provide incoming information. Let's explore with an example: Airtable > Watch responses.\n\nRight-click on Airtable > Watch responses and select Run this module only. The module waits for new responses.\n\nGo to your Airtable form and submit a response.\n\nThe information submitted goes to your Airtable > Watch responses module. You can inspect the bundle to check that your configuration is working.\n\nWhen there's no info for a polling trigger\n\nYou can use the above procedure to generate a bundle for most modules, including polling triggers. For instant modules, see the solution for instant triggers. The following are the general steps to get a bundle.\n\nGo to the Scenario editor and find the module you want to get a bundle for.\n\nRight-click the module.\n\nSelect Choose where to start.\n\nTo get a bundle, select one of the following options and click OK.\n\nFrom a specific date option: for example Emails from after a specific date. Enter a date you know there is data for. Example: enter a date you know you received emails.\n\nSelect the first option: when available, this option lets you choose from a list.\n\nRight-click the module.\n\nSelect Run this module only.\n\nA small circle with 1 inside appears beside your module. Click inside the small circle.\n\nIn this section\nWhat is mapping?\nWhat can I map?\nMapping to the target\nTips and solutions\nMapping\nWhat is mapping?\nWhat can I map?\nGetting a bundle\nWhat's in a bundle?\nMapping to the target\nTips and solutions\nFind the source module\nWhen there's no info for an instant trigger\nWhen there's no info for a polling trigger\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Upgrading Gmail and Email App Versions Using Make DevTool",
      "url": "https://www.make.com/en/help/modules/upgrading-gmail-and-email-app-versions-using-integromat-devtool",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesUpgrading Gmail and Email App Versions Using Make DevTool\nUpgrading Gmail and Email App Versions Using Make DevTool\n\nThis article describes the upgrading of the Gmail app to the latest version using Make DevTool. The same upgrade process can be applied to the Email app.\n\nWarning\n\nDo not use Make DevTool's Swap App tool unless you know what you are doing!\n\nPrerequisites:\n\nExisting legacy Gmail or Email app versions in your scenario.\n\nUpgrading Gmail Modules to the Latest Version:\n\nOpen the scenario that contains the legacy Gmail app version.\n\nPress Control+Shift+I or F12 (Windows) or Command+Option+I (Mac) on your keyboard to open Chrome Developer Tools.\n\nOpen the Make tab.\n\nGo to Tools > Swap App.\n\nIn the tool's pane fill the fields as follows:\n\nApp to be Replaced\n\n\t\n\nSelect the legacy Gmail app you want to replace.\n\n\n\n\nVersion\n\n\t\n\nSelect the legacy version of the Gmail app you want to replace.\n\n\n\n\nReplace with\n\n\t\n\nSelect the Gmail app you want to replace the legacy modules with.\n\n\n\n\nVersion\n\n\t\n\nSelect the latest version of the Gmail app you want to upgrade the app's modules to.\n\nWhen the source and target app versions are specified, click the Run button  in the Swap App tool's pane to perform the Swap App action.\n\nAll modules of the legacy Gmail app version in your scenario are now upgraded to the desired version.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Iterator",
      "url": "https://www.make.com/en/help/modules/iterator",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nSetting up an iterator\nLearn when to use an Iterator in your scenarios\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesIterator\nIterator\n\nIterator is a special type of module that converts an array into a series of bundles. Each array item will output as a separate bundle.\n\nSetting up an iterator\n\nSetting up an iterator is done in the same way as setting any other module. The Array field contains the array to be converted/split into separate bundles.\n\nExamples:\nSave email attachments to Google Drive\n\nThe scenario below shows how to retrieve emails with attachments and save the attachments as single files in a selected Google Drive folder.\n\nEmails can contain an array of attachments. The Iterator module inserted after the first module enables you to handle each attachment separately. The Iterator splits the array of attachments into single bundles, each bundle with one attachment will then save one at a time in a selected Google Drive folder. The Iterator module set up is shown above - the Array field should contain the Attachments[] array.\n\nSpecialized iterators\n\nFor your convenience, many Make apps offer specialized iterator modules with a simplified setup. For example, the Email app contains the special iterator Email > Iterate attachments that will produce the same results as the general Iterator without having to specify the array, just the source module.\n\nLearn when to use an Iterator in your scenarios\n\nThe video below is module 1 of the 3 part lesson titled Iterator and Array Aggregator. It explains the purpose of the Iterator and the Array Aggregator and with the help of a sample scenario, explains when to use an Iterator and what to do with the output.\n\nTroubleshooting: Mapping panel does not display mappable items under the Iterator module\n\nWhen an Iterator does not have information about the structure of the array's items, the mapping panel in the modules following the Iterator will display only two items under the Iterator: Total number of bundles and Bundle order position:\n\nThe reason for this is that in Make each module is responsible for providing information about items it outputs so these items can be properly displayed in the mapping panel in the following modules. However, there are several modules that might be unable to provide this information in some cases, e.g. JSON > Parse JSON or Webhooks > Custom Webhook modules with missing data structure.\n\nThe solution is to manually execute the scenario to make the module learn about the items it outputs so it can provide the information to the following modules.\n\nFor example, if you have a JSON > Parse JSON module without a data structure as below:\n\nAnd then if you connect an Iterator module to it, you will not be able to map the output of the module to the Array field in the setup panel of the Iterator:\n\nTo resolve this, just manually start the scenario in the Scenario editor. You can un-link the modules after the JSON > Parse JSON module to prevent the flow from proceeding further or right-click the JSON > Parse JSON module and choose \"Run this module only\" from the context menu to execute only the JSON > Parse JSON module.\n\nOnce the JSON > Parse JSON has been executed, it learns about the items it outputs and provides this information to all the following modules including the Iterator. The mapping panel in the Iterator's setup will then display the items:\n\nMoreover, the mapping panel in the modules connected after the Iterator will display the items contained in the array's items:\n\nIn summary: if you cannot see some items in a module's mapping panel, simply run the scenario once so all the modules can learn about the items they output and provide this information to the following modules.\n\nIn this section\nSetting up an iterator\nLearn when to use an Iterator in your scenarios\nIterator\nSetting up an iterator\nExamples:\nLearn when to use an Iterator in your scenarios\nTroubleshooting: Mapping panel does not display mappable items under the Iterator module\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Converger",
      "url": "https://www.make.com/en/help/modules/converger",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nSolution\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesConverger\nConverger\nNote\n\nThis article describes alternatives and workarounds to the Converger module, often requested by our customers.\n\nPlease note that there is no Converger module available in Make. At the moment, it is just a concept that provides a counterpart to the Router module, allowing you to reduce duplication of modules in different routes.\n\nSolution\n\nTo implement the Converger concept, use one of the following workarounds to avoid the duplication of the common sequence.\n\nData store\n\nAdd an extra filter-free route to the Router to connect the common sequence (the one you would put after a Converger module).\n\nAdd Data store > Add/replace a record modules at the end of each Router's route (except the new extra route) to store the data outputted by the modules on the route that should be passed to the common sequence. The Data store would contain just one record, the record's key can be e.g. \"MyKey\".\n\nAdd Data store > Get a record module at the beginning of the common sequence to obtain the previously stored data.\n\nJSON\n\nIf you wish to avoid the use of the Data store you can:\n\nInstead of the Data store > Get a record module use JSON > Create JSON module followed by Tools > Set variable to store the resulting JSON in a variable (e.g. \"MyBundle\").\n\nInstead of the Data store > Get a record module use Tools > Get variable to obtain the previously stored variable followed by JSON > Parse JSON.\n\nPlease note that if no route is executed, the JSON > Parse JSON will throw the following error:\n\nTo avoid this, you may employ the ifemtpy() function as show below:\n\nSet a variable\n\nIf it is just a single value that you need to pass to the common sequence (e.g. ID), you can employ only the Tools > Set variable and Get variable modules.\n\nMake also allows you to use the Set multiple variables module.\n\nA separate new scenario\n\nYou may also place the common sequence to a separate new scenario and then:\n\nEmploy HTTP > Make a request module at the end of each route to pass the data to the new scenario.\n\nEmploy Webhooks > Custom webhook module at the beginning of the new scenario to receive the data.\n\nIn this section\nSolution\nConverger\nSolution\nData store\nJSON\nSet a variable\nA separate new scenario\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to get Text Parser to produce an output value",
      "url": "https://www.make.com/en/help/modules/how-to-get-text-parser-to-produce-an-output-value-",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesHow to get Text Parser to produce an output value\nHow to get Text Parser to produce an output value\n\nCase scenario example, you would like to parse the filetype of a file document \"filename.docx\" and the extension of the filename always varies from docx to pdf to CSV.\n\nThe expression that you may choose to use in this case is \\..+\n\nIf you were to use this on regex expression on regex101.com you will rightly find that you will get a match a full match.\n\nAs you will notice on the image above that the file extension was correctly matched as shown in the image above and if you take and try to implement this in your text parser:\n\nYou will find that you will not get a match as shown in the image below.\n\nThe reason for this is that the i shows only the number of matches per match so in this case, we have 2 matches henceforth after the i there is a numerical value 1 and 2. The use case for this is that should you ever need to match or pass data through a filter only the second matched value you can specify which value that is represented by the numerical value.\n\nTo be able to get the match values that you require to add brackets to the part that you wish to parse for example if one wishes to extract from \"filename.docx\" - \"docx\" only then according to the regex expression we are using for this case scenario the brackets should be applied on \\.(.+) this will capture the docx place it in a group and leave the \".\" out of it.\n\nThe output shown in the picture below, you will notice that the capturing group will match any character (except for line terminators).\n\nAnother workaround thats also incorporates regex is using the replace function:\n\n{{replace(\"abcdefghijklmno pqr stuvw xyz.docx\"; \"/.*\\./\"; \".\")}}\n\nThen replace abcdefghijklmno pqr stuvw xyz.docx with your actual filename variable.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Router",
      "url": "https://www.make.com/en/help/modules/router",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nAdding a router to a scenario\nOrder routes\nThe fallback route\nSelect a whole branch\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesRouter\nRouter\n\nA router allows you to branch the scenario flow into several chains of modules. Each route processes the data differently according to the condition you set. Filters help you to determine conditions via different operators such as less than, greater than, and so on.\n\nOrder routes in the sequence you want and set up a fallback route that will process data that doesn't fit other routes.\n\nTip\n\nSee our scenario template for the Controlled distribution of data flow.\n\nAdding a router to a scenario\n\nYou can add a router in two different ways:\n\nConnect a router to a module:\n\nClick Add another module.\n\nIn the search box, type Flow controls and click it.\n\nSelect Router.\n\nInsert a router between two modules:\n\nRight-click the bridge between two modules, and select Add a router.\n\nOrder routes\n\nYou can set the order of routes in which Make processes them in the scenario.\n\nThis example shows the router that determines which hint to send you on Slack according to tomorrow's weather.\n\nClick the router that contains the routes you want to order.\n\nRight-click and select Order routes. A window appears.\n\nClick arrows and move routes according to your needs.\n\nNote\n\nThe fallback route always runs last, no matter which position it takes in the Order routes window.\n\nOptional. Select Auto-align arranges with set order to visually arrange modules on the scenario canvas according to the set order.\n\nClick Apply.\n\nNote\n\nRoutes are processed sequentially, not in parallel. Make won't process the second route unless it finishes processing the first one.\n\nThe fallback route\n\nA fallback route processes data that doesn't fit the condition of all other routes. You can mark a route as a fallback if you want it to be executed last.\n\nNote\n\nYou can set up a filter for a fallback route same as for other routes.\n\nTo set up a fallback route, follow the steps:\n\nClick the route you want to mark as a fallback. A filter window appears.\n\nSelect Yes.\n\nClick Save.\n\nYou can recognize the fallback route by the special arrow icon on the router module:\n\nSelect a whole branch\n\nYou can manage all modules in the branch at once.\n\nClick the route menu, then click Select whole branch. It selects all the following modules.\n\nYou can copy or delete all selected modules at once.\n\nExample 1. Example of a router with a fallback route\n\nYou need to receive a message on Slack depending on tomorrow's weather:\n\nif the weather is hot, the message is wear shorts.\n\nif the weather is cold, the message is wear a jacket.\n\nif the weather is neither hot nor cold, the message is better stay at home.\n\nThe scenario looks like that:\n\nThe scenario flow is:\n\nThe Weather module gets data about tomorrow's weather.\n\nData goes to the router that processes routes in the determined order:\n\nThe Hot weather route sends the message to Slack, if data fits the filter condition:\n\nThe Cold weather route sends the message to Slack, if data fist the filter condition:\n\nThe Fallback route sends the message to Slack, if data doesn't fit previous routes.\n\n\n\n\nIn this section\nAdding a router to a scenario\nOrder routes\nThe fallback route\nSelect a whole branch\nRouter\nAdding a router to a scenario\nOrder routes\nThe fallback route\nSelect a whole branch\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Aggregator",
      "url": "https://www.make.com/en/help/modules/aggregator",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nExample\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesAggregator\nAggregator\n\nAn aggregator is a type of module designed to merge several bundles of data into a single bundle.\n\nWhen an aggregator is executed, it:\n\naccumulates all the bundles it receives (during a single source module's operation)\n\noutputs a single bundle with an array containing one item per each accumulated bundle. The content of the array's items depends on particular aggregator module and its setup.\n\nA typical example of an aggregator module is the Array aggregator module. Aggregators usually feature the following fields:\n\nSource Module\n\n\t\n\nThe module from which the bundle aggregation will start. The source module is usually an iterator or a search module that outputs a series of bundles. Once you setup the aggregator's Source Module (and close the aggregator's setup), the route between the source module and the aggregator will be wrapped in a grey area to visualize the start and the end of the aggregation.\n\n\n\n\nGroup by\n\n\t\n\nThe aggregator's output can be split into several groups with the help of the Group by field. The Group by field can contain a formula that is evaluated for each aggregator's input bundle. The aggregator then outputs one bundle per each distinct formula's value. Each bundle contains two items:\n\nKey contains the distinct value.\n\nArray contains the aggregated data from the bundles for which the formula evaluated to the Key value.\n\n\n\n\nStop processing after an empty aggregation\n\n\t\n\nBy default, the aggregator outputs the result of the aggregation even in case no bundles reached the aggregator (e.g. because they have been all filtered out on their way). If the Stop processing after an empty aggregation option is enabled, the aggregator will not produce any output bundle in this case and the flow will stop.\n\nNote\n\nBundles outputted from the source module and any other modules between the source module and the aggregator module are not outputted by the aggregator and thus items in these bundles are not accessible by the modules in the flow after the aggregator.\n\nIf you need to access items from bundles outputted from the source module and any other modules between the source module and the aggregator module, make sure to include them in the aggregator's setup, e.g. in the Aggregated fields field in the setup of the Array aggregator module.\n\nExample\nUse case: Zipping all email attachments and uploading the ZIP file to Dropbox\n\nThe scenario below shows how to:\n\nWatch a mailbox for incoming emails: Email > Watch emails trigger will output a bundle with item Attachments[] , which is an array containing all the email's attachments.\n\nIterate the email's attachments: Email > Iterate attachments iterator takes the items from the Attachments[] array one by one and sends them further as separate bundles.\n\nAggregate the bundles outputted by the Email > Iterate attachments module: Archive > Create an archive aggregator accumulates all the bundles it receives and outputs a single bundle containing the ZIP file\n\nUpload the resulting ZIP file to Dropbox: Dropbox > Upload a file obtains the ZIP file from the Archive > Create an archive module and uploads it to Dropbox.\n\nBelow is a sample setup of the Archive > Create an archive aggregator:\n\nIn this section\nExample\nAggregator\nExample\nUse case: Zipping all email attachments and uploading the ZIP file to Dropbox\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Selecting the first bundle",
      "url": "https://www.make.com/en/help/modules/selecting-the-first-bundle",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nDisplaying the panel\nSetting options\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesSelecting the first bundle\nSelecting the first bundle\n\nSome triggers allow you to select the first bundle where you want the retrieving of bundles to start from. You can also set whether to retrieve all bundles or just the bundles from after a specific date.\n\nDisplaying the panel\n\nThe panel to select where the first bundle should be retrieved displays automatically after you save a trigger or when you make a substantial change in the trigger settings.\n\nYou can also display the panel at any time by right-clicking on the trigger icon in the Scenario editor.\n\nThe options available in the panel differ trigger from trigger, depending on the the possibilities of a given service. In fact, some triggers do not offer any options at all.\n\nSetting options\n\nThe panel for selecting the first bundle may contain 1 to 5 options:\n\nFrom now on (default) - retrieves all bundles added or updated (depending on settings) from now on.\n\nFrom after a specific date - retrieves all bundles added or updated (depending on settings) after a specified date/time.\n\nWith ID greater than or equal to a specific value - retrieves all bundles with an ID greater than or equal to a specified ID.\n\nAll bundles - retrieves all available bundles.\n\nSelect the first bundle - allows you to select the first bundle from which the retrieval of bundles is to start.\n\nIn this section\nDisplaying the panel\nSetting options\nSelecting the first bundle\nDisplaying the panel\nSetting options\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Module settings",
      "url": "https://www.make.com/en/help/modules/module-settings",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nConnection settings\nRequired and optional fields\nStandard fields\nAdvanced fields\nData types\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesModule settings\nModule settings\n\nFor each module in your scenario, you need to configure its settings - the fields you see when you click on the module. These fields define the data you want to receive or send to an application, the information you want to pass between modules, and specific details regarding what actions each module should take.\n\nFor example, the Dropbox modules require you to specify the target folder for uploading files. For the Email modules, you need to enter the email address to which emails should be sent. Every setting is unique for each module.\n\nThe module settings open automatically when you add a new module to your scenario. You can also open or re-open the module settings in the Scenario editor by clicking on the module.\n\nConnection settings\n\nIn almost every app's module settings, you will find connection settings. This is where you create a connection to your user account for the given app, and is the first step when adding a new module to your scenario. Some fields you might see in the connection settings include Username, Password, API Key, or Client Credentials. For more information and instructions on how to create a connection to any of your accounts see Connecting to services.\n\nRequired and optional fields\n\nSome fields in the module settings are required, while others are optional. You can identify which fields are required by their name written in bold. If you try to save your module settings without filling in a required field, you will receive an error.Your scenario cannot run unless all required fields are filled in.\n\nIn each field, you can either type the appropriate text into the field or fill it in by mapping an item from another module in your scenario.\n\nTip\n\nFor some parameters (mostly arrays with several fields that Make retrieves depending upon the selected connection) you can see a Map toggle. Switching on the Map toggle brings up a text field where you can map items from the preceding modules.\n\nStandard fields\n\nWhen you open the module settings, you will see all of the module's standard fields. These include the most frequently used fields for the module, and are typically the default items you see when going to the website of the service you are using. Standard fields can be both optional and required.\n\nAdvanced fields\n\nSome modules also include advanced fields that can be found in the module's advanced settings. These fields include more complex items that may require specific technical knowledge to use. To open the advanced settings, switch on the Show advanced settings toggle.\n\nData types\n\nEach field in the module settings accepts a specific data type, signifying what format of information you can enter or map into the field. This can be text, date, number, etc. You can identify a field's data type by hovering over the name of the field. For more information, see Item data types.\n\nIn this section\nConnection settings\nRequired and optional fields\nStandard fields\nAdvanced fields\nData types\nModule settings\nConnection settings\nRequired and optional fields\nStandard fields\nAdvanced fields\nData types\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Types of modules",
      "url": "https://www.make.com/en/help/modules/types-of-modules",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nActions\nSearches\nTriggers\nAggregators\nIterators\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesTypes of modules\nTypes of modules\n\nMake distinguishes five types of modules: Actions, Searches, Triggers, Aggregators and Iterators. The two latter ones are intended for advanced scenarios.\n\nActions\n\nActions are the most common module type.\n\nA typical action module returns just a single bundle which is then passed on to the next module for processing.\n\nAction modules can be placed at the beginning, middle, or end of a scenario.\n\nScenarios can contain an unlimited number of action modules.\n\nExamples:\n\nDropbox > Upload a file sends a file to a selected Dropbox folder and returns its identifier.\n\nImage > Resize receives an image, resizes it to specified dimensions, and passes the resized image on to the next action.\n\nGoogle Analytics > Create a report gets information about web traffic and passes it on for further processing.\n\nUpdate\n\nThe Action type has four sub-types: Create, Read, Update and Delete. The Update sub-type enables the following three operations:\n\nErase the content of a field. This operation takes place when the content of the field is evaluated to erase keyword (not to be confused with empty):\n\nLeave the content of a field unchanged. This operation takes place when the field is left empty or the content of the field is evaluated to empty (represented via null in JSON):\n\nReplace the content of a field. This operation takes place in all other cases than those two described above.\n\nNote\n\nIf you do not see the erase keyword in the mapping panel than either the module is not an update module or it has not been updated to the latest apps specification yet.\n\nThe reason, why it has been decided that empty will result in no change of the field content is that if there is a need to act differently and erase the field instead then it is easily achievable with the following formula:\n\nwhereas leaving the content of the field unchanged when the field's content is evaluated to empty is currently not possible.\n\nSearches\n\nA typical search module returns zero, one, or more bundles which are then passed on to the next module for processing.\n\nSearch modules can be placed at the beginning, middle, or end of a scenario.\n\nScenarios can contain an unlimited number of search modules.\n\nExamples:\n\nMonday > List pulses in all boards returns all account's pulses.\n\nTriggers\n\nTrigger modules generate bundles when there has been a change in a given service. The change can be a creation of a new record(s), deletion of a record(s), update of a record(s), etc. Make distinguishes between two types of triggers: Polling triggers and Instant triggers.\n\nEvery trigger can return zero, one, or more bundles which are then passed on to the next module for processing.\n\nTriggers can be placed only at the beginning of a scenario.\n\nEach scenario can contain only one trigger.\n\nPolling triggers\n\nPolling triggers are designed to regularly poll a given service whether there has been a change since their previous run. So you will typically schedule a scenario containing a polling trigger module to run periodically by selecting for example At regular intervals option from the Schedule setting panel. If there is a change the trigger will return bundles containing information about the change. If there is no change the trigger will output no bundles.\n\nPolling triggers allow you to select the first bundle they should output via the epoch panel. The panel is displayed automatically after you save a trigger or when you make a substantial change in the trigger settings. You can also display the panel by right-clicking the module and choosing \"Choose where to start\" from the context menu.\n\nNote\n\nSettings made in the epoch panel affect only the first execution of the module. Once the module is executed, it will remember the last outputted bundle and the settings made via epoch panel will be voided.\n\nExamples:\n\nDropbox > Watch files returns files that were newly added since the last time the scenario was run.\n\nTwitter > Watch Tweets returns new Tweets posted by the user since the last time the scenario was run.\n\nTumblr > Watch posts returns new posts added to a selected blog since the last time the scenario was run.\n\nInstant triggers\n\nInstant triggers enable the service to notify Make about the change immediately. You will typically wish to schedule a scenario containing an instant trigger to run immediately by selecting the Immediately option from the Schedule setting panel. See also Webhooks for further details on how the incoming data are handled.\n\nExamples:\n\nPaypal > New notification returns new payment notifications.\n\nAggregators\n\nAggregators are modules that accumulate multiple bundles into one single bundle.\n\nEvery aggregator returns only one bundle which is then passed on to the next module for further processing.\n\nAggregators can be placed only in the middle of a scenario.\n\nScenarios can contain an unlimited number of aggregators.\n\nExamples:\n\nArchive > Create an archive compresses received files into a zip archive.\n\nCSV > Aggregate to CSV merges multiple strings from a CSV file into a single row.\n\nTools > Text aggregator combines several strings together into one single string.\n\nIterators\n\nIterators are modules that split arrays into multiple, separate bundles.\n\nEvery iterator returns one or more bundles which are then passed on to the next module for processing.\n\nIterators can be placed only in the middle of a scenario.\n\nScenarios can contain an unlimited number of iterators.\n\nExamples:\n\nEmail > Retrieve attachments breaks an array of attachments into separate bundles.\n\nIn this section\nActions\nSearches\nTriggers\nAggregators\nIterators\nTypes of modules\nActions\nExamples:\nUpdate\nSearches\nExamples:\nTriggers\nPolling triggers\nInstant triggers\nAggregators\nExamples:\nIterators\nExamples:\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "App lifecycle",
      "url": "https://www.make.com/en/help/modules/app-lifecycle",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModulesApp lifecycle\nApp lifecycle\n\nMost Make apps rely on 3rd party services, particularly on their APIs (Application Programming Interfaces). As the services evolve, so do their APIs. New API versions are being released regularly, and old versions are being deprecated and eventually shut down. We closely follow releases of new API versions and implement new apps based on the latest APIs. During their lifecycle, apps can go through up to four phases:\n\nBeta\n\nApps in the Beta phase are labeled with the  tag in the list of apps in the Scenario editor:\n\nThe  tag denote that the API the app is based on is marked by the 3rd party service as beta. Please refer to the app's documentation for further details on this matter.\n\nEven though our QA team had thoroughly tested each app before it was released, some minor issues can still slip through. Please, do not hesitate to report these issues.\n\nStable\n\nOnce the frequency of reported issues drops, the app proceeds to the Stable phase. Apps in the Stable phase are not labeled with any special tag:\n\nDeprecated\n\nOnce a new app version (or an alternative app) is available, the old app proceeds to the Deprecated phase. The Deprecated phase is indicated by the green icon with white arrows on the app's modules in Scenario editor.\n\nIn the list of apps in the Scenario editor the Deprecated apps are suffixed with (legacy):\n\nDeprecated apps:\n\nno longer receive support\n\noften are no longer shown in the list of apps in the Scenario editor\n\nwill stop operating after a prior notice\n\nShutdown\n\nApps in the Shutdown phase no longer operate according to their specification.\n\nBefore the Shutdown phase of an app starts, we always send an email to all customers that have the Deprecated app in their scenarios and ask them to replace the Deprecated app with an alternative (usually a new version of the app). However, we highly recommend not to wait for the notification about the app shutdown and start upgrading your scenarios as soon as you spot the green icon with white arrows (indicating the app's Deprecation phase) to avoid last moment surprises.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Modules",
      "url": "https://www.make.com/en/help/modules",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nModules\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterModules\nModules\n\nIn this section\nApp lifecycle\nTypes of modules\nModule settings\nSelecting the first bundle\nAggregator\nIterator\nRouter\nConverger\nHow to get Text Parser to produce an output value\nReplacing Legacy Modules with New Modules\nReplacing Google Sheets legacy Modules with New Modules\nUpgrading Gmail and Email App Versions Using Make DevTool\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Send data to Make as JSON via an action in a Bubble workflow using the API Connector plugin",
      "url": "https://www.make.com/en/help/tutorials/send-data-to-make-as-json-via-an-action-in-a-bubble-workflow-using-the-api-connector-plugin",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\n\nThis tutorial covers how to send data from a Bubble workflow by triggering the Watch events module in a scenario on Make. This is what you need when you want to start a Bubble workflow when an action such as clicking a button takes place on a page in your Bubble app.\n\nYou may watch the video tutorial or continue reading below:\n\nInstall the API Connector plugin in your Bubble application and define an API call to send data to Make webhook.\n\nLet's call this endpoint 'SendToMake' and under authentication, select None or self-handled as shown below:\n\nNext, add an API call to POST an ACTION to the Webhook URL which will be obtained from Make in the next step.\n\nMake sure you add the parameters type and message to the call.\n\nCreate a scenario with the Watch events module by Bubble as the trigger.\n\nHere, add a new webhook, copy the URL and paste it in the API Call plugin shown in the previous step.\n\nCreate a button to start a workflow on Bubble\n\nWe will use the same form used in the Create a Data Thing or a Bulk of Data Things on Bubble. Check it out if you haven't already.\n\nThe form looks like the one below and the Submit button starts the workflow:\n\nAdd an action to the workflow which starts when the button is clicked.\n\nThis workflow needs to have an action to make the API Call created in the first step. Since the API Call was used to post an Action, it will be visible under Plugins as shown below:\n\nAfter selecting the API Call, the body has to be added as a JSON in the message field as shown:\n\nHere, we pass the values of fname and email which refer to the fields on the form. You can add all the required parameters here. The JSON body is as below:\n\n{ \"fname\" : \"fname's value\",\n\n\"email\" : \"email's value\"\n\n}\n\nComplete the scenario and run it.\n\nThe final step in this tutorial is to add the rest of the modules to your scenario and run it. Since the data is sent as a JSON from the Bubble Workflow, it's recommended to use a Parse JSON module unless you are using a service that accepts JSON directly.\n\nTo trigger the scenario, you need to start the Bubble workflow by clicking on the submit button in the preview mode on Bubble.\n\nIn the scenario above, the JSON is parsed to extract the fname and email elements which are then mapped to two Set variable modules respectively. The scenario is available as a template here. You can however map the elements directly to one or more modules from the app you wish to send the data to.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to prevent Google Sheets from changing numbers into dates",
      "url": "https://www.make.com/en/help/tutorials/how-to-prevent-google-sheets-from-changing-numbers-into-dates",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to prevent Google Sheets from changing numbers into dates\nHow to prevent Google Sheets from changing numbers into dates\n\nSituation - When a string is being interpreted as a date in your Google worksheet. For example, you add 1-2019 which is supposed to be a plain text however, it is interpreted as a date by Google.\n\nSuggestion - Pre-format the cells beforehand as shown in the picture below, whereby you will first have to highlight the concerned column or cell. Next, in step 2, you will go to the Format tab. Then as in step 3, select the Number option. And finally, select the plain text option in step 4. By doing this, you will have pre-formatted the cells, and any digits that you enter will not be converted to be a date.\n\nThe other workaround that you can do via Make is by placing an apostrophe (‘) before you enter a number, such as ’1-2019 or ‘1/47. The apostrophe isn’t displayed in the cell after the data has been sent fromMake.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Typeform Make Data Stores",
      "url": "https://www.make.com/en/help/tutorials/typeform-make-data-stores",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nStep 1: Create a new scenario and add the first module\nStep 2: Add the Data Store module\nStep 3: Add a new data store\nStep 4: Configure your newly added data store\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsTypeform Make Data Stores\nTypeform Make Data Stores\n\nScenario: Store your Typeform responses to Data Stores to keep a record or to transfer data between scenarios\n\nLevel of difficulty: Easy\n\nImplementation Time: Approximately 15 Minutes\n\nTypeform calls itself the versatile data collection tool for professionals and I can’t agree more. I love Typeform! But you know what makes Typeform better? The fact that you can not only send the data to a third-party service such as a Google Sheet but also store the same on Make Data Stores.\n\nSo what exactly is a data store? It is the equivalent of a table in a database and is as easy to set up as a Google Sheet (with more versatility). Read on to see how!\n\nStep 1: Create a new scenario and add the first module\n\nThe scenario we will create today contains two modules and it looks like this:\n\nThe first is the Typeform module. Click the big question mark and search for the Typeform to see the module.\n\nOnce selected, you need to select the Trigger, which in this case is New Entry.\n\nNext, you need to add a new webhook or select an existing one followed by connecting your Typeform account if it isn’t already connected.\n\nHere, we will add a new webhook by clicking the Add button and giving it a name and then connect the Typeform account.\n\nName your webhook and connection and click Continue. You will need to authenticate Make to access your Typeform account (which is 100% safe).\n\nOnce this is done, you will see all the forms associated with your account. Select the form whose responses you would like to store and you will see that the webhook is automatically attached to that form as below:\n\nStep 2: Add the Data Store module\n\nThe next step is to add the Data Store module as shown below:\n\nSelect the first action that says Add/replace a record:\n\nStep 3: Add a new data store\n\nOnce added, you need to add a data store or select an existing one. Here, we will create a new data store, give it a name and then go on to create the data structure by clicking Add as shown below:\n\nThe next step is to add an item to your data structure. An item is the equivalent of a column in a spreadsheet (or a field/attribute in a database) and contains the response to a question (or block) in your Typeform.\n\nClick on add item to proceed:\n\nFor each item, you need to specify a name and select a type from the drop-down. We have named this item First_Name and selected text as the type. You will see more options below which are self-explanatory. Click on Add to continue.\n\nFollow the previous step to add all the items corresponding to the questions/blocks in your Typeform. We have added the following items:\n\nFirst Name\n\nLast Name\n\nPhone\n\nEmail\n\nOpt-In\n\nSave the items list followed by Saving the data store.\n\nPlease note that to edit the data store and modify the items, you will need to navigate to the Data stores under More in the collapsible menu bar on the left.\n\nStep 4: Configure your newly added data store\n\nOnce your data store is created, you will see a field named Key which can either be assigned the Typeform Entry ID (as shown below) or left blank. This is useful to retrieve a particular record containing the responses to an entry. If you leave it blank, a key is anyway generated.\n\nYou can also overwrite an existing record by specifying the custom key for that particular record. We don’t need to do this since this is a new record and contains no existing data.\n\nNow scroll down to Record to see the fields corresponding to all the items in your data store. (A row in a data store is known as a record).\n\nHere, click on each field and choose the attribute (from the ones fetched from your Typeform) that you would like to map with the item in your data store.\n\nNow hit OK, run your scenario once, submit your Typeform and see the scenario execute beautifully, and create a new record in your data store!\n\nTo view the record, you can either navigate to the Data store section in the menu and click on Browse or do so by simply clicking the Data store module right in your scenario as follows:\n\nYou record will look like the one below:\n\nLastly, just click on the little clock icon to choose the Schedule setting for your scenario, save it, and turn it on by toggling the Scheduling switch as shown below:\n\nThat’s it! You can now send the data from your Data store to Google Sheets, a CRM like InfusionSoft, or any other application by adding another module.\n\nLet us know which application you wish to see added as the next module and we will write the next tutorial for just that!\n\nHappy Automating!\n\nIn this section\nStep 1: Create a new scenario and add the first module\nStep 2: Add the Data Store module\nStep 3: Add a new data store\nStep 4: Configure your newly added data store\nTypeform Make Data Stores\nStep 1: Create a new scenario and add the first module\nStep 2: Add the Data Store module\nStep 3: Add a new data store\nStep 4: Configure your newly added data store\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to send a message to a Discord channel via HTTP when a Google Sheet is updated",
      "url": "https://www.make.com/en/help/tutorials/how-to-send-a-message-to-a-discord-channel-via-http-when-a-google-sheet-is-updated",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\n\nScenario: Update data in a Google Sheet to send a message to a Discord channel via the HTTP module. This scenario watches an existing Google Sheet and is triggered when data from a row is modified.\n\nLevel of difficulty: Easy\n\nImplementation Time: Approximately 20 Minutes\n\nPrerequisites: The following is needed to set up this scenario:\n\nA Google Sheet with column names and existing data.\n\nA Discord account with permission to manage webhooks for a text channel.\n\nThe scenario for this tutorial contains only two modules and looks like this:\n\nConfigure your sheet.\n\nAs mentioned under prerequisites, you must have a Google Sheet configured with column names and some sample data. If you don’t, please create one before you proceed. This is what mine looks like:\n\nCreate a Webhook in your Discord Channel\n\nDiscord gives you the ability to create one or more webhooks for each text channel. If you’re not familiar with the process, follow the 3-step instructions below or else, jump to Step 3.\n\nUnder TEXT CHANNELS, click the settings icon next to the channel name:\n\nHead over to the Webhooks tab from the left menu and click the button labelled Create Webhook:\n\nGive the Webhook a name, copy the webhook URL, and click Save:\n\nKeep this URL handy, we will need it while setting up the HTTP module in our Make scenario.\n\nHead over to your Make dashboard to create a new scenario.\n\nClick the big question mark to set up Google Sheets as the first module and select Watch a worksheet as the trigger.\n\nChoose your Google connection or add a new one followed by selecting a file (the sheet you created earlier) and the worksheet in the file that contains the sample data. Under Maximum number of returned rows, type in the number of messages you’d like to send every time the scenario runs. If you’d like to send a separate message for each updated row, type in 1 as shown below:\n\nAfter clicking OK, you’ll see another dialog box asking you to either enter the row number from which you’d like the module to start looking for updates or select All rows.\n\nNote\n\nThe first row or header row is always assumed to contain the column names. Hence, if you enter 1, entries will be watched starting the row below the header row.\n\nConfigure the HTTP module as the Action\n\nThe HTTP module is the second and the last module in the scenario that performs the action of sending a message to a discord channel.\n\nSearch for the HTTP module and select Make a request as the action:\n\nUnder URL, paste the Webhook URL obtained from the Discord channel earlier.\n\nUnder Method, select POST.\n\nUnder Body Type, select Raw.\n\nUnder Content Type, select JSON (application/json).\n\nFinally, under Request Content, type in the message to be sent to the channel as a JSON payload as per Discord’s API. To send a message (string), the Field type is content, hence the JSON payload should be written as follows:\n\n“content” : “Houston, this is a message for Discord”\n\nClick here to learn more about executing webhooks on Discord.\n\nSince the trigger is a Google Sheet with columns containing data, we can use the column names to include the contents of each cell in the message that is sent to the channel. We may also use line breaks (\\n) in the message. Below is what I have composed:\n\n“content” : “**Incoming Status Update**\\nName: {{firstname}} {{lastname}}\\nMission: {{mission}}\\nStatus: {{status}}”\n\nClick OK to complete the scenario. You must save the scenario and toggle the Scheduling switch to ON.\n\nTo define the schedule for the scenario, click the little clock icon next to the toggle switch or the big clock animation on the Google Sheets module image as shown below:\n\nYou may also rename the modules and add notes under each by right-clicking the module image:\n\nThat’s it. Now update some data in your sheet and run your module once to make sure everything works fine as shown below:\n\nHope you were able to implement this scenario with ease.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Update Google Sheet row with TwitterID and Date after posting it on Twitter",
      "url": "https://www.make.com/en/help/tutorials/update-google-sheet-row-with-twitterid-and-date-after-posting-it-on-twitter",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nStep-by-step documentation\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\n\nEverytime you create a new tweet in your Google Sheets spreadsheet, Make will automatically post your current tweet from your Google sheet to your Twitter account. After that, Make will get the TwitterID and the date that the tweet was posted and update a specified Google Sheet row.\n\nFinal Output\n\nStep-by-step documentation\n\nBased on the final output, there are three modules that are being used for this scenario.\n\nAdd two more columns in your Twitter Google Sheet with the header names Date and TweetID.\n\nFrom your first exercise, add another module that updates your Google sheet with the date and the TwitterID after Make posts your tweet on your Twitter account.\n\nClick on the white field shown in the image below and then two options will appear, click on the Add another module button.\n\nSelect the app and its corresponding module.\n\nType Google Sheets and click on the app as shown below.\n\nClick on the corresponding module Update a row. This module will update your Tweet Google sheet with the date and TwitterID of your current Twitter post.\n\nOnce you have your new module, a new tab will automatically pop up where you have to configure your Google Sheets settings as we did in exercise 1.\n\nFirst, click on the Add button and give Make access to your Twitter Google Sheet.\n\nWhen you click on the Add button it pops up a new window and then click the Save button and then another window will open which is your Google Drive account.\n\nOn the newly popped up window click on the Allow button to give Make access to your Google Account.\n\nOnce that is clicked, go back to your Make scenario, and then you have to choose the specific sheet that you want Make to choose the tweet from. In our case, it is the Twitter Google Sheet.\n\nFrom the File field, a drop-down will list all of your sheets available, and then choose the Twitter sheet.\n\nAfter choosing the Twitter sheet, a few more fields will automatically appear below.\n\nUnder the Worksheet field, choose the Tweets sheet because that is where the additional header titles Date and TwitterID are added.\n\nNext, is the listed data inside the Tweet sheet, we have to correspond each specific field, on what data should be added to be updated.\n\nIn this case, we want the Date and the TwitterID to be added in the Google Sheet once the current tweet was posted on Twitter.\n\nFor the Date(date) field, drag the now variable to the field, that means that Make will get the date and time of the status that you have created right now.\n\nAs you can see in the image above, we have chosen the color blue variable now, the blue color stands for the Twitter module, because we want the date of the Tweet to come from Twitter and not from the first Google sheet.\n\nSame goes with the TweetID field, as shown in the image below. We want the TweetID to come from Twitter and not from Google Sheets.\n\nAs for the RowID field, we have to get this from the Google Sheet module. Because the last module wants to know which tweet should be updated, so we have to set the row of that specific field.\n\nAs you can see, the color of the variable is green that is because we grabbed the data from the first module and we are getting the row of the tweet from the Google Sheet.\n\nAfter inputting all the variables, your tab should look like this:\n\nIf your tab looks like this, then click the OK button.\n\nRun and execute your scenario.\n\nTo test your scenario, add a new tweet to your Tweets sheet.\n\nRun your scenario once to see the flow of your scenario.\n\nAfter running the scenario, all of your modules should have a green letter as shown in the image below.\n\nThat means that all of our modules have run properly and the data was processed properly.\n\nCheck your Twitter account.\n\nSee that the tweet from the Google sheet was processed and automatically transported to your Twitter account.\n\nAnd now, we check the Google sheet of the date and TweetID was added.\n\nWe can see that the date and TweetID value has been added and therefore our Google Sheet has been updated.\n\nSetting up your scenario for daily use.\n\nSet up your scenario so that it runs every 15 mins. (Depending on your subscription plan). Please see below.\n\nAs a free member your minimum number of minutes per cycle is 15 mins. (Based on what we are using in the example).\n\nClick on the clock that is under the Google Sheet app.\n\nA new tab will open.\n\nIf you click the dropdown button in the Run Scenario field, you have these options:\n\nBut in this case, you want to choose every 15 minutes, that is why you choose the At regular intervals option.\n\nAs for the interval of the Schedule Setting, we can set it to 15 mins, since that is the minimum limit set by the rules of Make.\n\nOnce we have that, click the OK button.\n\nThe last thing we have to do is activate the scenario so we do not have to execute the scenario all the time, but it will run itself by the cycle that we have set which is 15 mins.\n\nClick on the Exit Editing button.\n\nAs you can notice, it will exit the editing mode.\n\nAfter that, turn on your scenario to activate it.\n\nNow, your scenario is done.\n\nEverytime you input something new to the Google Sheet row, Make will get the current row that is filled every 15 mins and post it to your Twitter account and updates your Google Sheet row with the Date and TweetID automatically.\n\nIn this section\nStep-by-step documentation\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nStep-by-step documentation\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Get a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet",
      "url": "https://www.make.com/en/help/tutorials/get-a-tweet-on-twitter-when-a-new-tweet-is-created-in-a-row-in-a-google-sheets-spreadsheet",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nStep-by-Step Documentation\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\n\nDescription\n\nEverytime you create a tweet on Google sheet, Make automatically posts the tweet from your Google sheet to your Twitter account.\n\nFinal Output\n\nStep-by-Step Documentation\n\nBased on the final output we can see that there are 2 modules that are being used for this scenario.\n\nCreate a new Google Sheets spreadsheet with the file name Twitter and the sheet name Tweets. Create your first column by creating a column name, such as Tweet.\n\nGo to your Make account and Login. Click Create a new scenario .\n\nYou may rename your own scenario as you wish. Click New scenario. Then type your preferred scenario name e.g. My Personal Scenario.\n\nClick on question mark ? and select the Google Sheets app > Watch a worksheet module.\n\nSelecting the app:\n\nSelecting the module:\n\nConfigure your module.\n\nClick Add to add a connection to your Google Drive.\n\nClick Save. A new window opens where you have to Allow Access to your Google Sheet.\n\nIn the File field, specify which file Make should grab the data from. In our case it is the Twitter file.\n\nOnce you have chosen the filename, the Worksheet field will automatically appear, (in a worksheet, there can be many sheets listed) we will choose the Tweets sheet since that is the sheet we want to base our scenario off of\n\nAs for the Maximum number of returned row, specify how many results your Twitter account should grab from the Google Sheet. In our example, we will use 1 and get the unprocessed rows one by one and not all at once from our Google sheet.\n\nBut if we want to process all of the unprocessed rows all at once, then we should set the limit to a higher value (For example: 100 or higher)\n\nAfter that, we just click the OK button.\n\nAfter clicking the OK button another tab will appear:\n\nIn this field, type in the number where you want Make to choose the data from (number of row in the Google Sheet.) Kindly note that the header of the column will omit the counting. That is why we put the number 1. (So it starts at the 2nd row.)\n\nAnd, then click the OK button.\n\nThe next is to connect our 1st module to our Twitter account.\n\nWe select the Add another module button.\n\nWe select another app; Twitter app.\n\nSame as in the Google Sheets app, now we have to choose our specific module on what we want Twitter to do after Make monitors our Google sheet. In this case, we want Twitter to post a new tweet based on the current tweet that was inputted in the Google sheet tweet column.\n\nOnce we click on the module another tab will appear in the scenario.\n\nSame with the Google Sheets connection, add your Twitter connection to the scenario. (Twitter account).\n\nClick the Add button.\n\nClick the Save button.\n\nIn the new window click the Authorize App button, so that Make can access your Twitter account and link it to the Google Sheets module.\n\nAfter authorizing your Twitter account, we now have to set the status.\n\nOnce you click on the Status field, another tab will open.\n\nIn this field, specify which column we want to grab from the Google sheet which will then be redirected to the Twitter account.\n\nIn this case, we will select the Tweet (tweet) value. \n\nDrag and drop the Tweet (tweet) value to the Status field and click OK.\n\nOnce you have clicked on the OK button, you’re scenario is complete.\n\nSave your scenario.\n\nOnce you click on the Run button, the scenario will run only once until you activate your scenario with the specified time cycle.\n\nAfter executing, look at the scenario.\n\nOnly the Google Sheets module turned up green and the Twitter module did not turn green that is because our Google sheet is empty.\n\nInputting data into our Google sheet.\n\nNow, we have entered a Tweet under the Tweet column. Today is a great day.\n\nOnce we run the scenario again, notice how the Twitter module turns green.\n\nAnd then a Twitter post was created automatically.\n\nThat means that there was data processed and the result was established.\n\nSetting up your scenario for daily use.\n\nNow, we want to run our scenario in a way that we want it to run every 15 mins. (depending on your subscription plan).\n\nClick on the clock that is under the Google Sheets app.\n\nA new tab will open. If you click the dropdown button in the Run Scenario field, you have these options.\n\nBut in this case we want to run it every 15 minutes, so choose the At regular intervals option.\n\nAs for the interval of the Schedule setting”, we can set it to 15 minutes, since that is the minimum limit for a free plan.\n\nOnce we have that, click the OK** button.\n\nThe last thing we have to do is activating the scenario so we do not have to execute the scenario all the time, but it will run itself by the interval we have set which is 15 mins. \n\nClick on the Exit Editing button.\n\nAs you can notice, it will exit the editing mode. \n\nAfter that, turn on your scenario to activate it.\n\nNow, your scenario is done. Every time you input something new to the Google sheet under the Tweet column, Make will get the current data filled in every 15 mins and posts it to your Twitter account automatically.\n\nIn this section\nStep-by-Step Documentation\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nStep-by-Step Documentation\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to connect Chatfuel to Airtable",
      "url": "https://www.make.com/en/help/tutorials/how-to-connect-chatfuel-to-airtable",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nPart 1: Create a Scenario\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to connect Chatfuel to Airtable\nHow to connect Chatfuel to Airtable\n\nIntegration: Send your bot data to Airtable\n\nLevel of difficulty: Easy\n\nImplementation Time: Approximately 30 Minutes\n\nPart 1: Create a Scenario\n\nThe scenario that we are going to create looks like below.\n\nSelect the Webhooks module.\n\nSelect Custom Webhook as the trigger:\n\nClick Add to create a new webhook. Later you can select the same hook from the dropdown menu:\n\nName your webhook. We have called it Chatfuel_Bot_Note:\n\nYou will see that your Webhook URLhas been created. Copy Webhook URL. and move on to Part 2.\n\nPart 2: Set up the JSON plugin in Chatfuel\n\nTo send data from your Chatfuel (CF) bot to any external service, you need to use the JSON APl plugin inside a CF Block.\n\nUnder TYPE, choose the POST method. POST is more secure than GET. To learn more about the differences between the two, follow this link.\n\nUnder URL, paste your Webhook URL that you got from Make in the previous step.\n\nUnder USER ATTRIBUTES, select all the attributes that contain data that you wish to send to your Airtable.\n\nOnce the above steps are done, it should look like this:\n\nWe have passed only 4 attributes but you can pass all the attributes containing data you wish to send to the Airtable.\n\nNext, you need to trigger the block containing the above plugin for Make to determine the data structure based on the attributes you’re trying to pass. You can do this by testing your bot and arriving at this block or by creating a link with the REF parameter from the top of the block.\n\nIMP: Do the above before you proceed, else you will not see the attributes appear on the next module.\n\nOnce this is done, before you proceed, head over to Airtable and create your bot base (this is the same as creating a new file on Google sheets) and set up the columns as fields for your bot data:\n\nStep 3: Set up the Airtable module\n\nTo set up Airtable as the next module, click on add another module and look for Airtable:\n\nNext, click on Airtable, and choose the Create a record as the action:\n\nNow connect your Airtable account by clicking on Add under Connection. Here you need to provide your Airtable credentials as well as your API Key which can be found under your Account settings on Airtable (https://airtable.com/account):\n\nOnce the connection is successful, you will be able to see all the bases in the dropdown labeled Table. Choose the base that you created in the previous step:\n\nIf you have connected to the correct base, you will see the fields corresponding to the columns you created earlier. All you need to do is place the bot attributes in the respective fields and hit OK to run the scenario and create a new record on Airtable:\n\nBut before you run it, you need to do a little something so that you don’t receive an error message in your bot. Add another module and select webhook response:\n\nIn the body, create a JSON object by typing in { “success” : “true” } :\n\nThis is to ensure a proper response is sent back to Chatfuel to avoid the all too common — “an error in JSON Plugin has occurred” message. The bot itself does not respond with anything since the JSON is not as per the format Chatfuel accepts. However, if you’d like the bot to respond with a message, you can refer to Chatfuel’s JSON API docs.\n\nNow click on the big blue play button that says Run once. If everything goes well, you should see the scenario execute itself flawlessly and your Airtable will have a shiny new record!\n\nLastly, just click on the little clock icon to choose the Schedule setting for your scenario, save it and turn it on by toggling the switch on the bottom:\n\nThat’s it! That was easy, wasn’t it?\n\nLet us know what you think of this tutorial and how we can improve it. If you were stuck somewhere, please leave us a comment! If you have suggestions for the next topic, do tell.\n\nIn this section\nPart 1: Create a Scenario\nHow to connect Chatfuel to Airtable\nPart 1: Create a Scenario\nPart 2: Set up the JSON plugin in Chatfuel\nStep 3: Set up the Airtable module\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Mobile app",
      "url": "https://www.make.com/en/help/tutorials/mobile-app",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nMobile Apps Document\nLearn more about mobile apps\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsMobile app\nMobile app\n\nBy connecting the mobile app you can extend the scope of your automation possibilities. It enables you to create integrations that will react to changes in your current location. For example, you can automatically process photos you take while you are on the go.\n\nMobile Apps Document\n\nFollow download, installation, and usage instructions in the documentation corresponding to your device's operating system:\n\nMake app for iOS\n\nMake app for Android\n\nLearn more about mobile apps\n\nMobile apps - introduction\n\nSMS automatization - Use cases\n\nCall Management - Use cases\n\nGPS - Use cases\n\nIntegrations - Android\n\nIntegrations - iOS\n\nIn this section\nMobile Apps Document\nLearn more about mobile apps\nMobile app\nMobile Apps Document\nLearn more about mobile apps\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Create a Data Thing or a Bulk of Data Things on Bubble",
      "url": "https://www.make.com/en/help/tutorials/create-a-data-thing-or-a-bulk-of-data-things-on-bubble",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nPart 1: Create a data thing on Bubble when a row is updated on a Google Sheet\nPart 2: Create a bulk of data things under a data type\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsCreate a Data Thing or a Bulk of Data Things on Bubble\nCreate a Data Thing or a Bulk of Data Things on Bubble\n\nIn a Bubble Data Type, a data thing is a new entry with one or more fields. You can think of it as a row in a Google Sheet. You can either create a data thing or a bulk of data things on Bubble using the respective Bubble modules on Make.\n\nPart 1: Create a data thing on Bubble when a row is updated on a Google Sheet\n\nThe same principles apply when creating a data thing from any third-party service.\n\nWatch the video tutorial or continue reading below.\n\nCreate the Data Types on Bubble and an entry in each.\n\nCreate the Data Types in which you'd like to create Data Things dynamically. We have created 2 new Data Types: Location_Preference and Profession as shown below.\n\nUnder App Data, create a new entry in each of the Data Types shown for Location_Preference.\n\nExpose the Data Types in the API settings:\n\nCreate the scenario in Make:\n\nThe scenario in Make looks like below and is available as a template for you to replicate.\n\nCreate a form on Bubble to populate dynamic data things when the above scenario runs.\n\nWhile you can see the data things being added dynamically under Data Types, this is a sample use case of this tutorial on Bubble. See the form below.\n\nPopulate the dropdown with dynamic data things from Professions' profession_choices.\n\nSimilarly, the radio buttons are populated with dynamic data things from Location_Preferences' location_choices.\n\nWhen you add new profession_choices and location_choices to your Google Sheet and run the scenario, the dropdown and the radio buttons are populated with those choices.\n\nPart 2: Create a bulk of data things under a data type\n\nCreate an API workflow called load_data_types under Backend Workflows.\n\nThe workflow load_data_types serves to expose data types to Make as patterns to create new data things. This endpoint must also be exposed as a public endpoint.\n\nAdd the list of Data Types to the workflow.\n\nThe workflow load_data_types returns a text list of data types visible to Make and the items in the list are delimited with a comma as shown below:\n\nYou are able to use the Create the bulk of data things module in your scenarios.\n\nIn this section\nPart 1: Create a data thing on Bubble when a row is updated on a Google Sheet\nPart 2: Create a bulk of data things under a data type\nCreate a Data Thing or a Bulk of Data Things on Bubble\nPart 1: Create a data thing on Bubble when a row is updated on a Google Sheet\nPart 2: Create a bulk of data things under a data type\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Extract an item and/or its value from an array of collections",
      "url": "https://www.make.com/en/help/tutorials/extract-an-item-and-or-its-value-from-an-array-of-collections",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsExtract an item and/or its value from an array of collections\nExtract an item and/or its value from an array of collections\n\nSummary\n\nUse the map() function to extract an item (Email) and/or extract the value of an item (a specific email) from an Array of Collections (Names, Emails, IDs). This is useful when a module returns a JSON and you need to extract all or specific values of an item. This is also a good example of how the map() function works.\n\nVideo Tutorial\n\nBelow is the video showing how to achieve this using a pre-made template using the JSON modules, a router, and the 'set variable' tool. You can find the template used in this scenario here.\n\nNote\n\n'Create JSON' module should be replaced with the module that returns a JSON as an array of collections.\n\nFeel free to post your queries on our thriving Facebook Community!\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store",
      "url": "https://www.make.com/en/help/tutorials/how-to-capture-email-and-phone-via-webhooks--on-chatfuel-,-validate-them-using-regex-and-store-them-in-a-data-store",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nConfigure a webhook to receive data\nCreate the flow in Chatfuel\nStep 3: Setup the router module in Make\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nPrerequisite knowledge\n\nWe assume that you are familiar with Chatfuel, Webhooks, Regular Expressions, and Data Stores. If you’re not, refer to the following articles:\n\nChatfuel and Webhooks: How to connect Chatfuel to Airtable\n\nExpressions: Connect Email, Text Parser, and Google Sheets\n\nData Stores: Typeform + Integromat Data Stores\n\nScenario: Capture email and phone via Webhooks, validate them individually by filtering using Regular Expressions (Regex) as match patterns, store the valid entries in a Data Store and respond to invalid entries via Responsive Webhooks.\n\nNote: We have used Chatfuel but you can use any app that supports Webhooks or replace the Webhook module with any other app supported by Make.\n\nLevel of difficulty: Medium \n\nImplementation Time: Approximately 30 Minutes\n\nWhile most apps have inbuilt validation, many are not thorough so an unwanted entry may slip through. Chatfuel’s email validation accepts a@b as a valid email which is a problem, especially if you’re using a CRM like InfusionSoft to create a new contact with that email address. InfusionSoft’s validation is more thorough and it returns an error on receiving a wrongly formatted email, which can result in your scenario being paused. In such cases, you’ll receive an email from Make as below:\n\nTo avoid these errors altogether and ensure that you capture data in a valid format, you can set up filters before passing that data to the next module. Using Regular Expressions as Match Patterns, you can effectively validate email addresses and phone numbers.\n\nNote\n\nThis tutorial helps you to validate the format of the input and NOT to verify if an email or phone exists or matches previous records.\n\nSee more about the difference between validation with verification.\n\nIn this tutorial, we will help you validate an email address followed by a phone number. If both are valid, we will update a record in a Data Store. Read more about Data Stores.\n\nYou can follow the same process to create a row in a Google Sheet or an Airtable Base. If either the email or the phone is invalid, a Webhook Response is set up to prompt the user to retry. The scenario looks like below.\n\nConfigure a webhook to receive data\n\nAdd the Webhook module. You can select an existing webhook or create a new one.\n\nCopy the URL to paste it in the JSON plugin in Chatfuel.\n\nIf you are new to this, please refer to Step 1 in the Chatfuel Integration tutorial. We have named this module ‘Validation Webhook’.\n\nCreate the flow in Chatfuel\n\nGo to Chatfuel to set up the requisite blocks and plugins.\n\nTo capture data, you can either use the User Input plugin or the newly added User Email and User Phone plugins.\n\nAs an example, we will create the following five blocks (feel free to use your own nomenclature for blocks and attributes):\n\nemail_capture\n\nemail_invalid\n\nphone_capture\n\nphone_invalid\n\nvalidation_true\n\nThe setup for all five blocks are shown below:\n\nBLOCK NAME: EMAIL_CAPTURE\n\nStart with a Setup user attribute plugin and create an attribute called ‘email_validation’ with the value ‘not set’.\n\nAdd a User Email or User Input plugin and save the input to the ‘email’ attribute (leave the Validation as ‘None’ if using the User Input plugin).\n\nOR\n\nAdd a JSON API plugin, choose POST, paste your Webhook URL and add the attributes {{first name}}, {{last name}} and {{email}}.\n\nAdd a Go to block plugin and redirect to the ‘phone_capture’ block with the following filter:\n\nattribute → email_validation → is → not set\n\nAdd another Go to block plugin and redirect to the ‘email_invalid’ block with the following filter:\n\nattribute → email_validation → is → false\n\nClone the ‘email_capture’ block and rename it as above.\n\nNote\n\nNote: If want, you may redirect back to the ‘email_capture’ block instead of ‘email_invalid’ and return a message such as “email is invalid, please try again” from the webhook response directly.\n\nBLOCK NAME: EMAIL_INVALID\n\nClone the ‘email_capture’ block and rename it as above.\n\nAdd the following text block after the Setup user attribute plugin:\n\nThis allows you to show the invalid email that a user had typed in and give an option to skip this step. The rest of the block remains as is.\n\nBLOCK NAME: PHONE_CAPTURE\n\nLike the email_capture block, set up a user attribute called ‘phone_validation’ with the value ‘not set’\n\nAdd the User Phone or the User Input Plugin (leaving the Validation as ‘None’)\n\nSetup the JSON plugin with the same Webhook URL as the one in the previous blocks and pass the following attributes:\n\n{{first name}}, {{last name}}, {{email}} and {{phone}}\n\nAdd a Go to block plugin and redirect to the ‘validation_true’ block if phone_validation is “true” AND email_validation is “true”\n\nNote\n\nNote: The above attributes are assigned the value ‘true’ via the webhook response when both email and phone are valid (explained later). This scenario will work even if only phone_validation is true.\n\nSetup another Go to block plugin and redirect to ‘phone_invalid’ if phone_validation is “false”.\n\nBLOCK NAME: PHONE_INVALID\n\nClone the ‘phone_capture’ block and rename it as above. And add the following text block after the Setup user attribute plugin:\n\nThe rest of the block remains the same as before.\n\nBLOCK NAME: VALIDATION_TRUE\n\nJust add a text block as shown below:\n\nThis is the block you will send the user to if both email and phone are valid.\n\nStep 3: Setup the router module in Make\n\nRouter is an incredible module that lets you filter data when setting up multiple Actions to a Trigger. It can be found under ‘Flow Control’.\n\nIn this scenario, we will use a Router for the following actions:\n\nSend a response to the Validation Webhook if the email is invalid\n\nSend a response to the Validation Webhook if the phone is invalid\n\nAdd a row in a Data Store followed by a response to the Validation Webhook if both email and phone are valid\n\nAdd a Webhook response and set up a filter to check if the email is invalid:\n\nThe Body of the webhook response contains the following JSON that assigns the value ‘false’ to the attribute email_validation:\n\n{\n\n\"set_attributes\":  {\n\n\"email_validation\": \"false\"\n\n  }\n\n}\n\nThe filter contains the following condition:\n\nemail → Does not match pattern → ([\\w.-]+@[\\w.-]+)\n\nThe response is sent if the value of the attribute email does not match the format of the Regular Expression.\n\nYou can test the above on https://regex101.com/ by pasting the regex,([\\w.-]+@[\\w.-]+) under REGULAR EXPRESSION and typing in an email address under TEST STRING. Make sure you choose Javascript as the FLAVOR.\n\nSimilarly, add another route with the Webhook response with a filter to check if the phone is invalid:\n\nThe Body of the webhook assigns the value ‘false’ to the attribute phone_validation:\n\n{  \n\n\"set_attributes\":  \n\n{    \n\n\"phone_validation\": \"false\" \n\n }\n\n}\n\nThe filter contains the following condition:\n\nphone → Does not match pattern →  ^[+]?\\(?(\\d{1,3})\\)?[\\s-]?\\(?(\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}\n\nThe response is sent if the value of the attribute phone does not match the format of the Regex above.\n\nAdd the last route with the Data store module with a filter to check if both email and phone are valid, followed by a Webhook response.\n\nUnder Data store, select Add/replace a row as the Action:\n\nCreate a Data store if you haven’t already and set it up as shown below: (If you’re not familiar with this, please refer to Step 2 in this tutorial)\n\nThis is the most important step. Add a filter to check if both email and phone are valid. The filter contains the following condition:\n\nphone → Matches pattern →  ^[+]?\\(?(\\d{1,3})\\)?[\\s-]?\\(?(\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}\n\nAND\n\nemail → Matches pattern (case insensitive) → ([\\w.-]+@[\\w.-]+)\n\nLastly, add a webhook response with the following JSON that assigns the value ‘true’ to both email_validation and phone_validation:\n\n{  \n\n\"set_attributes\":  {\n\n\"email_validation\": \"true\",    \n\n\"phone_validation\": \"true\"\n\n  } \n\n}\n\nAt this point, you must save your scenario and rename the modules to keep the setup clean and toggle the Scheduling switch to ON.\n\nIf you have followed the tutorial correctly, your Chatfuel bot is all set to validate emails and phone numbers and store them in a Data store. If both are valid, you should see a new row as below:\n\nWow! If you’ve got this far, I hope you’ve learned a thing or two. Do leave a comment if you have queries or are stuck somewhere.\n\nHappy automating!\n\nIn this section\nConfigure a webhook to receive data\nCreate the flow in Chatfuel\nStep 3: Setup the router module in Make\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nConfigure a webhook to receive data\nCreate the flow in Chatfuel\nStep 3: Setup the router module in Make\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Example of a Default route configured for a router",
      "url": "https://www.make.com/en/help/tutorials/example-of-a-default-route-configured-for-a-router",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsExample of a Default route configured for a router\nExample of a Default route configured for a router\n\nThe below scenario:\n\nFilters email messages from specific senders and sends them to a corresponding Slack channel\n\nSends emails from all other senders to a specific Slack channel\n\nHere is how you set filters for the routes:\n\nBy ticking the Default route option when setting up a route filter, all emails that do not meet the filter conditions specified for the other routes continue on via this route. The emails are filtered in the order the routes were attached to the router. If you are not sure in which order they were attached, click the Auto-align button in the toolbar.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Calling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module",
      "url": "https://www.make.com/en/help/tutorials/calling-google-apis-via-the--http-make-a-oauth-2-0-request--module",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\n\nThis is a step-by-step guide on calling Google APIs like:\n\nGoogle Drive API\n\nGoogle Tag Manager API\n\nGoogle Docs API\n\nGoogle Ads API Beta\n\nGoogle My Business API\n\nGoogle Cloud Pub/Sub API\n\nGoogle Search Console API\n\nG Suite Groups Settings API\n\nG Suite Directory API\n\nBigQuery API\n\nGoogle Cloud Natural Language API\n\nG Suite Reseller API\n\nGoogle Sites\n\nGoogle Apps Script\n\nGmail API\n\nand many more\n\nOpen the Google Cloud Platform APIs & Services dashboard and login with your Google account.\n\nClick CREATE to create a project.\n\nEnter Project name and choose Location. Click CREATE.\n\nClick ENABLE APIS AND SERVICES.\n\nType the name of the API you want to call in the Search for API & Services field and click on it.\n\nClick ENABLE to enable the API.\n\nOpen the Google Cloud Platform APIs & Services Credentials OAuth consent screen tab.\n\nFill out the form as follows and click Save to save the settings:\n\nApplication name\n\n\t\n\ne.g. Make\n\n\n\n\nAuthorized domains\n\n\t\n\nMake.com\n\nIntegromat.com\n\nOpen the Google Cloud Platform APIs & Services Credentials.\n\nClick Create credentials dropdown and choose the OAuth client ID option from the menu.\n\nFill out the form as below and click Create to create the app:\n\nApplication type\n\n\t\n\nWeb application\n\n\n\n\nName\n\n\t\n\ne.g. Make\n\n\n\n\nAuthorized redirect URIs\n\n\t\n\nhttps://www.integromat.com/oauth/cb/app\n\nOAuth redirect URI domain\n\nNotice that the redirect URI starts with https://www.integromat.com instead of https://www.make.com. This is currently a known issue in Make.\n\nMake was formerly called Integromat, which means you can trust this URL as much as any Make URL.\n\nPlease make sure all your OAuth redirect URIs point to https://www.integromat.com/oauth/cb/oauth2.\n\nA dialog containing app's Client ID and Client Secret pops up.\n\nIn Make, create a new scenario.\n\nInsert the HTTP > Make an OAuth 2.0 request module.\n\nOpen the module's configuration and click Add button next to the Connection field to create a new connection.\n\nTick the Show advance settings  option.\n\nFill the connection setup as follows:\n\nFlow type\n\n\t\n\nAuthorization Code\n\n\n\n\nAuthorize URI\n\n\t\n\nhttps://accounts.google.com/o/oauth2/v2/auth\n\n\n\n\nToken URI\n\n\t\n\nhttps://www.googleapis.com/oauth2/v4/token\n\n\n\n\nScope\n\n\t\n\nAdd all the scopes the API call requires (check also OAuth 2.0 Scopes for Google APIs for a complete list of scopes):\n\nGoogle Drive API\n\nGoogle Tag Manager API\n\nGoogle Ads API Beta\n\nGoogle My Business API (step 6)\n\nGoogle Cloud Pub/Sub API - see Cloud Pub/Sub reference for per-method OAuth scopes (e.g. Method: projects.topics.publish)\n\nGoogle Search Console API\n\nG Suite Groups Settings API\n\nG Suite Directory API\n\nBigQuery API\n\nGoogle Cloud Natural Language API\n\nG Suite Reseller API\n\nGoogle Sites\n\nGoogle Apps Script\n\nGmail API\n\n\n\n\nScope separator\n\n\t\n\nSPACE\n\n\n\n\nClient ID\n\n\t\n\nThe content of the Here is your client ID field from step 11.\n\n\n\n\nClient Secret\n\n\t\n\nThe content of the Here is your client secret field from step 11.\n\n\n\n\nAuthorize parameters\n\n\t\n\nAdd access_type - offline key-value pair:\n\nThe connection setup should look like this:\n\nClick Continue.\n\nIf a popup titled \"This app isn't verified\" appears, click on the \"Advanced\" link and then on the \"Go to Make (unsafe)\" link:\n\nA window pops up. Review the permissions and click Allow.\n\nThe connection is successfully created.\n\nConfigure the module to make an API call:\n\nGoogle Drive API\n\nGoogle Tag Manager API\n\nGoogle Docs API\n\nGoogle Ads API Beta\n\nGoogle My Business API \n\nGoogle Cloud Pub/Sub API\n\nGoogle Search Console API\n\nG Suite Groups Settings API\n\nG Suite Directory API\n\nBigQuery API\n\nGoogle Cloud Natural Language API\n\nG Suite Reseller API\n\nGoogle Sites\n\nGoogle Apps Script\n\nGmail API\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to connect Email, Text Parser and Google Sheets",
      "url": "https://www.make.com/en/help/tutorials/how-to-connect-email,-text-parser-and-google-sheets",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nStep 1: Adding and configuring Email module\nStep 2: Search for Flow Control and add a Router\nStep 3: Using Text Parser Module\nStep 4: Add Google Sheets Modules\nStep 5: Clone Google Sheets module and linking it to the second Text Parser module\nLearn more\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to connect Email, Text Parser and Google Sheets\nHow to connect Email, Text Parser and Google Sheets\n\nScenario: Capture an email body in two separate tables in a spreadsheet using Regular Expressions (Regex) as search patterns. In this tutorial, the first pattern will search for a phrase and the second will search for the same phrase and an email address.\n\nLevel of difficulty: Medium (requires basic knowledge of Regular Expressions). Learn more about Regex.\n\nImplementation Time: Approximately 20 Minutes\n\nThe scenario that we will create in this tutorial will look like snapshot above.\n\nStep 1: Adding and configuring Email module\n\nSearch for Email and choose Watch emails as the Trigger.\n\nNote\n\nYou can connect a Google account using the Email module. You can also use the inbuilt Gmail module instead.\n\nConnect either a Google account or any other IMAP based email client (Hotmail, Outlook, Zoho etc). We use a Google account as an example.\n\nOnce connected, select a Folder whose incoming emails you wish to watch (e.g. all email, inbox).\n\nUnder Criteria, choose if you want to watch all emails, or if you want to narrow it down to only read or only unread email.\n\nYou can filter emails by the Sender email address, Recipient email address, Subject and Phrase, which enables you to watch only relevant emails.\n\nYou can also choose to mark fetched emails as read or unread.\n\nSet the Maximum number of results based on the volume of messages you receive. We recommended setting a low value and run the scenario more often.\n\nClick OK to save your settings.\n\nOnce the configuration is done, the system asks you to choose where to start watching your emails. Click OK to confirm.\n\nStep 2: Search for Flow Control and add a Router\n\nYou can add router after any module to split or duplicate the data before sending it to the next module. Here, we have used a Router to send the Email body text to 2 separate tables in a Google Sheet. More on that in the next step.\n\nStep 3: Using Text Parser Module\n\nAdd Text Parser > Match Pattern transformer to search for a phrase in an email.\n\nEnter Pattern. The search pattern is a regular expression and has to be written as text\\sparser\\smodule\n\nMultiline is useful if your text contains several lines and you need to search for the pattern in each line. For this tutorial we need to search for the pattern in the entire email body text, hence we will leave it unchecked.\n\nIn the Text field, select the attribute ‘Text content’ from the list. This attribute stores the text from the email body in which we will search for the pattern. Click OK to save.\n\nAdd another Match Pattern that searches for the same phrase and an email address. This is particularly useful if you have customer accounts with multiple users. To save time, simply clone the Text Parser module you just created and link it to the Router.\n\nEdit the pattern as below:\n\ntext\\sparser\\smodule.+\\s([\\w.-]+@[\\w.-]+)\n\nThis pattern searches for the phrase “text parser module” and an email address like jim.morrison@gmail.com and returns only the email address. It’s important to write your regex in accordance with the specification of the email addresses you accept.The pattern above works for most standard email addresses, e.g. name.surname@gmail.com.\n\nPlease note that while it’s important to write your regex in accordance with the specification of the email addresses you accept, the one above takes care of most standard email addresses.\n\nTo search only for email address, use the regex below:\n\n([\\w.-]+@[\\w.-]+)\n\nTo search only for phone numbers using the regex below:\n\n^[+]?\\(?(\\d{1,3})\\)?[\\s-]?\\(?(\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}\n\nThe above pattern takes care of most common formats in which a phone number is written.\n\nTo test your patterns, we recommend using https://regex101.com with javascript as the Flavor.\n\nThe rest of the configuration remains the same as the one before.\n\nStep 4: Add Google Sheets Modules\nNote\n\nInstead of Google Sheets, you may use another app like Airtable or a CRM such as InfusionSoft.\n\nCreate a spreadsheet with the columns under which want to capture the user data. You can also use an existing file.\n\nAs an example, we have created one called “Email Data: Support Ticket” with Sender Name, Sender Email and Email Content as columns. We have named the worksheet ‘contains: text parser module’.\n\nAdd the Google Sheets > Add a row module.\n\nConnect your Google account (if you haven’t already). Choose the File you created earlier, followed by choosing the Worksheet in which you’re capturing the data. My setup looks like this:\n\nMap the attributes in the relevant fields (columns) to finish the module setup.\n\nStep 5: Clone Google Sheets module and linking it to the second Text Parser module\n\nGo to your Spreadsheet, duplicate the worksheet you created earlier and give it a name.\n\nAdd another column to store the email address that the email body contains.\n\nClick on the cloned Google Sheets module to configure the setup.\n\nChange the worksheet to the new one you just created.\n\nMap the output from the Match Pattern module ($1) to the column where you wish to store the email address.\n\nClick OK, save the scenario and run it to test.\n\nSend two separate emails to the connected email address as follows:\n\nContaining the phrase “text parser module” (and no email address)\n\nContaining the above phrase and an email address.\n\nIf there are no errors in your setup, the first worksheet captures all emails containing the phrase “text parser module”. The second worksheet captures only those that contain the phrase “text parser module” and an email address. You may refer to the screenshots below.\n\nWorksheet 1\n\nWorksheet 2\n\nLearn more\n\nFree exercises to learn about Regular Expressions\n\nLearn about Phone Number Matching using Regex\n\nLearn about Email Matching using Regex\n\nTest your regular expressions\n\nIn this section\nStep 1: Adding and configuring Email module\nStep 2: Search for Flow Control and add a Router\nStep 3: Using Text Parser Module\nStep 4: Add Google Sheets Modules\nStep 5: Clone Google Sheets module and linking it to the second Text Parser module\nLearn more\nHow to connect Email, Text Parser and Google Sheets\nStep 1: Adding and configuring Email module\nStep 2: Search for Flow Control and add a Router\nStep 3: Using Text Parser Module\nStep 4: Add Google Sheets Modules\nStep 5: Clone Google Sheets module and linking it to the second Text Parser module\nLearn more\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Automate invoicing with invoice ninja",
      "url": "https://www.make.com/en/help/tutorials/automate-invoicing-with-invoice-ninja",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsAutomate invoicing with invoice ninja\nAutomate invoicing with invoice ninja\n\nInvoice Ninja is a popular open-source tool that takes care of invoicing, payments, track expenses, proposals, and time-tracking of tasks. To learn more about Invoice Ninja's history, visit this page.\n\nMake offers a whole lot of modules and ready-made templates for Invoice Ninja. All the triggers, actions, and templates can be found on the application module documentation.\n\nThe video below covers 3 very useful integrations that help you take the work out of invoicing:\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Use JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)",
      "url": "https://www.make.com/en/help/tutorials/use-json-generator-to-create-a-json-data-structure-and-make-an-http-request-using-an-api-key--sendgrid-example-",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nRelevant points to note\nVideo tutorial\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\n\nSummary:\n\nUse the JSON Generator in the 'Create JSON' module to automatically add a data structure using a sample JSON. Learn how to modify it and make an HTTP request using an API key to connect to a third-party service. In this tutorial, we have used SendGrid and have shown how to do the following:\n\nConnect to SendGrid over HTTP\n\nSend an email using SendGrid directly from the HTTP module on Make\n\nSend an email using a template on SendGrid\n\nRelevant points to note\n\nSendGrid's authentication takes place using an API Key. Hence we use the 'Make a request' HTTP module on Make.\n\nTo send an email directly from the HTTP module, add the 'content' parameter to your JSON data structure. As you can see below, 'content' is an array of collections; 'type' and 'value' are where you need to define the content type and the actual content respectively. Also, it is a required parameter and will result in an error if left blank.\n\nTo send an email using a template, you need to add the 'template_id' parameter. As you can see in the image below, 'template_id' is a simple string and is an optional parameter and hence why it can be left blank.\n\nVideo tutorial\n\nNote: if the video is not working for you, open it directly in YouTube.\n\nHere's the link to the template used in this scenario and you can refer to the SendGrid API Docs here.\n\nPlease note that Make only supports V3 of the SendGrid API.\n\nIn this section\nRelevant points to note\nVideo tutorial\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nRelevant points to note\nVideo tutorial\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to connect Airtable and Google contacts and synchronize contacts between these services",
      "url": "https://www.make.com/en/help/tutorials/how-to-connect-airtable-and-google-contacts-and-synchronize-contacts-between-these-services",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nAdding Google Contacts\nAdding Airtable\nConfiguring the scenario\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to connect Airtable and Google contacts and synchronize contacts between these services\n\nOne of the many great features of Make is the ability to interconnect services. In the following guide, we will show you how to connect Airtable to Google Contacts and synchronize a list of contacts between these services.\n\nAdding Google Contacts\n\nGo to your dashboard and click Create a new scenario.\n\nSelect Google Contact and then Watch contacts module.\n\nIn the module, click Add to add a connection. A dialog pops up asking you to name your connection. You can enter whichever name you like. We recommend using names from which you can derive which Google account the connection relates to, in case you forget it. Your Google email or name is a good choice.\n\nClick Save. A window pops up asking you to select which Google account you want to use. Select the appropriate account and approve access for Make.\n\nAdding Airtable\n\nAdd a new module to the scenario, select Airtable and Create a record module.\n\nAdd a connection to Airtable in the same way you did with the Google Contacts module.\n\nAfter clicking the Add button, the system prompts you to enter your Airtable email, password, and API token.\n\nIn order to get your API token, head to https://airtable.com/account, scroll down a bit to find the API token field. If you haven't used Airtable's API before, you don't have an API token. But it is easy to generate one - just press the Generate token link and Airtable generates your API token. If you already have a token, there is no need to regenerate a new one.\n\nCopy your API token over to the API token field in Make and click Save.\n\nConfiguring the scenario\n\nAfter your Google and Airtable accounts have been linked to Make, you can continue setting up your scenario.\n\nIn Airtable, select a table that stores your contacts.\n\nThe same fields show in Make as in your table. In our example, there are only 3 fields: Name, Email, and Phone. When you click on the field, a number of options show on how to fill this field.\n\nFor the Name field, you can use Google Contacts' Full Name field. Since Google Contacts allows you to store multiple emails for a single contact, we will select only the first one.\n\nPress the Airtable Email field, then, in the newly opened dialog find the Emails[] field, click a little triangle to the right of Emails[], this will expand the Emails[] field, and click on Email.\n\nFill in the Airtable Phone field the same way.\n\nYour Airtable module configuration should now look like this:\n\nPress the Ok to save and close the configuration dialog.\n\nYour scenario should look like this:\n\nRun your scenario.\n\nIf you have some contacts in Google Contacts and if everything has been processed without errors, Watch contacts module generates some bundles. Also Create a record module successfully creates new records out of the bundles which the Watch contacts module generated.\n\nGo to your table and verify that the data is there.\n\nIn this section\nAdding Google Contacts\nAdding Airtable\nConfiguring the scenario\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nAdding Google Contacts\nAdding Airtable\nConfiguring the scenario\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to fully reset your Google connections",
      "url": "https://www.make.com/en/help/tutorials/how-to-fully-reset-your-google-connections",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to fully reset your Google connections\nHow to fully reset your Google connections\n\nIf you are experiencing serious issues with Google connections, you may try to follow this guide to completely reset all your Google connections in Make.\n\nWarning\n\nAll your scenarios using Google connections will be rendered non-functional until you recreate the missing connections in the last step of this guide.\n\nIn Make, open your connections by clicking Connections in the left sidebar menu.\n\nRemove all the Google connections by clicking the Delete button:\n\nSign out from all Google accounts: https://accounts.google.com/Logout\n\nLog in with the Google account you would like to use with Make: https://accounts.google.com/ServiceLogin\n\nOpen apps with access to your Google account: https://myaccount.google.com/permissions\n\nLocate the Make app in the list:\n\nClick the Make app.\n\nClick REMOVE ACCESS:\n\nConfirm the removal by clicking OK in the pop-up dialog.\n\nTo recreate your Google connections In Make, open each scenario and each Google module in it. If the module's connection is missing and no connection exists then create it, otherwise just choose the existing connection.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to iterate columns of a Google Sheet worksheet",
      "url": "https://www.make.com/en/help/tutorials/how-to-iterate-columns-of-a-google-sheet-worksheet",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsHow to iterate columns of a Google Sheet worksheet\nHow to iterate columns of a Google Sheet worksheet\n\nIn some cases it is beneficial to iterate a row's columns, i.e. to convert each cell in a row into an individual bundle. If you hover over items in the Google Sheets > Search Rows module's output, you can notice that the raw names of items are in fact zero based indexes:\n\nUsing the Repeater module to cycle from 0 to the number of columns minus 1 followed by a module employing the get(bundle;3. i) formula seems like a straightforward solution:\n\nThe only obstacle is that the first parameter of the get() function should be the whole bundle, which is currently not available in the mapping panel. Nevertheless, you can use the Array aggregator module to push the bundle into a single item array (by exploiting its grouping feature) to which the get() function can be applied:\n\nHere is the complete scenario:\n\nThe formula in the last module contains two nested get() functions. The inner function gets the whole bundle (first item in the single item array), the outer one returns the i-th column from the row.\n\nget(get(4. Array;1);3. i)\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Calling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module",
      "url": "https://www.make.com/en/help/tutorials/calling-microsoft-graph-rest-api-via-the--http-make-a-oauth-2-0-request--module",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nPrerequisites\nRequired information\nCreate an application in the Azure portal\nFind your connection URIs in the Azure portal\nConfigure the HTTP > Make an OAuth 2.0 request module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\n\nCalling the Microsoft Graph REST API from Make's HTTP > Make an OAuth 2.0 request requires you to:\n\nCreate an application in the Azure portal.\n\nFind your connection URIs in the Azure portal.\n\nConfigure the HTTP > Make an OAuth 2.0 request module.\n\nPrerequisites\n\nA Make account\n\nAdmin access to the Azure portal\n\nRequired information\n\nBoth the Azure portal and Make require information to create a connection:\n\nValues entered in Make created or found in the Azure portal:\n\nValue required in Make\n\n\t\n\nValue as named in Azure portal UI\n\n\n\n\nClient ID\n\n\t\n\nApplication ID\n\n\n\n\nClient secret\n\n\t\n\nSecret ID Value\n\n\n\n\nAuthorize URI\n\n\t\n\nOAuth 2.0 authorization endpoint (v2)\n\n\n\n\nToken URI\n\n\t\n\nOAuth 2.0 token endpoint (v2)\n\nValues entered in the Azure portal related to Make:\n\nValue required in the Azure portal\n\n\t\n\nValue to enter\n\n\n\n\nRedirect URI (Web)\n\n\t\n\nhttps://www.integromat.com/oauth/cb/oauth2\n\nCreate an application in the Azure portal\n\nTo create your OAuth connection for Microsoft, complete these steps in the Azure portal:\n\nRegister your web application.\n\nCreate a client secret.\n\nGrant the required permissions.\n\nRegister your web application in MS Azure\nCreate a client secret\nGrant permissions\nFind your connection URIs in the Azure portal\n\nMake's HTTP > Make an OAuth 2.0 request requires URIs to authorize your API calls and obtain a token. You can find these URIs in the Azure portal:\n\nClick App registrations.\n\nSelect the app you created in the above procedure and open its Overview page.\n\nClick Endpoints.\n\nIn the pop-up, use the Copy to clipboard button to copy and save or enter the following in the module configuration on Make:\n\nValue required in Make\n\n\t\n\nValue as named in Azure portal UI\n\n\n\n\nAuthorize URI\n\n\t\n\nOAuth 2.0 authorization endpoint (v2)\n\n\n\n\nToken URI\n\n\t\n\nOAuth 2.0 token endpoint (v2)\n\nConfigure the HTTP > Make an OAuth 2.0 request module\n\nIn Make dashboard, go to Create a new scenario.\n\nInsert the HTTP > Make a OAuth 2.0 request module.\n\nOpen the module's configuration and click Add next to the Connection field to create a new connection.\n\nClick Show advanced settings.\n\nFill the connection setup as follows:\n\nFlow type\n\n\t\n\nSelect Authorization Code.\n\n\n\n\nAuthorize URI\n\n\t\n\nEnter the OAuth 2.0 authorization endpoint (v2) URI you found previously.\n\n\n\n\nToken URI\n\n\t\n\nhttps://login.microsoftonline.com/common/oauth2/v2.0/token\n\n\n\n\nScope\n\n\t\n\nClick + to add each permission you granted previously.\n\nCheck that:\n\nAll necessary permissions are listed.\n\nEach permission is a separate item.\n\n\n\n\nScope separator\n\n\t\n\nSelect SPACE.\n\n\n\n\nClient ID\n\n\t\n\nEnter the Application ID from the app you created in the Azure portal.\n\n\n\n\nClient Secret\n\n\t\n\nEnter the client secret you created previously.\n\n\n\n\nAuthorize parameters\n\n\t\n\nEnter the following keys and values:\n\nKey\n\n\t\n\nresponse_mode\n\n\n\n\nValue\n\n\t\n\nquery\n\nKey\n\n\t\n\nprompt\n\n\n\n\nValue\n\n\t\n\nconsent\n\n\n\n\nRefresh token parameters\n\n\t\n\nEnter the following key and value\n\nKey\n\n\t\n\nscope\n\n\n\n\nValue\n\n\t\n\nEnter all scopes you have in the Scopes field separated spaces.\n\nExample:\n\noffline_access opened profile User.Read\n\n\n\n\nToken placement\n\n\t\n\nSelect In the header.\n\n\n\n\nHeader token name\n\n\t\n\nSelect Bearer.\n\nClick Continue.\n\nA window pops up. Review the permissions and click Accept.\n\nThe connection is successfully created. You can perform your API call.\n\nIn this section\nPrerequisites\nRequired information\nCreate an application in the Azure portal\nFind your connection URIs in the Azure portal\nConfigure the HTTP > Make an OAuth 2.0 request module\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nPrerequisites\nRequired information\nCreate an application in the Azure portal\nRegister your web application in MS Azure\nCreate a client secret\nGrant permissions\nFind your connection URIs in the Azure portal\nConfigure the HTTP > Make an OAuth 2.0 request module\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Using Telegram Bot with Make",
      "url": "https://www.make.com/en/help/tutorials/using-telegram-bot-with-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nWatch the video\nGet the Telegram desktop app\nCreate a Telegram bot\nAdd your bot to the channel or group\nFind the Chat ID\nUse case 1: Send new RSS feed items as Telegram messages\nUse Case 2: Send Telegram messages to a Discord server\nUse Case 3: Send new form submissions to Telegram\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUsing Telegram Bot with Make\nUsing Telegram Bot with Make\n\nTelegram is one of the most popular apps Make customers use. This tutorial guides you through the steps to set up Telegram to work with Make.\n\nYou can use Telegram in your Make scenarios to achieve the following basic use cases:\n\ntrigger a scenario with a Telegram message and send the message data to another app\n\nget data from other apps and post a message to a Telegram channel or group\n\nTo use a Telegram bot in Make scenarios, you will need to:\n\nCreate a Telegram bot and store its API token\n\nAdd the bot into a chat as an admin\n\nFind the Chat ID for the channel or group\n\nCreate the Make scenario using an API token and Chat ID\n\nWatch the video\nGet the Telegram desktop app\n\nThis tutorial explains the process using the Telegram desktop app, which makes the configuration easier. Download the Telegram desktop app. You can also use the mobile app.\n\nCreate a Telegram bot\n\nYou will interact with Telegram groups or channels using a Telegram bot. You need to create the bot and get its API token, which you will then use when connecting Telegram to Make.\n\nUse the search box in Telegram to find the user BotFather. The user's handle is @BotFather. Watch out - the other users or groups with the same name are spam bots.\n\nClick Start.\n\nIn the message you receive, click /newbot or type /newbot into a message.\n\nType a name for the bot and send the message.\n\nType a unique username for the bot and send the message.\n\nIn the message from BotFather, find the token to access the HTTP API. Copy and store the token somewhere, e.g., in a text file.\n\nNote: To post in a channel or group, your bot must be an administrator of the channel or group. In the Manage channel or Manage group dialog, click Administrators and add your new bot with all permissions.\n\nAdd your bot to the channel or group\n\nYour bot must be an administrator of the channel or group if you want the bot to read and post messages on your behalf. The same instructions apply to both setting up channels and setting up groups.\n\nOpen the channel or group where you want to add the bot.\n\nClick the three dots in the top-right corner of the channel or group, and then click Manage channel or Manage group.\n\nIn the dialog that appears, click Administrators, and then click Add administrator.\n\nSearch for your bot using its name or its handle.\n\nIn the search results, click the bot, and then click OK.\n\nOptionally, set up the bot's permissions. We recommend you leave the permissions at their defaults. When done with setting up permissions, click Save.\n\nYour bot is now a member and an administrator of the channel or group. This allows the bot to read and post messages on your behalf.\n\nFind the Chat ID\n\nTo post messages into Telegram channels or groups, you need to know the Chat ID. You will use the Chat ID when setting up Make to read and send messages.\n\nFind the Chat ID for Public channels\n\nClick the three dots menu in your channel and select View channel info.\n\nFind the link to the channel beginning with t.me/ \n\nThe text that comes after t.me/ is your Chat ID. Example: if the link is t.me/exampleChat, the Chat ID is exampleChat.\n\nFind the Chat ID for Private channels and Groups\n\nPrivate channels and Groups don't have a link from which you could easily find the Chat ID. This is why you need to find the Chat ID by sending a Telegram message to a Make scenario.\n\nIn Make, create a new scenario.\n\nAdd the Telegram Bot > Watch Updates module.\n\nUnder Webhook, click Add. Type a name for the webhook.\n\nYour bot will send messages to this webhook. Make will process incoming messages to this webhook based on your scenario schedule. Learn more about webhooks. Learn more about scheduling scenarios.\n\nIn the Create a webhook dialog, under Connection, click Add.\n\nType a name for the connection, and then paste the API key that you received from BotFather. Save the connection settings and the webhook settings.\n\nRight-click the Watch Updates module, and then click Run this module only.\n\nMake starts listening for a new message.\n\nIn Telegram, send a message to the channel or group whose ID you want to find. Your bot must be an administrator of this channel or group.\n\nMake receives the message through the webhook you set up. A number appears next to the module. Clicking this number allows you to inspect the details of the message.\n\nClick the number next to the Watch Updates module. Find the Chat ID under Message > Chat > ID. Save the ID for later use, including the minus sign at the beginning.\n\nUse case 1: Send new RSS feed items as Telegram messages\n\nRSS feeds are files that contain a summary of updates from a blog, a news site, or any other website that chooses to publish an RSS feed. In this use case, you will create a scenario, which will get updates from an RSS feed and send them as Telegram messages.\n\nStep 1: Add a trigger module: Watch RSS feed items\n\nA trigger module launches a scenario whenever something happens. In this use case, the trigger will watch for updates to an RSS feed. When a new item appears on that feed, the scenario will run and send that item to your Telegram chat.\n\nCreate a new Make scenario.\n\nClick the plus sign to add the first module. From the list of apps, select RSS, and then select Watch RSS feed items. Read more about what you can do with RSS.\n\nIn the module settings, paste the URL address of your favorite feed. Leave the other settings as they are for now.\n\nIf you don't have a favorite feed, try this out: https://www.nasa.gov/rss/dyn/breaking_news.rss\n\nClick OK. \n\nIn the Choose where to start dialog, select one of the following options:\n\nFrom now on: Make will process only those items that will be added to the feed from now on. Select this option if you don't want Make to send Telegram messages for the items that were in the feed before you created the scenario.\n\nRSS feed items from after a specific date: Make will start retrieving and processing items published after the date you selected.\n\nAll RSS feed items: Make will retrieve and process all items that are available in the RSS feed.\n\nSelect the first RSS feed item: shows the latest items and lets you choose one of them as the starting point. Make will retrieve and process the selected item and all newer items.\n\nTo be able to test the scenario, we recommend you select a specific item. This way you ensure that there are some items to process when testing the scenario. If you selected From now on, Make would not retrieve older items and you would have to wait for the RSS feed owner to publish new items.\n\nClick OK to save the settings.\n\nRight-click the module, and then click Run this module only.\n\nThis retrieves one item from the RSS feed. You can click the number next to the module to view what the results look like. Running a module once also helps Make identify what types of data to expect from that particular module, which in turn helps you work with that data in subsequent modules more easily.\n\nStep 2: Add an action module: Send a text message or a reply\n\nNow that you have a module that reads data, you will add another module, which will send the data to Telegram.\n\nClick Add another module, then find the Telegram Bot app. Click that app, and then click Send a Text Message or a Reply.\n\nCreate a new connection or use the connection that you created when following instructions in Find the Chat ID for Private channels and Groups\n\nEnter the Chat ID of the chat where you want to post. Follow the instructions in Find the Chat ID.\n\nUse the Text field to construct your message. You can type text, as well as map fields from the RSS module.\n\nWhen you place the cursor into the Text field, Make offers a dialog where you can insert data retrieved by the RSS module into the Telegram module. This is a key concept in Make called mapping, which allows passing data from one app to another.\n\nMapped items appear in the color of the module where they originate and are marked with the number of the module.\n\nSee the following screenshot for an example of how to construct a message using typed text, Markdown formatting, and mapped items from the RSS module.\n\nIn Parse mode, select Markdown. \n\nClick OK.\n\nStep 3: Test and activate the scenario\n\nTo test the scenario, click Run once. The scenario retrieves another item from the RSS feed (if there are any) and sends it to your Telegram chat. Then, you click the numbers above the modules to inspect what data the scenario retrieved and how the data was processed.\n\nBefore you activate the scenario, click the clock icon on the RSS module. In the Schedule setting dialog that appears, tell the RSS module when to check for new items in the RSS feed. If there are items to process at the scheduled time, the scenario will run and process the items.\n\nFinally, click the ON/OFF button in the bottom left corner to activate the scenario. From now on, the scenario will automatically check for new items in the RSS feed based on the schedule you set up.\n\nUse Case 2: Send Telegram messages to a Discord server\n\nDiscord and Telegram are the two most used tools among online communities. Many people use Make to send Telegram messages to Discord or the other way around.\n\nSimilarly to the RSS feed use case, you will add a trigger module, which will watch for new messages in your Telegram chat. Then, you will add an action module that will resend the Telegram message to Discord.\n\nTo build this automation, you need the following\n\na Telegram bot\n\na Telegram chat where the bot is an admin\n\na Discord server\n\na Discord channel to which you want to send the messages. \n\nCreate a new scenario.\n\nAdd the module Telegram Bot > Watch Updates. Configure the module the same way you did in Find the Chat ID.\n\nClick Add a new module. find Discord, and then select the Post a Message module.\n\nUnder Connection, click Add.\n\nIn the dialog that appears, log in to your Discord account, and then select your server and the channel to which you want to post messages. Click Continue.\n\nLeave the permission settings at their defaults and click Authorize.\n\nTest the scenario by clicking on ‘Run Once’ and send a message to the related Telegram chat. If the message was sent to Discord without any problems, you can activate the scenario by turning the switch on the left bottom corner on. \n\nUse Case 3: Send new form submissions to Telegram\n\nIn this use case, you will create a scenario, which sends the summary of a user-submitted form to a Telegram chat. You can use this automation to send notifications for your new leads. In this example, use the popular Google Forms.\n\nTo work with your form responses, create a spreadsheet that will store the form submissions.\n\nOpen your Google form.\n\nSelect the Responses tab\n\nClick Create Spreadsheet.\n\nThe spreadsheet is created from the form and you can now proceed to work with your form responses in Make.\n\nAdd the Google Forms > Watch Responses trigger module\n\nCreate a new scenario and add the Google Forms > Watch Responses module.\n\nUnder Connection, click Add, and then follow the instructions on-screen. Alternatively, use an existing connection.\n\nChoose the spreadsheet that you created to store the responses. Select the sheet that contains the responses. Set the Limit to 1.\n\nThe Limit setting of 1 tells Make to process one form response at a time.\n\nClick OK.\n\nChoose where to start getting data. If this is a new form, you can select All. Then click OK.\n\nAdd the Telegram Bot > Send a text message or a reply module\n\nClick Add another module, and then select Telegram Bot > Send a text message or a reply.\n\nUnder Connection, use the same connection you created earlier.\n\nEnter the Chat ID.\n\nCreate the message. Use mapping to insert the data from the Google form.\n\nClick OK.\n\nTo test the scenario, send a new submission to your form. Then click Run Once.\n\nAfter running the scenario, you receive the Telegram message as configured. If you don't receive a message, make sure that there are new form submissions to process in your Google form.\n\nWhen you're satisfied with the test, you can set up a schedule and activate the scenario.\n\nIn this section\nWatch the video\nGet the Telegram desktop app\nCreate a Telegram bot\nAdd your bot to the channel or group\nFind the Chat ID\nUse case 1: Send new RSS feed items as Telegram messages\nUse Case 2: Send Telegram messages to a Discord server\nUse Case 3: Send new form submissions to Telegram\nUsing Telegram Bot with Make\nWatch the video\nGet the Telegram desktop app\nCreate a Telegram bot\nAdd your bot to the channel or group\nFind the Chat ID\nUse case 1: Send new RSS feed items as Telegram messages\nStep 1: Add a trigger module: Watch RSS feed items\nStep 2: Add an action module: Send a text message or a reply\nStep 3: Test and activate the scenario\nUse Case 2: Send Telegram messages to a Discord server\nUse Case 3: Send new form submissions to Telegram\nAdd the Google Forms > Watch Responses trigger module\nAdd the Telegram Bot > Send a text message or a reply module\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Using Google Sheets with Make",
      "url": "https://www.make.com/en/help/tutorials/using-google-sheets-with-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nWatch the video\nUse case 1: Trigger a workflow when a new row is added to a spreadsheet and send that data to another app\nUse case 2: Get data from other apps and add it to Google Sheets as new rows\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUsing Google Sheets with Make\nUsing Google Sheets with Make\n\nGoogle Sheets is one of the most popular apps Make customers use in their daily workflows.\n\nThis tutorial shows you how to connect your Google Sheets spreadsheets to Make and build automated workflows (we call these scenarios).\n\nSpreadsheets have a wide range of usage in everyday admin work - but sometimes they may fall short on certain capabilities - especially when you’re using spreadsheets to store data that can be actionable in some other apps or tools.\n\nYou can use Google Sheets in Make scenarios to achieve the following basic use cases:\n\nTrigger a workflow when a new row is added to a spreadsheet and send that data to another app;\n\nGet data from other apps and add it to Google Sheets as new rows.\n\nWatch the video\nUse case 1: Trigger a workflow when a new row is added to a spreadsheet and send that data to another app\n\nChoose a trigger\n\nConnect to Google Sheets\n\nConfigure the module\n\nChoose where to start\n\nSelect the action module\n\nMap data from Google Sheets\n\nTest your scenario\n\nActivate your scenario\n\nStep 1 - Choose a trigger\n\nThe first step in any scenario is choosing what will start your scenario, which is called a trigger.\n\nAs you can see in the screenshot below, Google Sheets has 3 types of triggers:\n\nWatch Rows - Watches for newly added rows\n\nWatch Changes - Watches changes of a specific cell (Google Sheets Add-on required)\n\nPerform a Function - Performs a Make function and returns the data to the sheet (Google Sheets Add-on required)\n\nIn our example, we use Watch Rows because we want Make to watch for new rows being added to our spreadsheet.\n\nThe sheet we use in this tutorial has these columns:\n\nEmployee name\n\nEmail\n\nStarting date\n\nTeam\n\nWe want to perform an action each time a new employee is added to the spreadsheet. These actions can include informing your office manager that a new employee is starting, assigning onboarding tasks to the new employee’s manager, etc.\n\nStep 2: Connect to Google Sheets\n\nIf you already authenticated your connection inside Make, the dropdown shows the previously connected account as an option.\n\nIf you are using Google Sheets on Make for the first time, follow the steps below.\n\nIn Connection, click Add button to add a new connection. You need the connection to allow Make to work with your spreadsheets.\n\nA pop-up appears.\n\nEnter your connection name. \n\nIn case you have several Google accounts, we recommend naming your connections differently so you can distinguish them.\n\nYou can also leave the connection name field as is.\n\nClick Save.\n\nA new window appears.\n\nSelect and click your Google account.\n\nA new window appears.\n\nClick Allow to allow Make to access your Google account.\n\nYou added your connection. Your new connection appears under the Connection field.\n\nStep 3: Configure the module\n\nIn this step, we need to complete the fields required by the module.\n\nUnder Choose a Drive, select your drive.\n\nIn Spreadsheet ID, select your spreadsheet.\n\nIf your spreadsheet is located in the folder, first select the folder. Then, click the plus sign to select the specific spreadsheet in the folder.\n\nIn Sheet, select the sheet name.\n\nSelect whether your table contains headers. Our table contains headers, but yours doesn't have to.\n\nIn Row with headers, enter the range of the table (headers included).\n\nIn Limit, enter the number of results you’d like to obtain. Whenever this workflow runs, it will return this number of results.\n\nClick OK to save.\n\nStep 4: Choose where to start\n\nChoose where Make should start looking for data to process.\n\nFor Google Sheets, you can choose:\n\nSince specific ID - You have to provide a parameter.\n\nAll - We process all records found in the spreadsheet.\n\nChoose manually - You can pick the one you’d like to process first.\n\nWe use All, which is useful when testing new scenarios.\n\nClick OK to save.\n\nYour Google Sheets trigger module is completed.\n\nBy default, Make checks for new rows every 15 minutes and processes all the records created since the last time it checked. If you want to set a different schedule for your scenario, see step 6.\n\nStep 5: Select the action module\n\nDepending on what you want to do next, select your next module. You can send the data from Google Sheets to any of our 1000+ apps.\n\nWe will add a Slack module which will send a new Slack message to the office manager letting them know a new employee is starting.\n\nHover over the right part of the Google Sheets module. The plus sign appears.\n\nClick Add another module. An empty module appears.\n\nSearch for and click the module you want. In this case, select Slack > Create a message module.\n\nIf you already authenticated your Slack connection inside Make, the dropdown shows the previously connected account as an option.\n\nIf you are using Slack on Make for the first time, you need to follow the instructions below to add and authorize the Slack connection.\n\nIn Connection, click Add.\n\nA pop-up appears.\n\nConnect as a user if you want Slack to send messages in your name.\n\nConnect as a bot if you want Slack to send messages as the Make app (bot).\n\nEnter your connection name and click Save.\n\nA new window appears. Sign in to your Slack.\n\nClick Allow to authorize Make to access Slack.\n\nSelect if you want to enter a channel ID or name manually or choose from the list.\n\nEnter or select a channel you want to send the message to.\n\nIt can be a public channel, a private channel, or an IM channel.\n\nTo select a user, use the IM channel option and then select a user name. You can first try sending the message to yourself.\n\n(Optional step)\n\nIf you chose the Bot option, you can define a custom bot name in the Advanced settings of this module.\n\nStep 6: Map data from Google Sheets\n\nMapping means telling Make how it should move data from one app to another.\n\nWe want to compose a Slack message with the details of the new hire.\n\nClick the Text field.\n\nThe mapping dialog opens.\n\nSelect data from the spreadsheet you want to use in the Slack message.\n\nClick the variables from the spreadsheet (they will have the same color as the module) to add them to the message text.\n\nFor example:\n\nHi, our new [Team] hire [Employee name] is starting on [Starting date]. Please prepare everything for their first day, thank you!\n\nwill produce this as a result:\n\nHi, our new Marketing hire Sarah is starting on 14-Jul-2022. Please prepare everything for their first day, thank you!\n\nConfirm OK to save the settings.\n\nStep 7: Test your scenario\n\nTo verify that everything works as expected, test your scenario by clicking the Run once button.\n\nIf your scenario runs successfully, green checkmarks appear under the modules. Also, the messages(s) are delivered on Slack.\n\nThe modules should also have bubbles above them indicating how many operations the scenario used. Every time an app performs an action such as reading or writing data, it consumes an operation. Learn more about operations.\n\nClick the bubble above the module to see the details of what the module just processed. The Google Sheets module in the screenshot below shows that it processed two rows of data (bundle 1 and bundle 2).\n\nThe Slack module shows that it sent 2 messages. Each message contains data from one of the rows from Google Sheets.\n\nStep 8: Activate your scenario\n\nIf the scenario works as expected, you can activate it to make it run on a schedule.\n\nClick the Schedule button or the clock icon next to the Google Sheets module.\n\nChoose how often the scenario should run. The default is every 15 minutes.\n\nActivate the scenario using the Scheduling switch.\n\nSave the scenario.\n\nThat is it! You now have a working scenario that does a repetitive task for you!\n\nUse case 2: Get data from other apps and add it to Google Sheets as new rows\n\nThis use case has 2 app modules - Gmail and Google Sheets. The Gmail module looks for new emails and filters those that have “Expense Report” in their subject line. Then, the Google Sheets module adds matching emails as new rows in a spreadsheet, where we can track if an expense report was paid or not.\n\nWatch for incoming emails and add a row to Google Sheets\n\nFollow these steps to build the scenario:\n\nChoose Gmail as the trigger module\n\nMap the variables from Gmail in the Google Sheets module\n\nChoose where to start\n\nTest the scenario\n\nDefine the scenario schedule\n\nActivate the scenario\n\nStep 1: Choose Gmail as the trigger module\n\nSelect the Gmail app and choose the trigger Watch Emails from the list. Then proceed as follows:\n\nConnect your Google Account if you haven’t done so before.\n\nNote: If you are using a personal Gmail account, there are some extra connection steps required for using Gmail and Google Drive apps. Learn more.\n\nSelect the folder to monitor in your inbox.\n\nChoose Gmail filter as the filter type.\n\nAdd the keyword to use for filtering in the “Query” field.\n\nWe want Gmail to return only emails with “Expense Report” phrase in the subject line. So we enter “Expense report” in the \"Query\" field.\n\nYou can enter any other words or phrases you want Gmail to filter. For example “Invoice”, “Demo request”, etc.\n\nSelect whether you want Make to mark the emails as read or unread when fetched.\n\nSelect the maximum number of results you’d like to return per execution (one run of the scenario).\n\nGmail module configuration\n\nStep 2: Map the variables from Gmail in the Google Sheets module\n\nThe process of mapping consists of using data from the previous module and adding it to subsequent modules in your scenario. In this example, our spreadsheet for tracking expenses looks like this:\n\nWe have these columns in our spreadsheet:\n\nA: Expense ID - The subject line of the email\n\nB: Status - The status of the expense\n\nC: Paid? - Shows whether the expense was paid or not\n\nGoogle Sheets module - mapping Subject\n\nNote that the subject variable is highlighted in red, which indicates that the value will come from the Gmail module. The other fields are typed in manually, so they will always be Status = Approved and Paid = No.\n\nStep 3: Choose where to start\n\nNow that your modules are set up, pick the starting point in your inbox - where Make should start looking for data. Right-click the Gmail module and select Choose where to start.\n\nAction panel for the Gmail module\n\nOptions available in the “Choose where to start” configuration\n\nFrom now on: The module processes only new incoming emails that come in after you activate your scenario.\n\nEmails from after a specific date: You can select a date from which the emails will be processed.\n\nAll emails: It will go through your entire inbox (but grab only 3 records, which is what we defined in Step 1).\n\nSelect the first email: You can manually select the email you’d like to process. Usually, this is useful for testing purposes.\n\nWhen building and testing scenarios, select All emails to ensure you have data coming in. Once you are finished with the setup, you can choose From now on to only process new incoming emails.\n\nStep 4: Test the scenario\n\nThe next step is to run the scenario at least once to see its outcome. Click the Run once button to test your scenario.\n\nIf the scenario runs successfully, green checkmarks appear under the modules. You should also see new rows added in your spreadsheet.\n\nClick the numbers above the modules to see the details of how the data was processed and the output of the scenario.\n\nThe number 3 in the bubble means that the Google Sheets module has consumed 3 operations, one for each email that it has found and processed. In our case for operation 1, 1 row was updated, 3 columns and 3 cells.\n\nStep 5: Define the scenario schedule\n\nDefine how often the scenario should run.\n\nBy default, a scenario runs every 15 minutes. With the schedule settings, you can customize the run schedule of your scenario. You can choose the interval, pick a specific date and time, or other options. Learn more about scheduling.\n\nClick on the clock icon next to the trigger module, or the Schedule setting button in the bottom toolbar.\n\nSelect how often you want your scenario to run.\n\nClick OK to save your settings.\n\nSchedule settings configuration\n\nStep 6: Activate the scenario\n\nNow it’s time to activate your scenario and let it run according to the conditions you specified in the previous steps.\n\nClick on the scheduling button to activate your scenario.\n\nClick the save icon to save your scenario.\n\nHow to activate your scenario\n\nHere are a few more examples with links to our templates:\n\nSend an email every time a new row is added to your spreadsheet\n\nSend a message to Slack every time a new row is added to your spreadsheet\n\nAdd leads from Facebook Lead Ads to Google Sheets as new rows\n\nIn this section\nWatch the video\nUse case 1: Trigger a workflow when a new row is added to a spreadsheet and send that data to another app\nUse case 2: Get data from other apps and add it to Google Sheets as new rows\nUsing Google Sheets with Make\nWatch the video\nUse case 1: Trigger a workflow when a new row is added to a spreadsheet and send that data to another app\nStep 1 - Choose a trigger\nStep 2: Connect to Google Sheets\nStep 3: Configure the module\nStep 4: Choose where to start\nStep 5: Select the action module\nStep 6: Map data from Google Sheets\nStep 7: Test your scenario\nStep 8: Activate your scenario\nUse case 2: Get data from other apps and add it to Google Sheets as new rows\nStep 1: Choose Gmail as the trigger module\nStep 2: Map the variables from Gmail in the Google Sheets module\nStep 3: Choose where to start\nStep 4: Test the scenario\nStep 5: Define the scenario schedule\nStep 6: Activate the scenario\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Using the OAuth2 Client Credentials grant with the HTTP module",
      "url": "https://www.make.com/en/help/tutorials/adding-an-oauth-2-0-connection-with-the-client-credentials-grant-type-via-http",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nGet an access token\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUsing the OAuth2 Client Credentials grant with the HTTP module\nUsing the OAuth2 Client Credentials grant with the HTTP module\n\nThe Client Credentials grant type enables Make to obtain an access token with the help of Client ID and Client Secret. Make doesn't support the Client Credentials Grant flow of creating an OAuth 2.0 connection in the HTTP - Make an OAuth 2.0 request module. However you can use the HTTP - Make a request module to get an access token and then make an API call.\n\nImportant\n\nYou need to know your Client ID and Client Secret to get an access token. Read about getting credentials.\n\nGet an access token\n\nFirst, you need to make a request for getting an access token from the service.\n\nIn your scenario, add the HTTP - Make a request module.\n\nIn URL, enter the request URL for getting the access token.\n\nTip\n\nRefer to the app API documentation to get the request URL.\n\nIn Method, select the appropriate method for the endpoint\n\nOptional: In Headers, specify a request header.\n\nOptional: In Query String, enter needed parameters.\n\nIn Body type, select one of the following:\n\nThe Raw option. Proceed to the step 7.\n\nThe Application/x-www-form-urlencoded option. Proceed to the step 9.\n\nIn Content type, select JSON (application/json).\n\nIn Request content, enter the request that should contain the following:\n\nThe grant type: client_credentials.\n\nYour Client ID.\n\nYour Client Secret.\n\nOptional: scopes required by the service.\n\nTip\n\nThe request example:\n\n{\n\n\"grant_type\": \"client_credentials\",\n\n\"client_id\": 4342c38243cb2o84732c234c\n\n\"client_secret\": 34sdf7843fno8s7dg\n\n}\n\nIn case you chose the Application/x-www-form-urlencoded body type: In Fields, add the grant type, the Client ID, and the Client Secret.\n\nRun the module.\n\nIn the modules output, you get an access token and a token type:\n\nAuthorize in the service\n\nAfter getting the access token, you can make the desired OAuth 2.0 request to the service using the same type of HTTP modules.\n\nIn the same scenario, add the second HTTP - Make a request module.\n\nIn URL, enter the a request URL for an endpoint you want to reach.\n\nIn Method, select the appropriate method for the endpoint.\n\nIn Headers, add an item:\n\nName: Authorization.\n\nValue: enter the token type you got in the output of the previous module, and map the value itself.\n\nNote\n\nIn this example, the token type is Bearer, but it may vary depending on an app.\n\nSome apps API require additional headers. Refer to the app API documentation to learn about the token type and headers.\n\nYou can make the needed request using the client credentials grant type.\n\nIn this section\nGet an access token\nUsing the OAuth2 Client Credentials grant with the HTTP module\nGet an access token\nAuthorize in the service\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Using Notion with Make",
      "url": "https://www.make.com/en/help/tutorials/using-notion-with-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nConnect Notion with Make\nWatch database items\nCreate database items\nUpdate database items\nUse case: Sync Notion events database with Google Calendar\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUsing Notion with Make\nUsing Notion with Make\n\nNotion provides an all-in-one workspace for teamwork or individual usage. It is a great tool for managing all your work in one place, but this makes integrating other tools with Notion a significant task. Notion’s popularity among Make users is increasing every day.\n\nStart with this guide to learn how to connect Notion with Make, and how to automate workflows using Notion database items, databases, and pages.\n\nWith the Notion modules in Make, you can:\n\nwatch newly created or updated database items and send their data to other apps.\n\nretrieve specific database items and use their data in your scenarios.\n\ncreate or update database items according to the data you get from other apps.\n\nwatch newly created or updated databases and pages to trigger a scenario.\n\ncreate or update databases according to data you get from previous modules.\n\nsearch and retrieve specific databases or pages to use in your scenario.\n\nwatch newly added or updated page content\n\nlist the existing content of a specific page.\n\nappend content to a page according to data from previous modules.\n\nIn this getting started guide, we will focus on the most common way to use Notion with Make; watching, creating, and updating database items.\n\nConnect Notion with Make\n\nYou must be a Workspace owner of your Notion workspace to connect it to Make. You can verify your access level on the Notion Settings screen, on the Members tab.\n\nINTERNAL VS. PUBLIC CONNECTION\n\nPublic Connection lets you use the Single Sign-on (SSO) with your Notion account. You will be able to select the pages you want Make to access. Whenever you want to add a new database or page to the Selected Pages that Make has access to, you will need to reauthorize the connection. Choose a public connection if you want Make to have access your whole workspace, or if you're not planning on adding more pages to the connection.\n\nInternal Connection lets you create your own integration from your Notion account and use an Integration Token to connect Notion to Make. To give Make access to your databases or pages, you will need to configure the integration of those pages manually in your Notion account. Whenever you want to add a new database or page, you will need to invite the integration account into that page from the Invite section. Choose an internal connection if you frequently add new pages that will be processed by your automation.\n\nPublic connection (SSO)\n\nAdd a Notion module into a scenario. Click Add next to the Connection field.\n\nSelect Notion Public from Connection Type. Give your connection a descriptive name, and then click Save.\n\nIn the dialog that appears, review the permissions you're giving to Make, then click Select pages.\n\nSelect pages that Make will have access to and then click Allow access.\n\nRetrieve newly added databases or pages\nInternal connection (Integration token)\n\nLog in to your Notion account.\n\nClick Settings & Members > My connections > Develop or manage integrations. Alternatively, go to https://www.notion.so/my-integrations to open the integration settings directly.\n\nClick Create a new integration.\n\nFill in the Basic information, select an Associated workspace, and review the integration's access settings.\n\nClick Save changes.\n\nCopy the Internal Integration Token to your clipboard.\n\nLog in to Make and add a module from Notion into a scenario.\n\nClick Add next to the Connection field.\n\nSelect Notion Internal under Connection type. Then enter a descriptive name for your connection.\n\nIn the Internal Integration Token field, enter the token you copied in step 6 and click Save.\n\nAdd Databases to be visible in Make\n\nFor the Notion internal connection, by default, Notion databases do not appear in the Database ID field > Search option. You must manually add them to the Make app from your Notion account.\n\nTo add databases from your Notion account to Make app:\n\nLog in to your Notion account.\n\nEnter into the database you want to add to Make , click on ... in the top right corner, click Add connections, search for and click on the integration you previously created, and click Confirm.\n\nThe database is successfully shared and you can now see it in a module's Database ID > Search field.\n\nWatch database items\n\nThe Watch database items module triggers your scenario when someone creates or updates a database in Notion.\n\nYou have two options; watch database items ‘by created time’ or ‘by updated time’.\n\nBy created time: If want to trigger the scenario only with new database items but not with updated items.\n\nBy updated time: If you want to trigger the scenario both with new items and updated items.\n\nFind the Database ID\n\nThe database that you want to use should have been created before you start automating. To find the database ID, you can check out the URL of the Notion page or you can use the Search function in Make modules:\n\nDatabase ID in the URL: Database ID is the part of the URL between the first '/' and '?'.\n\nSearch by query: Click on the ‘Search’ button, enter the name of the database and click ‘OK’. The database ID will be filled automatically.\n\nNote: If you are creating a new database, check out Retrieve newly added databases or pages\n\nCreate database items\n\nThe Create a Database item module allows you to create new items in an existing database.\n\nYou have two options to enter the database ID and to map the values of the new database items:\n\nSelect from the list (Recommended): lets you find the database ID with a query and automatically shows the list of fields available for mapping. Note: if the fields do not show up, try saving the module by clicking ‘OK’ and opening it again to load the database fields.\n\nEnter manually: lets you enter the database ID manually and map the details of the fields manually by selecting Key, Value Type, Value groups. For more information, see the property schema objects.\n\nUpdate database items\n\nThe Update a Database Item module allows you to update an existing database item.\n\nSimilar to the \"Create a Database Item\" module, this module offers \"Select from list\" or \"Enter Manually\". We recommend using the \"Select from the list\" option for its simplicity.\n\nSelect from the list (Recommended): Click ‘Search’ and enter the name of the database, then click OK. The Database ID is automatically populated with the ID of the selected database. Click on the Database Item ID field to map this ID from previous modules (e.g., Watch Database Items). Then select the field you want to update, either by manually entering a value or by mapping values from previous modules.\n\nUse case: Sync Notion events database with Google Calendar\n\nOne of the most popular use cases for Notion is syncing a database with Google Calendar to help you track your calendar events in one place. To better understand this use case and to show how to use Make to implement it, we will break down a ready-to-use template; Create Google Calendar events from Notion Database Items.\n\nThis scenario watches database items by updated time. When new database item data arrives, the scenario checks if they are new items, existing items, or deleted/canceled items. Then, the scenario either creates a new Google Calendar event, updates an existing event, or deletes an existing event.\n\nTo use this template or to create this use case from scratch, the Notion database that stores the events needs to have these properties:\n\nTitle: text field\n\nStatus: select the field with two options; “Scheduled” and “Cancelled”\n\nEvent ID: text field that will store Google Calendar event IDs\n\nMeeting Time: date field that will store the start and end times of the meetings\n\nIf you prefer to use an empty Notion database with these properties, you can duplicate this example database into your Notion account.\n\nNote: This template expects the user to manually change the status of the event in Notion; “Scheduled” or “Cancelled” to create or delete events in Google Calendar.\n\nNote: If you decide to use the template itself, make sure the setup is matching the screenshots in this guide. There might be some parts where you need to change the Mapping switch or add field mappings by yourself.\n\nSTEP 1 - WATCH DATABASE ITEMS\n\nStart with the first module, which is the trigger module: Watch Database Items.\n\nAfter you connect your Notion account, find the database ID of the Notion database which stores your events. Set up the scenario to watch database items ‘By updated time’. You want to trigger this scenario any time an event is updated, not only when an event is created.\n\nSTEP 2 - ROUTER\n\nThe Router module with 3 routes allows you to perform 3 different actions depending on filter conditions.\n\nFirst route (New event) checks if the event is a newly created event (meaning the event doesn’t exist in Google Calendar yet). The filter in this route checks if the Event ID is empty (null) and if the status of the event is “Scheduled”.\n\nSecond route (Updated event) checks if the event was already created on Google Calendar (Event ID is not null) and if the status of the event is “Scheduled” (meaning it was not canceled).\n\nThird route (Deleted event) checks if the event exists on Google Calendar (Event ID is not null) and if the status of the event is “Cancelled”.\n\nSTEP 3 - GOOGLE CALENDAR MODULES\n\nGoogle Calendar modules create, update or delete events.\n\nCreate an Event (first route); creates a new event by mapping the title, start date and end date.\n\nSince this is the route that handles a new Google Calendar event, add a Notion module at the end to reference the Google Calendar Event ID in the Notion database.\n\nUpdate an Event (second route): Finds the Google Calendar event by Event ID and updates the Google Calendar event details (title, start date, end date) for it to reflect the changes in Notion database.\n\nDelete an Event (third route): finds the Google Calendar event by Event ID and deleted it.\n\nUse the additional Notion module at the end to remove the Event ID from the Notion database and add a note saying that the event was deleted.\n\nTEST AND SCHEDULE THE SCENARIO\n\nOnce the scenario is complete, you can test if it works as expected.\n\nRight-click Watch Database Items module and select Choose where to start.\n\nYou can choose ‘From now on’ or ‘Since specific date’ to trigger the scenario with a new event.\n\nClick Run once and see if the data bundles were transferred as shown below.\n\nIn this section\nConnect Notion with Make\nWatch database items\nCreate database items\nUpdate database items\nUse case: Sync Notion events database with Google Calendar\nUsing Notion with Make\nConnect Notion with Make\nPublic connection (SSO)\nRetrieve newly added databases or pages\nInternal connection (Integration token)\nAdd Databases to be visible in Make\nWatch database items\nFind the Database ID\nCreate database items\nUpdate database items\nUse case: Sync Notion events database with Google Calendar\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Using Airtable with Make",
      "url": "https://www.make.com/en/help/tutorials/using-airtable-with-make",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUse case 1: Trigger a scenario by creating or modifying records in Airtable\nUse case 2: Create or update a record in Airtable with data from another app\nUse case 2: Create or update a record in Airtable with data from another app -- advanced\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorialsUsing Airtable with Make\nUsing Airtable with Make\n\nAirtable is one of the most popular apps Make customers use. Airtable is a low-code platform for creating and sharing relational databases. You can use Airtable to store your data as you would in a spreadsheet like Google sheets. Airtable can store data about your contacts, appointments, or tasks.\n\nThe difference between Airtable and a spreadsheet is that Airtable can accommodate high data traffic and you can connect data in multiple tables to form logical relations between them.\n\nThis tutorial guides you through the steps to set up Airtable to work with Make. We will cover the following use cases:\n\nTrigger a scenario by creating or modifying records in Airtable.\n\nCreate or update a record in Airtable with data from another app.\n\nUse case 1: Trigger a scenario by creating or modifying records in Airtable\n\nIn this workflow, imagine that we’re working at an NGO company and we use Airtable to manage several projects. Some of those projects require external collaboration. We will use Asana to coordinate with collaborators outside of our firm. Make will help us organize and sync up with our imaginary external collaborators.\n\nSteps to follow:\n\nChoose a trigger module\n\nConfigure the trigger module\n\nCreate a new task in Asana\n\nTest and schedule your scenario\n\nChoose a trigger module\n\nThe first step in any automation is choosing what will kick off the process. In Make, the first component of your scenario is a trigger module.\n\nThe trigger module for our scenario is the Airtable Watch Records module. The Watch Records module checks the Created Time field in your table for new records. If the module finds a new record, it retrieves the record data.\n\nThis Make integration allows you to transfer information from Airtable to Asana automatically:\n\nSkip this step if you already have the Airtable database that you want to use. Create a new database in Airtable. Check out the official Airtable help for tips on how to navigate in Airtable.\n\nSkip this step if you have an appropriate table in your Airtable database already. Create a new table in your Airtable database.\n\nNote\n\nYour table has to have a field with the field type set to Created time. This field contains the timestamp of the moment when the record was created. You can set any label to the field.\n\nNavigate to the Make Scenario editor.\n\nClick the big plus icon. At the bottom of the pop-up window use the search field to find the \"Airtable\" app.\n\nClick on the Airtable app field. In the next selection, choose the Watch Records module.\n\nYou have added the Airtable Watch Records module. This module acts as the trigger module in your scenario.\n\nConfigure the trigger module\n\nThe trigger module Watch Records checks your table for new records. If the module finds a new record it retrieves the record data.\n\nChoose your Airtable connection in the Connection drop-down field.\n\nIf you don't have an Airtable connection set up, refer to the Connect Airtable to Make page.\n\nIn the Base field, choose your Airtable database. In the Table drop-down, select the table that contains the Created Time field. In the View drop-down field, leave the default Grid view.\n\nIn the Trigger Field drop-down, select the table field with the type Created Time .\n\nChoose the Label field. The Label field value should identify the record for you. Choose a descriptive field for the Label. For example, the task name.\n\nYou have set up the trigger module for your synchronization scenario.\n\nCreate a new task in Asana\n\nAsana is a team and project management web application. In this guide, you will use the Asana Create a Task or Subtask module to create new tasks using data from your Airtable database. All of this will happen automatically, every time you add a new record to Airtable.\n\nHover over the Watch Records module and click Add another module. Add the Asana Create a Task or Subtask module to your scenario.\n\nIn the module settings Connection field, choose your Asana connection. If you don't have an Asana connection yet follow this guide.\n\nIn the Task destination drop-down field, select Projects and Sections. In the Workspace ID field, choose your Asana workspace.\n\nIn the Project and sections field, click Add item. Choose the project and section name in the Project ID and Project Section ID drop-down fields.\n\nMap the task Name from Airtable to the Task Name field. Read more about mapping.\n\nWhen you run the scenario, the task in Asana will have the same name as in Airtable.\n\nYou have setup the Asana Create a Task or a Subtask module. This module automatically transfers data from your Airtable database to your Asana project.\n\nTest and schedule your scenario\n\nWhen you are finished with designing a scenario, you should test it. Make enables you to just run the scenario once and see if it works. If the scenario works the way you imagined, you can schedule the scenario to run automatically. Read more about scheduling a scenario.\n\nWhen you start the scenario manually to test it, the scenario waits for data. This happens because we use a watch module as the scenario trigger. That means you have to create a test record in your Airtable database after you execute the scenario.\n\nFollow these steps to test the scenario:\n\nClick the Run once button run to execute the scenario. The Watch Records module now waits for new data.\n\nCreate a new record in the Airtable database.\n\nCheck your waiting scenario. If everything went well, the scenario should have already finished. When the scenario finishes, the Run Once button is active again and the modules in the scenario have bubbles with numbers above them.\n\nCheck your Asana project board. There should be a new task created based on the data you added to your Airtable database.\n\nAfter successful testing you can turn on the scenario scheduling with the Scheduling On/Off button and set how often should Make execute the scenario. Read more about scenario scheduling.\n\nUse case 2: Create or update a record in Airtable with data from another app\n\nIn the next example, we will create a workflow that stores booking information to Airtable when a new event is created in Calendly. Calendly is a scheduling platform that simplifies scheduling meetings between different organizations. You can read more about Calendly on the Calendly homepage.\n\nYour database in Airtable will have two tables: Contacts and Touchpoints. The Contacts table will contain information about the people you meet. The Toupoints table will contain information about your meetings. Together, these tables will form a relational database.\n\nThe scenario workflow consists of these steps:\n\nSet up the trigger module\n\nGet event info\n\nRead data from Airtable\n\nSplit the scenario flow with the Router module\n\nCreate a new contact\n\nCreate a new touchpoint\n\nTest and schedule your scenario\n\nYou can use this scenario as part of your process to manage appointments with your clients.\n\nSet up the trigger module\n\nThe trigger module is the first module in the scenario flow. The trigger module starts according to the scenario scheduling. The next modules in the scenario flow use the output data from the trigger module.\n\nYou will set up the Calendly Watch events module. This module retrieves the Calendly event identification link for every new or updated Calendly event.\n\nNote\n\nCalendly creates an event after you invite at least one participant to the event.\n\nNote\n\nYou will need to have the Calendly account plan Professional or higher to be able to connect it with Make. Check the Calendly pricing page.\n\nClick Create a new scenario in your Make account dashboard.\n\nClick the big plus icon. At the bottom of the pop-up window use the search field to find the \"Calendly\" app.\n\nClick on the Calendly app field. In the next selection, choose the Watch Events module.\n\nClick the Add button to add a webhook to the Watch events module. The Watch Events module needs a webhook to trigger every time when an appointment is added or modified. Read more about triggers.\n\nNote\n\nThe blue lightning icon on top of the Calendly app indicates that this module is an instant trigger.\n\nIn the next pop-up window fill in the Webhook name and choose a Calendly connection. If don't have a Calendly connection follow the steps in the Connecting Calendly to Make section.\n\nFill in the rest of the Watch Events webhook settings.\n\nCheck the events you want to watch in the Events selection box.\n\nIn the drop-down Enter an Organization and User URI, choose the Select from the list option.\n\nIn the Organization URI drop-down, select your organization.\n\nin the User URI drop-down, select your user name.\n\nClick the Save button to finish the webhook settings. Click the OK button to confirm the settings of the Watch Events module.\n\nYou have set up the Calendly Watch Events trigger module. This module watches events in your Calendly account to keep your CRM up to date.\n\nScenario progress:\n\nGet event info\n\nThe next module in the scenario workflow is the Calendly module Get an Event. This module retrieves additional information about an event, such as the start time and end time of the event, and contact information of the event participants.\n\nThe trigger module outputs the event link. You will use this link in the Get an Event module.\n\nHover over the Watch events module and click Add another module.\n\nChoose Calendly app and then Get an Event module.\n\nin the module settings Connection field, choose your Calendly connection.\n\nMap the Event variable to the Event field.\n\nYou can read more about mapping on the Mapping page.\n\nClick the OK button to save the module settings.\n\nYou have set up the Calendly Get an event module. The Get an event module retrieves information about an event. You will store the additional information in Airtable in the following steps.\n\nScenario progress:\n\nRead data from Airtable\n\nNow we can start working with the Airtable app. The next steps guide you through creating a new database in Airtable. The database will store data about your contacts and meetings.\n\nNext, you add the first Airtable app module to your scenario. The Airtable app module Search Records reads data from a table, then outputs the data that fit the search criteria.\n\nYou will use data output from this module to determine whether the meeting is with a new contact, or with a contact that you already have.\n\nNote\n\nThis guide suggests a specific Airtable database and table layout. If you want to use your already existing database adapt the steps accordingly.\n\nCreate a new database in Airtable called Meetings. Check out the official Airtable help for tips on how to navigate in Airtable.\n\nSetup the Contacts and Touchpoints tables in Airtable.\n\nThe Contacts table with the columns:\n\nField name\n\n\t\n\nField type\n\n\t\n\nDescription\n\n\n\n\nEmail\n\n\t\n\nSingle line text\n\n\t\n\nThe contact email\n\n\n\n\nName\n\n\t\n\nSingle line text\n\n\t\n\nThe contact name\n\n\n\n\nTouchpoints\n\n\t\n\nLinked field\n\n\t\n\nDisplays data from the Touchpoints table\n\nThe Touchpoints table with the columns:\n\nField name\n\n\t\n\nField type\n\n\t\n\nDescription\n\n\n\n\nEvent name\n\n\t\n\nSingle line text\n\n\t\n\nThe name of the event\n\n\n\n\nStart time\n\n\t\n\nDate\n\n\t\n\nDate and time when the event starts\n\n\n\n\nSource\n\n\t\n\nSingle select\n\n\t\n\nThe source of the event\n\n\n\n\nContacts\n\n\t\n\nLinked field\n\n\t\n\nDisplays the corresponding contact name from the Contacts table\n\nAdd the Airtable app module Search Records to the scenario.\n\nIn the Connection drop-down field, choose your Airtable connection. If you don't have an Airtable connection set up, refer to the Connect Airtable to Make page.\n\nIn the Base drop-down, choose the Meetings database. In the Table drop-down field, choose the Contacts table. Select the default Grid view in the View drop-down field.\n\nFill in the Formula field as in the screenshot. The {Email} is the name of the field in the Contacts table, and the variable in the quotation marks is mapped from the output of the Watch Events module.\n\nClick the OK button to confirm the module settings.\n\nYou have set up the Airtable Search Records module. The Search Records module reads data in the Airtable Contacts table. We will process the data in the next steps.\n\nScenario progress:\n\nSplit the scenario flow with the Router module\n\nThe Router module divides the data flow through your scenario into multiple paths -- routes. Router sends each piece of data it receives to each route. The routes are processed one by one in the same order that they were connected to the Router.\n\nRead more about Router and scenario data flow in Make.\n\nWe will design the Router routes so that the first route creates a new contact and a new Calendly event with the new contact. The second route will create just a new event with an existing contact.\n\nWe will use the data output from the Search Records module to decide which route will be active.\n\nAdd the Router module to the scenario flow. It will create two new routes for you.\n\nNote\n\nYou can add more routes by clicking the Router module.\n\nClick the top dotted line from the router to the new module. A filter pop-up form appears.\n\nFill in the label for the filter. We will label the filter as New contact.\n\nSet the filter condition to the Total number of bundles of the Airtable Search records module. In the operator drop-down, select Numeric operators: Equal to. Fill in zero in the last text field.\n\nClick the OK button to confirm the filter settings.\n\nYou have added a Router module and set up a Filter to the first split route to create a new contact. If the contact mail is not found in the Contacts table, a new contact will be created.\n\nScenario progress:\n\nCreate a new contact\n\nIn this step, we will work on the first route from the Router module. We will add the Airtable Create a record module to create a new contact in the Contacts table if the meeting contact is not in the Contacts table.\n\nAdd the Airtable Create a Record module instead of the plus in the top scenario route.\n\nRight-click the Create a Record module. Choose the Rename action in the menu. Rename the module to Create a contact.\n\nIn the Connection drop-down, sSelect your Airtable connection. in the Base drop-down, select the Meetings database. In the Table drop-down field, select the Contacts table.\n\nMap the Email and Name variables from the Watch Events module to the Email and Name fields:\n\nClick the OK button to confirm the module settings.\n\nYou have set up the Airtable Create a contact module. The Create a contact module creates a new record in the Contacts table when you create a new event with a contact that is not recorded in the Contacts table.\n\nScenario progress:\n\nCreate a new touchpoint\n\nIn this step you will use the Airtable Create a record module to create new meetings in the Touchpoints table. You will then clone the module to use it in both of the scenario routes.\n\nAdd the Airtable Create a Record module after the Create a contact module.\n\nIn the Connection drop-down, select your Airtable connection. In the Base drop-down, choose the Meetings database. In the Table drop-down field select the Touchpoints table.\n\nMap the output of the previous modules to the Create a Record module input:\n\nMap the Name value to the Event name field.\n\nMap the Start time value to the Start time field.\n\nMap the ID value from the Create a contact module to the Contacts > Record ID 1 field.\n\nClick the OK button to confirm the module settings.\n\nRight-click the Create a Record module. Choose the Rename action in the menu. Rename the module to Create a touchpoint.\n\nRight-click the Create a touchpoint module and choose Clone in the actions menu. Another Create a touchpoint module pops out that is the exact copy of the original Create a touchpoint module.\n\nConnect the cloned module to the Router module. That way, you create a new route in the scenario flow.\n\nCheck the cloned Create a touchpoint module settings. Update the Contact > Record ID 1 mapping to use the ID variable from the Search Records module. Click the OK button to save the updated module settings.\n\nClick the dotted line that connects the Router module and the cloned Create a touchpoint module to create a filter. A form to set up a filter pops up:\n\nFill in the filter Label.\n\nSet the filter condition to the Total number of bundles of the Airtable Search records module.\n\nSelect Numeric operators: Not equal to in the operator drop-down.\n\nFill in zero in the last text field.\n\nYou have setup the Create a touchpoint modules. The Create a touchpoint modules create a new record in the Touchpoints table when you create a new event in Calendly.\n\nScenario progress:\n\nTest and schedule your scenario\n\nWhen you are finished with designing a scenario, you should test it. Make enables you to just run the scenario once and see if it works. If the scenario works the way you imagined, you can schedule the scenario to run automatically. Read more about scheduling a scenario.\n\nWhen you start the scenario manually to test it, the scenario waits for data. This happens because we use a watch module as the scenario trigger. That means you have to create the test event in Calendly after you execute the scenario.\n\nFollow these steps to test the scenario:\n\nClick the Run once button to execute the scenario. The Watch Events module now waits for new data.\n\nSchedule a new event in Calendly. Check the Calendly help on how to create a new event.\n\nCheck your waiting scenario. If everything went well, the scenario should have already finished. When the scenario finishes, the Run Once button is active again and the modules in the scenario have bubbles with numbers above them.\n\nCheck the tables in your Meetings Airtable database. They should contain the data you provided in the event you created in Calendly.\n\nAfter successful testing you can turn on the scenario scheduling with the Scheduling On/Off slider and set how often should Make execute the scenario. Read more about scenario scheduling.\n\nUse case 2: Create or update a record in Airtable with data from another app -- advanced\n\nThis guide builds on top of the guide in the previous section. The following points improve on the previous use case.\n\nWhen you store information about a meeting, you might need information about the meeting duration. Also, in the previous workflow, you clone the Create a touchpoint module. This makes the scenario harder to maintain because if you change something in the Touchpoints table, you have to update two modules.\n\nThis improved workflow adds information about the duration of the meeting to the Touchpoints table and prevents module duplication.\n\nTo do that, this tutorial uses some of the advanced Make features.\n\nRemove module duplication\n\nYou have created a clone of the Create a touchpoint module in the previous workflow. This approach is fast but has the downside of checking and maintaining two almost identical modules, which is error-prone.\n\nWhen you create a contact in the Contacts table, the Create a contact module outputs the ID of the new contact. This is the only information that you need to transfer to the second scenario route where you create a new touchpoint.\n\nInstead of having another Create a touchpoint module, you can store the ID value in a variable with the Set variable module and retrieve it with the Get variable module.\n\nThe following steps describe how to change the scenario design to avoid having two duplicate modules:\n\nIn the top Router path, remove the Create a touchpoint module. After the Create a contact module, add the Set variable module.\n\nFill in the Variable name. For example new-contact-ID. Set the Variable lifetime to One execution. Map the Variable value to the ID value output from the Create a contact module.\n\nClick the OK button to confirm the module settings.\n\nRemove the filter in the bottom scenario route. The bottom scenario route will be always active in the new scenario design.\n\nRight-click the dotted line between the Router and Create a touchpoint modules. Choose Add a module from the actions menu. Select the Get variable module.\n\nFill in the same variable name in the Variable name field as you used in the Set variable module.\n\nChange the mapping in the Create a touchpoint module in the Contacts > Record ID 1 field. Map the Record ID 1 field to ID OR new-contact-ID.\n\nCaution\n\nPick the OR operator from the General functions > Logical operators menu.\n\nThe mapping relies on the fact, that one of the variables is always empty -- either the ID or the new-contact-ID. Which variable holds the empty value depends on whether the scenario creates a new contact or not.\n\nYou have removed the duplicate Create a touchpoint module. Instead, you are using the Set variable and Get variable modules to store and retrieve the ID value of the new contact in the Contacts table.\n\nScenario progress:\n\nEdit the Touchpoints table\n\nThe next step is to add the meeting duration to the Touchpoints table. Add the Duration [minutes] column to the Touchpoints table in your Meetings Airtable database.\n\nThe updated Touchpoints table will have the columns:\n\nField name\n\n\t\n\nField type\n\n\t\n\nDescription\n\n\n\n\nEvent name\n\n\t\n\nSingle line text\n\n\t\n\nThe name of the event\n\n\n\n\nStart time\n\n\t\n\nDate\n\n\t\n\nDate and time when the event starts\n\n\n\n\nDuration [minutes]\n\n\t\n\nNumber\n\n\t\n\nDuration of the event in minutes\n\n\n\n\nSource\n\n\t\n\nSingle select\n\n\t\n\nThe source of the event\n\n\n\n\nContacts\n\n\t\n\nLinked field\n\n\t\n\nDisplays the corresponding contact name from the \"Contacts\" table\n\nAnd will look like this:\n\nCalculate the meeting duration\n\nYour Touchpoints table already contains the Start time of the meetings. The duration of the meeting is the information that would give you the whole picture of the event. However, Calendly Get an Event module returns only the Start time and End time values. You can use Make to calculate the event duration from those values.\n\nThe Get an Event module returns the Start time and End time values in the Date data type. You cannot subtract directly two Date values. You have to convert the Date to a Number. You can do that with the formatDate function.\n\nRead more about the data types and Date and time functions in Make.\n\nClick the Create a touchpoint module to open the module settings. Scroll the module settings to the Duration [minutes] field.\n\nFill in the formula in the Duration [minutes] field:\n\nGo to General functions tab and insert a pair of parentheses (). This is required because just writing parentheses in the mapping field won't work.\n\nInsert the formatDate function from the Date and time functions tab in the parentheses. Map the End time value from the Get an Event module as the first argument of the formatDate function. Fill in X as the second argument. This converts the Date value to a UNIX timestamp.\n\nInsert the - (minus) sign from the Math functions tab after the formatDate function. Insert another formatDate function next to the minus sign. Map the Start time value from the Get an Event module as the first argument of the formatDate function. Fill in X as the second argument.\n\nSo far, the result of the formula would give you the duration of the event in seconds. To convert seconds to minutes, move your cursor out of the parentheses and insert the division operator / from the Math functions tab after the parentheses.\n\nInsert 60 after the division operator to convert seconds to minutes.\n\nThe final formula should look like this:\n\nThe scenario now inserts the meeting duration into the Touchpoints table.\n\nIn this section\nUse case 1: Trigger a scenario by creating or modifying records in Airtable\nUse case 2: Create or update a record in Airtable with data from another app\nUse case 2: Create or update a record in Airtable with data from another app -- advanced\nUsing Airtable with Make\nUse case 1: Trigger a scenario by creating or modifying records in Airtable\nChoose a trigger module\nConfigure the trigger module\nCreate a new task in Asana\nTest and schedule your scenario\nUse case 2: Create or update a record in Airtable with data from another app\nSet up the trigger module\nGet event info\nRead data from Airtable\nSplit the scenario flow with the Router module\nCreate a new contact\nCreate a new touchpoint\nTest and schedule your scenario\nUse case 2: Create or update a record in Airtable with data from another app -- advanced\nRemove module duplication\nEdit the Touchpoints table\nCalculate the meeting duration\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Tutorials",
      "url": "https://www.make.com/en/help/tutorials",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nTutorials\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterTutorials\nTutorials\n\nIn this section\nUsing Airtable with Make\nUsing Google Sheets with Make\nUsing Notion with Make\nUsing Telegram Bot with Make\nUsing the OAuth2 Client Credentials grant with the HTTP module\nAutomate invoicing with invoice ninja\nHow to fully reset your Google connections\nHow to connect Airtable and Google contacts and synchronize contacts between these services\nHow to iterate columns of a Google Sheet worksheet\nCalling Microsoft Graph REST API via the \"HTTP Make an OAuth 2.0 request\" module\nUse JSON Generator to create a JSON Data Structure and make an HTTP request using an API Key (SendGrid example)\nExtract an item and/or its value from an array of collections\nHow to connect Email, Text Parser and Google Sheets\nCalling Google APIs via the \"HTTP Make a OAuth 2.0 request\" module\nCreate a Data Thing or a Bulk of Data Things on Bubble\nHow to capture Email and Phone via Webhooks, validate them using Regex and store them in a Data Store\nExample of a Default route configured for a router\nMobile app\nHow to connect Chatfuel to Airtable\nGet a tweet on Twitter when a new tweet is created in a row in a Google Sheets spreadsheet\nHow to send a message to a Discord channel via HTTP when a Google Sheet is updated\nUpdate Google Sheet row with TwitterID and Date after posting it on Twitter\nSend data to Make as JSON via an action in a Bubble workflow using the API Connector plugin\nTypeform Make Data Stores\nHow to prevent Google Sheets from changing numbers into dates\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Make DevTool",
      "url": "https://www.make.com/en/help/scenarios/make-devtool",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nInspect and Tweak your Scenarios in Make with Ease!\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosMake DevTool\nMake DevTool\nInspect and Tweak your Scenarios in Make with Ease!\n\nMake DevTool allows you to debug your Make scenarios by adding an extra pane to the Chrome Developer Tools. Using this new debugger pane, you can check all the manual runs of your scenario, review all the performed operations and see the details of every API call performed.  Additionally, using Make DevTools you can see which module, operation, even which single response causes an error in your scenario. This helps you debug your scenario, and get your scenario back on track.\n\nInstalling Make DevTool\n\nOpen the Chrome Web Store and search for Make DevTool. You can also use this direct link to install the extension.\n\nClick the Add to Chrome button. Confirm your decision in the pop-up window that opens.\n\nThe Make DevTool is installed to the Chrome Developer Tools pane.\n\nTo start using the Make DevTool open a scenario in Make, press Control+Shift+I or F12 (Windows) or Command+Option+I (Mac) on your keyboard to open Chrome Developer Tools and switch to the Make tab.\n\nNote\n\nWe recommend docking the Chrome Developer Console to the bottom to maintain a better view of your modules.\n\nUsing Live Stream\n\nLive Stream displays what is happening in the background of your scenario when you hit the Run once button.\n\nIt allows you to view the following information for each module in your scenario:\n\nRequest Headers (API endpoint URL, HTTP method, time and date the request has been called at, request headers, and query string)\n\nRequest Body\n\nResponse Headers\n\nResponse Body\n\nAfter you run a scenario select Live Stream from the left-side panel and click one of the tabs in the right panel of Make DevTool to view the information.\n\nSearching in logs\n\nEnter the search term into the search field in the left panel of Make DevTool to only display requests and responses that contain the search term.\n\nClear the list of recorded requests\n\nTo clear the list of requests recorded by Make DevTool, click the bin icon next to the search field.\n\nEnabling console logging\n\nTo enable logging into the console, click the computer icon () next to the search field.\n\nWhen logging is enabled the color of the computer icon switches to green.\n\nClick the same icon one more time if you want to disable logging. The icon turns gray when the feature is disabled.\n\nRetrieving the request in the raw JSON format or cURL\n\nTo retrieve the raw JSON content of the request, click the Copy RAW button in the top-right corner of the DevTool's panel.\n\nSimilarly, you can retrieve cURL using the Copy cURL button next to Copy RAW in the top-right corner of the Make DevTool's panel.\n\nScenario Debugger\n\nScenario Debugger shows you the historical logs of your scenario. The Scenario Debugger displays the history of the scenario runs and enables you to search for modules by their names or IDs.\n\nSearching for modules\n\nTo search for the module by its name or ID number, enter the search term in the search field in the left panel of the DevTool.\n\nOpen module settings\n\nDouble-click the module's name in the list to open its settings in the scenario editor.\n\nView request or response details\n\nYou can open the request details by clicking the operation in the list.\n\nTools\n\nThe following set of tools makes setting up your scenario easier.\n\nFocus a module\n\nOpens settings of the selected module.\n\nNote\n\nModule ID is the number you see in your scenario editor next to the name of the module. Same apps used multiple times in one scenario will have different IDs for each module.\n\nModule ID\n\n\t\n\nEnter the ID of the module for which you want to open settings and click the Run button\n\nFind module(s) by mapping\n\nAllows you to search modules' values for the specified term.\n\nKeyword\n\n\t\n\nEnter the term you want to search for and click the Run button. The numbers in the output are IDs of modules that contain the term you have searched for.\n\n\n\n\nUse Only Values\n\n\t\n\nYou can enable this option to only search in module fields' values, or disable it to also search in module fields' names.\n\nNote\n\nThe search is performed through the name and label parameters.\n\nGet app metadata\n\nRetrieves metadata of the app by the app's module name or ID. This is useful, for example, when you need to retrieve the app's version used in your scenario for the technical support or the developer of the app.\n\nSource Module\n\n\t\n\nSelect the module for which you want to retrieve metadata.\n\nCopy mapping\n\nCopies values from the source module to the target module.\n\nCaution\n\nMake sure you set the correct source and target modules because values in the target module will be overwritten. If you select different types of modules, values in the target module will be deleted.\n\nSource Module\n\n\t\n\nSelect the module or enter the ID of the module from which you want to copy field values.\n\n\n\n\nTarget Module\n\n\t\n\nSelect the module or enter the ID of the module into which you want to insert the source module values.\n\nTip\n\nSwitch on the map toggle to manually enter the ID of the modules for mapping.\n\nWhen the source and target modules are specified, click the Run button to perform the action.\n\nCopy filter\n\nCopies the filter settings from the source module to the target module.\n\nNote\n\nThe copy action is performed on the filter placed on the left side of the selected module.\n\nSource Module\n\n\t\n\nSelect the module or enter the ID of the module from which you want to copy filter values.\n\n\n\n\nTarget Module\n\n\t\n\nSelect the module or enter the ID of the module into which you want to insert the filter values from the source module. Note that the values in the target module will be overwritten.\n\n\n\n\nPreserve Fallback Route setting\n\n\t\n\nIf enabled and the source filter is set as the fallback route, then the target filter is also set as the fallback route.\n\nWhen the source and target modules are specified, click the Run button to copy the filter.\n\nSwap connection\n\nDuplicates a connection from the source module to every module of the same app in the scenario .\n\nSource Module\n\n\t\n\nSelect the module or enter the ID of the module from which you want to duplicate the connection and set the same connection for every module of the same app in your scenario.\n\nSwap variable\n\nSearches for specified variables in the scenario and replaces them with a new variable.\n\nVariable to Find\n\n\t\n\nSelect the variable which you want to be replaced from the module in your scenario and copy it to the Variable to Find field. You can also drag and drop the variable into the field. After it is done the format of the value in the field will look like this: {{5.value}}.\n\n\n\n\nReplace With\n\n\t\n\nCopy and paste, or drag and drop the variable you want to use instead of the variable specified in the field above.The format of the value in the field will look like this: {{5.value}}.\n\n\n\n\nModule\n\n\t\n\nSelect the module in which you want to replace the variable. If no module is selected, the variable will be replaced in the entire scenario.\n\nWhen all is set up, click the Run button to perform the action.\n\nSwap app\n\nReplaces the selected app version in your scenario with another app version.\n\nThis tool can be used, for example, to upgrade Gmail and Email apps' modules to the latest version. For more details please refer to the Upgrading Gmail and Email App Versions Using Make DevTool article.\n\nWarning\n\nBefore swapping make sure that the version you’ve selected supports all the modules and functions you might need for your scenario.\n\nBase 64\n\nAllows you to encode the entered data to Base64 or to decode Base64. This tool can be useful when you want to search for particular data in the encoded request.\n\nOperation\n\n\t\n\nSelect whether you want to encode the data from the Raw Data field (below) to Base64 or decode Base64 to Raw Data.\n\n\n\n\nRaw Data\n\n\t\n\nEnter the data you want to encode to Base64 or Base64 you want to decode to raw data, depending on the option selected in the Operation field above.\n\nWhen the input is specified, click the Run button to perform the selected action.\n\nCopy module name\n\nCopies the name of the selected module to your clipboard.\n\nModule\n\n\t\n\nSelect the module whose name you want to copy.\n\nWhen the module is selected, click the Run button to copy the module's name.\n\nRemap source\n\nAllows you to change the mapping source from one module to another. You can do it for the already existing module in your scenario as well as add a new one.\n\nSource Module\n\n\t\n\nSelect the module you want to be replaced as the mapping source for other modules in your scenario.\n\n\n\n\nTarget Module\n\n\t\n\nSelect the module you want to use as a new mapping source.\n\n\n\n\nModule to Edit\n\n\t\n\nIn case you don't want to change the mapping in the entire scenario, select the module you want to change the mapping for.\n\nWhen all is set up, click the Run button to perform the action.\n\nHighlight app\n\nHighlights modules of the specified app in your scenario.\n\nApp to be Highlighted\n\n\t\n\nSelect the app you want to be highlighted in your scenario.\n\n\n\n\nVersion\n\n\t\n\nSelect the version of the app you want to be highlighted.\n\n\n\n\nHighlight Color\n\n\t\n\nEnter the color hex you want to use for highlighting modules.\n\nMigrate GS\n\nThis tool is made especially to upgrade Google Sheets (legacy) modules to the latest Google Sheets version. It adds a new version of the module just after the legacy version of the module in the scenario route.\n\nThis tool automates steps 3, 4, 5 described in the Replacing Legacy Modules With New Modules article.\n\nIn this section\nInspect and Tweak your Scenarios in Make with Ease!\nMake DevTool\nInspect and Tweak your Scenarios in Make with Ease!\nInstalling Make DevTool\nUsing Live Stream\nScenario Debugger\nTools\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Keyboard shortcuts",
      "url": "https://www.make.com/en/help/scenarios/keyboard-shortcuts",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosKeyboard shortcuts\nKeyboard shortcuts\n\nAdvanced users save time when editing scenarios with keyboard shortcuts.\n\nMake features these shortcuts:\n\n+\n\n\t\n\nZoom in\n\n\n\n\n-\n\n\t\n\nZoom out\n\n\n\n\nWin: Ctrl+S\n\nMac: ⌘+S\n\n\t\n\nSave scenario\n\n\n\n\nWin: Ctrl+C on module\n\nMac: ⌘+C on module\n\n\t\n\nCopy module\n\n\n\n\nWin: Ctrl+V\n\nMac: ⌘+V\n\n\t\n\nPaste module\n\n\n\n\nSpace+drag on module\n\n\t\n\nMove all modules\n\n\n\n\nWin: Ctrl+Enter\n\nMac: ⌘+Enter\n\n\t\n\nRun once\n\n\n\n\nShift+drag\n\n\t\n\nCreate a box to select multiple modules\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Scenario execution history",
      "url": "https://www.make.com/en/help/scenarios/scenario-execution-history",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nScenario detail\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosScenario execution history\nScenario execution history\n\nClicking the History button in the scenario detail displays information about all scenario runs.\n\nThe following details are shown for every run:\n\nrun date\n\nstatus (success or failed)\n\nrun duration\n\nnumber of operations\n\nsize of transferred data\n\nlink to detailed information\n\nNote\n\nThe number of days your execution logs are stored depends on your pricing plan.\n\nSee Make pricing plans.\n\nScenario detail\n\nFor detailed information about a selected scenario run, including which bundles were processed, click the Details link.\n\nWith Make DevTool you can also inspect HTTP requests and responses made during a module operation. These are logged for:\n\nmanual scenario executions for all modules\n\nscheduled executions if an error occurs during the execution for the module that threw the error\n\nIn this section\nScenario detail\nScenario execution history\nScenario detail\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Scenario execution flow",
      "url": "https://www.make.com/en/help/scenarios/scenario-execution-flow",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nExample: Connecting Facebook to Dropbox\nInformation about processed bundles\nError occurred while executing a scenario\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosScenario execution flow\nScenario execution flow\n\nIn this section, you will learn how a scenario executes and how data flows through a scenario. It will also show you where you can find information about your processed data and how to read it.\n\nOnce a scenario is set-up correctly and activated, it will execute according to its defined schedule.\n\nThe scenario begins with the first module responding to an event it has been set to watch for. If it returns any bundles (data), the bundles are then passed on to the next module and the scenario continues. If it does not return any modules, the scenario does not continue and ends after the first module. In the case where there are returned bundles after the first module, the bundles will then go through each proceeding module one-by-one. If the bundles are processed correctly throughout all of the modules, the scenario is then marked as Successful.\n\nExample: Connecting Facebook to Dropbox\n\nThe example below shows how Make connects three modules in a scenario. It explains how Make downloads photos from Facebook, converts them to another format, and sends them to a selected Dropbox folder.\n\nWhen the scenario begins, the first step is to watch for bundles. In this case, it is to watch for photos on Facebook. If it does not return a bundle (a photo), the processing of the scenario does not continue and ends after the first module.\n\nIf a bundle is returned, the bundle then passes through the rest of the scenario. The bundle is first recieved through the Watch photos module, then it goes through the Convert a format module for the Image app, and then goes through the Upload a file module for Dropbox to reach its final destination, the Dropbox folder.\n\nIt is also important to note that if Facebook returns multiple bundles, for example two bundles, the processing of the latter bundle will not start until the first bundle is converted and uploaded to Dropbox.\n\nInformation about processed bundles\n\nFor each module, the bundle goes through a 4 step process before going on to the next module or reaching its final destination. The 4 step process is Initalization, Operation, Commit/Rollback, and Finalization. This is called transaction processing and it helps to explain how data was processed in a module.\n\nOnce a scenario run is complete, each module displays an icon showing the number of operations performed. Clicking this icon will display the detailed information about the processed bundles, in the format described above. You can see which modules settings were used and which bundles were returned by which module.\n\nThe picture beside illustrates the processing of the last module used in the scenario above, the Dropbox module, Upload a file.\n\nThe module received the following input information:\n\nConverted image\n\nSelected folder where the image shall be uploaded to\n\nOriginal name of the Facebook image\n\nAfter processing, the module returned this output information:\n\nImage ID assigned by Dropbox\n\nFull path where in Dropbox Make uploaded the file\n\nThe above information is captured for each bundle separately, as marked by the drop down boxes Operation 1 and Operation 2 in the image.\n\nError occurred while executing a scenario\n\nAn error may occur during the scenario run. For example, if you delete the Dropbox folder that you have set as the target folder in the module setting, the scenario will terminate with an error message. For more information on this and to learn how to handle errors, please see the Error processing help guide.\n\nIn this section\nExample: Connecting Facebook to Dropbox\nInformation about processed bundles\nError occurred while executing a scenario\nScenario execution flow\nExample: Connecting Facebook to Dropbox\nInformation about processed bundles\nError occurred while executing a scenario\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Scenario templates",
      "url": "https://www.make.com/en/help/scenarios/scenario-templates",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nWhat is a template?\nBenefits of templates\nWho can create templates?\nUsing templates\nCreating templates\nPublishing templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosScenario templates\nScenario templates\nWhat is a template?\n\nTemplates are predefined scenarios that you can expand and customize to create new scenarios. You can then share these with friends and colleagues.\n\nBenefits of templates\n\nCreating your scenarios becomes much easier. Instead of starting each new scenario from scratch, you can use a template as a foundation to expand upon.\n\nShare your templates with anyone.\n\nSave your templates for future use.\n\nWho can create templates?\n\nAnyone with a Teams plan can create templates. See the available subscription plans.\n\nUsing templates\n\nYou can find the Templates tab under your Team in the left-hand menu.\n\nSearch for templates using the search bar in the top-right corner.\n\nTemplate types\nPublic templates\n\nA collection of templates created by Make and our partners that features many common integrations. Anyone can use them to create scenarios.\n\nSee our article on creating scenarios from templates or our tutorial.\n\nTeam templates\nNote\n\nOnly available for Teams and Enterprise organizations.\n\nTeam templates are those you and your team create. From the team templates screen, you can create, customize, save, and share your templates with others.\n\nTo learn more, see our article on creating and managing team templates.\n\nCreating a scenario from a template\nUsing a public template\n\nMake creates and maintains a library of templates. You can find it by clicking Templates on the left sidebar and looking under the Public tab.\n\nGo to Templates > Public and click the template you want to use.\n\nChoose whether you want a guided setup experience or simply a new scenario from the template.\n\nGuided setup - This option includes on-screen prompts to help you configure the template for your needs.\n\nClick Start guided setup.\n\nFollow the on-screen prompts to configure your scenario.\n\nOptional Click Skip guided setup at any time to end the guided setup. You still need to configure all modules but on-screen prompts no longer appear.\n\nNew scenario - This option instantly creates a new scenario in your organization from the template. You need to manually configure module settings, such as Connections.\n\nClick Create a new scenario from template.\n\nEdit your new scenario the same way as any scenario.\n\nName and save your scenario.\n\nTest and schedule your new scenario.\n\nUsing a team template\n\nGo\n\nSelect the template you want to use.\n\nClick Options.\n\nClick Create scenario.\n\nChoose which organization you want to create your scenario for.\n\nClick Save.\n\nYou are now ready to edit your scenario.\n\nCreating templates\n\nClick Templates in the left-hand menu.\n\nClick Create a new template.\n\nThe scenario editor appears. Use the editor to create templates the same way you create regular scenarios. See our guide on editing a scenario to learn more.\n\nNotice\n\nYou can only edit your private templates.\n\nYou cannot edit any published templates.\n\nTemplates cannot start with a webhook.\n\nRenaming templates\n\nWhen you create a new template, Make names it “New Template” by default.\n\nEdit the name by clicking the title displayed at the top of the page, or follow the steps below:\n\nClick Options in the top-right corner.\n\nClick Rename.\n\nNote\n\nYou can only rename private templates.\n\nAdding a description\n\nYou can include a description of your template to inform others of its functionality.\n\nClick the gear icon in the Controls panel below your template.\n\nAdd your description in the box provided (Max. 240 characters).\n\nClick Save.\n\nYour description appears in the template information panel.\n\nEditing templates\n\nEditing a template is similar to editing a scenario with extra options for each field:\n\nUse in Wizard - checking this box includes the field in the guided setup. Select it for fields that users need to personalize or edit.\n\nUse as a default value - checking this box makes the value you defined the default value for that field. Select it to include a recommended value that users can edit.\n\nCaution\n\nKnown issues:\n\nWhen adding a module with dynamic, customizable fields, such as Set multiple variables, you need to check both:\n\nUse in Wizard\n\nUse as a default value\n\nSelecting both check boxes ensure that users can see the field when they create a scenario from your template.\n\nIf the Use in Wizard and Use as a default value checkboxes do not appear:\n\nIn the Module settings window, click OK to save your changes and close the window.\n\nRight click the module and select Settings.\n\nThe Use in Wizard and Use as a default value checkboxes now appear.\n\nDeleting templates\n\nYou can delete any of your private or published templates.\n\nFrom your template list, click Delete to the right of any template.\n\nFrom a template, click Options in the top-right corner, then click Delete.\n\nPublishing templates\nPublishing\n\nTo share your template with others, you must first publish it.\n\nTo publish a template:\n\nChoose which private template you want to share.\n\nClick Publish in the top right corner.\n\nCaution\n\nYou cannot edit a published template. You need to first unpublish your template. Then you can edit and republish.\n\nShare a public link\n\nOnce you publish your template, you can share it with others.\n\nClick Share public link in the top-right corner to copy the link to your clipboard.\n\nNote\n\nTemplate recipients cannot change or clone the template.\n\nRequesting approval\n\nYou can send your published templates for approval to make them available in the public templates library.\n\nClick Request approval in the top-right corner.\n\nThe button will now read “Approval pending”.\n\nA Make administrator reviews your template for public use. After approval, Make adds your template to the public templates library.\n\nNote\n\nIf your template contains a custom app, we can't add the template to the public library. You can still share the template using the public link.\n\nIn this section\nWhat is a template?\nBenefits of templates\nWho can create templates?\nUsing templates\nCreating templates\nPublishing templates\nScenario templates\nWhat is a template?\nBenefits of templates\nWho can create templates?\nUsing templates\nTemplate types\nCreating a scenario from a template\nCreating templates\nRenaming templates\nAdding a description\nEditing templates\nDeleting templates\nPublishing templates\nPublishing\nShare a public link\nRequesting approval\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "How to restore a previous scenario version",
      "url": "https://www.make.com/en/help/scenarios/how-to-restore-a-previous-scenario-version",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosHow to restore a previous scenario version\nHow to restore a previous scenario version\n\nOpen your scenario.\n\nClick on the icon with three dots in the bottom of the scenario editor.\n\nChoose \"Previous Versions\" from the menu.\n\nClick on the \"Pick the version\" placeholder to open the list of previous versions.\n\nChoose a version you would like to restore.\n\nConfirm by clicking on the \"OK\" button:\n\nThe selected scenario version will be restored.\n\nCaution\n\nThe restored version of the scenario is not automatically saved. If you wish to save the restored version of the scenario, you have to do so manually.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Scenario execution, cycles, and phases",
      "url": "https://www.make.com/en/help/scenarios/execution,-cycles,-and-phases",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nInitialization\nCycles\nOperation\nCommit\nRollback\nFinalization\nACID modules\nExamples\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosScenario execution, cycles, and phases\nScenario execution, cycles, and phases\n\nMake is a transactional system, similar to relational databases. Each scenario execution starts with the initialization phase, continues with at least one cycle composed of the operation and commit/rollback phases, and ends with the finalization phase:\n\ninitialization\n\ncycle #1\n\noperation (reading or writing)\n\ncommit or rollback\n\ncycle #2\n\noperation (reading or writing)\n\ncommit or rollback\n\n---\n\ncycle #N\n\noperation (reading or writing)\n\ncommit or rollback\n\nfinalization\n\nCaution\n\nMaximum  scenario execution time should not exceed 40 minutes for hosted version and 60 minutes for a private instance.\n\nInitialization\n\nDuring the initialization phase, all necessary connections (connection to a database, email service, etc.) are created. They are also checked if each module is capable of performing their intended operation(s).\n\nCycles\n\nEach cycle represents an undividable unit of work composed of a series of operations. It is possible to set the maximum number of cycles in the scenario settings. The default number is 1.\n\nOperation\n\nDuring the operation phase reading and/or writing operation is performed:\n\nThe reading operation consists of obtaining data from a service that will then be processed by other modules according to a predefined scenario. E.g. the Dropbox > Watch files module returns new bundles (files) created since the last scenario execution.\n\nThe writing operation consists of sending data to a given service for further processing. E.g. the Dropbox > Upload a file module uploads a file to a Dropbox folder.\n\nCommit\n\nIf the operation phase is successful for all modules, the commit phase begins during which all operations performed by the modules are committed. This means that Make sends information to all the services involved in the operation phase about its success.\n\nRollback\n\nIf an error occurs during the operation or commit phase on any module, the phase is aborted and the rollback phase is started, making all operations during the given cycle void. Some modules do not support rollback and operations performed by these modules cannot be taken back. For more information see the ACID modules section.\n\nFinalization\n\nDuring the finalization phase, open connections (e.g. FTP connections, database connections, etc.) are closed and the scenario is completed.\n\nACID modules\n\nThe modules that support rollback (transactional modules) are tagged with the ACID tag:\n\nThe modules not tagged with this tag do not support rollback and cannot be reverted back to their initial state in case of an error in other modules.\n\nA typical example is the Email Send an email module. Once the module sends an email during its operation phase, the sending cannot be undone.\n\nExamples\n\nTransfer of bundles between databases\n\nThe following example shows how to connect three ACID modules. The aim of the below scenario is to get new rows from a MySQL database, insert (transfer) them into a MSSQL database and then insert the IDs of the rows from the MSSQL database into a PostgreSQL database.\n\nWhen the scenario starts, the initialization phase is performed first. Make verifies connections to the MySQL, MSSQL and PostgreSQL databases one at a time. If everything goes well and the connections are successful, Make moves on to the operation phase. If an error occurs, the finalization phase starts instead of the operation phase and the scenario is terminated.\n\nNext comes the operation phase. A preset procedure selects (reads) the table rows (bundles) from MySQL. Those rows are then passed to the next module that writes them to a selected table in the MSSQL database. If everything is in order, the last PostgresSQL procedure is called to insert the row IDs returned by the preceding module into the table.\n\nIf the operation phase is completed successfully, the commit phase begins. Make calls the SQL COMMIT command for each database and the write operations will be committed.\n\nHowever, if the operation or commit phase fails due to an error, (e.g. connection failure), Make calls rollback. During the rollback phase, Make goes through all modules one after another and executes the SQL ROLLBACK command for each module to revert each database back to its initial state.\n\nFinally, during the finalization phase, each module will close its connection to the database.\n\nIn this section\nInitialization\nCycles\nOperation\nCommit\nRollback\nFinalization\nACID modules\nExamples\nScenario execution, cycles, and phases\nInitialization\nCycles\nOperation\nCommit\nRollback\nFinalization\nACID modules\nExamples\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Cycles",
      "url": "https://www.make.com/en/help/scenarios/cycles",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosCycles\nCycles\n\nSee:\n\nCycles in Scenario execution, cycles and phases.\n\nThe Maximum number of cycles setting in Scenario settings.\n\nPrev\nNext\n© 2024 Celonis Inc."
    },
    {
      "title": "Counting the number of operations",
      "url": "https://www.make.com/en/help/scenarios/counting-the-number-of-operations",
      "html": "Skip to main content\nMake Help Center\nRelease notes\nGeneral\nAI in Make\nAccess management\nConnections\nScenarios\nCreating a scenario\nScenario editor\nScenario detail\nScenario settings\nScheduling a scenario\nActive and inactive scenarios\nScenario inputs\nCustom scenario properties\nFiltering\nIncomplete executions\nCounting the number of operations\nHow to count the number of operations\nMake's Operations vs. Zapier's Tasks\nCycles\nScenario execution, cycles, and phases\nScenario execution flow\nScenario execution history\nHow to restore a previous scenario version\nScenario templates\nKeyboard shortcuts\nMake DevTool\nTutorials\nModules\nMapping\nTools\nFunctions\nErrors\nDevices\nApps\nGlossary\nCommunity\nSupport\nAcademy\nBlog\nAPI documentation\nmake.com\nMake Help CenterScenariosCounting the number of operations\nCounting the number of operations\n\nMake charges you according to the total number of operations performed by the modules in your scenario. More modules and more bundles being processed in a scenario mean a higher number of operations. The amount charged for your scenarios depends on how complex your scenarios are. This means that you'll want to choose a subscription that best fits your needs.\n\nHow to count the number of operations\n\nEvery time a module in a scenario performs an action, it counts as one operation.\n\nThe first module in a scenario runs only once and it always counts as one operation (even if it does not return a bundle). The number of times the rest of the modules run depends on the number of bundles they must process (one run of a module per one bundle). An exception is the aggregator module, which is counted as one operation per set of bundles being processed.\n\nNote\n\nThere are a few exceptions of modules when Make does not count the operations.\n\nError handler modules (Rollback, Break, Resume, Commit, Ignore)\n\nRouter module\n\nThe Sleep module consumes operations but does not consume data.\n\nExample: Connecting Instagram to Dropbox\n\nThe following scenario connects Instagram, Image, and Dropbox package modules. It shows how to download images from a selected Instagram account, resize them, and upload them to a selected Dropbox folder.\n\nOnce the execution of a scenario is completed, Make displays the number of operations performed by each module in the little white circle above the module.\n\nIn the above example, the Instagram module returned three photos and performed one operation. Each of the three photos then passed through the Image Resize module. Three more operations were needed to resize them. Finally, each photo was uploaded to the Dropbox folder. In order to upload three different photos, the module had to run three times (i.e., three more operations). The execution of this scenario required seven operations in total (1 + 3 + 3).\n\nMake's Operations vs. Zapier's Tasks\nMake\n\nThe trigger and search modules always perform one operation (even if more than one bundle is received).\n\nEach action module usually performs one or more operations, although there are exceptions.\n\nIf you want to calculate the total number of operations needed for the scenario, you can count approximately one operation for one step (module) in the scenario.\n\nZapier\n\nZapier's triggers do not perform any chargeable task.\n\nZapier's actions perform the task(s) that you are charged for.\n\nIn this section\nHow to count the number of operations\nMake's Operations vs. Zapier's Tasks\nCounting the number of operations\nHow to count the number of operations\nExample: Connecting Instagram to Dropbox\nMake's Operations vs. Zapier's Tasks\nMake\nZapier\nPrev\nNext\n© 2024 Celonis Inc."
    }
  ]